module darrow.arrow_bindings;



import core.stdc.config;
import core.stdc.stdarg: va_list;
static import core.simd;
static import std.conv;

struct Int128 { long lower; long upper; }
struct UInt128 { ulong lower; ulong upper; }

struct __locale_data { int dummy; }



alias _Bool = bool;
struct dpp {
    static struct Opaque(int N) {
        void[N] bytes;
    }

    static bool isEmpty(T)() {
        return T.tupleof.length == 0;
    }
    static struct Move(T) {
        T* ptr;
    }


    static auto move(T)(ref T value) {
        return Move!T(&value);
    }
    mixin template EnumD(string name, T, string prefix) if(is(T == enum)) {
        private static string _memberMixinStr(string member) {
            import std.conv: text;
            import std.array: replace;
            return text(` `, member.replace(prefix, ""), ` = `, T.stringof, `.`, member, `,`);
        }
        private static string _enumMixinStr() {
            import std.array: join;
            string[] ret;
            ret ~= "enum " ~ name ~ "{";
            static foreach(member; __traits(allMembers, T)) {
                ret ~= _memberMixinStr(member);
            }
            ret ~= "}";
            return ret.join("\n");
        }
        mixin(_enumMixinStr());
    }
}

extern(C)
{
    alias GPid = int;
    alias guintptr = c_ulong;
    alias gintptr = c_long;
    alias goffset = c_long;
    alias gsize = c_ulong;
    alias gssize = c_long;
    alias guint64 = c_ulong;
    alias gint64 = c_long;
    alias guint32 = uint;
    alias gint32 = int;
    alias guint16 = ushort;
    alias gint16 = short;
    alias guint8 = ubyte;
    alias gint8 = byte;
    alias wchar_t = int;
    alias size_t = c_ulong;
    alias ptrdiff_t = c_long;
    struct max_align_t
    {
        long __clang_max_align_nonce1;
        real __clang_max_align_nonce2;
    }
    struct ucontext_t
    {
        c_ulong uc_flags;
        ucontext_t* uc_link;
        stack_t uc_stack;
        mcontext_t uc_mcontext;
        __sigset_t uc_sigmask;
        _libc_fpstate __fpregs_mem;
    }
    struct mcontext_t
    {
        long[23] gregs;
        _libc_fpstate* fpregs;
        ulong[8] __reserved1;
    }
    alias fpregset_t = _libc_fpstate*;
    struct _libc_fpstate
    {
        ushort cwd;
        ushort swd;
        ushort ftw;
        ushort fop;
        c_ulong rip;
        c_ulong rdp;
        uint mxcsr;
        uint mxcr_mask;
        _libc_fpxreg[8] _st;
        _libc_xmmreg[16] _xmm;
        uint[24] __glibc_reserved1;
    }
    struct _libc_xmmreg
    {
        uint[4] element;
    }
    struct _libc_fpxreg
    {
        ushort[4] significand;
        ushort exponent;
        ushort[3] __glibc_reserved1;
    }
    alias gregset_t = long[23];
    alias greg_t = long;
    alias fsfilcnt_t = c_ulong;
    alias fsblkcnt_t = c_ulong;
    alias blkcnt_t = c_long;
    alias blksize_t = c_long;
    alias register_t = c_long;
    alias u_int64_t = c_ulong;
    alias u_int32_t = uint;
    alias u_int16_t = ushort;
    alias u_int8_t = ubyte;
    alias key_t = int;
    alias caddr_t = char*;
    alias daddr_t = int;
    alias ssize_t = c_long;
    alias id_t = uint;
    alias off_t = c_long;
    alias uid_t = uint;
    alias nlink_t = c_ulong;
    alias mode_t = uint;
    alias gid_t = uint;
    alias dev_t = c_ulong;
    alias ino_t = c_ulong;
    alias loff_t = c_long;
    alias fsid_t = __fsid_t;
    alias u_quad_t = c_ulong;
    alias quad_t = c_long;
    alias u_long = c_ulong;
    alias u_int = uint;
    alias u_short = ushort;
    alias u_char = ubyte;
    c_ulong gnu_dev_makedev(uint, uint) @nogc nothrow;
    uint gnu_dev_minor(c_ulong) @nogc nothrow;
    uint gnu_dev_major(c_ulong) @nogc nothrow;
    int pselect(int, fd_set*, fd_set*, fd_set*, const(timespec)*, const(__sigset_t)*) @nogc nothrow;
    int select(int, fd_set*, fd_set*, fd_set*, timeval*) @nogc nothrow;
    alias fd_mask = c_long;
    struct fd_set
    {
        c_long[16] __fds_bits;
    }
    alias __fd_mask = c_long;
    alias suseconds_t = c_long;
    struct _GArrowArrayBuilderClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowArrayBuilderClass* GARROW_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowArrayBuilderClass* GARROW_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowArrayBuilder(_GArrowArrayBuilder**) @nogc nothrow;
    static _GArrowArrayBuilder* GARROW_ARRAY_BUILDER(void*) @nogc nothrow;
    alias GArrowArrayBuilder_autoptr = _GArrowArrayBuilder*;
    struct _GArrowArrayBuilder
    {
        _GObject parent_instance;
    }
    alias GArrowArrayBuilderClass = _GArrowArrayBuilderClass;
    c_ulong garrow_array_builder_get_type() @nogc nothrow;
    alias GArrowArrayBuilder = _GArrowArrayBuilder;
    void garrow_array_builder_release_ownership(_GArrowArrayBuilder*) @nogc nothrow;
    _GArrowDataType* garrow_array_builder_get_value_data_type(_GArrowArrayBuilder*) @nogc nothrow;
    GArrowType garrow_array_builder_get_value_type(_GArrowArrayBuilder*) @nogc nothrow;
    _GArrowArray* garrow_array_builder_finish(_GArrowArrayBuilder*, _GError**) @nogc nothrow;
    void garrow_array_builder_reset(_GArrowArrayBuilder*) @nogc nothrow;
    c_long garrow_array_builder_get_capacity(_GArrowArrayBuilder*) @nogc nothrow;
    c_long garrow_array_builder_get_length(_GArrowArrayBuilder*) @nogc nothrow;
    c_long garrow_array_builder_get_n_nulls(_GArrowArrayBuilder*) @nogc nothrow;
    int garrow_array_builder_resize(_GArrowArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_array_builder_reserve(_GArrowArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_array_builder_append_null(_GArrowArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_array_builder_append_nulls(_GArrowArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_array_builder_append_empty_value(_GArrowArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_array_builder_append_empty_values(_GArrowArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowNullArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowNullArrayBuilderClass* GARROW_NULL_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_NULL_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_NULL_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowNullArrayBuilderClass* GARROW_NULL_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowNullArrayBuilder* GARROW_NULL_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowNullArrayBuilder(_GArrowNullArrayBuilder**) @nogc nothrow;
    alias GArrowNullArrayBuilder_autoptr = _GArrowNullArrayBuilder*;
    alias GArrowNullArrayBuilderClass = _GArrowNullArrayBuilderClass;
    alias GArrowNullArrayBuilder = _GArrowNullArrayBuilder;
    struct _GArrowNullArrayBuilder{};
    c_ulong garrow_null_array_builder_get_type() @nogc nothrow;
    _GArrowNullArrayBuilder* garrow_null_array_builder_new() @nogc nothrow;
    int garrow_null_array_builder_append_null(_GArrowNullArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_null_array_builder_append_nulls(_GArrowNullArrayBuilder*, c_long, _GError**) @nogc nothrow;
    c_ulong garrow_boolean_array_builder_get_type() @nogc nothrow;
    struct _GArrowBooleanArrayBuilder{};
    alias GArrowBooleanArrayBuilder = _GArrowBooleanArrayBuilder;
    struct _GArrowBooleanArrayBuilderClass{};
    alias GArrowBooleanArrayBuilderClass = _GArrowBooleanArrayBuilderClass;
    alias GArrowBooleanArrayBuilder_autoptr = _GArrowBooleanArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowBooleanArrayBuilder(_GArrowBooleanArrayBuilder**) @nogc nothrow;
    static _GArrowBooleanArrayBuilderClass* GARROW_BOOLEAN_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static _GArrowBooleanArrayBuilder* GARROW_BOOLEAN_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowBooleanArrayBuilderClass* GARROW_BOOLEAN_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BOOLEAN_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BOOLEAN_ARRAY_BUILDER(void*) @nogc nothrow;
    _GArrowBooleanArrayBuilder* garrow_boolean_array_builder_new() @nogc nothrow;
    int garrow_boolean_array_builder_append(_GArrowBooleanArrayBuilder*, int, _GError**) @nogc nothrow;
    int garrow_boolean_array_builder_append_value(_GArrowBooleanArrayBuilder*, int, _GError**) @nogc nothrow;
    int garrow_boolean_array_builder_append_values(_GArrowBooleanArrayBuilder*, const(int)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_boolean_array_builder_append_null(_GArrowBooleanArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_boolean_array_builder_append_nulls(_GArrowBooleanArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowIntArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowIntArrayBuilderClass* GARROW_INT_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowIntArrayBuilder(_GArrowIntArrayBuilder**) @nogc nothrow;
    static _GArrowIntArrayBuilder* GARROW_INT_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowIntArrayBuilderClass* GARROW_INT_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    alias GArrowIntArrayBuilder_autoptr = _GArrowIntArrayBuilder*;
    struct _GArrowIntArrayBuilder
    {
        _GArrowArrayBuilder parent_instance;
    }
    c_ulong garrow_int_array_builder_get_type() @nogc nothrow;
    alias GArrowIntArrayBuilder = _GArrowIntArrayBuilder;
    alias GArrowIntArrayBuilderClass = _GArrowIntArrayBuilderClass;
    _GArrowIntArrayBuilder* garrow_int_array_builder_new() @nogc nothrow;
    int garrow_int_array_builder_append(_GArrowIntArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_int_array_builder_append_value(_GArrowIntArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_int_array_builder_append_values(_GArrowIntArrayBuilder*, const(c_long)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_int_array_builder_append_null(_GArrowIntArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_int_array_builder_append_nulls(_GArrowIntArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowUIntArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowUIntArrayBuilderClass* GARROW_UINT_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowUIntArrayBuilderClass* GARROW_UINT_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowUIntArrayBuilder* GARROW_UINT_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowUIntArrayBuilder(_GArrowUIntArrayBuilder**) @nogc nothrow;
    alias GArrowUIntArrayBuilder_autoptr = _GArrowUIntArrayBuilder*;
    alias GArrowUIntArrayBuilderClass = _GArrowUIntArrayBuilderClass;
    alias GArrowUIntArrayBuilder = _GArrowUIntArrayBuilder;
    struct _GArrowUIntArrayBuilder{};
    c_ulong garrow_uint_array_builder_get_type() @nogc nothrow;
    _GArrowUIntArrayBuilder* garrow_uint_array_builder_new() @nogc nothrow;
    int garrow_uint_array_builder_append(_GArrowUIntArrayBuilder*, c_ulong, _GError**) @nogc nothrow;
    int garrow_uint_array_builder_append_value(_GArrowUIntArrayBuilder*, c_ulong, _GError**) @nogc nothrow;
    int garrow_uint_array_builder_append_values(_GArrowUIntArrayBuilder*, const(c_ulong)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_uint_array_builder_append_null(_GArrowUIntArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_uint_array_builder_append_nulls(_GArrowUIntArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowInt8ArrayBuilderClass{};
    static _GArrowInt8ArrayBuilderClass* GARROW_INT8_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT8_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT8_ARRAY_BUILDER(void*) @nogc nothrow;
    c_ulong garrow_int8_array_builder_get_type() @nogc nothrow;
    struct _GArrowInt8ArrayBuilder{};
    static _GArrowInt8ArrayBuilder* GARROW_INT8_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowInt8ArrayBuilder(_GArrowInt8ArrayBuilder**) @nogc nothrow;
    alias GArrowInt8ArrayBuilder = _GArrowInt8ArrayBuilder;
    alias GArrowInt8ArrayBuilder_autoptr = _GArrowInt8ArrayBuilder*;
    alias GArrowInt8ArrayBuilderClass = _GArrowInt8ArrayBuilderClass;
    static _GArrowInt8ArrayBuilderClass* GARROW_INT8_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    _GArrowInt8ArrayBuilder* garrow_int8_array_builder_new() @nogc nothrow;
    int garrow_int8_array_builder_append(_GArrowInt8ArrayBuilder*, byte, _GError**) @nogc nothrow;
    int garrow_int8_array_builder_append_value(_GArrowInt8ArrayBuilder*, byte, _GError**) @nogc nothrow;
    int garrow_int8_array_builder_append_values(_GArrowInt8ArrayBuilder*, const(byte)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_int8_array_builder_append_null(_GArrowInt8ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_int8_array_builder_append_nulls(_GArrowInt8ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowUInt8ArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowUInt8ArrayBuilderClass* GARROW_UINT8_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT8_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT8_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowUInt8ArrayBuilderClass* GARROW_UINT8_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowUInt8ArrayBuilder* GARROW_UINT8_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowUInt8ArrayBuilder(_GArrowUInt8ArrayBuilder**) @nogc nothrow;
    alias GArrowUInt8ArrayBuilder_autoptr = _GArrowUInt8ArrayBuilder*;
    struct _GArrowUInt8ArrayBuilder
    {
        _GArrowArrayBuilder parent_instance;
    }
    alias GArrowUInt8ArrayBuilderClass = _GArrowUInt8ArrayBuilderClass;
    alias GArrowUInt8ArrayBuilder = _GArrowUInt8ArrayBuilder;
    c_ulong garrow_uint8_array_builder_get_type() @nogc nothrow;
    _GArrowUInt8ArrayBuilder* garrow_uint8_array_builder_new() @nogc nothrow;
    int garrow_uint8_array_builder_append(_GArrowUInt8ArrayBuilder*, ubyte, _GError**) @nogc nothrow;
    int garrow_uint8_array_builder_append_value(_GArrowUInt8ArrayBuilder*, ubyte, _GError**) @nogc nothrow;
    int garrow_uint8_array_builder_append_values(_GArrowUInt8ArrayBuilder*, const(ubyte)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_uint8_array_builder_append_null(_GArrowUInt8ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_uint8_array_builder_append_nulls(_GArrowUInt8ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowInt16ArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    c_ulong garrow_int16_array_builder_get_type() @nogc nothrow;
    struct _GArrowInt16ArrayBuilder{};
    alias GArrowInt16ArrayBuilder = _GArrowInt16ArrayBuilder;
    alias GArrowInt16ArrayBuilderClass = _GArrowInt16ArrayBuilderClass;
    alias GArrowInt16ArrayBuilder_autoptr = _GArrowInt16ArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowInt16ArrayBuilder(_GArrowInt16ArrayBuilder**) @nogc nothrow;
    static _GArrowInt16ArrayBuilder* GARROW_INT16_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowInt16ArrayBuilderClass* GARROW_INT16_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT16_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_INT16_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowInt16ArrayBuilderClass* GARROW_INT16_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    _GArrowInt16ArrayBuilder* garrow_int16_array_builder_new() @nogc nothrow;
    int garrow_int16_array_builder_append(_GArrowInt16ArrayBuilder*, short, _GError**) @nogc nothrow;
    int garrow_int16_array_builder_append_value(_GArrowInt16ArrayBuilder*, short, _GError**) @nogc nothrow;
    int garrow_int16_array_builder_append_values(_GArrowInt16ArrayBuilder*, const(short)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_int16_array_builder_append_null(_GArrowInt16ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_int16_array_builder_append_nulls(_GArrowInt16ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    c_ulong garrow_uint16_array_builder_get_type() @nogc nothrow;
    struct _GArrowUInt16ArrayBuilder{};
    alias GArrowUInt16ArrayBuilder = _GArrowUInt16ArrayBuilder;
    struct _GArrowUInt16ArrayBuilderClass{};
    alias GArrowUInt16ArrayBuilderClass = _GArrowUInt16ArrayBuilderClass;
    alias GArrowUInt16ArrayBuilder_autoptr = _GArrowUInt16ArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowUInt16ArrayBuilder(_GArrowUInt16ArrayBuilder**) @nogc nothrow;
    static int GARROW_IS_UINT16_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowUInt16ArrayBuilder* GARROW_UINT16_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowUInt16ArrayBuilderClass* GARROW_UINT16_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT16_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowUInt16ArrayBuilderClass* GARROW_UINT16_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    _GArrowUInt16ArrayBuilder* garrow_uint16_array_builder_new() @nogc nothrow;
    int garrow_uint16_array_builder_append(_GArrowUInt16ArrayBuilder*, ushort, _GError**) @nogc nothrow;
    int garrow_uint16_array_builder_append_value(_GArrowUInt16ArrayBuilder*, ushort, _GError**) @nogc nothrow;
    int garrow_uint16_array_builder_append_values(_GArrowUInt16ArrayBuilder*, const(ushort)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_uint16_array_builder_append_null(_GArrowUInt16ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_uint16_array_builder_append_nulls(_GArrowUInt16ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowInt32ArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static int GARROW_IS_INT32_ARRAY_BUILDER(void*) @nogc nothrow;
    c_ulong garrow_int32_array_builder_get_type() @nogc nothrow;
    struct _GArrowInt32ArrayBuilder{};
    alias GArrowInt32ArrayBuilder = _GArrowInt32ArrayBuilder;
    alias GArrowInt32ArrayBuilderClass = _GArrowInt32ArrayBuilderClass;
    alias GArrowInt32ArrayBuilder_autoptr = _GArrowInt32ArrayBuilder*;
    static _GArrowInt32ArrayBuilderClass* GARROW_INT32_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowInt32ArrayBuilder(_GArrowInt32ArrayBuilder**) @nogc nothrow;
    static _GArrowInt32ArrayBuilderClass* GARROW_INT32_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT32_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowInt32ArrayBuilder* GARROW_INT32_ARRAY_BUILDER(void*) @nogc nothrow;
    _GArrowInt32ArrayBuilder* garrow_int32_array_builder_new() @nogc nothrow;
    int garrow_int32_array_builder_append(_GArrowInt32ArrayBuilder*, int, _GError**) @nogc nothrow;
    int garrow_int32_array_builder_append_value(_GArrowInt32ArrayBuilder*, int, _GError**) @nogc nothrow;
    int garrow_int32_array_builder_append_values(_GArrowInt32ArrayBuilder*, const(int)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_int32_array_builder_append_null(_GArrowInt32ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_int32_array_builder_append_nulls(_GArrowInt32ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    c_ulong garrow_uint32_array_builder_get_type() @nogc nothrow;
    struct _GArrowUInt32ArrayBuilder{};
    alias GArrowUInt32ArrayBuilder = _GArrowUInt32ArrayBuilder;
    struct _GArrowUInt32ArrayBuilderClass{};
    alias GArrowUInt32ArrayBuilderClass = _GArrowUInt32ArrayBuilderClass;
    alias GArrowUInt32ArrayBuilder_autoptr = _GArrowUInt32ArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowUInt32ArrayBuilder(_GArrowUInt32ArrayBuilder**) @nogc nothrow;
    static _GArrowUInt32ArrayBuilder* GARROW_UINT32_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowUInt32ArrayBuilderClass* GARROW_UINT32_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT32_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_UINT32_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowUInt32ArrayBuilderClass* GARROW_UINT32_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    _GArrowUInt32ArrayBuilder* garrow_uint32_array_builder_new() @nogc nothrow;
    int garrow_uint32_array_builder_append(_GArrowUInt32ArrayBuilder*, uint, _GError**) @nogc nothrow;
    int garrow_uint32_array_builder_append_value(_GArrowUInt32ArrayBuilder*, uint, _GError**) @nogc nothrow;
    int garrow_uint32_array_builder_append_values(_GArrowUInt32ArrayBuilder*, const(uint)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_uint32_array_builder_append_null(_GArrowUInt32ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_uint32_array_builder_append_nulls(_GArrowUInt32ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    c_ulong garrow_int64_array_builder_get_type() @nogc nothrow;
    alias GArrowInt64ArrayBuilder = _GArrowInt64ArrayBuilder;
    struct _GArrowInt64ArrayBuilderClass{};
    struct _GArrowInt64ArrayBuilder{};
    alias GArrowInt64ArrayBuilderClass = _GArrowInt64ArrayBuilderClass;
    alias GArrowInt64ArrayBuilder_autoptr = _GArrowInt64ArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowInt64ArrayBuilder(_GArrowInt64ArrayBuilder**) @nogc nothrow;
    static _GArrowInt64ArrayBuilder* GARROW_INT64_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowInt64ArrayBuilderClass* GARROW_INT64_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT64_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_INT64_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowInt64ArrayBuilderClass* GARROW_INT64_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    _GArrowInt64ArrayBuilder* garrow_int64_array_builder_new() @nogc nothrow;
    int garrow_int64_array_builder_append(_GArrowInt64ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_int64_array_builder_append_value(_GArrowInt64ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_int64_array_builder_append_values(_GArrowInt64ArrayBuilder*, const(c_long)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_int64_array_builder_append_null(_GArrowInt64ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_int64_array_builder_append_nulls(_GArrowInt64ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowUInt64ArrayBuilder(_GArrowUInt64ArrayBuilder**) @nogc nothrow;
    static _GArrowUInt64ArrayBuilder* GARROW_UINT64_ARRAY_BUILDER(void*) @nogc nothrow;
    alias GArrowUInt64ArrayBuilder_autoptr = _GArrowUInt64ArrayBuilder*;
    struct _GArrowUInt64ArrayBuilder
    {
        _GArrowArrayBuilder parent_instance;
    }
    alias GArrowUInt64ArrayBuilderClass = _GArrowUInt64ArrayBuilderClass;
    struct _GArrowUInt64ArrayBuilderClass{};
    alias GArrowUInt64ArrayBuilder = _GArrowUInt64ArrayBuilder;
    c_ulong garrow_uint64_array_builder_get_type() @nogc nothrow;
    static int GARROW_IS_UINT64_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowUInt64ArrayBuilderClass* GARROW_UINT64_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowUInt64ArrayBuilderClass* GARROW_UINT64_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT64_ARRAY_BUILDER(void*) @nogc nothrow;
    _GArrowUInt64ArrayBuilder* garrow_uint64_array_builder_new() @nogc nothrow;
    int garrow_uint64_array_builder_append(_GArrowUInt64ArrayBuilder*, c_ulong, _GError**) @nogc nothrow;
    int garrow_uint64_array_builder_append_value(_GArrowUInt64ArrayBuilder*, c_ulong, _GError**) @nogc nothrow;
    int garrow_uint64_array_builder_append_values(_GArrowUInt64ArrayBuilder*, const(c_ulong)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_uint64_array_builder_append_null(_GArrowUInt64ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_uint64_array_builder_append_nulls(_GArrowUInt64ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    c_ulong garrow_float_array_builder_get_type() @nogc nothrow;
    struct _GArrowFloatArrayBuilder{};
    alias GArrowFloatArrayBuilder = _GArrowFloatArrayBuilder;
    alias GArrowFloatArrayBuilderClass = _GArrowFloatArrayBuilderClass;
    struct _GArrowFloatArrayBuilderClass{};
    static _GArrowFloatArrayBuilder* GARROW_FLOAT_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowFloatArrayBuilderClass* GARROW_FLOAT_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FLOAT_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_FLOAT_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowFloatArrayBuilderClass* GARROW_FLOAT_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    alias GArrowFloatArrayBuilder_autoptr = _GArrowFloatArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowFloatArrayBuilder(_GArrowFloatArrayBuilder**) @nogc nothrow;
    _GArrowFloatArrayBuilder* garrow_float_array_builder_new() @nogc nothrow;
    int garrow_float_array_builder_append(_GArrowFloatArrayBuilder*, float, _GError**) @nogc nothrow;
    int garrow_float_array_builder_append_value(_GArrowFloatArrayBuilder*, float, _GError**) @nogc nothrow;
    int garrow_float_array_builder_append_values(_GArrowFloatArrayBuilder*, const(float)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_float_array_builder_append_null(_GArrowFloatArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_float_array_builder_append_nulls(_GArrowFloatArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowDoubleArrayBuilder
    {
        _GArrowArrayBuilder parent_instance;
    }
    static int GARROW_IS_DOUBLE_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowDoubleArrayBuilder(_GArrowDoubleArrayBuilder**) @nogc nothrow;
    static _GArrowDoubleArrayBuilder* GARROW_DOUBLE_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowDoubleArrayBuilderClass* GARROW_DOUBLE_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    struct _GArrowDoubleArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowDoubleArrayBuilderClass* GARROW_DOUBLE_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DOUBLE_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    alias GArrowDoubleArrayBuilderClass = _GArrowDoubleArrayBuilderClass;
    alias GArrowDoubleArrayBuilder_autoptr = _GArrowDoubleArrayBuilder*;
    c_ulong garrow_double_array_builder_get_type() @nogc nothrow;
    alias GArrowDoubleArrayBuilder = _GArrowDoubleArrayBuilder;
    _GArrowDoubleArrayBuilder* garrow_double_array_builder_new() @nogc nothrow;
    int garrow_double_array_builder_append(_GArrowDoubleArrayBuilder*, double, _GError**) @nogc nothrow;
    int garrow_double_array_builder_append_value(_GArrowDoubleArrayBuilder*, double, _GError**) @nogc nothrow;
    int garrow_double_array_builder_append_values(_GArrowDoubleArrayBuilder*, const(double)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_double_array_builder_append_null(_GArrowDoubleArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_double_array_builder_append_nulls(_GArrowDoubleArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowBinaryArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowBinaryArrayBuilderClass* GARROW_BINARY_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BINARY_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BINARY_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowBinaryArrayBuilderClass* GARROW_BINARY_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowBinaryArrayBuilder* GARROW_BINARY_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowBinaryArrayBuilder(_GArrowBinaryArrayBuilder**) @nogc nothrow;
    alias GArrowBinaryArrayBuilder_autoptr = _GArrowBinaryArrayBuilder*;
    struct _GArrowBinaryArrayBuilder
    {
        _GArrowArrayBuilder parent_instance;
    }
    alias GArrowBinaryArrayBuilderClass = _GArrowBinaryArrayBuilderClass;
    c_ulong garrow_binary_array_builder_get_type() @nogc nothrow;
    alias GArrowBinaryArrayBuilder = _GArrowBinaryArrayBuilder;
    _GArrowBinaryArrayBuilder* garrow_binary_array_builder_new() @nogc nothrow;
    int garrow_binary_array_builder_append(_GArrowBinaryArrayBuilder*, const(ubyte)*, int, _GError**) @nogc nothrow;
    int garrow_binary_array_builder_append_value(_GArrowBinaryArrayBuilder*, const(ubyte)*, int, _GError**) @nogc nothrow;
    int garrow_binary_array_builder_append_value_bytes(_GArrowBinaryArrayBuilder*, _GBytes*, _GError**) @nogc nothrow;
    int garrow_binary_array_builder_append_values(_GArrowBinaryArrayBuilder*, _GBytes**, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_binary_array_builder_append_null(_GArrowBinaryArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_binary_array_builder_append_nulls(_GArrowBinaryArrayBuilder*, c_long, _GError**) @nogc nothrow;
    c_ulong garrow_large_binary_array_builder_get_type() @nogc nothrow;
    struct _GArrowLargeBinaryArrayBuilder{};
    alias GArrowLargeBinaryArrayBuilder = _GArrowLargeBinaryArrayBuilder;
    struct _GArrowLargeBinaryArrayBuilderClass{};
    alias GArrowLargeBinaryArrayBuilderClass = _GArrowLargeBinaryArrayBuilderClass;
    alias GArrowLargeBinaryArrayBuilder_autoptr = _GArrowLargeBinaryArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowLargeBinaryArrayBuilder(_GArrowLargeBinaryArrayBuilder**) @nogc nothrow;
    static _GArrowLargeBinaryArrayBuilder* GARROW_LARGE_BINARY_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_BINARY_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_BINARY_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowLargeBinaryArrayBuilderClass* GARROW_LARGE_BINARY_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static _GArrowLargeBinaryArrayBuilderClass* GARROW_LARGE_BINARY_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    _GArrowLargeBinaryArrayBuilder* garrow_large_binary_array_builder_new() @nogc nothrow;
    int garrow_large_binary_array_builder_append_value(_GArrowLargeBinaryArrayBuilder*, const(ubyte)*, c_long, _GError**) @nogc nothrow;
    int garrow_large_binary_array_builder_append_value_bytes(_GArrowLargeBinaryArrayBuilder*, _GBytes*, _GError**) @nogc nothrow;
    int garrow_large_binary_array_builder_append_values(_GArrowLargeBinaryArrayBuilder*, _GBytes**, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_large_binary_array_builder_append_null(_GArrowLargeBinaryArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_large_binary_array_builder_append_nulls(_GArrowLargeBinaryArrayBuilder*, c_long, _GError**) @nogc nothrow;
    c_ulong garrow_string_array_builder_get_type() @nogc nothrow;
    struct _GArrowStringArrayBuilder{};
    alias GArrowStringArrayBuilder = _GArrowStringArrayBuilder;
    struct _GArrowStringArrayBuilderClass{};
    alias GArrowStringArrayBuilderClass = _GArrowStringArrayBuilderClass;
    alias GArrowStringArrayBuilder_autoptr = _GArrowStringArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowStringArrayBuilder(_GArrowStringArrayBuilder**) @nogc nothrow;
    static _GArrowStringArrayBuilder* GARROW_STRING_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowStringArrayBuilderClass* GARROW_STRING_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_STRING_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_STRING_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowStringArrayBuilderClass* GARROW_STRING_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    _GArrowStringArrayBuilder* garrow_string_array_builder_new() @nogc nothrow;
    int garrow_string_array_builder_append(_GArrowStringArrayBuilder*, const(char)*, _GError**) @nogc nothrow;
    int garrow_string_array_builder_append_value(_GArrowStringArrayBuilder*, const(char)*, _GError**) @nogc nothrow;
    int garrow_string_array_builder_append_string(_GArrowStringArrayBuilder*, const(char)*, _GError**) @nogc nothrow;
    int garrow_string_array_builder_append_values(_GArrowStringArrayBuilder*, const(char)**, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_string_array_builder_append_strings(_GArrowStringArrayBuilder*, const(char)**, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    c_ulong garrow_large_string_array_builder_get_type() @nogc nothrow;
    struct _GArrowLargeStringArrayBuilder{};
    alias GArrowLargeStringArrayBuilder = _GArrowLargeStringArrayBuilder;
    struct _GArrowLargeStringArrayBuilderClass{};
    alias GArrowLargeStringArrayBuilderClass = _GArrowLargeStringArrayBuilderClass;
    alias GArrowLargeStringArrayBuilder_autoptr = _GArrowLargeStringArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowLargeStringArrayBuilder(_GArrowLargeStringArrayBuilder**) @nogc nothrow;
    static _GArrowLargeStringArrayBuilder* GARROW_LARGE_STRING_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowLargeStringArrayBuilderClass* GARROW_LARGE_STRING_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_STRING_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_STRING_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowLargeStringArrayBuilderClass* GARROW_LARGE_STRING_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    _GArrowLargeStringArrayBuilder* garrow_large_string_array_builder_new() @nogc nothrow;
    int garrow_large_string_array_builder_append_string(_GArrowLargeStringArrayBuilder*, const(char)*, _GError**) @nogc nothrow;
    int garrow_large_string_array_builder_append_strings(_GArrowLargeStringArrayBuilder*, const(char)**, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    struct _GArrowFixedSizeBinaryArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowFixedSizeBinaryArrayBuilderClass* GARROW_FIXED_SIZE_BINARY_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FIXED_SIZE_BINARY_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FIXED_SIZE_BINARY_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowFixedSizeBinaryArrayBuilderClass* GARROW_FIXED_SIZE_BINARY_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowFixedSizeBinaryArrayBuilder(_GArrowFixedSizeBinaryArrayBuilder**) @nogc nothrow;
    c_ulong garrow_fixed_size_binary_array_builder_get_type() @nogc nothrow;
    struct _GArrowFixedSizeBinaryArrayBuilder{};
    alias GArrowFixedSizeBinaryArrayBuilder = _GArrowFixedSizeBinaryArrayBuilder;
    alias GArrowFixedSizeBinaryArrayBuilderClass = _GArrowFixedSizeBinaryArrayBuilderClass;
    alias GArrowFixedSizeBinaryArrayBuilder_autoptr = _GArrowFixedSizeBinaryArrayBuilder*;
    static _GArrowFixedSizeBinaryArrayBuilder* GARROW_FIXED_SIZE_BINARY_ARRAY_BUILDER(void*) @nogc nothrow;
    _GArrowFixedSizeBinaryArrayBuilder* garrow_fixed_size_binary_array_builder_new(_GArrowFixedSizeBinaryDataType*) @nogc nothrow;
    int garrow_fixed_size_binary_array_builder_append_value(_GArrowFixedSizeBinaryArrayBuilder*, const(ubyte)*, int, _GError**) @nogc nothrow;
    int garrow_fixed_size_binary_array_builder_append_value_bytes(_GArrowFixedSizeBinaryArrayBuilder*, _GBytes*, _GError**) @nogc nothrow;
    int garrow_fixed_size_binary_array_builder_append_values(_GArrowFixedSizeBinaryArrayBuilder*, _GBytes**, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_fixed_size_binary_array_builder_append_values_packed(_GArrowFixedSizeBinaryArrayBuilder*, _GBytes*, const(int)*, c_long, _GError**) @nogc nothrow;
    struct _GArrowDate32ArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    c_ulong garrow_date32_array_builder_get_type() @nogc nothrow;
    struct _GArrowDate32ArrayBuilder{};
    alias GArrowDate32ArrayBuilder = _GArrowDate32ArrayBuilder;
    alias GArrowDate32ArrayBuilderClass = _GArrowDate32ArrayBuilderClass;
    alias GArrowDate32ArrayBuilder_autoptr = _GArrowDate32ArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowDate32ArrayBuilder(_GArrowDate32ArrayBuilder**) @nogc nothrow;
    static _GArrowDate32ArrayBuilder* GARROW_DATE32_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_DATE32_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowDate32ArrayBuilderClass* GARROW_DATE32_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowDate32ArrayBuilderClass* GARROW_DATE32_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DATE32_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    _GArrowDate32ArrayBuilder* garrow_date32_array_builder_new() @nogc nothrow;
    int garrow_date32_array_builder_append(_GArrowDate32ArrayBuilder*, int, _GError**) @nogc nothrow;
    int garrow_date32_array_builder_append_value(_GArrowDate32ArrayBuilder*, int, _GError**) @nogc nothrow;
    int garrow_date32_array_builder_append_values(_GArrowDate32ArrayBuilder*, const(int)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_date32_array_builder_append_null(_GArrowDate32ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_date32_array_builder_append_nulls(_GArrowDate32ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    enum _Anonymous_0
    {
        P_ALL = 0,
        P_PID = 1,
        P_PGID = 2,
    }
    enum P_ALL = _Anonymous_0.P_ALL;
    enum P_PID = _Anonymous_0.P_PID;
    enum P_PGID = _Anonymous_0.P_PGID;
    c_ulong garrow_date64_array_builder_get_type() @nogc nothrow;
    struct _GArrowDate64ArrayBuilder{};
    alias GArrowDate64ArrayBuilder = _GArrowDate64ArrayBuilder;
    struct _GArrowDate64ArrayBuilderClass{};
    alias GArrowDate64ArrayBuilderClass = _GArrowDate64ArrayBuilderClass;
    alias GArrowDate64ArrayBuilder_autoptr = _GArrowDate64ArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowDate64ArrayBuilder(_GArrowDate64ArrayBuilder**) @nogc nothrow;
    static _GArrowDate64ArrayBuilder* GARROW_DATE64_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowDate64ArrayBuilderClass* GARROW_DATE64_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DATE64_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_DATE64_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowDate64ArrayBuilderClass* GARROW_DATE64_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    _GArrowDate64ArrayBuilder* garrow_date64_array_builder_new() @nogc nothrow;
    int garrow_date64_array_builder_append(_GArrowDate64ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_date64_array_builder_append_value(_GArrowDate64ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_date64_array_builder_append_values(_GArrowDate64ArrayBuilder*, const(c_long)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_date64_array_builder_append_null(_GArrowDate64ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_date64_array_builder_append_nulls(_GArrowDate64ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    alias idtype_t = _Anonymous_0;
    alias GArrowTimestampArrayBuilder_autoptr = _GArrowTimestampArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowTimestampArrayBuilder(_GArrowTimestampArrayBuilder**) @nogc nothrow;
    static _GArrowTimestampArrayBuilder* GARROW_TIMESTAMP_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowTimestampArrayBuilderClass* GARROW_TIMESTAMP_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIMESTAMP_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_TIMESTAMP_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowTimestampArrayBuilderClass* GARROW_TIMESTAMP_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowTimestampArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    struct _GArrowTimestampArrayBuilder
    {
        _GArrowArrayBuilder parent_instance;
    }
    alias GArrowTimestampArrayBuilderClass = _GArrowTimestampArrayBuilderClass;
    alias GArrowTimestampArrayBuilder = _GArrowTimestampArrayBuilder;
    c_ulong garrow_timestamp_array_builder_get_type() @nogc nothrow;
    _GArrowTimestampArrayBuilder* garrow_timestamp_array_builder_new(_GArrowTimestampDataType*) @nogc nothrow;
    int garrow_timestamp_array_builder_append(_GArrowTimestampArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_timestamp_array_builder_append_value(_GArrowTimestampArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_timestamp_array_builder_append_values(_GArrowTimestampArrayBuilder*, const(c_long)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_timestamp_array_builder_append_null(_GArrowTimestampArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_timestamp_array_builder_append_nulls(_GArrowTimestampArrayBuilder*, c_long, _GError**) @nogc nothrow;
    c_ulong garrow_time32_array_builder_get_type() @nogc nothrow;
    static _GArrowTime32ArrayBuilder* GARROW_TIME32_ARRAY_BUILDER(void*) @nogc nothrow;
    struct _GArrowTime32ArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowTime32ArrayBuilderClass* GARROW_TIME32_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIME32_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIME32_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowTime32ArrayBuilderClass* GARROW_TIME32_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    struct _GArrowTime32ArrayBuilder{};
    static void glib_autoptr_cleanup_GArrowTime32ArrayBuilder(_GArrowTime32ArrayBuilder**) @nogc nothrow;
    alias GArrowTime32ArrayBuilder = _GArrowTime32ArrayBuilder;
    alias GArrowTime32ArrayBuilder_autoptr = _GArrowTime32ArrayBuilder*;
    alias GArrowTime32ArrayBuilderClass = _GArrowTime32ArrayBuilderClass;
    _GArrowTime32ArrayBuilder* garrow_time32_array_builder_new(_GArrowTime32DataType*) @nogc nothrow;
    int garrow_time32_array_builder_append(_GArrowTime32ArrayBuilder*, int, _GError**) @nogc nothrow;
    int garrow_time32_array_builder_append_value(_GArrowTime32ArrayBuilder*, int, _GError**) @nogc nothrow;
    int garrow_time32_array_builder_append_values(_GArrowTime32ArrayBuilder*, const(int)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_time32_array_builder_append_null(_GArrowTime32ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_time32_array_builder_append_nulls(_GArrowTime32ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowTime64ArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowTime64ArrayBuilderClass* GARROW_TIME64_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIME64_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIME64_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowTime64ArrayBuilderClass* GARROW_TIME64_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowTime64ArrayBuilder* GARROW_TIME64_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowTime64ArrayBuilder(_GArrowTime64ArrayBuilder**) @nogc nothrow;
    alias GArrowTime64ArrayBuilder_autoptr = _GArrowTime64ArrayBuilder*;
    struct _GArrowTime64ArrayBuilder
    {
        _GArrowArrayBuilder parent_instance;
    }
    alias GArrowTime64ArrayBuilderClass = _GArrowTime64ArrayBuilderClass;
    alias GArrowTime64ArrayBuilder = _GArrowTime64ArrayBuilder;
    c_ulong garrow_time64_array_builder_get_type() @nogc nothrow;
    _GArrowTime64ArrayBuilder* garrow_time64_array_builder_new(_GArrowTime64DataType*) @nogc nothrow;
    int garrow_time64_array_builder_append(_GArrowTime64ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_time64_array_builder_append_value(_GArrowTime64ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    int garrow_time64_array_builder_append_values(_GArrowTime64ArrayBuilder*, const(c_long)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_time64_array_builder_append_null(_GArrowTime64ArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_time64_array_builder_append_nulls(_GArrowTime64ArrayBuilder*, c_long, _GError**) @nogc nothrow;
    struct _GArrowBinaryDictionaryArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowBinaryDictionaryArrayBuilderClass* GARROW_BINARY_DICTIONARY_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BINARY_DICTIONARY_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BINARY_DICTIONARY_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowBinaryDictionaryArrayBuilderClass* GARROW_BINARY_DICTIONARY_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowBinaryDictionaryArrayBuilder* GARROW_BINARY_DICTIONARY_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowBinaryDictionaryArrayBuilder(_GArrowBinaryDictionaryArrayBuilder**) @nogc nothrow;
    alias GArrowBinaryDictionaryArrayBuilder_autoptr = _GArrowBinaryDictionaryArrayBuilder*;
    struct _GArrowBinaryDictionaryArrayBuilder
    {
        _GArrowArrayBuilder parent_instance;
    }
    alias GArrowBinaryDictionaryArrayBuilderClass = _GArrowBinaryDictionaryArrayBuilderClass;
    c_ulong garrow_binary_dictionary_array_builder_get_type() @nogc nothrow;
    alias GArrowBinaryDictionaryArrayBuilder = _GArrowBinaryDictionaryArrayBuilder;
    _GArrowBinaryDictionaryArrayBuilder* garrow_binary_dictionary_array_builder_new() @nogc nothrow;
    int garrow_binary_dictionary_array_builder_append_null(_GArrowBinaryDictionaryArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_binary_dictionary_array_builder_append_value(_GArrowBinaryDictionaryArrayBuilder*, const(ubyte)*, int, _GError**) @nogc nothrow;
    int garrow_binary_dictionary_array_builder_append_value_bytes(_GArrowBinaryDictionaryArrayBuilder*, _GBytes*, _GError**) @nogc nothrow;
    int garrow_binary_dictionary_array_builder_append_array(_GArrowBinaryDictionaryArrayBuilder*, _GArrowBinaryArray*, _GError**) @nogc nothrow;
    int garrow_binary_dictionary_array_builder_append_indices(_GArrowBinaryDictionaryArrayBuilder*, const(c_long)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    c_long garrow_binary_dictionary_array_builder_get_dictionary_length(_GArrowBinaryDictionaryArrayBuilder*) @nogc nothrow;
    int garrow_binary_dictionary_array_builder_finish_delta(_GArrowBinaryDictionaryArrayBuilder*, _GArrowArray**, _GArrowArray**, _GError**) @nogc nothrow;
    int garrow_binary_dictionary_array_builder_insert_memo_values(_GArrowBinaryDictionaryArrayBuilder*, _GArrowBinaryArray*, _GError**) @nogc nothrow;
    void garrow_binary_dictionary_array_builder_reset_full(_GArrowBinaryDictionaryArrayBuilder*) @nogc nothrow;
    static c_ulong __uint64_identity(c_ulong) @nogc nothrow;
    struct _GArrowStringDictionaryArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowStringDictionaryArrayBuilderClass* GARROW_STRING_DICTIONARY_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_STRING_DICTIONARY_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_STRING_DICTIONARY_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowStringDictionaryArrayBuilderClass* GARROW_STRING_DICTIONARY_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowStringDictionaryArrayBuilder* GARROW_STRING_DICTIONARY_ARRAY_BUILDER(void*) @nogc nothrow;
    alias GArrowStringDictionaryArrayBuilder_autoptr = _GArrowStringDictionaryArrayBuilder*;
    struct _GArrowStringDictionaryArrayBuilder
    {
        _GArrowArrayBuilder parent_instance;
    }
    alias GArrowStringDictionaryArrayBuilderClass = _GArrowStringDictionaryArrayBuilderClass;
    alias GArrowStringDictionaryArrayBuilder = _GArrowStringDictionaryArrayBuilder;
    c_ulong garrow_string_dictionary_array_builder_get_type() @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowStringDictionaryArrayBuilder(_GArrowStringDictionaryArrayBuilder**) @nogc nothrow;
    _GArrowStringDictionaryArrayBuilder* garrow_string_dictionary_array_builder_new() @nogc nothrow;
    int garrow_string_dictionary_array_builder_append_null(_GArrowStringDictionaryArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_string_dictionary_array_builder_append_string(_GArrowStringDictionaryArrayBuilder*, const(char)*, _GError**) @nogc nothrow;
    int garrow_string_dictionary_array_builder_append_array(_GArrowStringDictionaryArrayBuilder*, _GArrowStringArray*, _GError**) @nogc nothrow;
    int garrow_string_dictionary_array_builder_append_indices(_GArrowStringDictionaryArrayBuilder*, const(c_long)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    c_long garrow_string_dictionary_array_builder_get_dictionary_length(_GArrowStringDictionaryArrayBuilder*) @nogc nothrow;
    int garrow_string_dictionary_array_builder_finish_delta(_GArrowStringDictionaryArrayBuilder*, _GArrowArray**, _GArrowArray**, _GError**) @nogc nothrow;
    int garrow_string_dictionary_array_builder_insert_memo_values(_GArrowStringDictionaryArrayBuilder*, _GArrowStringArray*, _GError**) @nogc nothrow;
    void garrow_string_dictionary_array_builder_reset_full(_GArrowStringDictionaryArrayBuilder*) @nogc nothrow;
    static uint __uint32_identity(uint) @nogc nothrow;
    struct _GArrowListArrayBuilder
    {
        _GArrowArrayBuilder parent_instance;
    }
    static _GArrowListArrayBuilderClass* GARROW_LIST_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LIST_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    struct _GArrowListArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowListArrayBuilder* GARROW_LIST_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowListArrayBuilder(_GArrowListArrayBuilder**) @nogc nothrow;
    alias GArrowListArrayBuilder_autoptr = _GArrowListArrayBuilder*;
    static int GARROW_IS_LIST_ARRAY_BUILDER(void*) @nogc nothrow;
    alias GArrowListArrayBuilder = _GArrowListArrayBuilder;
    c_ulong garrow_list_array_builder_get_type() @nogc nothrow;
    static _GArrowListArrayBuilderClass* GARROW_LIST_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    alias GArrowListArrayBuilderClass = _GArrowListArrayBuilderClass;
    _GArrowListArrayBuilder* garrow_list_array_builder_new(_GArrowListDataType*, _GError**) @nogc nothrow;
    int garrow_list_array_builder_append(_GArrowListArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_list_array_builder_append_value(_GArrowListArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_list_array_builder_append_null(_GArrowListArrayBuilder*, _GError**) @nogc nothrow;
    _GArrowArrayBuilder* garrow_list_array_builder_get_value_builder(_GArrowListArrayBuilder*) @nogc nothrow;
    static ushort __uint16_identity(ushort) @nogc nothrow;
    struct _GArrowLargeListArrayBuilderClass{};
    static _GArrowLargeListArrayBuilderClass* GARROW_LARGE_LIST_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_LIST_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_LIST_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowLargeListArrayBuilderClass* GARROW_LARGE_LIST_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    struct _GArrowLargeListArrayBuilder{};
    alias GArrowLargeListArrayBuilder = _GArrowLargeListArrayBuilder;
    c_ulong garrow_large_list_array_builder_get_type() @nogc nothrow;
    alias GArrowLargeListArrayBuilderClass = _GArrowLargeListArrayBuilderClass;
    static _GArrowLargeListArrayBuilder* GARROW_LARGE_LIST_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowLargeListArrayBuilder(_GArrowLargeListArrayBuilder**) @nogc nothrow;
    alias GArrowLargeListArrayBuilder_autoptr = _GArrowLargeListArrayBuilder*;
    _GArrowLargeListArrayBuilder* garrow_large_list_array_builder_new(_GArrowLargeListDataType*, _GError**) @nogc nothrow;
    int garrow_large_list_array_builder_append_value(_GArrowLargeListArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_large_list_array_builder_append_null(_GArrowLargeListArrayBuilder*, _GError**) @nogc nothrow;
    _GArrowArrayBuilder* garrow_large_list_array_builder_get_value_builder(_GArrowLargeListArrayBuilder*) @nogc nothrow;
    c_ulong garrow_struct_array_builder_get_type() @nogc nothrow;
    struct _GArrowStructArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowStructArrayBuilderClass* GARROW_STRUCT_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowStructArrayBuilder{};
    alias GArrowStructArrayBuilder = _GArrowStructArrayBuilder;
    alias GArrowStructArrayBuilderClass = _GArrowStructArrayBuilderClass;
    alias GArrowStructArrayBuilder_autoptr = _GArrowStructArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowStructArrayBuilder(_GArrowStructArrayBuilder**) @nogc nothrow;
    static _GArrowStructArrayBuilder* GARROW_STRUCT_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowStructArrayBuilderClass* GARROW_STRUCT_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_STRUCT_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_STRUCT_ARRAY_BUILDER(void*) @nogc nothrow;
    _GArrowStructArrayBuilder* garrow_struct_array_builder_new(_GArrowStructDataType*, _GError**) @nogc nothrow;
    int garrow_struct_array_builder_append(_GArrowStructArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_struct_array_builder_append_value(_GArrowStructArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_struct_array_builder_append_null(_GArrowStructArrayBuilder*, _GError**) @nogc nothrow;
    _GArrowArrayBuilder* garrow_struct_array_builder_get_field_builder(_GArrowStructArrayBuilder*, int) @nogc nothrow;
    _GList* garrow_struct_array_builder_get_field_builders(_GArrowStructArrayBuilder*) @nogc nothrow;
    struct _GArrowMapArrayBuilder{};
    c_ulong garrow_map_array_builder_get_type() @nogc nothrow;
    alias GArrowMapArrayBuilder = _GArrowMapArrayBuilder;
    struct _GArrowMapArrayBuilderClass
    {
        _GArrowArrayBuilderClass parent_class;
    }
    static _GArrowMapArrayBuilderClass* GARROW_MAP_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_MAP_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_MAP_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowMapArrayBuilderClass* GARROW_MAP_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowMapArrayBuilder* GARROW_MAP_ARRAY_BUILDER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowMapArrayBuilder(_GArrowMapArrayBuilder**) @nogc nothrow;
    alias GArrowMapArrayBuilder_autoptr = _GArrowMapArrayBuilder*;
    alias GArrowMapArrayBuilderClass = _GArrowMapArrayBuilderClass;
    _GArrowMapArrayBuilder* garrow_map_array_builder_new(_GArrowMapDataType*, _GError**) @nogc nothrow;
    int garrow_map_array_builder_append_value(_GArrowMapArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_map_array_builder_append_values(_GArrowMapArrayBuilder*, const(int)*, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_map_array_builder_append_null(_GArrowMapArrayBuilder*, _GError**) @nogc nothrow;
    int garrow_map_array_builder_append_nulls(_GArrowMapArrayBuilder*, c_long, _GError**) @nogc nothrow;
    _GArrowArrayBuilder* garrow_map_array_builder_get_key_builder(_GArrowMapArrayBuilder*) @nogc nothrow;
    _GArrowArrayBuilder* garrow_map_array_builder_get_item_builder(_GArrowMapArrayBuilder*) @nogc nothrow;
    _GArrowArrayBuilder* garrow_map_array_builder_get_value_builder(_GArrowMapArrayBuilder*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowDecimal128ArrayBuilder(_GArrowDecimal128ArrayBuilder**) @nogc nothrow;
    c_ulong garrow_decimal128_array_builder_get_type() @nogc nothrow;
    struct _GArrowDecimal128ArrayBuilder{};
    alias GArrowDecimal128ArrayBuilder = _GArrowDecimal128ArrayBuilder;
    struct _GArrowDecimal128ArrayBuilderClass{};
    alias GArrowDecimal128ArrayBuilderClass = _GArrowDecimal128ArrayBuilderClass;
    alias GArrowDecimal128ArrayBuilder_autoptr = _GArrowDecimal128ArrayBuilder*;
    static _GArrowDecimal128ArrayBuilder* GARROW_DECIMAL128_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowDecimal128ArrayBuilderClass* GARROW_DECIMAL128_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL128_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL128_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowDecimal128ArrayBuilderClass* GARROW_DECIMAL128_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    _GArrowDecimal128ArrayBuilder* garrow_decimal128_array_builder_new(_GArrowDecimal128DataType*) @nogc nothrow;
    int garrow_decimal128_array_builder_append(_GArrowDecimal128ArrayBuilder*, _GArrowDecimal128*, _GError**) @nogc nothrow;
    int garrow_decimal128_array_builder_append_value(_GArrowDecimal128ArrayBuilder*, _GArrowDecimal128*, _GError**) @nogc nothrow;
    int garrow_decimal128_array_builder_append_values(_GArrowDecimal128ArrayBuilder*, _GArrowDecimal128**, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    int garrow_decimal128_array_builder_append_null(_GArrowDecimal128ArrayBuilder*, _GError**) @nogc nothrow;
    alias GArrowDecimal256ArrayBuilderClass = _GArrowDecimal256ArrayBuilderClass;
    struct _GArrowDecimal256ArrayBuilder
    {
        _GArrowFixedSizeBinaryArrayBuilder parent_instance;
    }
    alias GArrowDecimal256ArrayBuilder_autoptr = _GArrowDecimal256ArrayBuilder*;
    static void glib_autoptr_cleanup_GArrowDecimal256ArrayBuilder(_GArrowDecimal256ArrayBuilder**) @nogc nothrow;
    static _GArrowDecimal256ArrayBuilder* GARROW_DECIMAL256_ARRAY_BUILDER(void*) @nogc nothrow;
    static _GArrowDecimal256ArrayBuilderClass* GARROW_DECIMAL256_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL256_ARRAY_BUILDER(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL256_ARRAY_BUILDER_CLASS(void*) @nogc nothrow;
    static _GArrowDecimal256ArrayBuilderClass* GARROW_DECIMAL256_ARRAY_BUILDER_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowDecimal256ArrayBuilderClass
    {
        _GArrowFixedSizeBinaryArrayBuilderClass parent_class;
    }
    alias GArrowDecimal256ArrayBuilder = _GArrowDecimal256ArrayBuilder;
    c_ulong garrow_decimal256_array_builder_get_type() @nogc nothrow;
    _GArrowDecimal256ArrayBuilder* garrow_decimal256_array_builder_new(_GArrowDecimal256DataType*) @nogc nothrow;
    int garrow_decimal256_array_builder_append_value(_GArrowDecimal256ArrayBuilder*, _GArrowDecimal256*, _GError**) @nogc nothrow;
    int garrow_decimal256_array_builder_append_values(_GArrowDecimal256ArrayBuilder*, _GArrowDecimal256**, c_long, const(int)*, c_long, _GError**) @nogc nothrow;
    struct _GArrowArrayClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowArrayClass* GARROW_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_ARRAY(void*) @nogc nothrow;
    static _GArrowArrayClass* GARROW_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowArray* GARROW_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowArray(_GArrowArray**) @nogc nothrow;
    alias GArrowArray_autoptr = _GArrowArray*;
    alias GArrowArrayClass = _GArrowArrayClass;
    c_ulong garrow_array_get_type() @nogc nothrow;
    int garrow_array_equal(_GArrowArray*, _GArrowArray*) @nogc nothrow;
    int garrow_array_equal_approx(_GArrowArray*, _GArrowArray*) @nogc nothrow;
    int garrow_array_equal_range(_GArrowArray*, c_long, _GArrowArray*, c_long, c_long) @nogc nothrow;
    int garrow_array_is_null(_GArrowArray*, c_long) @nogc nothrow;
    int garrow_array_is_valid(_GArrowArray*, c_long) @nogc nothrow;
    c_long garrow_array_get_length(_GArrowArray*) @nogc nothrow;
    c_long garrow_array_get_offset(_GArrowArray*) @nogc nothrow;
    c_long garrow_array_get_n_nulls(_GArrowArray*) @nogc nothrow;
    _GArrowBuffer* garrow_array_get_null_bitmap(_GArrowArray*) @nogc nothrow;
    _GArrowDataType* garrow_array_get_value_data_type(_GArrowArray*) @nogc nothrow;
    GArrowType garrow_array_get_value_type(_GArrowArray*) @nogc nothrow;
    _GArrowArray* garrow_array_slice(_GArrowArray*, c_long, c_long) @nogc nothrow;
    char* garrow_array_to_string(_GArrowArray*, _GError**) @nogc nothrow;
    _GArrowArray* garrow_array_view(_GArrowArray*, _GArrowDataType*, _GError**) @nogc nothrow;
    char* garrow_array_diff_unified(_GArrowArray*, _GArrowArray*) @nogc nothrow;
    static _GArrowNullArrayClass* GARROW_NULL_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_NULL_ARRAY_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowNullArray(_GArrowNullArray**) @nogc nothrow;
    alias GArrowNullArray_autoptr = _GArrowNullArray*;
    struct _GArrowNullArray
    {
        _GArrowArray parent_instance;
    }
    alias GArrowNullArrayClass = _GArrowNullArrayClass;
    struct _GArrowNullArrayClass{};
    alias GArrowNullArray = _GArrowNullArray;
    c_ulong garrow_null_array_get_type() @nogc nothrow;
    static _GArrowNullArray* GARROW_NULL_ARRAY(void*) @nogc nothrow;
    static _GArrowNullArrayClass* GARROW_NULL_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_NULL_ARRAY(void*) @nogc nothrow;
    _GArrowNullArray* garrow_null_array_new(c_long) @nogc nothrow;
    alias timer_t = void*;
    c_ulong garrow_primitive_array_get_type() @nogc nothrow;
    struct _GArrowPrimitiveArray{};
    alias GArrowPrimitiveArray = _GArrowPrimitiveArray;
    alias GArrowPrimitiveArrayClass = _GArrowPrimitiveArrayClass;
    alias GArrowPrimitiveArray_autoptr = _GArrowPrimitiveArray*;
    static void glib_autoptr_cleanup_GArrowPrimitiveArray(_GArrowPrimitiveArray**) @nogc nothrow;
    static _GArrowPrimitiveArray* GARROW_PRIMITIVE_ARRAY(void*) @nogc nothrow;
    static _GArrowPrimitiveArrayClass* GARROW_PRIMITIVE_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_PRIMITIVE_ARRAY(void*) @nogc nothrow;
    static _GArrowPrimitiveArrayClass* GARROW_PRIMITIVE_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_PRIMITIVE_ARRAY_CLASS(void*) @nogc nothrow;
    struct _GArrowPrimitiveArrayClass
    {
        _GArrowArrayClass parent_class;
    }
    _GArrowBuffer* garrow_primitive_array_get_buffer(_GArrowPrimitiveArray*) @nogc nothrow;
    _GArrowBuffer* garrow_primitive_array_get_data_buffer(_GArrowPrimitiveArray*) @nogc nothrow;
    struct _GArrowBooleanArray{};
    struct _GArrowBooleanArrayClass
    {
        _GArrowPrimitiveArrayClass parent_class;
    }
    static _GArrowBooleanArrayClass* GARROW_BOOLEAN_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BOOLEAN_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BOOLEAN_ARRAY(void*) @nogc nothrow;
    static _GArrowBooleanArrayClass* GARROW_BOOLEAN_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowBooleanArray* GARROW_BOOLEAN_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowBooleanArray(_GArrowBooleanArray**) @nogc nothrow;
    alias GArrowBooleanArray_autoptr = _GArrowBooleanArray*;
    alias GArrowBooleanArrayClass = _GArrowBooleanArrayClass;
    c_ulong garrow_boolean_array_get_type() @nogc nothrow;
    alias GArrowBooleanArray = _GArrowBooleanArray;
    _GArrowBooleanArray* garrow_boolean_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    int garrow_boolean_array_get_value(_GArrowBooleanArray*, c_long) @nogc nothrow;
    int* garrow_boolean_array_get_values(_GArrowBooleanArray*, c_long*) @nogc nothrow;
    alias time_t = c_long;
    c_ulong garrow_numeric_array_get_type() @nogc nothrow;
    struct _GArrowNumericArray{};
    alias GArrowNumericArray = _GArrowNumericArray;
    static _GArrowNumericArray* GARROW_NUMERIC_ARRAY(void*) @nogc nothrow;
    struct _GArrowNumericArrayClass{};
    alias GArrowNumericArrayClass = _GArrowNumericArrayClass;
    alias GArrowNumericArray_autoptr = _GArrowNumericArray*;
    static void glib_autoptr_cleanup_GArrowNumericArray(_GArrowNumericArray**) @nogc nothrow;
    static _GArrowNumericArrayClass* GARROW_NUMERIC_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_NUMERIC_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_NUMERIC_ARRAY(void*) @nogc nothrow;
    static _GArrowNumericArrayClass* GARROW_NUMERIC_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowInt8ArrayClass* GARROW_INT8_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowInt8Array* GARROW_INT8_ARRAY(void*) @nogc nothrow;
    c_ulong garrow_int8_array_get_type() @nogc nothrow;
    struct _GArrowInt8Array{};
    alias GArrowInt8Array = _GArrowInt8Array;
    struct _GArrowInt8ArrayClass{};
    alias GArrowInt8ArrayClass = _GArrowInt8ArrayClass;
    alias GArrowInt8Array_autoptr = _GArrowInt8Array*;
    static void glib_autoptr_cleanup_GArrowInt8Array(_GArrowInt8Array**) @nogc nothrow;
    static _GArrowInt8ArrayClass* GARROW_INT8_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT8_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT8_ARRAY(void*) @nogc nothrow;
    _GArrowInt8Array* garrow_int8_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    byte garrow_int8_array_get_value(_GArrowInt8Array*, c_long) @nogc nothrow;
    const(byte)* garrow_int8_array_get_values(_GArrowInt8Array*, c_long*) @nogc nothrow;
    static _GArrowUInt8Array* GARROW_UINT8_ARRAY(void*) @nogc nothrow;
    c_ulong garrow_uint8_array_get_type() @nogc nothrow;
    struct _GArrowUInt8Array{};
    alias GArrowUInt8Array = _GArrowUInt8Array;
    struct _GArrowUInt8ArrayClass{};
    alias GArrowUInt8ArrayClass = _GArrowUInt8ArrayClass;
    static int GARROW_IS_UINT8_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_UINT8_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowUInt8ArrayClass* GARROW_UINT8_ARRAY_GET_CLASS(void*) @nogc nothrow;
    alias GArrowUInt8Array_autoptr = _GArrowUInt8Array*;
    static void glib_autoptr_cleanup_GArrowUInt8Array(_GArrowUInt8Array**) @nogc nothrow;
    static _GArrowUInt8ArrayClass* GARROW_UINT8_ARRAY_CLASS(void*) @nogc nothrow;
    _GArrowUInt8Array* garrow_uint8_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    ubyte garrow_uint8_array_get_value(_GArrowUInt8Array*, c_long) @nogc nothrow;
    const(ubyte)* garrow_uint8_array_get_values(_GArrowUInt8Array*, c_long*) @nogc nothrow;
    struct tm
    {
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;
        c_long tm_gmtoff;
        const(char)* tm_zone;
    }
    c_ulong garrow_int16_array_get_type() @nogc nothrow;
    struct _GArrowInt16Array{};
    alias GArrowInt16Array = _GArrowInt16Array;
    struct _GArrowInt16ArrayClass
    {
        _GArrowNumericArrayClass parent_class;
    }
    static _GArrowInt16ArrayClass* GARROW_INT16_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT16_ARRAY_CLASS(void*) @nogc nothrow;
    alias GArrowInt16ArrayClass = _GArrowInt16ArrayClass;
    alias GArrowInt16Array_autoptr = _GArrowInt16Array*;
    static void glib_autoptr_cleanup_GArrowInt16Array(_GArrowInt16Array**) @nogc nothrow;
    static int GARROW_IS_INT16_ARRAY(void*) @nogc nothrow;
    static _GArrowInt16ArrayClass* GARROW_INT16_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowInt16Array* GARROW_INT16_ARRAY(void*) @nogc nothrow;
    _GArrowInt16Array* garrow_int16_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    short garrow_int16_array_get_value(_GArrowInt16Array*, c_long) @nogc nothrow;
    const(short)* garrow_int16_array_get_values(_GArrowInt16Array*, c_long*) @nogc nothrow;
    struct _GArrowUInt16ArrayClass
    {
        _GArrowNumericArrayClass parent_class;
    }
    static _GArrowUInt16ArrayClass* GARROW_UINT16_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT16_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT16_ARRAY(void*) @nogc nothrow;
    c_ulong garrow_uint16_array_get_type() @nogc nothrow;
    static _GArrowUInt16Array* GARROW_UINT16_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowUInt16Array(_GArrowUInt16Array**) @nogc nothrow;
    alias GArrowUInt16Array_autoptr = _GArrowUInt16Array*;
    struct _GArrowUInt16Array
    {
        _GArrowNumericArray parent_instance;
    }
    alias GArrowUInt16ArrayClass = _GArrowUInt16ArrayClass;
    alias GArrowUInt16Array = _GArrowUInt16Array;
    static _GArrowUInt16ArrayClass* GARROW_UINT16_ARRAY_CLASS(void*) @nogc nothrow;
    _GArrowUInt16Array* garrow_uint16_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    ushort garrow_uint16_array_get_value(_GArrowUInt16Array*, c_long) @nogc nothrow;
    const(ushort)* garrow_uint16_array_get_values(_GArrowUInt16Array*, c_long*) @nogc nothrow;
    struct timeval
    {
        c_long tv_sec;
        c_long tv_usec;
    }
    c_ulong garrow_int32_array_get_type() @nogc nothrow;
    struct _GArrowInt32Array{};
    alias GArrowInt32Array = _GArrowInt32Array;
    struct _GArrowInt32ArrayClass{};
    alias GArrowInt32ArrayClass = _GArrowInt32ArrayClass;
    alias GArrowInt32Array_autoptr = _GArrowInt32Array*;
    static void glib_autoptr_cleanup_GArrowInt32Array(_GArrowInt32Array**) @nogc nothrow;
    static _GArrowInt32Array* GARROW_INT32_ARRAY(void*) @nogc nothrow;
    static _GArrowInt32ArrayClass* GARROW_INT32_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT32_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_INT32_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowInt32ArrayClass* GARROW_INT32_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowInt32Array* garrow_int32_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    int garrow_int32_array_get_value(_GArrowInt32Array*, c_long) @nogc nothrow;
    const(int)* garrow_int32_array_get_values(_GArrowInt32Array*, c_long*) @nogc nothrow;
    struct _GArrowUInt32Array
    {
        _GArrowNumericArray parent_instance;
    }
    c_ulong garrow_uint32_array_get_type() @nogc nothrow;
    alias GArrowUInt32Array = _GArrowUInt32Array;
    struct _GArrowUInt32ArrayClass{};
    alias GArrowUInt32ArrayClass = _GArrowUInt32ArrayClass;
    alias GArrowUInt32Array_autoptr = _GArrowUInt32Array*;
    static void glib_autoptr_cleanup_GArrowUInt32Array(_GArrowUInt32Array**) @nogc nothrow;
    static _GArrowUInt32Array* GARROW_UINT32_ARRAY(void*) @nogc nothrow;
    static _GArrowUInt32ArrayClass* GARROW_UINT32_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT32_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_UINT32_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowUInt32ArrayClass* GARROW_UINT32_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowUInt32Array* garrow_uint32_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    uint garrow_uint32_array_get_value(_GArrowUInt32Array*, c_long) @nogc nothrow;
    const(uint)* garrow_uint32_array_get_values(_GArrowUInt32Array*, c_long*) @nogc nothrow;
    struct timespec
    {
        c_long tv_sec;
        c_long tv_nsec;
    }
    struct _GArrowInt64ArrayClass
    {
        _GArrowNumericArrayClass parent_class;
    }
    static _GArrowInt64ArrayClass* GARROW_INT64_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT64_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT64_ARRAY(void*) @nogc nothrow;
    static _GArrowInt64ArrayClass* GARROW_INT64_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowInt64Array* GARROW_INT64_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowInt64Array(_GArrowInt64Array**) @nogc nothrow;
    alias GArrowInt64Array_autoptr = _GArrowInt64Array*;
    struct _GArrowInt64Array
    {
        _GArrowNumericArray parent_instance;
    }
    alias GArrowInt64ArrayClass = _GArrowInt64ArrayClass;
    alias GArrowInt64Array = _GArrowInt64Array;
    c_ulong garrow_int64_array_get_type() @nogc nothrow;
    _GArrowInt64Array* garrow_int64_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    c_long garrow_int64_array_get_value(_GArrowInt64Array*, c_long) @nogc nothrow;
    const(c_long)* garrow_int64_array_get_values(_GArrowInt64Array*, c_long*) @nogc nothrow;
    struct _GArrowUInt64ArrayClass
    {
        _GArrowNumericArrayClass parent_class;
    }
    static _GArrowUInt64ArrayClass* GARROW_UINT64_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT64_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT64_ARRAY(void*) @nogc nothrow;
    static _GArrowUInt64ArrayClass* GARROW_UINT64_ARRAY_CLASS(void*) @nogc nothrow;
    c_ulong garrow_uint64_array_get_type() @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowUInt64Array(_GArrowUInt64Array**) @nogc nothrow;
    alias GArrowUInt64Array_autoptr = _GArrowUInt64Array*;
    struct _GArrowUInt64Array
    {
        _GArrowNumericArray parent_instance;
    }
    alias GArrowUInt64ArrayClass = _GArrowUInt64ArrayClass;
    alias GArrowUInt64Array = _GArrowUInt64Array;
    static _GArrowUInt64Array* GARROW_UINT64_ARRAY(void*) @nogc nothrow;
    _GArrowUInt64Array* garrow_uint64_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    c_ulong garrow_uint64_array_get_value(_GArrowUInt64Array*, c_long) @nogc nothrow;
    const(c_ulong)* garrow_uint64_array_get_values(_GArrowUInt64Array*, c_long*) @nogc nothrow;
    struct sigstack
    {
        void* ss_sp;
        int ss_onstack;
    }
    static void glib_autoptr_cleanup_GArrowFloatArray(_GArrowFloatArray**) @nogc nothrow;
    alias GArrowFloatArray_autoptr = _GArrowFloatArray*;
    struct _GArrowFloatArray
    {
        _GArrowNumericArray parent_instance;
    }
    alias GArrowFloatArrayClass = _GArrowFloatArrayClass;
    struct _GArrowFloatArrayClass{};
    alias GArrowFloatArray = _GArrowFloatArray;
    c_ulong garrow_float_array_get_type() @nogc nothrow;
    static _GArrowFloatArrayClass* GARROW_FLOAT_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FLOAT_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_FLOAT_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowFloatArray* GARROW_FLOAT_ARRAY(void*) @nogc nothrow;
    static _GArrowFloatArrayClass* GARROW_FLOAT_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowFloatArray* garrow_float_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    float garrow_float_array_get_value(_GArrowFloatArray*, c_long) @nogc nothrow;
    const(float)* garrow_float_array_get_values(_GArrowFloatArray*, c_long*) @nogc nothrow;
    struct itimerspec
    {
        timespec it_interval;
        timespec it_value;
    }
    static int GARROW_IS_DOUBLE_ARRAY_CLASS(void*) @nogc nothrow;
    c_ulong garrow_double_array_get_type() @nogc nothrow;
    struct _GArrowDoubleArray{};
    alias GArrowDoubleArray = _GArrowDoubleArray;
    struct _GArrowDoubleArrayClass{};
    alias GArrowDoubleArrayClass = _GArrowDoubleArrayClass;
    alias GArrowDoubleArray_autoptr = _GArrowDoubleArray*;
    static void glib_autoptr_cleanup_GArrowDoubleArray(_GArrowDoubleArray**) @nogc nothrow;
    static _GArrowDoubleArray* GARROW_DOUBLE_ARRAY(void*) @nogc nothrow;
    static _GArrowDoubleArrayClass* GARROW_DOUBLE_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowDoubleArrayClass* GARROW_DOUBLE_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DOUBLE_ARRAY(void*) @nogc nothrow;
    _GArrowDoubleArray* garrow_double_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    double garrow_double_array_get_value(_GArrowDoubleArray*, c_long) @nogc nothrow;
    const(double)* garrow_double_array_get_values(_GArrowDoubleArray*, c_long*) @nogc nothrow;
    c_ulong garrow_binary_array_get_type() @nogc nothrow;
    struct _GArrowBinaryArray{};
    alias GArrowBinaryArray = _GArrowBinaryArray;
    struct _GArrowBinaryArrayClass{};
    alias GArrowBinaryArrayClass = _GArrowBinaryArrayClass;
    alias GArrowBinaryArray_autoptr = _GArrowBinaryArray*;
    static void glib_autoptr_cleanup_GArrowBinaryArray(_GArrowBinaryArray**) @nogc nothrow;
    static _GArrowBinaryArray* GARROW_BINARY_ARRAY(void*) @nogc nothrow;
    static _GArrowBinaryArrayClass* GARROW_BINARY_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BINARY_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_BINARY_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowBinaryArrayClass* GARROW_BINARY_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowBinaryArray* garrow_binary_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    _GBytes* garrow_binary_array_get_value(_GArrowBinaryArray*, c_long) @nogc nothrow;
    _GArrowBuffer* garrow_binary_array_get_buffer(_GArrowBinaryArray*) @nogc nothrow;
    _GArrowBuffer* garrow_binary_array_get_data_buffer(_GArrowBinaryArray*) @nogc nothrow;
    _GArrowBuffer* garrow_binary_array_get_offsets_buffer(_GArrowBinaryArray*) @nogc nothrow;
    struct _GArrowLargeBinaryArray
    {
        _GArrowArray parent_instance;
    }
    struct _GArrowLargeBinaryArrayClass
    {
        _GArrowArrayClass parent_class;
    }
    static _GArrowLargeBinaryArrayClass* GARROW_LARGE_BINARY_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_BINARY_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_BINARY_ARRAY(void*) @nogc nothrow;
    alias GArrowLargeBinaryArrayClass = _GArrowLargeBinaryArrayClass;
    alias GArrowLargeBinaryArray_autoptr = _GArrowLargeBinaryArray*;
    static void glib_autoptr_cleanup_GArrowLargeBinaryArray(_GArrowLargeBinaryArray**) @nogc nothrow;
    c_ulong garrow_large_binary_array_get_type() @nogc nothrow;
    static _GArrowLargeBinaryArrayClass* GARROW_LARGE_BINARY_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowLargeBinaryArray* GARROW_LARGE_BINARY_ARRAY(void*) @nogc nothrow;
    alias GArrowLargeBinaryArray = _GArrowLargeBinaryArray;
    _GArrowLargeBinaryArray* garrow_large_binary_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    _GBytes* garrow_large_binary_array_get_value(_GArrowLargeBinaryArray*, c_long) @nogc nothrow;
    _GArrowBuffer* garrow_large_binary_array_get_buffer(_GArrowLargeBinaryArray*) @nogc nothrow;
    _GArrowBuffer* garrow_large_binary_array_get_data_buffer(_GArrowLargeBinaryArray*) @nogc nothrow;
    _GArrowBuffer* garrow_large_binary_array_get_offsets_buffer(_GArrowLargeBinaryArray*) @nogc nothrow;
    struct _GArrowStringArrayClass
    {
        _GArrowBinaryArrayClass parent_class;
    }
    c_ulong garrow_string_array_get_type() @nogc nothrow;
    static int GARROW_IS_STRING_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_STRING_ARRAY(void*) @nogc nothrow;
    static _GArrowStringArrayClass* GARROW_STRING_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowStringArray* GARROW_STRING_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowStringArray(_GArrowStringArray**) @nogc nothrow;
    alias GArrowStringArray_autoptr = _GArrowStringArray*;
    struct _GArrowStringArray
    {
        _GArrowBinaryArray parent_instance;
    }
    alias GArrowStringArrayClass = _GArrowStringArrayClass;
    alias GArrowStringArray = _GArrowStringArray;
    static _GArrowStringArrayClass* GARROW_STRING_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowStringArray* garrow_string_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    char* garrow_string_array_get_string(_GArrowStringArray*, c_long) @nogc nothrow;
    struct stack_t
    {
        void* ss_sp;
        int ss_flags;
        c_ulong ss_size;
    }
    c_ulong garrow_large_string_array_get_type() @nogc nothrow;
    struct _GArrowLargeStringArray{};
    alias GArrowLargeStringArray = _GArrowLargeStringArray;
    struct _GArrowLargeStringArrayClass{};
    alias GArrowLargeStringArrayClass = _GArrowLargeStringArrayClass;
    alias GArrowLargeStringArray_autoptr = _GArrowLargeStringArray*;
    static void glib_autoptr_cleanup_GArrowLargeStringArray(_GArrowLargeStringArray**) @nogc nothrow;
    static _GArrowLargeStringArray* GARROW_LARGE_STRING_ARRAY(void*) @nogc nothrow;
    static _GArrowLargeStringArrayClass* GARROW_LARGE_STRING_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_STRING_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_STRING_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowLargeStringArrayClass* GARROW_LARGE_STRING_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowLargeStringArray* garrow_large_string_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    char* garrow_large_string_array_get_string(_GArrowLargeStringArray*, c_long) @nogc nothrow;
    c_ulong garrow_date32_array_get_type() @nogc nothrow;
    struct _GArrowDate32Array{};
    alias GArrowDate32Array = _GArrowDate32Array;
    struct _GArrowDate32ArrayClass{};
    alias GArrowDate32ArrayClass = _GArrowDate32ArrayClass;
    alias GArrowDate32Array_autoptr = _GArrowDate32Array*;
    static void glib_autoptr_cleanup_GArrowDate32Array(_GArrowDate32Array**) @nogc nothrow;
    static _GArrowDate32Array* GARROW_DATE32_ARRAY(void*) @nogc nothrow;
    static _GArrowDate32ArrayClass* GARROW_DATE32_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DATE32_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_DATE32_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowDate32ArrayClass* GARROW_DATE32_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowDate32Array* garrow_date32_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    int garrow_date32_array_get_value(_GArrowDate32Array*, c_long) @nogc nothrow;
    const(int)* garrow_date32_array_get_values(_GArrowDate32Array*, c_long*) @nogc nothrow;
    alias sigval_t = sigval;
    struct _GArrowDate64ArrayClass
    {
        _GArrowNumericArrayClass parent_class;
    }
    static _GArrowDate64ArrayClass* GARROW_DATE64_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DATE64_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DATE64_ARRAY(void*) @nogc nothrow;
    static _GArrowDate64ArrayClass* GARROW_DATE64_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowDate64Array* GARROW_DATE64_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowDate64Array(_GArrowDate64Array**) @nogc nothrow;
    alias GArrowDate64Array_autoptr = _GArrowDate64Array*;
    struct _GArrowDate64Array
    {
        _GArrowNumericArray parent_instance;
    }
    alias GArrowDate64ArrayClass = _GArrowDate64ArrayClass;
    alias GArrowDate64Array = _GArrowDate64Array;
    c_ulong garrow_date64_array_get_type() @nogc nothrow;
    _GArrowDate64Array* garrow_date64_array_new(c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    c_long garrow_date64_array_get_value(_GArrowDate64Array*, c_long) @nogc nothrow;
    const(c_long)* garrow_date64_array_get_values(_GArrowDate64Array*, c_long*) @nogc nothrow;
    c_ulong garrow_timestamp_array_get_type() @nogc nothrow;
    struct _GArrowTimestampArray{};
    alias GArrowTimestampArray = _GArrowTimestampArray;
    struct _GArrowTimestampArrayClass{};
    alias GArrowTimestampArrayClass = _GArrowTimestampArrayClass;
    alias GArrowTimestampArray_autoptr = _GArrowTimestampArray*;
    static void glib_autoptr_cleanup_GArrowTimestampArray(_GArrowTimestampArray**) @nogc nothrow;
    static _GArrowTimestampArray* GARROW_TIMESTAMP_ARRAY(void*) @nogc nothrow;
    static _GArrowTimestampArrayClass* GARROW_TIMESTAMP_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIMESTAMP_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_TIMESTAMP_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowTimestampArrayClass* GARROW_TIMESTAMP_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowTimestampArray* garrow_timestamp_array_new(_GArrowTimestampDataType*, c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    c_long garrow_timestamp_array_get_value(_GArrowTimestampArray*, c_long) @nogc nothrow;
    const(c_long)* garrow_timestamp_array_get_values(_GArrowTimestampArray*, c_long*) @nogc nothrow;
    struct _GArrowTime32ArrayClass
    {
        _GArrowNumericArrayClass parent_class;
    }
    static int GARROW_IS_TIME32_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowTime32Array* GARROW_TIME32_ARRAY(void*) @nogc nothrow;
    static _GArrowTime32ArrayClass* GARROW_TIME32_ARRAY_CLASS(void*) @nogc nothrow;
    c_ulong garrow_time32_array_get_type() @nogc nothrow;
    struct _GArrowTime32Array{};
    alias GArrowTime32Array = _GArrowTime32Array;
    alias GArrowTime32ArrayClass = _GArrowTime32ArrayClass;
    alias GArrowTime32Array_autoptr = _GArrowTime32Array*;
    static void glib_autoptr_cleanup_GArrowTime32Array(_GArrowTime32Array**) @nogc nothrow;
    static int GARROW_IS_TIME32_ARRAY(void*) @nogc nothrow;
    static _GArrowTime32ArrayClass* GARROW_TIME32_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowTime32Array* garrow_time32_array_new(_GArrowTime32DataType*, c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    int garrow_time32_array_get_value(_GArrowTime32Array*, c_long) @nogc nothrow;
    const(int)* garrow_time32_array_get_values(_GArrowTime32Array*, c_long*) @nogc nothrow;
    alias sigset_t = __sigset_t;
    struct _GArrowTime64ArrayClass
    {
        _GArrowNumericArrayClass parent_class;
    }
    static _GArrowTime64ArrayClass* GARROW_TIME64_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIME64_ARRAY_CLASS(void*) @nogc nothrow;
    c_ulong garrow_time64_array_get_type() @nogc nothrow;
    static int GARROW_IS_TIME64_ARRAY(void*) @nogc nothrow;
    static _GArrowTime64ArrayClass* GARROW_TIME64_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowTime64Array* GARROW_TIME64_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowTime64Array(_GArrowTime64Array**) @nogc nothrow;
    alias GArrowTime64Array_autoptr = _GArrowTime64Array*;
    struct _GArrowTime64Array
    {
        _GArrowNumericArray parent_instance;
    }
    alias GArrowTime64Array = _GArrowTime64Array;
    alias GArrowTime64ArrayClass = _GArrowTime64ArrayClass;
    _GArrowTime64Array* garrow_time64_array_new(_GArrowTime64DataType*, c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    c_long garrow_time64_array_get_value(_GArrowTime64Array*, c_long) @nogc nothrow;
    const(c_long)* garrow_time64_array_get_values(_GArrowTime64Array*, c_long*) @nogc nothrow;
    struct _GArrowFixedSizeBinaryArrayClass
    {
        _GArrowPrimitiveArrayClass parent_class;
    }
    c_ulong garrow_fixed_size_binary_array_get_type() @nogc nothrow;
    struct _GArrowFixedSizeBinaryArray{};
    alias GArrowFixedSizeBinaryArray = _GArrowFixedSizeBinaryArray;
    alias GArrowFixedSizeBinaryArrayClass = _GArrowFixedSizeBinaryArrayClass;
    static _GArrowFixedSizeBinaryArrayClass* GARROW_FIXED_SIZE_BINARY_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FIXED_SIZE_BINARY_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FIXED_SIZE_BINARY_ARRAY(void*) @nogc nothrow;
    static _GArrowFixedSizeBinaryArrayClass* GARROW_FIXED_SIZE_BINARY_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowFixedSizeBinaryArray* GARROW_FIXED_SIZE_BINARY_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowFixedSizeBinaryArray(_GArrowFixedSizeBinaryArray**) @nogc nothrow;
    alias GArrowFixedSizeBinaryArray_autoptr = _GArrowFixedSizeBinaryArray*;
    _GArrowFixedSizeBinaryArray* garrow_fixed_size_binary_array_new(_GArrowFixedSizeBinaryDataType*, c_long, _GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    int garrow_fixed_size_binary_array_get_byte_width(_GArrowFixedSizeBinaryArray*) @nogc nothrow;
    _GBytes* garrow_fixed_size_binary_array_get_value(_GArrowFixedSizeBinaryArray*, c_long) @nogc nothrow;
    _GBytes* garrow_fixed_size_binary_array_get_values_bytes(_GArrowFixedSizeBinaryArray*) @nogc nothrow;
    static _GArrowDecimal128ArrayClass* GARROW_DECIMAL128_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowDecimal128Array* GARROW_DECIMAL128_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowDecimal128Array(_GArrowDecimal128Array**) @nogc nothrow;
    static int GARROW_IS_DECIMAL128_ARRAY_CLASS(void*) @nogc nothrow;
    struct _GArrowDecimal128ArrayClass{};
    alias GArrowDecimal128Array = _GArrowDecimal128Array;
    struct _GArrowDecimal128Array{};
    c_ulong garrow_decimal128_array_get_type() @nogc nothrow;
    static int GARROW_IS_DECIMAL128_ARRAY(void*) @nogc nothrow;
    alias GArrowDecimal128Array_autoptr = _GArrowDecimal128Array*;
    alias GArrowDecimal128ArrayClass = _GArrowDecimal128ArrayClass;
    static _GArrowDecimal128ArrayClass* GARROW_DECIMAL128_ARRAY_GET_CLASS(void*) @nogc nothrow;
    char* garrow_decimal128_array_format_value(_GArrowDecimal128Array*, c_long) @nogc nothrow;
    _GArrowDecimal128* garrow_decimal128_array_get_value(_GArrowDecimal128Array*, c_long) @nogc nothrow;
    struct _GArrowDecimal256ArrayClass
    {
        _GArrowFixedSizeBinaryArrayClass parent_class;
    }
    static _GArrowDecimal256ArrayClass* GARROW_DECIMAL256_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL256_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL256_ARRAY(void*) @nogc nothrow;
    c_ulong garrow_decimal256_array_get_type() @nogc nothrow;
    struct _GArrowDecimal256Array{};
    alias GArrowDecimal256Array = _GArrowDecimal256Array;
    static _GArrowDecimal256Array* GARROW_DECIMAL256_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowDecimal256Array(_GArrowDecimal256Array**) @nogc nothrow;
    alias GArrowDecimal256Array_autoptr = _GArrowDecimal256Array*;
    alias GArrowDecimal256ArrayClass = _GArrowDecimal256ArrayClass;
    static _GArrowDecimal256ArrayClass* GARROW_DECIMAL256_ARRAY_GET_CLASS(void*) @nogc nothrow;
    char* garrow_decimal256_array_format_value(_GArrowDecimal256Array*, c_long) @nogc nothrow;
    _GArrowDecimal256* garrow_decimal256_array_get_value(_GArrowDecimal256Array*, c_long) @nogc nothrow;
    static int GARROW_IS_EXTENSION_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_EXTENSION_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowExtensionArrayClass* GARROW_EXTENSION_ARRAY_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowExtensionArrayClass
    {
        _GArrowArrayClass parent_class;
    }
    static _GArrowExtensionArray* GARROW_EXTENSION_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowExtensionArray(_GArrowExtensionArray**) @nogc nothrow;
    static _GArrowExtensionArrayClass* GARROW_EXTENSION_ARRAY_CLASS(void*) @nogc nothrow;
    alias GArrowExtensionArray_autoptr = _GArrowExtensionArray*;
    alias GArrowExtensionArrayClass = _GArrowExtensionArrayClass;
    c_ulong garrow_extension_array_get_type() @nogc nothrow;
    _GArrowArray* garrow_extension_array_get_storage(_GArrowExtensionArray*) @nogc nothrow;
    c_ulong garrow_data_type_get_type() @nogc nothrow;
    struct _GArrowDataType{};
    alias GArrowDataType = _GArrowDataType;
    struct _GArrowDataTypeClass{};
    alias GArrowDataTypeClass = _GArrowDataTypeClass;
    alias GArrowDataType_autoptr = _GArrowDataType*;
    static void glib_autoptr_cleanup_GArrowDataType(_GArrowDataType**) @nogc nothrow;
    static _GArrowDataType* GARROW_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowDataTypeClass* GARROW_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowDataTypeClass* GARROW_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    int garrow_data_type_equal(_GArrowDataType*, _GArrowDataType*) @nogc nothrow;
    char* garrow_data_type_to_string(_GArrowDataType*) @nogc nothrow;
    GArrowType garrow_data_type_get_id(_GArrowDataType*) @nogc nothrow;
    char* garrow_data_type_get_name(_GArrowDataType*) @nogc nothrow;
    struct _GArrowFixedWidthDataTypeClass
    {
        _GArrowDataTypeClass parent_class;
    }
    alias GArrowFixedWidthDataTypeClass = _GArrowFixedWidthDataTypeClass;
    static int GARROW_IS_FIXED_WIDTH_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FIXED_WIDTH_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowFixedWidthDataTypeClass* GARROW_FIXED_WIDTH_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowFixedWidthDataType* GARROW_FIXED_WIDTH_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowFixedWidthDataType(_GArrowFixedWidthDataType**) @nogc nothrow;
    alias GArrowFixedWidthDataType_autoptr = _GArrowFixedWidthDataType*;
    struct _GArrowFixedWidthDataType
    {
        _GArrowDataType parent_instance;
    }
    alias GArrowFixedWidthDataType = _GArrowFixedWidthDataType;
    c_ulong garrow_fixed_width_data_type_get_type() @nogc nothrow;
    static _GArrowFixedWidthDataTypeClass* GARROW_FIXED_WIDTH_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    int garrow_fixed_width_data_type_get_bit_width(_GArrowFixedWidthDataType*) @nogc nothrow;
    struct _GArrowNullDataTypeClass
    {
        _GArrowDataTypeClass parent_class;
    }
    static _GArrowNullDataTypeClass* GARROW_NULL_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_NULL_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_NULL_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowNullDataTypeClass* GARROW_NULL_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowNullDataType* GARROW_NULL_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowNullDataType(_GArrowNullDataType**) @nogc nothrow;
    alias GArrowNullDataType_autoptr = _GArrowNullDataType*;
    struct _GArrowNullDataType
    {
        _GArrowDataType parent_instance;
    }
    alias GArrowNullDataTypeClass = _GArrowNullDataTypeClass;
    alias GArrowNullDataType = _GArrowNullDataType;
    c_ulong garrow_null_data_type_get_type() @nogc nothrow;
    _GArrowNullDataType* garrow_null_data_type_new() @nogc nothrow;
    c_ulong garrow_boolean_data_type_get_type() @nogc nothrow;
    struct _GArrowBooleanDataType{};
    alias GArrowBooleanDataType = _GArrowBooleanDataType;
    struct _GArrowBooleanDataTypeClass{};
    alias GArrowBooleanDataTypeClass = _GArrowBooleanDataTypeClass;
    static void glib_autoptr_cleanup_GArrowBooleanDataType(_GArrowBooleanDataType**) @nogc nothrow;
    static _GArrowBooleanDataType* GARROW_BOOLEAN_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowBooleanDataTypeClass* GARROW_BOOLEAN_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BOOLEAN_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_BOOLEAN_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowBooleanDataTypeClass* GARROW_BOOLEAN_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    alias GArrowBooleanDataType_autoptr = _GArrowBooleanDataType*;
    _GArrowBooleanDataType* garrow_boolean_data_type_new() @nogc nothrow;
    struct _GArrowNumericDataTypeClass
    {
        _GArrowFixedWidthDataTypeClass parent_class;
    }
    c_ulong garrow_numeric_data_type_get_type() @nogc nothrow;
    struct _GArrowNumericDataType{};
    alias GArrowNumericDataType = _GArrowNumericDataType;
    alias GArrowNumericDataTypeClass = _GArrowNumericDataTypeClass;
    alias GArrowNumericDataType_autoptr = _GArrowNumericDataType*;
    static void glib_autoptr_cleanup_GArrowNumericDataType(_GArrowNumericDataType**) @nogc nothrow;
    static _GArrowNumericDataType* GARROW_NUMERIC_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowNumericDataTypeClass* GARROW_NUMERIC_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_NUMERIC_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_NUMERIC_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowNumericDataTypeClass* GARROW_NUMERIC_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowIntegerDataType(_GArrowIntegerDataType**) @nogc nothrow;
    struct _GArrowIntegerDataTypeClass
    {
        _GArrowNumericDataTypeClass parent_class;
    }
    static _GArrowIntegerDataTypeClass* GARROW_INTEGER_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INTEGER_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INTEGER_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowIntegerDataTypeClass* GARROW_INTEGER_DATA_TYPE_CLASS(void*) @nogc nothrow;
    c_ulong garrow_integer_data_type_get_type() @nogc nothrow;
    struct _GArrowIntegerDataType{};
    alias GArrowIntegerDataType = _GArrowIntegerDataType;
    alias GArrowIntegerDataTypeClass = _GArrowIntegerDataTypeClass;
    alias GArrowIntegerDataType_autoptr = _GArrowIntegerDataType*;
    static _GArrowIntegerDataType* GARROW_INTEGER_DATA_TYPE(void*) @nogc nothrow;
    int garrow_integer_data_type_is_signed(_GArrowIntegerDataType*) @nogc nothrow;
    struct _GArrowInt8DataTypeClass
    {
        _GArrowIntegerDataTypeClass parent_class;
    }
    static _GArrowInt8DataTypeClass* GARROW_INT8_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT8_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT8_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowInt8DataTypeClass* GARROW_INT8_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowInt8DataType* GARROW_INT8_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowInt8DataType(_GArrowInt8DataType**) @nogc nothrow;
    alias GArrowInt8DataType_autoptr = _GArrowInt8DataType*;
    struct _GArrowInt8DataType
    {
        _GArrowIntegerDataType parent_instance;
    }
    alias GArrowInt8DataTypeClass = _GArrowInt8DataTypeClass;
    alias GArrowInt8DataType = _GArrowInt8DataType;
    c_ulong garrow_int8_data_type_get_type() @nogc nothrow;
    _GArrowInt8DataType* garrow_int8_data_type_new() @nogc nothrow;
    c_ulong garrow_uint8_data_type_get_type() @nogc nothrow;
    struct _GArrowUInt8DataType{};
    alias GArrowUInt8DataType = _GArrowUInt8DataType;
    static _GArrowUInt8DataTypeClass* GARROW_UINT8_DATA_TYPE_CLASS(void*) @nogc nothrow;
    struct _GArrowUInt8DataTypeClass{};
    static int GARROW_IS_UINT8_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_UINT8_DATA_TYPE_CLASS(void*) @nogc nothrow;
    alias GArrowUInt8DataTypeClass = _GArrowUInt8DataTypeClass;
    static _GArrowUInt8DataTypeClass* GARROW_UINT8_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    alias GArrowUInt8DataType_autoptr = _GArrowUInt8DataType*;
    static void glib_autoptr_cleanup_GArrowUInt8DataType(_GArrowUInt8DataType**) @nogc nothrow;
    static _GArrowUInt8DataType* GARROW_UINT8_DATA_TYPE(void*) @nogc nothrow;
    _GArrowUInt8DataType* garrow_uint8_data_type_new() @nogc nothrow;
    struct siginfo_t
    {
        int si_signo;
        int si_errno;
        int si_code;
        int __pad0;
        static union _Anonymous_1
        {
            int[28] _pad;
            static struct _Anonymous_2
            {
                int si_pid;
                uint si_uid;
            }
            _Anonymous_2 _kill;
            static struct _Anonymous_3
            {
                int si_tid;
                int si_overrun;
                sigval si_sigval;
            }
            _Anonymous_3 _timer;
            static struct _Anonymous_4
            {
                int si_pid;
                uint si_uid;
                sigval si_sigval;
            }
            _Anonymous_4 _rt;
            static struct _Anonymous_5
            {
                int si_pid;
                uint si_uid;
                int si_status;
                c_long si_utime;
                c_long si_stime;
            }
            _Anonymous_5 _sigchld;
            static struct _Anonymous_6
            {
                void* si_addr;
                short si_addr_lsb;
                static union _Anonymous_7
                {
                    static struct _Anonymous_8
                    {
                        void* _lower;
                        void* _upper;
                    }
                    _Anonymous_8 _addr_bnd;
                    uint _pkey;
                }
                _Anonymous_7 _bounds;
            }
            _Anonymous_6 _sigfault;
            static struct _Anonymous_9
            {
                c_long si_band;
                int si_fd;
            }
            _Anonymous_9 _sigpoll;
            static struct _Anonymous_10
            {
                void* _call_addr;
                int _syscall;
                uint _arch;
            }
            _Anonymous_10 _sigsys;
        }
        _Anonymous_1 _sifields;
    }
    c_ulong garrow_int16_data_type_get_type() @nogc nothrow;
    struct _GArrowInt16DataType{};
    alias GArrowInt16DataType = _GArrowInt16DataType;
    struct _GArrowInt16DataTypeClass{};
    static void glib_autoptr_cleanup_GArrowInt16DataType(_GArrowInt16DataType**) @nogc nothrow;
    alias GArrowInt16DataType_autoptr = _GArrowInt16DataType*;
    static _GArrowInt16DataType* GARROW_INT16_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowInt16DataTypeClass* GARROW_INT16_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT16_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_INT16_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowInt16DataTypeClass* GARROW_INT16_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    alias GArrowInt16DataTypeClass = _GArrowInt16DataTypeClass;
    _GArrowInt16DataType* garrow_int16_data_type_new() @nogc nothrow;
    alias GArrowUInt16DataType = _GArrowUInt16DataType;
    c_ulong garrow_uint16_data_type_get_type() @nogc nothrow;
    struct _GArrowUInt16DataType{};
    struct _GArrowUInt16DataTypeClass{};
    alias GArrowUInt16DataTypeClass = _GArrowUInt16DataTypeClass;
    alias GArrowUInt16DataType_autoptr = _GArrowUInt16DataType*;
    static void glib_autoptr_cleanup_GArrowUInt16DataType(_GArrowUInt16DataType**) @nogc nothrow;
    static _GArrowUInt16DataType* GARROW_UINT16_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowUInt16DataTypeClass* GARROW_UINT16_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT16_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_UINT16_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowUInt16DataTypeClass* GARROW_UINT16_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    _GArrowUInt16DataType* garrow_uint16_data_type_new() @nogc nothrow;
    c_ulong garrow_int32_data_type_get_type() @nogc nothrow;
    struct _GArrowInt32DataType{};
    alias GArrowInt32DataType = _GArrowInt32DataType;
    struct _GArrowInt32DataTypeClass{};
    alias GArrowInt32DataTypeClass = _GArrowInt32DataTypeClass;
    static _GArrowInt32DataTypeClass* GARROW_INT32_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    alias GArrowInt32DataType_autoptr = _GArrowInt32DataType*;
    static _GArrowInt32DataType* GARROW_INT32_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowInt32DataTypeClass* GARROW_INT32_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT32_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_INT32_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowInt32DataType(_GArrowInt32DataType**) @nogc nothrow;
    _GArrowInt32DataType* garrow_int32_data_type_new() @nogc nothrow;
    struct _GArrowUInt32DataTypeClass
    {
        _GArrowIntegerDataTypeClass parent_class;
    }
    static _GArrowUInt32DataTypeClass* GARROW_UINT32_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT32_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT32_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowUInt32DataTypeClass* GARROW_UINT32_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowUInt32DataType* GARROW_UINT32_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowUInt32DataType(_GArrowUInt32DataType**) @nogc nothrow;
    alias GArrowUInt32DataType_autoptr = _GArrowUInt32DataType*;
    struct _GArrowUInt32DataType
    {
        _GArrowIntegerDataType parent_instance;
    }
    alias GArrowUInt32DataTypeClass = _GArrowUInt32DataTypeClass;
    alias GArrowUInt32DataType = _GArrowUInt32DataType;
    c_ulong garrow_uint32_data_type_get_type() @nogc nothrow;
    _GArrowUInt32DataType* garrow_uint32_data_type_new() @nogc nothrow;
    struct _GArrowInt64DataType
    {
        _GArrowIntegerDataType parent_instance;
    }
    c_ulong garrow_int64_data_type_get_type() @nogc nothrow;
    alias GArrowInt64DataType = _GArrowInt64DataType;
    struct _GArrowInt64DataTypeClass{};
    alias GArrowInt64DataTypeClass = _GArrowInt64DataTypeClass;
    alias GArrowInt64DataType_autoptr = _GArrowInt64DataType*;
    static void glib_autoptr_cleanup_GArrowInt64DataType(_GArrowInt64DataType**) @nogc nothrow;
    static _GArrowInt64DataType* GARROW_INT64_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowInt64DataTypeClass* GARROW_INT64_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INT64_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_INT64_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowInt64DataTypeClass* GARROW_INT64_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    _GArrowInt64DataType* garrow_int64_data_type_new() @nogc nothrow;
    static int GARROW_IS_UINT64_DATA_TYPE(void*) @nogc nothrow;
    struct _GArrowUInt64DataType{};
    alias GArrowUInt64DataType = _GArrowUInt64DataType;
    struct _GArrowUInt64DataTypeClass{};
    alias GArrowUInt64DataTypeClass = _GArrowUInt64DataTypeClass;
    alias GArrowUInt64DataType_autoptr = _GArrowUInt64DataType*;
    static void glib_autoptr_cleanup_GArrowUInt64DataType(_GArrowUInt64DataType**) @nogc nothrow;
    static _GArrowUInt64DataType* GARROW_UINT64_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowUInt64DataTypeClass* GARROW_UINT64_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowUInt64DataTypeClass* GARROW_UINT64_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UINT64_DATA_TYPE_CLASS(void*) @nogc nothrow;
    c_ulong garrow_uint64_data_type_get_type() @nogc nothrow;
    _GArrowUInt64DataType* garrow_uint64_data_type_new() @nogc nothrow;
    struct _GArrowFloatingPointDataTypeClass
    {
        _GArrowNumericDataTypeClass parent_class;
    }
    c_ulong garrow_floating_point_data_type_get_type() @nogc nothrow;
    struct _GArrowFloatingPointDataType{};
    alias GArrowFloatingPointDataType = _GArrowFloatingPointDataType;
    alias GArrowFloatingPointDataTypeClass = _GArrowFloatingPointDataTypeClass;
    alias GArrowFloatingPointDataType_autoptr = _GArrowFloatingPointDataType*;
    static void glib_autoptr_cleanup_GArrowFloatingPointDataType(_GArrowFloatingPointDataType**) @nogc nothrow;
    static _GArrowFloatingPointDataType* GARROW_FLOATING_POINT_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_FLOATING_POINT_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowFloatingPointDataTypeClass* GARROW_FLOATING_POINT_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowFloatingPointDataTypeClass* GARROW_FLOATING_POINT_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FLOATING_POINT_DATA_TYPE(void*) @nogc nothrow;
    alias sigevent_t = sigevent;
    alias GArrowFloatDataTypeClass = _GArrowFloatDataTypeClass;
    struct _GArrowFloatDataTypeClass
    {
        _GArrowFloatingPointDataTypeClass parent_class;
    }
    static _GArrowFloatDataTypeClass* GARROW_FLOAT_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    c_ulong garrow_float_data_type_get_type() @nogc nothrow;
    struct _GArrowFloatDataType{};
    alias GArrowFloatDataType = _GArrowFloatDataType;
    static int GARROW_IS_FLOAT_DATA_TYPE_CLASS(void*) @nogc nothrow;
    alias GArrowFloatDataType_autoptr = _GArrowFloatDataType*;
    static void glib_autoptr_cleanup_GArrowFloatDataType(_GArrowFloatDataType**) @nogc nothrow;
    static _GArrowFloatDataType* GARROW_FLOAT_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowFloatDataTypeClass* GARROW_FLOAT_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FLOAT_DATA_TYPE(void*) @nogc nothrow;
    _GArrowFloatDataType* garrow_float_data_type_new() @nogc nothrow;
    alias GArrowDoubleDataTypeClass = _GArrowDoubleDataTypeClass;
    struct _GArrowDoubleDataTypeClass{};
    alias GArrowDoubleDataType = _GArrowDoubleDataType;
    struct _GArrowDoubleDataType{};
    c_ulong garrow_double_data_type_get_type() @nogc nothrow;
    alias GArrowDoubleDataType_autoptr = _GArrowDoubleDataType*;
    static void glib_autoptr_cleanup_GArrowDoubleDataType(_GArrowDoubleDataType**) @nogc nothrow;
    static _GArrowDoubleDataType* GARROW_DOUBLE_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowDoubleDataTypeClass* GARROW_DOUBLE_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DOUBLE_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_DOUBLE_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowDoubleDataTypeClass* GARROW_DOUBLE_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    _GArrowDoubleDataType* garrow_double_data_type_new() @nogc nothrow;
    struct _GArrowBinaryDataTypeClass
    {
        _GArrowDataTypeClass parent_class;
    }
    static _GArrowBinaryDataTypeClass* GARROW_BINARY_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BINARY_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BINARY_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowBinaryDataTypeClass* GARROW_BINARY_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowBinaryDataType* GARROW_BINARY_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowBinaryDataType(_GArrowBinaryDataType**) @nogc nothrow;
    alias GArrowBinaryDataType_autoptr = _GArrowBinaryDataType*;
    struct _GArrowBinaryDataType
    {
        _GArrowDataType parent_instance;
    }
    alias GArrowBinaryDataTypeClass = _GArrowBinaryDataTypeClass;
    c_ulong garrow_binary_data_type_get_type() @nogc nothrow;
    alias GArrowBinaryDataType = _GArrowBinaryDataType;
    _GArrowBinaryDataType* garrow_binary_data_type_new() @nogc nothrow;
    struct _GArrowFixedSizeBinaryDataTypeClass
    {
        _GArrowFixedWidthDataTypeClass parent_class;
    }
    static _GArrowFixedSizeBinaryDataTypeClass* GARROW_FIXED_SIZE_BINARY_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FIXED_SIZE_BINARY_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FIXED_SIZE_BINARY_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowFixedSizeBinaryDataType* GARROW_FIXED_SIZE_BINARY_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowFixedSizeBinaryDataType(_GArrowFixedSizeBinaryDataType**) @nogc nothrow;
    alias GArrowFixedSizeBinaryDataType_autoptr = _GArrowFixedSizeBinaryDataType*;
    struct _GArrowFixedSizeBinaryDataType
    {
        _GArrowDataType parent_instance;
    }
    alias GArrowFixedSizeBinaryDataTypeClass = _GArrowFixedSizeBinaryDataTypeClass;
    static _GArrowFixedSizeBinaryDataTypeClass* GARROW_FIXED_SIZE_BINARY_DATA_TYPE_CLASS(void*) @nogc nothrow;
    alias GArrowFixedSizeBinaryDataType = _GArrowFixedSizeBinaryDataType;
    c_ulong garrow_fixed_size_binary_data_type_get_type() @nogc nothrow;
    _GArrowFixedSizeBinaryDataType* garrow_fixed_size_binary_data_type_new(int) @nogc nothrow;
    int garrow_fixed_size_binary_data_type_get_byte_width(_GArrowFixedSizeBinaryDataType*) @nogc nothrow;
    static int GARROW_IS_LARGE_BINARY_DATA_TYPE(void*) @nogc nothrow;
    c_ulong garrow_large_binary_data_type_get_type() @nogc nothrow;
    struct _GArrowLargeBinaryDataType{};
    alias GArrowLargeBinaryDataType = _GArrowLargeBinaryDataType;
    struct _GArrowLargeBinaryDataTypeClass{};
    alias GArrowLargeBinaryDataTypeClass = _GArrowLargeBinaryDataTypeClass;
    static _GArrowLargeBinaryDataType* GARROW_LARGE_BINARY_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowLargeBinaryDataType(_GArrowLargeBinaryDataType**) @nogc nothrow;
    static _GArrowLargeBinaryDataTypeClass* GARROW_LARGE_BINARY_DATA_TYPE_CLASS(void*) @nogc nothrow;
    alias GArrowLargeBinaryDataType_autoptr = _GArrowLargeBinaryDataType*;
    static int GARROW_IS_LARGE_BINARY_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowLargeBinaryDataTypeClass* GARROW_LARGE_BINARY_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    _GArrowLargeBinaryDataType* garrow_large_binary_data_type_new() @nogc nothrow;
    struct _GArrowStringDataType{};
    alias GArrowStringDataType = _GArrowStringDataType;
    struct _GArrowStringDataTypeClass{};
    alias GArrowStringDataTypeClass = _GArrowStringDataTypeClass;
    alias GArrowStringDataType_autoptr = _GArrowStringDataType*;
    static void glib_autoptr_cleanup_GArrowStringDataType(_GArrowStringDataType**) @nogc nothrow;
    static _GArrowStringDataType* GARROW_STRING_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowStringDataTypeClass* GARROW_STRING_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_STRING_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_STRING_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowStringDataTypeClass* GARROW_STRING_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    c_ulong garrow_string_data_type_get_type() @nogc nothrow;
    _GArrowStringDataType* garrow_string_data_type_new() @nogc nothrow;
    alias sig_atomic_t = int;
    struct _GArrowLargeStringDataTypeClass
    {
        _GArrowLargeBinaryDataTypeClass parent_class;
    }
    static _GArrowLargeStringDataTypeClass* GARROW_LARGE_STRING_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_STRING_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_STRING_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowLargeStringDataType* GARROW_LARGE_STRING_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowLargeStringDataType(_GArrowLargeStringDataType**) @nogc nothrow;
    alias GArrowLargeStringDataType_autoptr = _GArrowLargeStringDataType*;
    struct _GArrowLargeStringDataType
    {
        _GArrowLargeBinaryDataType parent_instance;
    }
    alias GArrowLargeStringDataTypeClass = _GArrowLargeStringDataTypeClass;
    c_ulong garrow_large_string_data_type_get_type() @nogc nothrow;
    alias GArrowLargeStringDataType = _GArrowLargeStringDataType;
    static _GArrowLargeStringDataTypeClass* GARROW_LARGE_STRING_DATA_TYPE_CLASS(void*) @nogc nothrow;
    _GArrowLargeStringDataType* garrow_large_string_data_type_new() @nogc nothrow;
    alias GArrowDate32DataType_autoptr = _GArrowDate32DataType*;
    static void glib_autoptr_cleanup_GArrowDate32DataType(_GArrowDate32DataType**) @nogc nothrow;
    static _GArrowDate32DataType* GARROW_DATE32_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowDate32DataTypeClass* GARROW_DATE32_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DATE32_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_DATE32_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowDate32DataTypeClass* GARROW_DATE32_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowDate32DataTypeClass
    {
        _GArrowDataTypeClass parent_class;
    }
    alias GArrowDate32DataTypeClass = _GArrowDate32DataTypeClass;
    alias GArrowDate32DataType = _GArrowDate32DataType;
    struct _GArrowDate32DataType{};
    c_ulong garrow_date32_data_type_get_type() @nogc nothrow;
    _GArrowDate32DataType* garrow_date32_data_type_new() @nogc nothrow;
    alias locale_t = __locale_struct*;
    static _GArrowDate64DataTypeClass* GARROW_DATE64_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowDate64DataTypeClass
    {
        _GArrowDataTypeClass parent_class;
    }
    c_ulong garrow_date64_data_type_get_type() @nogc nothrow;
    static int GARROW_IS_DATE64_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowDate64DataTypeClass* GARROW_DATE64_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowDate64DataType* GARROW_DATE64_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowDate64DataType(_GArrowDate64DataType**) @nogc nothrow;
    alias GArrowDate64DataType_autoptr = _GArrowDate64DataType*;
    struct _GArrowDate64DataType
    {
        _GArrowDataType parent_instance;
    }
    alias GArrowDate64DataTypeClass = _GArrowDate64DataTypeClass;
    alias GArrowDate64DataType = _GArrowDate64DataType;
    static int GARROW_IS_DATE64_DATA_TYPE_CLASS(void*) @nogc nothrow;
    _GArrowDate64DataType* garrow_date64_data_type_new() @nogc nothrow;
    c_ulong garrow_timestamp_data_type_get_type() @nogc nothrow;
    struct _GArrowTimestampDataType{};
    alias GArrowTimestampDataType = _GArrowTimestampDataType;
    struct _GArrowTimestampDataTypeClass{};
    alias GArrowTimestampDataTypeClass = _GArrowTimestampDataTypeClass;
    alias GArrowTimestampDataType_autoptr = _GArrowTimestampDataType*;
    static void glib_autoptr_cleanup_GArrowTimestampDataType(_GArrowTimestampDataType**) @nogc nothrow;
    static _GArrowTimestampDataType* GARROW_TIMESTAMP_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowTimestampDataTypeClass* GARROW_TIMESTAMP_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIMESTAMP_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_TIMESTAMP_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowTimestampDataTypeClass* GARROW_TIMESTAMP_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    _GArrowTimestampDataType* garrow_timestamp_data_type_new(GArrowTimeUnit) @nogc nothrow;
    GArrowTimeUnit garrow_timestamp_data_type_get_unit(_GArrowTimestampDataType*) @nogc nothrow;
    alias clockid_t = int;
    alias GArrowTimeDataTypeClass = _GArrowTimeDataTypeClass;
    struct _GArrowTimeDataTypeClass{};
    alias GArrowTimeDataType = _GArrowTimeDataType;
    struct _GArrowTimeDataType{};
    c_ulong garrow_time_data_type_get_type() @nogc nothrow;
    alias GArrowTimeDataType_autoptr = _GArrowTimeDataType*;
    static void glib_autoptr_cleanup_GArrowTimeDataType(_GArrowTimeDataType**) @nogc nothrow;
    static _GArrowTimeDataType* GARROW_TIME_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowTimeDataTypeClass* GARROW_TIME_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIME_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_TIME_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowTimeDataTypeClass* GARROW_TIME_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    GArrowTimeUnit garrow_time_data_type_get_unit(_GArrowTimeDataType*) @nogc nothrow;
    struct _GArrowTime32DataTypeClass
    {
        _GArrowTimeDataTypeClass parent_class;
    }
    c_ulong garrow_time32_data_type_get_type() @nogc nothrow;
    struct _GArrowTime32DataType{};
    alias GArrowTime32DataType = _GArrowTime32DataType;
    alias GArrowTime32DataTypeClass = _GArrowTime32DataTypeClass;
    alias GArrowTime32DataType_autoptr = _GArrowTime32DataType*;
    static void glib_autoptr_cleanup_GArrowTime32DataType(_GArrowTime32DataType**) @nogc nothrow;
    static _GArrowTime32DataType* GARROW_TIME32_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowTime32DataTypeClass* GARROW_TIME32_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIME32_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_TIME32_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowTime32DataTypeClass* GARROW_TIME32_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    _GArrowTime32DataType* garrow_time32_data_type_new(GArrowTimeUnit, _GError**) @nogc nothrow;
    alias clock_t = c_long;
    c_ulong garrow_time64_data_type_get_type() @nogc nothrow;
    struct _GArrowTime64DataType{};
    alias GArrowTime64DataType = _GArrowTime64DataType;
    struct _GArrowTime64DataTypeClass{};
    alias GArrowTime64DataTypeClass = _GArrowTime64DataTypeClass;
    alias GArrowTime64DataType_autoptr = _GArrowTime64DataType*;
    static void glib_autoptr_cleanup_GArrowTime64DataType(_GArrowTime64DataType**) @nogc nothrow;
    static _GArrowTime64DataType* GARROW_TIME64_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowTime64DataTypeClass* GARROW_TIME64_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TIME64_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_TIME64_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowTime64DataTypeClass* GARROW_TIME64_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    _GArrowTime64DataType* garrow_time64_data_type_new(GArrowTimeUnit, _GError**) @nogc nothrow;
    static int GARROW_IS_DECIMAL_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowDecimalDataTypeClass* GARROW_DECIMAL_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static _GArrowDecimalDataTypeClass* GARROW_DECIMAL_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowDecimalDataType* GARROW_DECIMAL_DATA_TYPE(void*) @nogc nothrow;
    c_ulong garrow_decimal_data_type_get_type() @nogc nothrow;
    alias GArrowDecimalDataType_autoptr = _GArrowDecimalDataType*;
    struct _GArrowDecimalDataType
    {
        _GArrowFixedSizeBinaryDataType parent_instance;
    }
    alias GArrowDecimalDataTypeClass = _GArrowDecimalDataTypeClass;
    struct _GArrowDecimalDataTypeClass{};
    alias GArrowDecimalDataType = _GArrowDecimalDataType;
    static int GARROW_IS_DECIMAL_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowDecimalDataType(_GArrowDecimalDataType**) @nogc nothrow;
    _GArrowDecimalDataType* garrow_decimal_data_type_new(int, int) @nogc nothrow;
    int garrow_decimal_data_type_get_precision(_GArrowDecimalDataType*) @nogc nothrow;
    int garrow_decimal_data_type_get_scale(_GArrowDecimalDataType*) @nogc nothrow;
    alias __sigval_t = sigval;
    struct _GArrowDecimal128DataTypeClass
    {
        _GArrowDecimalDataTypeClass parent_class;
    }
    static _GArrowDecimal128DataTypeClass* GARROW_DECIMAL128_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL128_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL128_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowDecimal128DataTypeClass* GARROW_DECIMAL128_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowDecimal128DataType* GARROW_DECIMAL128_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowDecimal128DataType(_GArrowDecimal128DataType**) @nogc nothrow;
    alias GArrowDecimal128DataType_autoptr = _GArrowDecimal128DataType*;
    struct _GArrowDecimal128DataType
    {
        _GArrowDecimalDataType parent_instance;
    }
    alias GArrowDecimal128DataTypeClass = _GArrowDecimal128DataTypeClass;
    alias GArrowDecimal128DataType = _GArrowDecimal128DataType;
    c_ulong garrow_decimal128_data_type_get_type() @nogc nothrow;
    int garrow_decimal128_data_type_max_precision() @nogc nothrow;
    _GArrowDecimal128DataType* garrow_decimal128_data_type_new(int, int) @nogc nothrow;
    union sigval
    {
        int sival_int;
        void* sival_ptr;
    }
    static _GArrowDecimal256DataTypeClass* GARROW_DECIMAL256_DATA_TYPE_CLASS(void*) @nogc nothrow;
    struct _GArrowDecimal256DataTypeClass{};
    alias GArrowDecimal256DataTypeClass = _GArrowDecimal256DataTypeClass;
    struct _GArrowDecimal256DataType
    {
        _GArrowDecimalDataType parent_instance;
    }
    alias GArrowDecimal256DataType_autoptr = _GArrowDecimal256DataType*;
    static void glib_autoptr_cleanup_GArrowDecimal256DataType(_GArrowDecimal256DataType**) @nogc nothrow;
    c_ulong garrow_decimal256_data_type_get_type() @nogc nothrow;
    static _GArrowDecimal256DataType* GARROW_DECIMAL256_DATA_TYPE(void*) @nogc nothrow;
    alias GArrowDecimal256DataType = _GArrowDecimal256DataType;
    static int GARROW_IS_DECIMAL256_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL256_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowDecimal256DataTypeClass* GARROW_DECIMAL256_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    int garrow_decimal256_data_type_max_precision() @nogc nothrow;
    _GArrowDecimal256DataType* garrow_decimal256_data_type_new(int, int) @nogc nothrow;
    struct _GArrowExtensionDataTypeClass
    {
        _GArrowDataTypeClass parent_class;
        char* function(_GArrowExtensionDataType*) get_extension_name;
        int function(_GArrowExtensionDataType*, _GArrowExtensionDataType*) equal;
        _GArrowDataType* function(_GArrowExtensionDataType*, _GArrowDataType*, _GBytes*, _GError**) deserialize;
        _GBytes* function(_GArrowExtensionDataType*) serialize;
        c_ulong function(_GArrowExtensionDataType*) get_array_gtype;
    }
    c_ulong garrow_extension_data_type_get_type() @nogc nothrow;
    static _GArrowExtensionDataTypeClass* GARROW_EXTENSION_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_EXTENSION_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_EXTENSION_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowExtensionDataTypeClass* GARROW_EXTENSION_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowExtensionDataType* GARROW_EXTENSION_DATA_TYPE(void*) @nogc nothrow;
    struct _GArrowExtensionDataType{};
    alias GArrowExtensionDataType = _GArrowExtensionDataType;
    alias GArrowExtensionDataTypeClass = _GArrowExtensionDataTypeClass;
    alias GArrowExtensionDataType_autoptr = _GArrowExtensionDataType*;
    static void glib_autoptr_cleanup_GArrowExtensionDataType(_GArrowExtensionDataType**) @nogc nothrow;
    char* garrow_extension_data_type_get_extension_name(_GArrowExtensionDataType*) @nogc nothrow;
    alias GArrowArray = _GArrowArray;
    struct _GArrowArray
    {
        _GObject parent_instance;
    }
    alias GArrowExtensionArray = _GArrowExtensionArray;
    struct _GArrowExtensionArray
    {
        _GArrowArray parent_instance;
    }
    _GArrowExtensionArray* garrow_extension_data_type_wrap_array(_GArrowExtensionDataType*, _GArrowArray*) @nogc nothrow;
    alias GArrowChunkedArray = _GArrowChunkedArray;
    struct _GArrowChunkedArray
    {
        _GObject parent_instance;
    }
    _GArrowChunkedArray* garrow_extension_data_type_wrap_chunked_array(_GArrowExtensionDataType*, _GArrowChunkedArray*) @nogc nothrow;
    static int GARROW_IS_EXTENSION_DATA_TYPE_REGISTRY_CLASS(void*) @nogc nothrow;
    static _GArrowExtensionDataTypeRegistryClass* GARROW_EXTENSION_DATA_TYPE_REGISTRY_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowExtensionDataTypeRegistryClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowExtensionDataTypeRegistryClass* GARROW_EXTENSION_DATA_TYPE_REGISTRY_CLASS(void*) @nogc nothrow;
    static _GArrowExtensionDataTypeRegistry* GARROW_EXTENSION_DATA_TYPE_REGISTRY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowExtensionDataTypeRegistry(_GArrowExtensionDataTypeRegistry**) @nogc nothrow;
    alias GArrowExtensionDataTypeRegistry_autoptr = _GArrowExtensionDataTypeRegistry*;
    struct _GArrowExtensionDataTypeRegistry
    {
        _GObject parent_instance;
    }
    c_ulong garrow_extension_data_type_registry_get_type() @nogc nothrow;
    static int GARROW_IS_EXTENSION_DATA_TYPE_REGISTRY(void*) @nogc nothrow;
    alias GArrowExtensionDataTypeRegistryClass = _GArrowExtensionDataTypeRegistryClass;
    alias GArrowExtensionDataTypeRegistry = _GArrowExtensionDataTypeRegistry;
    _GArrowExtensionDataTypeRegistry* garrow_extension_data_type_registry_default() @nogc nothrow;
    int garrow_extension_data_type_registry_register(_GArrowExtensionDataTypeRegistry*, _GArrowExtensionDataType*, _GError**) @nogc nothrow;
    int garrow_extension_data_type_registry_unregister(_GArrowExtensionDataTypeRegistry*, const(char)*, _GError**) @nogc nothrow;
    _GArrowExtensionDataType* garrow_extension_data_type_registry_lookup(_GArrowExtensionDataTypeRegistry*, const(char)*) @nogc nothrow;
    static _GArrowBuffer* GARROW_BUFFER(void*) @nogc nothrow;
    static _GArrowBufferClass* GARROW_BUFFER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BUFFER(void*) @nogc nothrow;
    static int GARROW_IS_BUFFER_CLASS(void*) @nogc nothrow;
    static _GArrowBufferClass* GARROW_BUFFER_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowBufferClass
    {
        _GObjectClass parent_class;
    }
    alias GArrowBufferClass = _GArrowBufferClass;
    struct _GArrowBuffer
    {
        _GObject parent_instance;
    }
    alias GArrowBuffer_autoptr = _GArrowBuffer*;
    alias GArrowBuffer = _GArrowBuffer;
    static void glib_autoptr_cleanup_GArrowBuffer(_GArrowBuffer**) @nogc nothrow;
    c_ulong garrow_buffer_get_type() @nogc nothrow;
    _GArrowBuffer* garrow_buffer_new(const(ubyte)*, c_long) @nogc nothrow;
    _GArrowBuffer* garrow_buffer_new_bytes(_GBytes*) @nogc nothrow;
    int garrow_buffer_equal(_GArrowBuffer*, _GArrowBuffer*) @nogc nothrow;
    int garrow_buffer_equal_n_bytes(_GArrowBuffer*, _GArrowBuffer*, c_long) @nogc nothrow;
    int garrow_buffer_is_mutable(_GArrowBuffer*) @nogc nothrow;
    c_long garrow_buffer_get_capacity(_GArrowBuffer*) @nogc nothrow;
    _GBytes* garrow_buffer_get_data(_GArrowBuffer*) @nogc nothrow;
    _GBytes* garrow_buffer_get_mutable_data(_GArrowBuffer*) @nogc nothrow;
    c_long garrow_buffer_get_size(_GArrowBuffer*) @nogc nothrow;
    _GArrowBuffer* garrow_buffer_get_parent(_GArrowBuffer*) @nogc nothrow;
    _GArrowBuffer* garrow_buffer_copy(_GArrowBuffer*, c_long, c_long, _GError**) @nogc nothrow;
    _GArrowBuffer* garrow_buffer_slice(_GArrowBuffer*, c_long, c_long) @nogc nothrow;
    struct __sigset_t
    {
        c_ulong[16] __val;
    }
    struct _GArrowMutableBufferClass
    {
        _GArrowBufferClass parent_class;
    }
    static _GArrowMutableBufferClass* GARROW_MUTABLE_BUFFER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_MUTABLE_BUFFER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_MUTABLE_BUFFER(void*) @nogc nothrow;
    static _GArrowMutableBufferClass* GARROW_MUTABLE_BUFFER_CLASS(void*) @nogc nothrow;
    static _GArrowMutableBuffer* GARROW_MUTABLE_BUFFER(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowMutableBuffer(_GArrowMutableBuffer**) @nogc nothrow;
    alias GArrowMutableBuffer_autoptr = _GArrowMutableBuffer*;
    alias GArrowMutableBufferClass = _GArrowMutableBufferClass;
    alias GArrowMutableBuffer = _GArrowMutableBuffer;
    struct _GArrowMutableBuffer{};
    c_ulong garrow_mutable_buffer_get_type() @nogc nothrow;
    _GArrowMutableBuffer* garrow_mutable_buffer_new(ubyte*, c_long) @nogc nothrow;
    _GArrowMutableBuffer* garrow_mutable_buffer_new_bytes(_GBytes*) @nogc nothrow;
    _GArrowMutableBuffer* garrow_mutable_buffer_slice(_GArrowMutableBuffer*, c_long, c_long) @nogc nothrow;
    int garrow_mutable_buffer_set_data(_GArrowMutableBuffer*, c_long, const(ubyte)*, c_long, _GError**) @nogc nothrow;
    alias __locale_t = __locale_struct*;
    alias GArrowResizableBuffer_autoptr = _GArrowResizableBuffer*;
    c_ulong garrow_resizable_buffer_get_type() @nogc nothrow;
    struct _GArrowResizableBuffer{};
    alias GArrowResizableBuffer = _GArrowResizableBuffer;
    alias GArrowResizableBufferClass = _GArrowResizableBufferClass;
    struct _GArrowResizableBufferClass{};
    static void glib_autoptr_cleanup_GArrowResizableBuffer(_GArrowResizableBuffer**) @nogc nothrow;
    static _GArrowResizableBuffer* GARROW_RESIZABLE_BUFFER(void*) @nogc nothrow;
    static _GArrowResizableBufferClass* GARROW_RESIZABLE_BUFFER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_RESIZABLE_BUFFER(void*) @nogc nothrow;
    static int GARROW_IS_RESIZABLE_BUFFER_CLASS(void*) @nogc nothrow;
    static _GArrowResizableBufferClass* GARROW_RESIZABLE_BUFFER_GET_CLASS(void*) @nogc nothrow;
    _GArrowResizableBuffer* garrow_resizable_buffer_new(c_long, _GError**) @nogc nothrow;
    int garrow_resizable_buffer_resize(_GArrowResizableBuffer*, c_long, _GError**) @nogc nothrow;
    int garrow_resizable_buffer_reserve(_GArrowResizableBuffer*, c_long, _GError**) @nogc nothrow;
    struct __locale_struct
    {
        __locale_data*[13] __locales;
        const(ushort)* __ctype_b;
        const(int)* __ctype_tolower;
        const(int)* __ctype_toupper;
        const(char)*[13] __names;
    }
    c_ulong garrow_chunked_array_get_type() @nogc nothrow;
    struct _GArrowChunkedArrayClass{};
    alias GArrowChunkedArrayClass = _GArrowChunkedArrayClass;
    alias GArrowChunkedArray_autoptr = _GArrowChunkedArray*;
    static void glib_autoptr_cleanup_GArrowChunkedArray(_GArrowChunkedArray**) @nogc nothrow;
    static _GArrowChunkedArray* GARROW_CHUNKED_ARRAY(void*) @nogc nothrow;
    static _GArrowChunkedArrayClass* GARROW_CHUNKED_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_CHUNKED_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_CHUNKED_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowChunkedArrayClass* GARROW_CHUNKED_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowChunkedArray* garrow_chunked_array_new(_GList*) @nogc nothrow;
    int garrow_chunked_array_equal(_GArrowChunkedArray*, _GArrowChunkedArray*) @nogc nothrow;
    _GArrowDataType* garrow_chunked_array_get_value_data_type(_GArrowChunkedArray*) @nogc nothrow;
    GArrowType garrow_chunked_array_get_value_type(_GArrowChunkedArray*) @nogc nothrow;
    c_ulong garrow_chunked_array_get_length(_GArrowChunkedArray*) @nogc nothrow;
    c_ulong garrow_chunked_array_get_n_rows(_GArrowChunkedArray*) @nogc nothrow;
    c_ulong garrow_chunked_array_get_n_nulls(_GArrowChunkedArray*) @nogc nothrow;
    uint garrow_chunked_array_get_n_chunks(_GArrowChunkedArray*) @nogc nothrow;
    _GArrowArray* garrow_chunked_array_get_chunk(_GArrowChunkedArray*, uint) @nogc nothrow;
    _GList* garrow_chunked_array_get_chunks(_GArrowChunkedArray*) @nogc nothrow;
    _GArrowChunkedArray* garrow_chunked_array_slice(_GArrowChunkedArray*, c_ulong, c_ulong) @nogc nothrow;
    char* garrow_chunked_array_to_string(_GArrowChunkedArray*, _GError**) @nogc nothrow;
    alias GArrowCompressionType = _Anonymous_11;
    enum _Anonymous_11
    {
        GARROW_COMPRESSION_TYPE_UNCOMPRESSED = 0,
        GARROW_COMPRESSION_TYPE_SNAPPY = 1,
        GARROW_COMPRESSION_TYPE_GZIP = 2,
        GARROW_COMPRESSION_TYPE_BROTLI = 3,
        GARROW_COMPRESSION_TYPE_ZSTD = 4,
        GARROW_COMPRESSION_TYPE_LZ4 = 5,
        GARROW_COMPRESSION_TYPE_LZO = 6,
        GARROW_COMPRESSION_TYPE_BZ2 = 7,
    }
    enum GARROW_COMPRESSION_TYPE_UNCOMPRESSED = _Anonymous_11.GARROW_COMPRESSION_TYPE_UNCOMPRESSED;
    enum GARROW_COMPRESSION_TYPE_SNAPPY = _Anonymous_11.GARROW_COMPRESSION_TYPE_SNAPPY;
    enum GARROW_COMPRESSION_TYPE_GZIP = _Anonymous_11.GARROW_COMPRESSION_TYPE_GZIP;
    enum GARROW_COMPRESSION_TYPE_BROTLI = _Anonymous_11.GARROW_COMPRESSION_TYPE_BROTLI;
    enum GARROW_COMPRESSION_TYPE_ZSTD = _Anonymous_11.GARROW_COMPRESSION_TYPE_ZSTD;
    enum GARROW_COMPRESSION_TYPE_LZ4 = _Anonymous_11.GARROW_COMPRESSION_TYPE_LZ4;
    enum GARROW_COMPRESSION_TYPE_LZO = _Anonymous_11.GARROW_COMPRESSION_TYPE_LZO;
    enum GARROW_COMPRESSION_TYPE_BZ2 = _Anonymous_11.GARROW_COMPRESSION_TYPE_BZ2;
    alias __sig_atomic_t = int;
    alias GArrowCodecClass = _GArrowCodecClass;
    static _GArrowCodecClass* GARROW_CODEC_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_CODEC_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_CODEC(void*) @nogc nothrow;
    static _GArrowCodecClass* GARROW_CODEC_CLASS(void*) @nogc nothrow;
    static _GArrowCodec* GARROW_CODEC(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowCodec(_GArrowCodec**) @nogc nothrow;
    alias GArrowCodec_autoptr = _GArrowCodec*;
    struct _GArrowCodec
    {
        _GObject parent_instance;
    }
    struct _GArrowCodecClass{};
    alias GArrowCodec = _GArrowCodec;
    c_ulong garrow_codec_get_type() @nogc nothrow;
    _GArrowCodec* garrow_codec_new(GArrowCompressionType, _GError**) @nogc nothrow;
    const(char)* garrow_codec_get_name(_GArrowCodec*) @nogc nothrow;
    GArrowCompressionType garrow_codec_get_compression_type(_GArrowCodec*) @nogc nothrow;
    int garrow_codec_get_compression_level(_GArrowCodec*) @nogc nothrow;
    struct _GArrowListArrayClass
    {
        _GArrowArrayClass parent_class;
    }
    c_ulong garrow_list_array_get_type() @nogc nothrow;
    static int GARROW_IS_LIST_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowListArrayClass* GARROW_LIST_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static _GArrowListArrayClass* GARROW_LIST_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowListArray* GARROW_LIST_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowListArray(_GArrowListArray**) @nogc nothrow;
    alias GArrowListArray_autoptr = _GArrowListArray*;
    struct _GArrowListArray
    {
        _GArrowArray parent_instance;
    }
    alias GArrowListArrayClass = _GArrowListArrayClass;
    alias GArrowListArray = _GArrowListArray;
    static int GARROW_IS_LIST_ARRAY(void*) @nogc nothrow;
    _GArrowListArray* garrow_list_array_new(_GArrowDataType*, c_long, _GArrowBuffer*, _GArrowArray*, _GArrowBuffer*, c_long) @nogc nothrow;
    _GArrowDataType* garrow_list_array_get_value_type(_GArrowListArray*) @nogc nothrow;
    _GArrowArray* garrow_list_array_get_value(_GArrowListArray*, c_long) @nogc nothrow;
    _GArrowArray* garrow_list_array_get_values(_GArrowListArray*) @nogc nothrow;
    int garrow_list_array_get_value_offset(_GArrowListArray*, c_long) @nogc nothrow;
    int garrow_list_array_get_value_length(_GArrowListArray*, c_long) @nogc nothrow;
    const(int)* garrow_list_array_get_value_offsets(_GArrowListArray*, c_long*) @nogc nothrow;
    alias __socklen_t = uint;
    static _GArrowLargeListArray* GARROW_LARGE_LIST_ARRAY(void*) @nogc nothrow;
    static _GArrowLargeListArrayClass* GARROW_LARGE_LIST_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_LIST_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_LIST_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowLargeListArrayClass* GARROW_LARGE_LIST_ARRAY_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowLargeListArrayClass
    {
        _GArrowArrayClass parent_class;
    }
    struct _GArrowLargeListArray
    {
        _GArrowArray parent_instance;
    }
    alias GArrowLargeListArray_autoptr = _GArrowLargeListArray*;
    alias GArrowLargeListArrayClass = _GArrowLargeListArrayClass;
    alias GArrowLargeListArray = _GArrowLargeListArray;
    c_ulong garrow_large_list_array_get_type() @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowLargeListArray(_GArrowLargeListArray**) @nogc nothrow;
    _GArrowLargeListArray* garrow_large_list_array_new(_GArrowDataType*, c_long, _GArrowBuffer*, _GArrowArray*, _GArrowBuffer*, c_long) @nogc nothrow;
    _GArrowDataType* garrow_large_list_array_get_value_type(_GArrowLargeListArray*) @nogc nothrow;
    _GArrowArray* garrow_large_list_array_get_value(_GArrowLargeListArray*, c_long) @nogc nothrow;
    _GArrowArray* garrow_large_list_array_get_values(_GArrowLargeListArray*) @nogc nothrow;
    c_long garrow_large_list_array_get_value_offset(_GArrowLargeListArray*, c_long) @nogc nothrow;
    c_long garrow_large_list_array_get_value_length(_GArrowLargeListArray*, c_long) @nogc nothrow;
    const(c_long)* garrow_large_list_array_get_value_offsets(_GArrowLargeListArray*, c_long*) @nogc nothrow;
    struct _GArrowStructArrayClass{};
    c_ulong garrow_struct_array_get_type() @nogc nothrow;
    struct _GArrowStructArray{};
    alias GArrowStructArray = _GArrowStructArray;
    static _GArrowStructArrayClass* GARROW_STRUCT_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowStructArrayClass* GARROW_STRUCT_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_STRUCT_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_STRUCT_ARRAY(void*) @nogc nothrow;
    alias GArrowStructArrayClass = _GArrowStructArrayClass;
    static _GArrowStructArray* GARROW_STRUCT_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowStructArray(_GArrowStructArray**) @nogc nothrow;
    alias GArrowStructArray_autoptr = _GArrowStructArray*;
    _GArrowStructArray* garrow_struct_array_new(_GArrowDataType*, c_long, _GList*, _GArrowBuffer*, c_long) @nogc nothrow;
    _GArrowArray* garrow_struct_array_get_field(_GArrowStructArray*, int) @nogc nothrow;
    _GList* garrow_struct_array_get_fields(_GArrowStructArray*) @nogc nothrow;
    _GList* garrow_struct_array_flatten(_GArrowStructArray*, _GError**) @nogc nothrow;
    static _GArrowMapArray* GARROW_MAP_ARRAY(void*) @nogc nothrow;
    static _GArrowMapArrayClass* GARROW_MAP_ARRAY_GET_CLASS(void*) @nogc nothrow;
    c_ulong garrow_map_array_get_type() @nogc nothrow;
    struct _GArrowMapArray{};
    alias GArrowMapArray = _GArrowMapArray;
    struct _GArrowMapArrayClass{};
    alias GArrowMapArrayClass = _GArrowMapArrayClass;
    alias GArrowMapArray_autoptr = _GArrowMapArray*;
    static void glib_autoptr_cleanup_GArrowMapArray(_GArrowMapArray**) @nogc nothrow;
    static _GArrowMapArrayClass* GARROW_MAP_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_MAP_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_MAP_ARRAY_CLASS(void*) @nogc nothrow;
    _GArrowMapArray* garrow_map_array_new(_GArrowArray*, _GArrowArray*, _GArrowArray*, _GError**) @nogc nothrow;
    _GArrowArray* garrow_map_array_get_keys(_GArrowMapArray*) @nogc nothrow;
    _GArrowArray* garrow_map_array_get_items(_GArrowMapArray*) @nogc nothrow;
    alias __intptr_t = c_long;
    struct _GArrowUnionArrayClass
    {
        _GArrowArrayClass parent_class;
    }
    static _GArrowUnionArrayClass* GARROW_UNION_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UNION_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UNION_ARRAY(void*) @nogc nothrow;
    struct _GArrowUnionArray
    {
        _GArrowArray parent_instance;
    }
    static _GArrowUnionArray* GARROW_UNION_ARRAY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowUnionArray(_GArrowUnionArray**) @nogc nothrow;
    alias GArrowUnionArray_autoptr = _GArrowUnionArray*;
    alias GArrowUnionArrayClass = _GArrowUnionArrayClass;
    alias GArrowUnionArray = _GArrowUnionArray;
    c_ulong garrow_union_array_get_type() @nogc nothrow;
    static _GArrowUnionArrayClass* GARROW_UNION_ARRAY_CLASS(void*) @nogc nothrow;
    _GArrowArray* garrow_union_array_get_field(_GArrowUnionArray*, int) @nogc nothrow;
    c_ulong garrow_sparse_union_array_get_type() @nogc nothrow;
    struct _GArrowSparseUnionArray{};
    alias GArrowSparseUnionArray = _GArrowSparseUnionArray;
    struct _GArrowSparseUnionArrayClass{};
    alias GArrowSparseUnionArrayClass = _GArrowSparseUnionArrayClass;
    alias GArrowSparseUnionArray_autoptr = _GArrowSparseUnionArray*;
    static void glib_autoptr_cleanup_GArrowSparseUnionArray(_GArrowSparseUnionArray**) @nogc nothrow;
    static _GArrowSparseUnionArray* GARROW_SPARSE_UNION_ARRAY(void*) @nogc nothrow;
    static _GArrowSparseUnionArrayClass* GARROW_SPARSE_UNION_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_SPARSE_UNION_ARRAY(void*) @nogc nothrow;
    static int GARROW_IS_SPARSE_UNION_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowSparseUnionArrayClass* GARROW_SPARSE_UNION_ARRAY_GET_CLASS(void*) @nogc nothrow;
    _GArrowSparseUnionArray* garrow_sparse_union_array_new(_GArrowInt8Array*, _GList*, _GError**) @nogc nothrow;
    _GArrowSparseUnionArray* garrow_sparse_union_array_new_data_type(_GArrowSparseUnionDataType*, _GArrowInt8Array*, _GList*, _GError**) @nogc nothrow;
    alias __caddr_t = char*;
    alias GArrowDenseUnionArrayClass = _GArrowDenseUnionArrayClass;
    struct _GArrowDenseUnionArrayClass
    {
        _GArrowUnionArrayClass parent_class;
    }
    static _GArrowDenseUnionArrayClass* GARROW_DENSE_UNION_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DENSE_UNION_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DENSE_UNION_ARRAY(void*) @nogc nothrow;
    alias GArrowDenseUnionArray = _GArrowDenseUnionArray;
    struct _GArrowDenseUnionArray{};
    c_ulong garrow_dense_union_array_get_type() @nogc nothrow;
    static _GArrowDenseUnionArrayClass* GARROW_DENSE_UNION_ARRAY_CLASS(void*) @nogc nothrow;
    static _GArrowDenseUnionArray* GARROW_DENSE_UNION_ARRAY(void*) @nogc nothrow;
    alias GArrowDenseUnionArray_autoptr = _GArrowDenseUnionArray*;
    static void glib_autoptr_cleanup_GArrowDenseUnionArray(_GArrowDenseUnionArray**) @nogc nothrow;
    _GArrowDenseUnionArray* garrow_dense_union_array_new(_GArrowInt8Array*, _GArrowInt32Array*, _GList*, _GError**) @nogc nothrow;
    _GArrowDenseUnionArray* garrow_dense_union_array_new_data_type(_GArrowDenseUnionDataType*, _GArrowInt8Array*, _GArrowInt32Array*, _GList*, _GError**) @nogc nothrow;
    alias __loff_t = c_long;
    c_ulong garrow_dictionary_array_get_type() @nogc nothrow;
    struct _GArrowDictionaryArray{};
    alias GArrowDictionaryArray = _GArrowDictionaryArray;
    struct _GArrowDictionaryArrayClass
    {
        _GArrowArrayClass parent_class;
    }
    alias GArrowDictionaryArrayClass = _GArrowDictionaryArrayClass;
    alias GArrowDictionaryArray_autoptr = _GArrowDictionaryArray*;
    static void glib_autoptr_cleanup_GArrowDictionaryArray(_GArrowDictionaryArray**) @nogc nothrow;
    static _GArrowDictionaryArray* GARROW_DICTIONARY_ARRAY(void*) @nogc nothrow;
    static _GArrowDictionaryArrayClass* GARROW_DICTIONARY_ARRAY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DICTIONARY_ARRAY(void*) @nogc nothrow;
    static _GArrowDictionaryArrayClass* GARROW_DICTIONARY_ARRAY_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DICTIONARY_ARRAY_CLASS(void*) @nogc nothrow;
    _GArrowDictionaryArray* garrow_dictionary_array_new(_GArrowDataType*, _GArrowArray*, _GArrowArray*, _GError**) @nogc nothrow;
    _GArrowArray* garrow_dictionary_array_get_indices(_GArrowDictionaryArray*) @nogc nothrow;
    _GArrowArray* garrow_dictionary_array_get_dictionary(_GArrowDictionaryArray*) @nogc nothrow;
    _GArrowDictionaryDataType* garrow_dictionary_array_get_dictionary_data_type(_GArrowDictionaryArray*) @nogc nothrow;
    static int GARROW_IS_LIST_DATA_TYPE_CLASS(void*) @nogc nothrow;
    c_ulong garrow_list_data_type_get_type() @nogc nothrow;
    struct _GArrowListDataType{};
    alias GArrowListDataType = _GArrowListDataType;
    struct _GArrowListDataTypeClass{};
    alias GArrowListDataTypeClass = _GArrowListDataTypeClass;
    alias GArrowListDataType_autoptr = _GArrowListDataType*;
    static void glib_autoptr_cleanup_GArrowListDataType(_GArrowListDataType**) @nogc nothrow;
    static _GArrowListDataType* GARROW_LIST_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowListDataTypeClass* GARROW_LIST_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LIST_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowListDataTypeClass* GARROW_LIST_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    _GArrowListDataType* garrow_list_data_type_new(_GArrowField*) @nogc nothrow;
    _GArrowField* garrow_list_data_type_get_value_field(_GArrowListDataType*) @nogc nothrow;
    _GArrowField* garrow_list_data_type_get_field(_GArrowListDataType*) @nogc nothrow;
    alias __syscall_ulong_t = c_ulong;
    static _GArrowLargeListDataType* GARROW_LARGE_LIST_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowLargeListDataTypeClass* GARROW_LARGE_LIST_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_LIST_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowLargeListDataTypeClass* GARROW_LARGE_LIST_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LARGE_LIST_DATA_TYPE_CLASS(void*) @nogc nothrow;
    alias GArrowLargeListDataType_autoptr = _GArrowLargeListDataType*;
    struct _GArrowLargeListDataTypeClass
    {
        _GArrowDataTypeClass parent_class;
    }
    alias GArrowLargeListDataTypeClass = _GArrowLargeListDataTypeClass;
    alias GArrowLargeListDataType = _GArrowLargeListDataType;
    struct _GArrowLargeListDataType{};
    c_ulong garrow_large_list_data_type_get_type() @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowLargeListDataType(_GArrowLargeListDataType**) @nogc nothrow;
    _GArrowLargeListDataType* garrow_large_list_data_type_new(_GArrowField*) @nogc nothrow;
    _GArrowField* garrow_large_list_data_type_get_field(_GArrowLargeListDataType*) @nogc nothrow;
    c_ulong garrow_struct_data_type_get_type() @nogc nothrow;
    struct _GArrowStructDataType{};
    alias GArrowStructDataType = _GArrowStructDataType;
    struct _GArrowStructDataTypeClass{};
    alias GArrowStructDataTypeClass = _GArrowStructDataTypeClass;
    static void glib_autoptr_cleanup_GArrowStructDataType(_GArrowStructDataType**) @nogc nothrow;
    static _GArrowStructDataType* GARROW_STRUCT_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowStructDataTypeClass* GARROW_STRUCT_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_STRUCT_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_STRUCT_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowStructDataTypeClass* GARROW_STRUCT_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    alias GArrowStructDataType_autoptr = _GArrowStructDataType*;
    _GArrowStructDataType* garrow_struct_data_type_new(_GList*) @nogc nothrow;
    int garrow_struct_data_type_get_n_fields(_GArrowStructDataType*) @nogc nothrow;
    _GList* garrow_struct_data_type_get_fields(_GArrowStructDataType*) @nogc nothrow;
    _GArrowField* garrow_struct_data_type_get_field(_GArrowStructDataType*, int) @nogc nothrow;
    _GArrowField* garrow_struct_data_type_get_field_by_name(_GArrowStructDataType*, const(char)*) @nogc nothrow;
    int garrow_struct_data_type_get_field_index(_GArrowStructDataType*, const(char)*) @nogc nothrow;
    static _GArrowMapDataTypeClass* GARROW_MAP_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static _GArrowMapDataTypeClass* GARROW_MAP_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowMapDataType* GARROW_MAP_DATA_TYPE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowMapDataType(_GArrowMapDataType**) @nogc nothrow;
    alias GArrowMapDataType_autoptr = _GArrowMapDataType*;
    struct _GArrowMapDataType
    {
        _GArrowListDataType parent_instance;
    }
    alias GArrowMapDataTypeClass = _GArrowMapDataTypeClass;
    struct _GArrowMapDataTypeClass{};
    alias GArrowMapDataType = _GArrowMapDataType;
    static int GARROW_IS_MAP_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_MAP_DATA_TYPE(void*) @nogc nothrow;
    c_ulong garrow_map_data_type_get_type() @nogc nothrow;
    _GArrowMapDataType* garrow_map_data_type_new(_GArrowDataType*, _GArrowDataType*) @nogc nothrow;
    _GArrowDataType* garrow_map_data_type_get_key_type(_GArrowMapDataType*) @nogc nothrow;
    _GArrowDataType* garrow_map_data_type_get_item_type(_GArrowMapDataType*) @nogc nothrow;
    alias __syscall_slong_t = c_long;
    c_ulong garrow_union_data_type_get_type() @nogc nothrow;
    struct _GArrowUnionDataType{};
    alias GArrowUnionDataType = _GArrowUnionDataType;
    struct _GArrowUnionDataTypeClass{};
    alias GArrowUnionDataTypeClass = _GArrowUnionDataTypeClass;
    alias GArrowUnionDataType_autoptr = _GArrowUnionDataType*;
    static void glib_autoptr_cleanup_GArrowUnionDataType(_GArrowUnionDataType**) @nogc nothrow;
    static _GArrowUnionDataType* GARROW_UNION_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowUnionDataTypeClass* GARROW_UNION_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UNION_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowUnionDataTypeClass* GARROW_UNION_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_UNION_DATA_TYPE_CLASS(void*) @nogc nothrow;
    int garrow_union_data_type_get_n_fields(_GArrowUnionDataType*) @nogc nothrow;
    _GList* garrow_union_data_type_get_fields(_GArrowUnionDataType*) @nogc nothrow;
    _GArrowField* garrow_union_data_type_get_field(_GArrowUnionDataType*, int) @nogc nothrow;
    byte* garrow_union_data_type_get_type_codes(_GArrowUnionDataType*, c_ulong*) @nogc nothrow;
    c_ulong garrow_sparse_union_data_type_get_type() @nogc nothrow;
    struct _GArrowSparseUnionDataType{};
    alias GArrowSparseUnionDataType = _GArrowSparseUnionDataType;
    static void glib_autoptr_cleanup_GArrowSparseUnionDataType(_GArrowSparseUnionDataType**) @nogc nothrow;
    alias GArrowSparseUnionDataTypeClass = _GArrowSparseUnionDataTypeClass;
    alias GArrowSparseUnionDataType_autoptr = _GArrowSparseUnionDataType*;
    static _GArrowSparseUnionDataType* GARROW_SPARSE_UNION_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowSparseUnionDataTypeClass* GARROW_SPARSE_UNION_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_SPARSE_UNION_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_SPARSE_UNION_DATA_TYPE_CLASS(void*) @nogc nothrow;
    struct _GArrowSparseUnionDataTypeClass
    {
        _GArrowUnionDataTypeClass parent_class;
    }
    static _GArrowSparseUnionDataTypeClass* GARROW_SPARSE_UNION_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    _GArrowSparseUnionDataType* garrow_sparse_union_data_type_new(_GList*, byte*, c_ulong) @nogc nothrow;
    static int GARROW_IS_DENSE_UNION_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowDenseUnionDataTypeClass* GARROW_DENSE_UNION_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DENSE_UNION_DATA_TYPE_CLASS(void*) @nogc nothrow;
    c_ulong garrow_dense_union_data_type_get_type() @nogc nothrow;
    struct _GArrowDenseUnionDataType{};
    alias GArrowDenseUnionDataType = _GArrowDenseUnionDataType;
    struct _GArrowDenseUnionDataTypeClass{};
    alias GArrowDenseUnionDataTypeClass = _GArrowDenseUnionDataTypeClass;
    alias GArrowDenseUnionDataType_autoptr = _GArrowDenseUnionDataType*;
    static void glib_autoptr_cleanup_GArrowDenseUnionDataType(_GArrowDenseUnionDataType**) @nogc nothrow;
    static _GArrowDenseUnionDataType* GARROW_DENSE_UNION_DATA_TYPE(void*) @nogc nothrow;
    static _GArrowDenseUnionDataTypeClass* GARROW_DENSE_UNION_DATA_TYPE_CLASS(void*) @nogc nothrow;
    _GArrowDenseUnionDataType* garrow_dense_union_data_type_new(_GList*, byte*, c_ulong) @nogc nothrow;
    alias __ssize_t = c_long;
    static int GARROW_IS_DICTIONARY_DATA_TYPE(void*) @nogc nothrow;
    static int GARROW_IS_DICTIONARY_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowDictionaryDataTypeClass* GARROW_DICTIONARY_DATA_TYPE_CLASS(void*) @nogc nothrow;
    static _GArrowDictionaryDataType* GARROW_DICTIONARY_DATA_TYPE(void*) @nogc nothrow;
    struct _GArrowDictionaryDataTypeClass
    {
        _GArrowFixedWidthDataTypeClass parent_class;
    }
    static _GArrowDictionaryDataTypeClass* GARROW_DICTIONARY_DATA_TYPE_GET_CLASS(void*) @nogc nothrow;
    alias GArrowDictionaryDataType_autoptr = _GArrowDictionaryDataType*;
    alias GArrowDictionaryDataTypeClass = _GArrowDictionaryDataTypeClass;
    struct _GArrowDictionaryDataType
    {
        _GArrowFixedWidthDataType parent_instance;
    }
    alias GArrowDictionaryDataType = _GArrowDictionaryDataType;
    c_ulong garrow_dictionary_data_type_get_type() @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowDictionaryDataType(_GArrowDictionaryDataType**) @nogc nothrow;
    _GArrowDictionaryDataType* garrow_dictionary_data_type_new(_GArrowDataType*, _GArrowDataType*, int) @nogc nothrow;
    _GArrowDataType* garrow_dictionary_data_type_get_index_data_type(_GArrowDictionaryDataType*) @nogc nothrow;
    _GArrowDataType* garrow_dictionary_data_type_get_value_data_type(_GArrowDictionaryDataType*) @nogc nothrow;
    int garrow_dictionary_data_type_is_ordered(_GArrowDictionaryDataType*) @nogc nothrow;
    static int GARROW_IS_EXECUTE_CONTEXT(void*) @nogc nothrow;
    c_ulong garrow_execute_context_get_type() @nogc nothrow;
    struct _GArrowExecuteContext{};
    alias GArrowExecuteContext = _GArrowExecuteContext;
    struct _GArrowExecuteContextClass{};
    alias GArrowExecuteContextClass = _GArrowExecuteContextClass;
    alias GArrowExecuteContext_autoptr = _GArrowExecuteContext*;
    static void glib_autoptr_cleanup_GArrowExecuteContext(_GArrowExecuteContext**) @nogc nothrow;
    static _GArrowExecuteContext* GARROW_EXECUTE_CONTEXT(void*) @nogc nothrow;
    static _GArrowExecuteContextClass* GARROW_EXECUTE_CONTEXT_CLASS(void*) @nogc nothrow;
    static _GArrowExecuteContextClass* GARROW_EXECUTE_CONTEXT_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_EXECUTE_CONTEXT_CLASS(void*) @nogc nothrow;
    _GArrowExecuteContext* garrow_execute_context_new() @nogc nothrow;
    struct _GArrowFunctionOptions{};
    alias GArrowFunctionOptions = _GArrowFunctionOptions;
    struct _GArrowFunctionOptionsInterface{};
    alias GArrowFunctionOptionsInterface = _GArrowFunctionOptionsInterface;
    alias GArrowFunctionOptions_autoptr = _GArrowFunctionOptions*;
    static void glib_autoptr_cleanup_GArrowFunctionOptions(_GArrowFunctionOptions**) @nogc nothrow;
    static _GArrowFunctionOptions* GARROW_FUNCTION_OPTIONS(void*) @nogc nothrow;
    static int GARROW_IS_FUNCTION_OPTIONS(void*) @nogc nothrow;
    static _GArrowFunctionOptionsInterface* GARROW_FUNCTION_OPTIONS_GET_IFACE(void*) @nogc nothrow;
    c_ulong garrow_function_options_get_type() @nogc nothrow;
    alias __fsword_t = c_long;
    static _GArrowFunctionClass* GARROW_FUNCTION_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowFunctionClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowFunctionClass* GARROW_FUNCTION_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FUNCTION_CLASS(void*) @nogc nothrow;
    c_ulong garrow_function_get_type() @nogc nothrow;
    struct _GArrowFunction{};
    alias GArrowFunction = _GArrowFunction;
    alias GArrowFunctionClass = _GArrowFunctionClass;
    alias GArrowFunction_autoptr = _GArrowFunction*;
    static void glib_autoptr_cleanup_GArrowFunction(_GArrowFunction**) @nogc nothrow;
    static _GArrowFunction* GARROW_FUNCTION(void*) @nogc nothrow;
    static int GARROW_IS_FUNCTION(void*) @nogc nothrow;
    _GArrowFunction* garrow_function_find(const(char)*) @nogc nothrow;
    _GArrowDatum* garrow_function_execute(_GArrowFunction*, _GList*, _GArrowFunctionOptions*, _GArrowExecuteContext*, _GError**) @nogc nothrow;
    c_ulong garrow_cast_options_get_type() @nogc nothrow;
    struct _GArrowCastOptions{};
    alias GArrowCastOptions = _GArrowCastOptions;
    struct _GArrowCastOptionsClass{};
    alias GArrowCastOptionsClass = _GArrowCastOptionsClass;
    alias GArrowCastOptions_autoptr = _GArrowCastOptions*;
    static void glib_autoptr_cleanup_GArrowCastOptions(_GArrowCastOptions**) @nogc nothrow;
    static _GArrowCastOptions* GARROW_CAST_OPTIONS(void*) @nogc nothrow;
    static _GArrowCastOptionsClass* GARROW_CAST_OPTIONS_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_CAST_OPTIONS(void*) @nogc nothrow;
    static int GARROW_IS_CAST_OPTIONS_CLASS(void*) @nogc nothrow;
    static _GArrowCastOptionsClass* GARROW_CAST_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    _GArrowCastOptions* garrow_cast_options_new() @nogc nothrow;
    alias GArrowCountMode = _Anonymous_12;
    enum _Anonymous_12
    {
        GARROW_COUNT_ALL = 0,
        GARROW_COUNT_NULL = 1,
    }
    enum GARROW_COUNT_ALL = _Anonymous_12.GARROW_COUNT_ALL;
    enum GARROW_COUNT_NULL = _Anonymous_12.GARROW_COUNT_NULL;
    c_ulong garrow_count_options_get_type() @nogc nothrow;
    struct _GArrowCountOptions{};
    alias GArrowCountOptions = _GArrowCountOptions;
    struct _GArrowCountOptionsClass{};
    alias GArrowCountOptionsClass = _GArrowCountOptionsClass;
    static void glib_autoptr_cleanup_GArrowCountOptions(_GArrowCountOptions**) @nogc nothrow;
    alias GArrowCountOptions_autoptr = _GArrowCountOptions*;
    static _GArrowCountOptions* GARROW_COUNT_OPTIONS(void*) @nogc nothrow;
    static _GArrowCountOptionsClass* GARROW_COUNT_OPTIONS_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_COUNT_OPTIONS(void*) @nogc nothrow;
    static int GARROW_IS_COUNT_OPTIONS_CLASS(void*) @nogc nothrow;
    static _GArrowCountOptionsClass* GARROW_COUNT_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    _GArrowCountOptions* garrow_count_options_new() @nogc nothrow;
    alias GArrowFilterNullSelectionBehavior = _Anonymous_13;
    enum _Anonymous_13
    {
        GARROW_FILTER_NULL_SELECTION_DROP = 0,
        GARROW_FILTER_NULL_SELECTION_EMIT_NULL = 1,
    }
    enum GARROW_FILTER_NULL_SELECTION_DROP = _Anonymous_13.GARROW_FILTER_NULL_SELECTION_DROP;
    enum GARROW_FILTER_NULL_SELECTION_EMIT_NULL = _Anonymous_13.GARROW_FILTER_NULL_SELECTION_EMIT_NULL;
    alias __fsfilcnt64_t = c_ulong;
    static _GArrowFilterOptionsClass* GARROW_FILTER_OPTIONS_CLASS(void*) @nogc nothrow;
    c_ulong garrow_filter_options_get_type() @nogc nothrow;
    struct _GArrowFilterOptions{};
    alias GArrowFilterOptions = _GArrowFilterOptions;
    struct _GArrowFilterOptionsClass{};
    alias GArrowFilterOptionsClass = _GArrowFilterOptionsClass;
    static void glib_autoptr_cleanup_GArrowFilterOptions(_GArrowFilterOptions**) @nogc nothrow;
    alias GArrowFilterOptions_autoptr = _GArrowFilterOptions*;
    static _GArrowFilterOptions* GARROW_FILTER_OPTIONS(void*) @nogc nothrow;
    static int GARROW_IS_FILTER_OPTIONS(void*) @nogc nothrow;
    static int GARROW_IS_FILTER_OPTIONS_CLASS(void*) @nogc nothrow;
    static _GArrowFilterOptionsClass* GARROW_FILTER_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    _GArrowFilterOptions* garrow_filter_options_new() @nogc nothrow;
    c_ulong garrow_take_options_get_type() @nogc nothrow;
    struct _GArrowTakeOptions{};
    alias GArrowTakeOptions = _GArrowTakeOptions;
    struct _GArrowTakeOptionsClass{};
    alias GArrowTakeOptionsClass = _GArrowTakeOptionsClass;
    alias GArrowTakeOptions_autoptr = _GArrowTakeOptions*;
    static void glib_autoptr_cleanup_GArrowTakeOptions(_GArrowTakeOptions**) @nogc nothrow;
    static _GArrowTakeOptions* GARROW_TAKE_OPTIONS(void*) @nogc nothrow;
    static int GARROW_IS_TAKE_OPTIONS(void*) @nogc nothrow;
    static int GARROW_IS_TAKE_OPTIONS_CLASS(void*) @nogc nothrow;
    static _GArrowTakeOptionsClass* GARROW_TAKE_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    static _GArrowTakeOptionsClass* GARROW_TAKE_OPTIONS_CLASS(void*) @nogc nothrow;
    _GArrowTakeOptions* garrow_take_options_new() @nogc nothrow;
    alias GArrowCompareOperator = _Anonymous_14;
    enum _Anonymous_14
    {
        GARROW_COMPARE_EQUAL = 0,
        GARROW_COMPARE_NOT_EQUAL = 1,
        GARROW_COMPARE_GREATER = 2,
        GARROW_COMPARE_GREATER_EQUAL = 3,
        GARROW_COMPARE_LESS = 4,
        GARROW_COMPARE_LESS_EQUAL = 5,
    }
    enum GARROW_COMPARE_EQUAL = _Anonymous_14.GARROW_COMPARE_EQUAL;
    enum GARROW_COMPARE_NOT_EQUAL = _Anonymous_14.GARROW_COMPARE_NOT_EQUAL;
    enum GARROW_COMPARE_GREATER = _Anonymous_14.GARROW_COMPARE_GREATER;
    enum GARROW_COMPARE_GREATER_EQUAL = _Anonymous_14.GARROW_COMPARE_GREATER_EQUAL;
    enum GARROW_COMPARE_LESS = _Anonymous_14.GARROW_COMPARE_LESS;
    enum GARROW_COMPARE_LESS_EQUAL = _Anonymous_14.GARROW_COMPARE_LESS_EQUAL;
    struct _GArrowCompareOptions{};
    alias GArrowCompareOptions = _GArrowCompareOptions;
    struct _GArrowCompareOptionsClass{};
    alias GArrowCompareOptionsClass = _GArrowCompareOptionsClass;
    alias GArrowCompareOptions_autoptr = _GArrowCompareOptions*;
    static void glib_autoptr_cleanup_GArrowCompareOptions(_GArrowCompareOptions**) @nogc nothrow;
    static _GArrowCompareOptions* GARROW_COMPARE_OPTIONS(void*) @nogc nothrow;
    static _GArrowCompareOptionsClass* GARROW_COMPARE_OPTIONS_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_COMPARE_OPTIONS(void*) @nogc nothrow;
    static int GARROW_IS_COMPARE_OPTIONS_CLASS(void*) @nogc nothrow;
    static _GArrowCompareOptionsClass* GARROW_COMPARE_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    c_ulong garrow_compare_options_get_type() @nogc nothrow;
    _GArrowCompareOptions* garrow_compare_options_new() @nogc nothrow;
    alias GArrowSortOrder = _Anonymous_15;
    enum _Anonymous_15
    {
        GARROW_SORT_ORDER_ASCENDING = 0,
        GARROW_SORT_ORDER_DESCENDING = 1,
    }
    enum GARROW_SORT_ORDER_ASCENDING = _Anonymous_15.GARROW_SORT_ORDER_ASCENDING;
    enum GARROW_SORT_ORDER_DESCENDING = _Anonymous_15.GARROW_SORT_ORDER_DESCENDING;
    alias __fsfilcnt_t = c_ulong;
    static _GArrowArraySortOptions* GARROW_ARRAY_SORT_OPTIONS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowArraySortOptions(_GArrowArraySortOptions**) @nogc nothrow;
    alias GArrowArraySortOptions_autoptr = _GArrowArraySortOptions*;
    struct _GArrowArraySortOptions
    {
        _GObject parent_instance;
    }
    struct _GArrowArraySortOptionsClass
    {
        _GObjectClass parent_class;
    }
    static int GARROW_IS_ARRAY_SORT_OPTIONS(void*) @nogc nothrow;
    alias GArrowArraySortOptionsClass = _GArrowArraySortOptionsClass;
    static int GARROW_IS_ARRAY_SORT_OPTIONS_CLASS(void*) @nogc nothrow;
    static _GArrowArraySortOptionsClass* GARROW_ARRAY_SORT_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    static _GArrowArraySortOptionsClass* GARROW_ARRAY_SORT_OPTIONS_CLASS(void*) @nogc nothrow;
    c_ulong garrow_array_sort_options_get_type() @nogc nothrow;
    alias GArrowArraySortOptions = _GArrowArraySortOptions;
    _GArrowArraySortOptions* garrow_array_sort_options_new(GArrowSortOrder) @nogc nothrow;
    int garrow_array_sort_options_equal(_GArrowArraySortOptions*, _GArrowArraySortOptions*) @nogc nothrow;
    static int GARROW_IS_SORT_KEY_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_SORT_KEY(void*) @nogc nothrow;
    static _GArrowSortKeyClass* GARROW_SORT_KEY_CLASS(void*) @nogc nothrow;
    static _GArrowSortKey* GARROW_SORT_KEY(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowSortKey(_GArrowSortKey**) @nogc nothrow;
    static _GArrowSortKeyClass* GARROW_SORT_KEY_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowSortKeyClass
    {
        _GObjectClass parent_class;
    }
    alias GArrowSortKey_autoptr = _GArrowSortKey*;
    struct _GArrowSortKey
    {
        _GObject parent_instance;
    }
    alias GArrowSortKeyClass = _GArrowSortKeyClass;
    alias GArrowSortKey = _GArrowSortKey;
    c_ulong garrow_sort_key_get_type() @nogc nothrow;
    _GArrowSortKey* garrow_sort_key_new(const(char)*, GArrowSortOrder) @nogc nothrow;
    int garrow_sort_key_equal(_GArrowSortKey*, _GArrowSortKey*) @nogc nothrow;
    struct _GArrowSortOptionsClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowSortOptionsClass* GARROW_SORT_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowSortOptions(_GArrowSortOptions**) @nogc nothrow;
    static int GARROW_IS_SORT_OPTIONS(void*) @nogc nothrow;
    static _GArrowSortOptionsClass* GARROW_SORT_OPTIONS_CLASS(void*) @nogc nothrow;
    static _GArrowSortOptions* GARROW_SORT_OPTIONS(void*) @nogc nothrow;
    alias GArrowSortOptions_autoptr = _GArrowSortOptions*;
    struct _GArrowSortOptions
    {
        _GObject parent_instance;
    }
    alias GArrowSortOptionsClass = _GArrowSortOptionsClass;
    alias GArrowSortOptions = _GArrowSortOptions;
    c_ulong garrow_sort_options_get_type() @nogc nothrow;
    static int GARROW_IS_SORT_OPTIONS_CLASS(void*) @nogc nothrow;
    _GArrowSortOptions* garrow_sort_options_new(_GList*) @nogc nothrow;
    int garrow_sort_options_equal(_GArrowSortOptions*, _GArrowSortOptions*) @nogc nothrow;
    _GList* garrow_sort_options_get_sort_keys(_GArrowSortOptions*) @nogc nothrow;
    void garrow_sort_options_set_sort_keys(_GArrowSortOptions*, _GList*) @nogc nothrow;
    void garrow_sort_options_add_sort_key(_GArrowSortOptions*, _GArrowSortKey*) @nogc nothrow;
    _GArrowArray* garrow_array_cast(_GArrowArray*, _GArrowDataType*, _GArrowCastOptions*, _GError**) @nogc nothrow;
    _GArrowArray* garrow_array_unique(_GArrowArray*, _GError**) @nogc nothrow;
    _GArrowDictionaryArray* garrow_array_dictionary_encode(_GArrowArray*, _GError**) @nogc nothrow;
    c_long garrow_array_count(_GArrowArray*, _GArrowCountOptions*, _GError**) @nogc nothrow;
    _GArrowStructArray* garrow_array_count_values(_GArrowArray*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_boolean_array_invert(_GArrowBooleanArray*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_boolean_array_and(_GArrowBooleanArray*, _GArrowBooleanArray*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_boolean_array_or(_GArrowBooleanArray*, _GArrowBooleanArray*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_boolean_array_xor(_GArrowBooleanArray*, _GArrowBooleanArray*, _GError**) @nogc nothrow;
    double garrow_numeric_array_mean(_GArrowNumericArray*, _GError**) @nogc nothrow;
    c_long garrow_int8_array_sum(_GArrowInt8Array*, _GError**) @nogc nothrow;
    c_ulong garrow_uint8_array_sum(_GArrowUInt8Array*, _GError**) @nogc nothrow;
    c_long garrow_int16_array_sum(_GArrowInt16Array*, _GError**) @nogc nothrow;
    c_ulong garrow_uint16_array_sum(_GArrowUInt16Array*, _GError**) @nogc nothrow;
    c_long garrow_int32_array_sum(_GArrowInt32Array*, _GError**) @nogc nothrow;
    c_ulong garrow_uint32_array_sum(_GArrowUInt32Array*, _GError**) @nogc nothrow;
    c_long garrow_int64_array_sum(_GArrowInt64Array*, _GError**) @nogc nothrow;
    c_ulong garrow_uint64_array_sum(_GArrowUInt64Array*, _GError**) @nogc nothrow;
    double garrow_float_array_sum(_GArrowFloatArray*, _GError**) @nogc nothrow;
    double garrow_double_array_sum(_GArrowDoubleArray*, _GError**) @nogc nothrow;
    _GArrowArray* garrow_array_take(_GArrowArray*, _GArrowArray*, _GArrowTakeOptions*, _GError**) @nogc nothrow;
    _GArrowChunkedArray* garrow_array_take_chunked_array(_GArrowArray*, _GArrowChunkedArray*, _GArrowTakeOptions*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_take(_GArrowTable*, _GArrowArray*, _GArrowTakeOptions*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_take_chunked_array(_GArrowTable*, _GArrowChunkedArray*, _GArrowTakeOptions*, _GError**) @nogc nothrow;
    _GArrowChunkedArray* garrow_chunked_array_take(_GArrowChunkedArray*, _GArrowArray*, _GArrowTakeOptions*, _GError**) @nogc nothrow;
    _GArrowChunkedArray* garrow_chunked_array_take_chunked_array(_GArrowChunkedArray*, _GArrowChunkedArray*, _GArrowTakeOptions*, _GError**) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_take(_GArrowRecordBatch*, _GArrowArray*, _GArrowTakeOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_int8_array_compare(_GArrowInt8Array*, byte, _GArrowCompareOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_uint8_array_compare(_GArrowUInt8Array*, ubyte, _GArrowCompareOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_int16_array_compare(_GArrowInt16Array*, short, _GArrowCompareOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_uint16_array_compare(_GArrowUInt16Array*, ushort, _GArrowCompareOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_int32_array_compare(_GArrowInt32Array*, int, _GArrowCompareOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_uint32_array_compare(_GArrowUInt32Array*, uint, _GArrowCompareOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_int64_array_compare(_GArrowInt64Array*, c_long, _GArrowCompareOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_uint64_array_compare(_GArrowUInt64Array*, c_ulong, _GArrowCompareOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_float_array_compare(_GArrowFloatArray*, float, _GArrowCompareOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_double_array_compare(_GArrowDoubleArray*, double, _GArrowCompareOptions*, _GError**) @nogc nothrow;
    _GArrowArray* garrow_array_filter(_GArrowArray*, _GArrowBooleanArray*, _GArrowFilterOptions*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_array_is_in(_GArrowArray*, _GArrowArray*, _GError**) @nogc nothrow;
    _GArrowBooleanArray* garrow_array_is_in_chunked_array(_GArrowArray*, _GArrowChunkedArray*, _GError**) @nogc nothrow;
    _GArrowUInt64Array* garrow_array_sort_indices(_GArrowArray*, GArrowSortOrder, _GError**) @nogc nothrow;
    _GArrowUInt64Array* garrow_array_sort_to_indices(_GArrowArray*, _GError**) @nogc nothrow;
    _GArrowUInt64Array* garrow_chunked_array_sort_indices(_GArrowChunkedArray*, GArrowSortOrder, _GError**) @nogc nothrow;
    _GArrowUInt64Array* garrow_record_batch_sort_indices(_GArrowRecordBatch*, _GArrowSortOptions*, _GError**) @nogc nothrow;
    _GArrowUInt64Array* garrow_table_sort_indices(_GArrowTable*, _GArrowSortOptions*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_filter(_GArrowTable*, _GArrowBooleanArray*, _GArrowFilterOptions*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_filter_chunked_array(_GArrowTable*, _GArrowChunkedArray*, _GArrowFilterOptions*, _GError**) @nogc nothrow;
    _GArrowChunkedArray* garrow_chunked_array_filter(_GArrowChunkedArray*, _GArrowBooleanArray*, _GArrowFilterOptions*, _GError**) @nogc nothrow;
    _GArrowChunkedArray* garrow_chunked_array_filter_chunked_array(_GArrowChunkedArray*, _GArrowChunkedArray*, _GArrowFilterOptions*, _GError**) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_filter(_GArrowRecordBatch*, _GArrowBooleanArray*, _GArrowFilterOptions*, _GError**) @nogc nothrow;
    alias __fsblkcnt64_t = c_ulong;
    alias GArrowDatumClass = _GArrowDatumClass;
    struct _GArrowDatum
    {
        _GObject parent_instance;
    }
    alias GArrowDatum_autoptr = _GArrowDatum*;
    static void glib_autoptr_cleanup_GArrowDatum(_GArrowDatum**) @nogc nothrow;
    static _GArrowDatum* GARROW_DATUM(void*) @nogc nothrow;
    static _GArrowDatumClass* GARROW_DATUM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DATUM(void*) @nogc nothrow;
    static int GARROW_IS_DATUM_CLASS(void*) @nogc nothrow;
    c_ulong garrow_datum_get_type() @nogc nothrow;
    alias GArrowDatum = _GArrowDatum;
    static _GArrowDatumClass* GARROW_DATUM_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowDatumClass
    {
        _GObjectClass parent_class;
    }
    int garrow_datum_is_array(_GArrowDatum*) @nogc nothrow;
    int garrow_datum_is_array_like(_GArrowDatum*) @nogc nothrow;
    int garrow_datum_equal(_GArrowDatum*, _GArrowDatum*) @nogc nothrow;
    char* garrow_datum_to_string(_GArrowDatum*) @nogc nothrow;
    c_ulong garrow_array_datum_get_type() @nogc nothrow;
    struct _GArrowArrayDatum{};
    alias GArrowArrayDatum = _GArrowArrayDatum;
    struct _GArrowArrayDatumClass{};
    alias GArrowArrayDatumClass = _GArrowArrayDatumClass;
    alias GArrowArrayDatum_autoptr = _GArrowArrayDatum*;
    static void glib_autoptr_cleanup_GArrowArrayDatum(_GArrowArrayDatum**) @nogc nothrow;
    static _GArrowArrayDatum* GARROW_ARRAY_DATUM(void*) @nogc nothrow;
    static _GArrowArrayDatumClass* GARROW_ARRAY_DATUM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_ARRAY_DATUM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_ARRAY_DATUM(void*) @nogc nothrow;
    static _GArrowArrayDatumClass* GARROW_ARRAY_DATUM_GET_CLASS(void*) @nogc nothrow;
    _GArrowArrayDatum* garrow_array_datum_new(_GArrowArray*) @nogc nothrow;
    c_ulong garrow_chunked_array_datum_get_type() @nogc nothrow;
    struct _GArrowChunkedArrayDatum{};
    alias GArrowChunkedArrayDatum = _GArrowChunkedArrayDatum;
    struct _GArrowChunkedArrayDatumClass{};
    alias GArrowChunkedArrayDatumClass = _GArrowChunkedArrayDatumClass;
    alias GArrowChunkedArrayDatum_autoptr = _GArrowChunkedArrayDatum*;
    static void glib_autoptr_cleanup_GArrowChunkedArrayDatum(_GArrowChunkedArrayDatum**) @nogc nothrow;
    static _GArrowChunkedArrayDatum* GARROW_CHUNKED_ARRAY_DATUM(void*) @nogc nothrow;
    static _GArrowChunkedArrayDatumClass* GARROW_CHUNKED_ARRAY_DATUM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_CHUNKED_ARRAY_DATUM(void*) @nogc nothrow;
    static int GARROW_IS_CHUNKED_ARRAY_DATUM_CLASS(void*) @nogc nothrow;
    static _GArrowChunkedArrayDatumClass* GARROW_CHUNKED_ARRAY_DATUM_GET_CLASS(void*) @nogc nothrow;
    _GArrowChunkedArrayDatum* garrow_chunked_array_datum_new(_GArrowChunkedArray*) @nogc nothrow;
    alias __fsblkcnt_t = c_ulong;
    static _GArrowRecordBatchDatumClass* GARROW_RECORD_BATCH_DATUM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_RECORD_BATCH_DATUM(void*) @nogc nothrow;
    static _GArrowRecordBatchDatumClass* GARROW_RECORD_BATCH_DATUM_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_RECORD_BATCH_DATUM_CLASS(void*) @nogc nothrow;
    struct _GArrowRecordBatchDatumClass
    {
        _GArrowDatumClass parent_class;
    }
    static _GArrowRecordBatchDatum* GARROW_RECORD_BATCH_DATUM(void*) @nogc nothrow;
    alias GArrowRecordBatchDatum_autoptr = _GArrowRecordBatchDatum*;
    struct _GArrowRecordBatchDatum
    {
        _GArrowDatum parent_instance;
    }
    alias GArrowRecordBatchDatumClass = _GArrowRecordBatchDatumClass;
    static void glib_autoptr_cleanup_GArrowRecordBatchDatum(_GArrowRecordBatchDatum**) @nogc nothrow;
    alias GArrowRecordBatchDatum = _GArrowRecordBatchDatum;
    c_ulong garrow_record_batch_datum_get_type() @nogc nothrow;
    _GArrowRecordBatchDatum* garrow_record_batch_datum_new(_GArrowRecordBatch*) @nogc nothrow;
    alias GArrowTableDatum_autoptr = _GArrowTableDatum*;
    c_ulong garrow_table_datum_get_type() @nogc nothrow;
    struct _GArrowTableDatum{};
    alias GArrowTableDatum = _GArrowTableDatum;
    struct _GArrowTableDatumClass{};
    alias GArrowTableDatumClass = _GArrowTableDatumClass;
    static _GArrowTableDatumClass* GARROW_TABLE_DATUM_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TABLE_DATUM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TABLE_DATUM(void*) @nogc nothrow;
    static _GArrowTableDatum* GARROW_TABLE_DATUM(void*) @nogc nothrow;
    static _GArrowTableDatumClass* GARROW_TABLE_DATUM_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowTableDatum(_GArrowTableDatum**) @nogc nothrow;
    _GArrowTableDatum* garrow_table_datum_new(_GArrowTable*) @nogc nothrow;
    struct _GArrowDecimal128{};
    static int GARROW_IS_DECIMAL128(void*) @nogc nothrow;
    static _GArrowDecimal128Class* GARROW_DECIMAL128_CLASS(void*) @nogc nothrow;
    static _GArrowDecimal128* GARROW_DECIMAL128(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowDecimal128(_GArrowDecimal128**) @nogc nothrow;
    alias GArrowDecimal128_autoptr = _GArrowDecimal128*;
    static int GARROW_IS_DECIMAL128_CLASS(void*) @nogc nothrow;
    static _GArrowDecimal128Class* GARROW_DECIMAL128_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowDecimal128Class
    {
        _GObjectClass parent_class;
    }
    c_ulong garrow_decimal128_get_type() @nogc nothrow;
    alias GArrowDecimal128 = _GArrowDecimal128;
    alias GArrowDecimal128Class = _GArrowDecimal128Class;
    _GArrowDecimal128* garrow_decimal128_new_string(const(char)*) @nogc nothrow;
    _GArrowDecimal128* garrow_decimal128_new_integer(const(c_long)) @nogc nothrow;
    _GArrowDecimal128* garrow_decimal128_copy(_GArrowDecimal128*) @nogc nothrow;
    int garrow_decimal128_equal(_GArrowDecimal128*, _GArrowDecimal128*) @nogc nothrow;
    int garrow_decimal128_not_equal(_GArrowDecimal128*, _GArrowDecimal128*) @nogc nothrow;
    int garrow_decimal128_less_than(_GArrowDecimal128*, _GArrowDecimal128*) @nogc nothrow;
    int garrow_decimal128_less_than_or_equal(_GArrowDecimal128*, _GArrowDecimal128*) @nogc nothrow;
    int garrow_decimal128_greater_than(_GArrowDecimal128*, _GArrowDecimal128*) @nogc nothrow;
    int garrow_decimal128_greater_than_or_equal(_GArrowDecimal128*, _GArrowDecimal128*) @nogc nothrow;
    char* garrow_decimal128_to_string_scale(_GArrowDecimal128*, int) @nogc nothrow;
    char* garrow_decimal128_to_string(_GArrowDecimal128*) @nogc nothrow;
    _GBytes* garrow_decimal128_to_bytes(_GArrowDecimal128*) @nogc nothrow;
    void garrow_decimal128_abs(_GArrowDecimal128*) @nogc nothrow;
    void garrow_decimal128_negate(_GArrowDecimal128*) @nogc nothrow;
    c_long garrow_decimal128_to_integer(_GArrowDecimal128*) @nogc nothrow;
    _GArrowDecimal128* garrow_decimal128_plus(_GArrowDecimal128*, _GArrowDecimal128*) @nogc nothrow;
    _GArrowDecimal128* garrow_decimal128_minus(_GArrowDecimal128*, _GArrowDecimal128*) @nogc nothrow;
    _GArrowDecimal128* garrow_decimal128_multiply(_GArrowDecimal128*, _GArrowDecimal128*) @nogc nothrow;
    _GArrowDecimal128* garrow_decimal128_divide(_GArrowDecimal128*, _GArrowDecimal128*, _GArrowDecimal128**, _GError**) @nogc nothrow;
    _GArrowDecimal128* garrow_decimal128_rescale(_GArrowDecimal128*, int, int, _GError**) @nogc nothrow;
    struct _GArrowDecimal256{};
    c_ulong garrow_decimal256_get_type() @nogc nothrow;
    struct _GArrowDecimal256Class{};
    alias GArrowDecimal256Class = _GArrowDecimal256Class;
    alias GArrowDecimal256_autoptr = _GArrowDecimal256*;
    static void glib_autoptr_cleanup_GArrowDecimal256(_GArrowDecimal256**) @nogc nothrow;
    static _GArrowDecimal256* GARROW_DECIMAL256(void*) @nogc nothrow;
    static _GArrowDecimal256Class* GARROW_DECIMAL256_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL256(void*) @nogc nothrow;
    static int GARROW_IS_DECIMAL256_CLASS(void*) @nogc nothrow;
    static _GArrowDecimal256Class* GARROW_DECIMAL256_GET_CLASS(void*) @nogc nothrow;
    alias GArrowDecimal256 = _GArrowDecimal256;
    _GArrowDecimal256* garrow_decimal256_new_string(const(char)*) @nogc nothrow;
    _GArrowDecimal256* garrow_decimal256_new_integer(const(c_long)) @nogc nothrow;
    _GArrowDecimal256* garrow_decimal256_copy(_GArrowDecimal256*) @nogc nothrow;
    int garrow_decimal256_equal(_GArrowDecimal256*, _GArrowDecimal256*) @nogc nothrow;
    int garrow_decimal256_not_equal(_GArrowDecimal256*, _GArrowDecimal256*) @nogc nothrow;
    int garrow_decimal256_less_than(_GArrowDecimal256*, _GArrowDecimal256*) @nogc nothrow;
    int garrow_decimal256_less_than_or_equal(_GArrowDecimal256*, _GArrowDecimal256*) @nogc nothrow;
    int garrow_decimal256_greater_than(_GArrowDecimal256*, _GArrowDecimal256*) @nogc nothrow;
    int garrow_decimal256_greater_than_or_equal(_GArrowDecimal256*, _GArrowDecimal256*) @nogc nothrow;
    char* garrow_decimal256_to_string_scale(_GArrowDecimal256*, int) @nogc nothrow;
    char* garrow_decimal256_to_string(_GArrowDecimal256*) @nogc nothrow;
    _GBytes* garrow_decimal256_to_bytes(_GArrowDecimal256*) @nogc nothrow;
    void garrow_decimal256_abs(_GArrowDecimal256*) @nogc nothrow;
    void garrow_decimal256_negate(_GArrowDecimal256*) @nogc nothrow;
    _GArrowDecimal256* garrow_decimal256_plus(_GArrowDecimal256*, _GArrowDecimal256*) @nogc nothrow;
    _GArrowDecimal256* garrow_decimal256_multiply(_GArrowDecimal256*, _GArrowDecimal256*) @nogc nothrow;
    _GArrowDecimal256* garrow_decimal256_divide(_GArrowDecimal256*, _GArrowDecimal256*, _GArrowDecimal256**, _GError**) @nogc nothrow;
    _GArrowDecimal256* garrow_decimal256_rescale(_GArrowDecimal256*, int, int, _GError**) @nogc nothrow;
    c_ulong garrow_compression_type_get_type() @nogc nothrow;
    c_ulong garrow_count_mode_get_type() @nogc nothrow;
    alias __blkcnt64_t = c_long;
    c_ulong garrow_filter_null_selection_behavior_get_type() @nogc nothrow;
    c_ulong garrow_compare_operator_get_type() @nogc nothrow;
    c_ulong garrow_sort_order_get_type() @nogc nothrow;
    alias __blkcnt_t = c_long;
    c_ulong garrow_error_get_type() @nogc nothrow;
    c_ulong garrow_file_mode_get_type() @nogc nothrow;
    c_ulong garrow_file_type_get_type() @nogc nothrow;
    c_ulong garrow_metadata_version_get_type() @nogc nothrow;
    alias __blksize_t = c_long;
    c_ulong garrow_json_read_unexpected_field_behavior_get_type() @nogc nothrow;
    c_ulong garrow_type_get_type() @nogc nothrow;
    c_ulong garrow_time_unit_get_type() @nogc nothrow;
    alias __timer_t = void*;
    alias GArrowError = _Anonymous_16;
    enum _Anonymous_16
    {
        GARROW_ERROR_OUT_OF_MEMORY = 1,
        GARROW_ERROR_KEY = 2,
        GARROW_ERROR_TYPE = 3,
        GARROW_ERROR_INVALID = 4,
        GARROW_ERROR_IO = 5,
        GARROW_ERROR_CAPACITY = 6,
        GARROW_ERROR_INDEX = 7,
        GARROW_ERROR_UNKNOWN = 9,
        GARROW_ERROR_NOT_IMPLEMENTED = 10,
        GARROW_ERROR_SERIALIZATION = 11,
        GARROW_ERROR_CODE_GENERATION = 40,
        GARROW_ERROR_EXPRESSION_VALIDATION = 41,
        GARROW_ERROR_EXECUTION = 42,
        GARROW_ERROR_ALREADY_EXISTS = 45,
    }
    enum GARROW_ERROR_OUT_OF_MEMORY = _Anonymous_16.GARROW_ERROR_OUT_OF_MEMORY;
    enum GARROW_ERROR_KEY = _Anonymous_16.GARROW_ERROR_KEY;
    enum GARROW_ERROR_TYPE = _Anonymous_16.GARROW_ERROR_TYPE;
    enum GARROW_ERROR_INVALID = _Anonymous_16.GARROW_ERROR_INVALID;
    enum GARROW_ERROR_IO = _Anonymous_16.GARROW_ERROR_IO;
    enum GARROW_ERROR_CAPACITY = _Anonymous_16.GARROW_ERROR_CAPACITY;
    enum GARROW_ERROR_INDEX = _Anonymous_16.GARROW_ERROR_INDEX;
    enum GARROW_ERROR_UNKNOWN = _Anonymous_16.GARROW_ERROR_UNKNOWN;
    enum GARROW_ERROR_NOT_IMPLEMENTED = _Anonymous_16.GARROW_ERROR_NOT_IMPLEMENTED;
    enum GARROW_ERROR_SERIALIZATION = _Anonymous_16.GARROW_ERROR_SERIALIZATION;
    enum GARROW_ERROR_CODE_GENERATION = _Anonymous_16.GARROW_ERROR_CODE_GENERATION;
    enum GARROW_ERROR_EXPRESSION_VALIDATION = _Anonymous_16.GARROW_ERROR_EXPRESSION_VALIDATION;
    enum GARROW_ERROR_EXECUTION = _Anonymous_16.GARROW_ERROR_EXECUTION;
    enum GARROW_ERROR_ALREADY_EXISTS = _Anonymous_16.GARROW_ERROR_ALREADY_EXISTS;
    uint garrow_error_quark() @nogc nothrow;
    alias __clockid_t = int;
    struct _GArrowField{};
    static _GArrowFieldClass* GARROW_FIELD_CLASS(void*) @nogc nothrow;
    alias GArrowField = _GArrowField;
    struct _GArrowFieldClass{};
    alias GArrowFieldClass = _GArrowFieldClass;
    alias GArrowField_autoptr = _GArrowField*;
    static void glib_autoptr_cleanup_GArrowField(_GArrowField**) @nogc nothrow;
    static _GArrowField* GARROW_FIELD(void*) @nogc nothrow;
    static _GArrowFieldClass* GARROW_FIELD_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FIELD_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FIELD(void*) @nogc nothrow;
    c_ulong garrow_field_get_type() @nogc nothrow;
    _GArrowField* garrow_field_new(const(char)*, _GArrowDataType*) @nogc nothrow;
    _GArrowField* garrow_field_new_full(const(char)*, _GArrowDataType*, int) @nogc nothrow;
    const(char)* garrow_field_get_name(_GArrowField*) @nogc nothrow;
    _GArrowDataType* garrow_field_get_data_type(_GArrowField*) @nogc nothrow;
    int garrow_field_is_nullable(_GArrowField*) @nogc nothrow;
    int garrow_field_equal(_GArrowField*, _GArrowField*) @nogc nothrow;
    char* garrow_field_to_string(_GArrowField*) @nogc nothrow;
    char* garrow_field_to_string_metadata(_GArrowField*, int) @nogc nothrow;
    int garrow_field_has_metadata(_GArrowField*) @nogc nothrow;
    _GHashTable* garrow_field_get_metadata(_GArrowField*) @nogc nothrow;
    _GArrowField* garrow_field_with_metadata(_GArrowField*, _GHashTable*) @nogc nothrow;
    _GArrowField* garrow_field_with_merged_metadata(_GArrowField*, _GHashTable*) @nogc nothrow;
    _GArrowField* garrow_field_remove_metadata(_GArrowField*) @nogc nothrow;
    alias GArrowFileMode = _Anonymous_17;
    enum _Anonymous_17
    {
        GARROW_FILE_MODE_READ = 0,
        GARROW_FILE_MODE_WRITE = 1,
        GARROW_FILE_MODE_READWRITE = 2,
    }
    enum GARROW_FILE_MODE_READ = _Anonymous_17.GARROW_FILE_MODE_READ;
    enum GARROW_FILE_MODE_WRITE = _Anonymous_17.GARROW_FILE_MODE_WRITE;
    enum GARROW_FILE_MODE_READWRITE = _Anonymous_17.GARROW_FILE_MODE_READWRITE;
    alias GArrowTimePoint = c_long;
    alias GArrowFileType = _Anonymous_18;
    enum _Anonymous_18
    {
        GARROW_FILE_TYPE_NOT_FOUND = 0,
        GARROW_FILE_TYPE_UNKNOWN = 1,
        GARROW_FILE_TYPE_FILE = 2,
        GARROW_FILE_TYPE_DIR = 3,
    }
    enum GARROW_FILE_TYPE_NOT_FOUND = _Anonymous_18.GARROW_FILE_TYPE_NOT_FOUND;
    enum GARROW_FILE_TYPE_UNKNOWN = _Anonymous_18.GARROW_FILE_TYPE_UNKNOWN;
    enum GARROW_FILE_TYPE_FILE = _Anonymous_18.GARROW_FILE_TYPE_FILE;
    enum GARROW_FILE_TYPE_DIR = _Anonymous_18.GARROW_FILE_TYPE_DIR;
    static void glib_autoptr_cleanup_GArrowFileInfo(_GArrowFileInfo**) @nogc nothrow;
    static _GArrowFileInfoClass* GARROW_FILE_INFO_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FILE_INFO(void*) @nogc nothrow;
    static int GARROW_IS_FILE_INFO_CLASS(void*) @nogc nothrow;
    static _GArrowFileInfoClass* GARROW_FILE_INFO_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowFileInfoClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowFileInfo* GARROW_FILE_INFO(void*) @nogc nothrow;
    alias GArrowFileInfoClass = _GArrowFileInfoClass;
    struct _GArrowFileInfo
    {
        _GObject parent_instance;
    }
    alias GArrowFileInfo = _GArrowFileInfo;
    c_ulong garrow_file_info_get_type() @nogc nothrow;
    alias GArrowFileInfo_autoptr = _GArrowFileInfo*;
    _GArrowFileInfo* garrow_file_info_new() @nogc nothrow;
    int garrow_file_info_equal(_GArrowFileInfo*, _GArrowFileInfo*) @nogc nothrow;
    int garrow_file_info_is_file(_GArrowFileInfo*) @nogc nothrow;
    int garrow_file_info_is_dir(_GArrowFileInfo*) @nogc nothrow;
    char* garrow_file_info_to_string(_GArrowFileInfo*) @nogc nothrow;
    static _GArrowFileSelectorClass* GARROW_FILE_SELECTOR_CLASS(void*) @nogc nothrow;
    c_ulong garrow_file_selector_get_type() @nogc nothrow;
    struct _GArrowFileSelector{};
    alias GArrowFileSelector = _GArrowFileSelector;
    struct _GArrowFileSelectorClass{};
    alias GArrowFileSelectorClass = _GArrowFileSelectorClass;
    alias GArrowFileSelector_autoptr = _GArrowFileSelector*;
    static void glib_autoptr_cleanup_GArrowFileSelector(_GArrowFileSelector**) @nogc nothrow;
    static _GArrowFileSelector* GARROW_FILE_SELECTOR(void*) @nogc nothrow;
    static int GARROW_IS_FILE_SELECTOR_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FILE_SELECTOR(void*) @nogc nothrow;
    static _GArrowFileSelectorClass* GARROW_FILE_SELECTOR_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowFileSystemClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowFileSystemClass* GARROW_FILE_SYSTEM_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FILE_SYSTEM(void*) @nogc nothrow;
    static _GArrowFileSystemClass* GARROW_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static _GArrowFileSystem* GARROW_FILE_SYSTEM(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowFileSystem(_GArrowFileSystem**) @nogc nothrow;
    alias GArrowFileSystem_autoptr = _GArrowFileSystem*;
    struct _GArrowFileSystem
    {
        _GObject parent_instance;
    }
    alias GArrowFileSystemClass = _GArrowFileSystemClass;
    alias GArrowFileSystem = _GArrowFileSystem;
    c_ulong garrow_file_system_get_type() @nogc nothrow;
    _GArrowFileSystem* garrow_file_system_create(const(char)*, _GError**) @nogc nothrow;
    char* garrow_file_system_get_type_name(_GArrowFileSystem*) @nogc nothrow;
    _GArrowFileInfo* garrow_file_system_get_file_info(_GArrowFileSystem*, const(char)*, _GError**) @nogc nothrow;
    _GList* garrow_file_system_get_file_infos_paths(_GArrowFileSystem*, const(char)**, c_ulong, _GError**) @nogc nothrow;
    _GList* garrow_file_system_get_file_infos_selector(_GArrowFileSystem*, _GArrowFileSelector*, _GError**) @nogc nothrow;
    int garrow_file_system_create_dir(_GArrowFileSystem*, const(char)*, int, _GError**) @nogc nothrow;
    int garrow_file_system_delete_dir(_GArrowFileSystem*, const(char)*, _GError**) @nogc nothrow;
    int garrow_file_system_delete_dir_contents(_GArrowFileSystem*, const(char)*, _GError**) @nogc nothrow;
    int garrow_file_system_delete_file(_GArrowFileSystem*, const(char)*, _GError**) @nogc nothrow;
    int garrow_file_system_delete_files(_GArrowFileSystem*, const(char)**, c_ulong, _GError**) @nogc nothrow;
    int garrow_file_system_move(_GArrowFileSystem*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    int garrow_file_system_copy_file(_GArrowFileSystem*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    _GArrowInputStream* garrow_file_system_open_input_stream(_GArrowFileSystem*, const(char)*, _GError**) @nogc nothrow;
    _GArrowSeekableInputStream* garrow_file_system_open_input_file(_GArrowFileSystem*, const(char)*, _GError**) @nogc nothrow;
    _GArrowOutputStream* garrow_file_system_open_output_stream(_GArrowFileSystem*, const(char)*, _GError**) @nogc nothrow;
    _GArrowOutputStream* garrow_file_system_open_append_stream(_GArrowFileSystem*, const(char)*, _GError**) @nogc nothrow;
    alias __key_t = int;
    c_ulong garrow_sub_tree_file_system_get_type() @nogc nothrow;
    struct _GArrowSubTreeFileSystem{};
    alias GArrowSubTreeFileSystem = _GArrowSubTreeFileSystem;
    struct _GArrowSubTreeFileSystemClass{};
    alias GArrowSubTreeFileSystemClass = _GArrowSubTreeFileSystemClass;
    alias GArrowSubTreeFileSystem_autoptr = _GArrowSubTreeFileSystem*;
    static _GArrowSubTreeFileSystem* GARROW_SUB_TREE_FILE_SYSTEM(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowSubTreeFileSystem(_GArrowSubTreeFileSystem**) @nogc nothrow;
    static _GArrowSubTreeFileSystemClass* GARROW_SUB_TREE_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_SUB_TREE_FILE_SYSTEM(void*) @nogc nothrow;
    static int GARROW_IS_SUB_TREE_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static _GArrowSubTreeFileSystemClass* GARROW_SUB_TREE_FILE_SYSTEM_GET_CLASS(void*) @nogc nothrow;
    _GArrowSubTreeFileSystem* garrow_sub_tree_file_system_new(const(char)*, _GArrowFileSystem*) @nogc nothrow;
    c_ulong garrow_slow_file_system_get_type() @nogc nothrow;
    struct _GArrowSlowFileSystem{};
    alias GArrowSlowFileSystem = _GArrowSlowFileSystem;
    struct _GArrowSlowFileSystemClass{};
    static _GArrowSlowFileSystemClass* GARROW_SLOW_FILE_SYSTEM_GET_CLASS(void*) @nogc nothrow;
    alias GArrowSlowFileSystem_autoptr = _GArrowSlowFileSystem*;
    static void glib_autoptr_cleanup_GArrowSlowFileSystem(_GArrowSlowFileSystem**) @nogc nothrow;
    static _GArrowSlowFileSystem* GARROW_SLOW_FILE_SYSTEM(void*) @nogc nothrow;
    alias GArrowSlowFileSystemClass = _GArrowSlowFileSystemClass;
    static int GARROW_IS_SLOW_FILE_SYSTEM(void*) @nogc nothrow;
    static int GARROW_IS_SLOW_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static _GArrowSlowFileSystemClass* GARROW_SLOW_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    _GArrowSlowFileSystem* garrow_slow_file_system_new_average_latency(_GArrowFileSystem*, double) @nogc nothrow;
    _GArrowSlowFileSystem* garrow_slow_file_system_new_average_latency_and_seed(_GArrowFileSystem*, double, int) @nogc nothrow;
    static int GARROW_IS_MOCK_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_MOCK_FILE_SYSTEM(void*) @nogc nothrow;
    static _GArrowMockFileSystemClass* GARROW_MOCK_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static _GArrowMockFileSystem* GARROW_MOCK_FILE_SYSTEM(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowMockFileSystem(_GArrowMockFileSystem**) @nogc nothrow;
    alias GArrowMockFileSystem_autoptr = _GArrowMockFileSystem*;
    struct _GArrowMockFileSystem
    {
        _GArrowFileSystem parent_instance;
    }
    alias GArrowMockFileSystemClass = _GArrowMockFileSystemClass;
    struct _GArrowMockFileSystemClass{};
    alias GArrowMockFileSystem = _GArrowMockFileSystem;
    c_ulong garrow_mock_file_system_get_type() @nogc nothrow;
    static _GArrowMockFileSystemClass* GARROW_MOCK_FILE_SYSTEM_GET_CLASS(void*) @nogc nothrow;
    alias __daddr_t = int;
    static _GArrowHDFSFileSystem* GARROW_HDFS_FILE_SYSTEM(void*) @nogc nothrow;
    static _GArrowHDFSFileSystemClass* GARROW_HDFS_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_HDFS_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_HDFS_FILE_SYSTEM(void*) @nogc nothrow;
    static _GArrowHDFSFileSystemClass* GARROW_HDFS_FILE_SYSTEM_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowHDFSFileSystem
    {
        _GArrowFileSystem parent_instance;
    }
    alias GArrowHDFSFileSystem_autoptr = _GArrowHDFSFileSystem*;
    c_ulong garrow_hdfs_file_system_get_type() @nogc nothrow;
    alias GArrowHDFSFileSystem = _GArrowHDFSFileSystem;
    struct _GArrowHDFSFileSystemClass{};
    alias GArrowHDFSFileSystemClass = _GArrowHDFSFileSystemClass;
    static void glib_autoptr_cleanup_GArrowHDFSFileSystem(_GArrowHDFSFileSystem**) @nogc nothrow;
    c_ulong garrow_s3_file_system_get_type() @nogc nothrow;
    struct _GArrowS3FileSystem{};
    alias GArrowS3FileSystem = _GArrowS3FileSystem;
    struct _GArrowS3FileSystemClass
    {
        _GArrowFileSystemClass parent_class;
    }
    static _GArrowS3FileSystemClass* GARROW_S3_FILE_SYSTEM_GET_CLASS(void*) @nogc nothrow;
    alias GArrowS3FileSystemClass = _GArrowS3FileSystemClass;
    alias GArrowS3FileSystem_autoptr = _GArrowS3FileSystem*;
    static void glib_autoptr_cleanup_GArrowS3FileSystem(_GArrowS3FileSystem**) @nogc nothrow;
    static _GArrowS3FileSystem* GARROW_S3_FILE_SYSTEM(void*) @nogc nothrow;
    static _GArrowS3FileSystemClass* GARROW_S3_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_S3_FILE_SYSTEM(void*) @nogc nothrow;
    static int GARROW_IS_S3_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static _GArrowFile* GARROW_FILE(void*) @nogc nothrow;
    c_ulong garrow_file_get_type() @nogc nothrow;
    struct _GArrowFile{};
    alias GArrowFile = _GArrowFile;
    struct _GArrowFileInterface{};
    alias GArrowFileInterface = _GArrowFileInterface;
    alias GArrowFile_autoptr = _GArrowFile*;
    static void glib_autoptr_cleanup_GArrowFile(_GArrowFile**) @nogc nothrow;
    static _GArrowFileInterface* GARROW_FILE_GET_IFACE(void*) @nogc nothrow;
    static int GARROW_IS_FILE(void*) @nogc nothrow;
    int garrow_file_close(_GArrowFile*, _GError**) @nogc nothrow;
    int garrow_file_is_closed(_GArrowFile*) @nogc nothrow;
    c_long garrow_file_tell(_GArrowFile*, _GError**) @nogc nothrow;
    GArrowFileMode garrow_file_get_mode(_GArrowFile*) @nogc nothrow;
    alias __suseconds_t = c_long;
    static int GARROW_IS_INPUT_STREAM(void*) @nogc nothrow;
    static _GArrowInputStreamClass* GARROW_INPUT_STREAM_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowInputStream
    {
        _GInputStream parent_instance;
    }
    struct _GArrowInputStreamClass
    {
        _GInputStreamClass parent_class;
    }
    static _GArrowInputStream* GARROW_INPUT_STREAM(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowInputStream(_GArrowInputStream**) @nogc nothrow;
    alias GArrowInputStream_autoptr = _GArrowInputStream*;
    static _GArrowInputStreamClass* GARROW_INPUT_STREAM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_INPUT_STREAM_CLASS(void*) @nogc nothrow;
    alias GArrowInputStream = _GArrowInputStream;
    c_ulong garrow_input_stream_get_type() @nogc nothrow;
    alias GArrowInputStreamClass = _GArrowInputStreamClass;
    int garrow_input_stream_advance(_GArrowInputStream*, c_long, _GError**) @nogc nothrow;
    int garrow_input_stream_align(_GArrowInputStream*, int, _GError**) @nogc nothrow;
    _GArrowTensor* garrow_input_stream_read_tensor(_GArrowInputStream*, _GError**) @nogc nothrow;
    _GArrowRecordBatch* garrow_input_stream_read_record_batch(_GArrowInputStream*, _GArrowSchema*, _GArrowReadOptions*, _GError**) @nogc nothrow;
    alias GArrowSeekableInputStreamClass = _GArrowSeekableInputStreamClass;
    c_ulong garrow_seekable_input_stream_get_type() @nogc nothrow;
    alias GArrowSeekableInputStream = _GArrowSeekableInputStream;
    struct _GArrowSeekableInputStream{};
    struct _GArrowSeekableInputStreamClass{};
    static _GArrowSeekableInputStream* GARROW_SEEKABLE_INPUT_STREAM(void*) @nogc nothrow;
    alias GArrowSeekableInputStream_autoptr = _GArrowSeekableInputStream*;
    static _GArrowSeekableInputStreamClass* GARROW_SEEKABLE_INPUT_STREAM_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_SEEKABLE_INPUT_STREAM_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowSeekableInputStream(_GArrowSeekableInputStream**) @nogc nothrow;
    static int GARROW_IS_SEEKABLE_INPUT_STREAM(void*) @nogc nothrow;
    static _GArrowSeekableInputStreamClass* GARROW_SEEKABLE_INPUT_STREAM_CLASS(void*) @nogc nothrow;
    c_ulong garrow_seekable_input_stream_get_size(_GArrowSeekableInputStream*, _GError**) @nogc nothrow;
    int garrow_seekable_input_stream_get_support_zero_copy(_GArrowSeekableInputStream*) @nogc nothrow;
    _GArrowBuffer* garrow_seekable_input_stream_read_at(_GArrowSeekableInputStream*, c_long, c_long, _GError**) @nogc nothrow;
    _GBytes* garrow_seekable_input_stream_read_at_bytes(_GArrowSeekableInputStream*, c_long, c_long, _GError**) @nogc nothrow;
    _GBytes* garrow_seekable_input_stream_peek(_GArrowSeekableInputStream*, c_long, _GError**) @nogc nothrow;
    alias __useconds_t = uint;
    c_ulong garrow_buffer_input_stream_get_type() @nogc nothrow;
    struct _GArrowBufferInputStream{};
    alias GArrowBufferInputStream = _GArrowBufferInputStream;
    struct _GArrowBufferInputStreamClass{};
    alias GArrowBufferInputStreamClass = _GArrowBufferInputStreamClass;
    alias GArrowBufferInputStream_autoptr = _GArrowBufferInputStream*;
    static void glib_autoptr_cleanup_GArrowBufferInputStream(_GArrowBufferInputStream**) @nogc nothrow;
    static _GArrowBufferInputStream* GARROW_BUFFER_INPUT_STREAM(void*) @nogc nothrow;
    static _GArrowBufferInputStreamClass* GARROW_BUFFER_INPUT_STREAM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_BUFFER_INPUT_STREAM(void*) @nogc nothrow;
    static int GARROW_IS_BUFFER_INPUT_STREAM_CLASS(void*) @nogc nothrow;
    static _GArrowBufferInputStreamClass* GARROW_BUFFER_INPUT_STREAM_GET_CLASS(void*) @nogc nothrow;
    _GArrowBufferInputStream* garrow_buffer_input_stream_new(_GArrowBuffer*) @nogc nothrow;
    _GArrowBuffer* garrow_buffer_input_stream_get_buffer(_GArrowBufferInputStream*) @nogc nothrow;
    alias __time_t = c_long;
    alias __id_t = uint;
    alias GArrowMemoryMappedInputStream = _GArrowMemoryMappedInputStream;
    struct _GArrowMemoryMappedInputStream
    {
        _GArrowSeekableInputStream parent_instance;
    }
    alias GArrowMemoryMappedInputStreamClass = _GArrowMemoryMappedInputStreamClass;
    struct _GArrowMemoryMappedInputStreamClass
    {
        _GArrowSeekableInputStreamClass parent_class;
    }
    c_ulong garrow_memory_mapped_input_stream_get_type() @nogc nothrow;
    _GArrowMemoryMappedInputStream* garrow_memory_mapped_input_stream_new(const(char)*, _GError**) @nogc nothrow;
    alias __rlim64_t = c_ulong;
    alias GArrowGIOInputStream = _GArrowGIOInputStream;
    struct _GArrowGIOInputStream
    {
        _GArrowSeekableInputStream parent_instance;
    }
    alias GArrowGIOInputStreamClass = _GArrowGIOInputStreamClass;
    struct _GArrowGIOInputStreamClass
    {
        _GArrowSeekableInputStreamClass parent_class;
    }
    c_ulong garrow_gio_input_stream_get_type() @nogc nothrow;
    _GArrowGIOInputStream* garrow_gio_input_stream_new(_GInputStream*) @nogc nothrow;
    _GInputStream* garrow_gio_input_stream_get_raw(_GArrowGIOInputStream*) @nogc nothrow;
    alias __rlim_t = c_ulong;
    struct _GArrowCompressedInputStreamClass
    {
        _GArrowInputStreamClass parent_class;
    }
    static _GArrowCompressedInputStreamClass* GARROW_COMPRESSED_INPUT_STREAM_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_COMPRESSED_INPUT_STREAM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_COMPRESSED_INPUT_STREAM(void*) @nogc nothrow;
    static _GArrowCompressedInputStreamClass* GARROW_COMPRESSED_INPUT_STREAM_CLASS(void*) @nogc nothrow;
    static _GArrowCompressedInputStream* GARROW_COMPRESSED_INPUT_STREAM(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowCompressedInputStream(_GArrowCompressedInputStream**) @nogc nothrow;
    alias GArrowCompressedInputStream_autoptr = _GArrowCompressedInputStream*;
    struct _GArrowCompressedInputStream
    {
        _GArrowInputStream parent_instance;
    }
    alias GArrowCompressedInputStreamClass = _GArrowCompressedInputStreamClass;
    alias GArrowCompressedInputStream = _GArrowCompressedInputStream;
    c_ulong garrow_compressed_input_stream_get_type() @nogc nothrow;
    _GArrowCompressedInputStream* garrow_compressed_input_stream_new(_GArrowCodec*, _GArrowInputStream*, _GError**) @nogc nothrow;
    c_ulong garrow_read_options_get_type() @nogc nothrow;
    struct _GArrowReadOptions{};
    alias GArrowReadOptions = _GArrowReadOptions;
    struct _GArrowReadOptionsClass{};
    alias GArrowReadOptionsClass = _GArrowReadOptionsClass;
    alias GArrowReadOptions_autoptr = _GArrowReadOptions*;
    static void glib_autoptr_cleanup_GArrowReadOptions(_GArrowReadOptions**) @nogc nothrow;
    static _GArrowReadOptions* GARROW_READ_OPTIONS(void*) @nogc nothrow;
    static _GArrowReadOptionsClass* GARROW_READ_OPTIONS_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_READ_OPTIONS(void*) @nogc nothrow;
    static int GARROW_IS_READ_OPTIONS_CLASS(void*) @nogc nothrow;
    static _GArrowReadOptionsClass* GARROW_READ_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    _GArrowReadOptions* garrow_read_options_new() @nogc nothrow;
    int* garrow_read_options_get_included_fields(_GArrowReadOptions*, c_ulong*) @nogc nothrow;
    void garrow_read_options_set_included_fields(_GArrowReadOptions*, int*, c_ulong) @nogc nothrow;
    alias __clock_t = c_long;
    static _GArrowWriteOptions* GARROW_WRITE_OPTIONS(void*) @nogc nothrow;
    struct _GArrowWriteOptionsClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowWriteOptionsClass* GARROW_WRITE_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_WRITE_OPTIONS_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_WRITE_OPTIONS(void*) @nogc nothrow;
    static _GArrowWriteOptionsClass* GARROW_WRITE_OPTIONS_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowWriteOptions(_GArrowWriteOptions**) @nogc nothrow;
    alias GArrowWriteOptions_autoptr = _GArrowWriteOptions*;
    c_ulong garrow_write_options_get_type() @nogc nothrow;
    struct _GArrowWriteOptions{};
    alias GArrowWriteOptions = _GArrowWriteOptions;
    alias GArrowWriteOptionsClass = _GArrowWriteOptionsClass;
    _GArrowWriteOptions* garrow_write_options_new() @nogc nothrow;
    struct _GArrowLocalFileSystemOptions{};
    alias GArrowLocalFileSystemOptions = _GArrowLocalFileSystemOptions;
    struct _GArrowLocalFileSystemOptionsClass{};
    alias GArrowLocalFileSystemOptionsClass = _GArrowLocalFileSystemOptionsClass;
    c_ulong garrow_local_file_system_options_get_type() @nogc nothrow;
    alias GArrowLocalFileSystemOptions_autoptr = _GArrowLocalFileSystemOptions*;
    static void glib_autoptr_cleanup_GArrowLocalFileSystemOptions(_GArrowLocalFileSystemOptions**) @nogc nothrow;
    static _GArrowLocalFileSystemOptions* GARROW_LOCAL_FILE_SYSTEM_OPTIONS(void*) @nogc nothrow;
    static _GArrowLocalFileSystemOptionsClass* GARROW_LOCAL_FILE_SYSTEM_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LOCAL_FILE_SYSTEM_OPTIONS_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LOCAL_FILE_SYSTEM_OPTIONS(void*) @nogc nothrow;
    static _GArrowLocalFileSystemOptionsClass* GARROW_LOCAL_FILE_SYSTEM_OPTIONS_CLASS(void*) @nogc nothrow;
    _GArrowLocalFileSystemOptions* garrow_local_file_system_options_new() @nogc nothrow;
    struct _GArrowLocalFileSystemClass
    {
        _GArrowFileSystemClass parent_class;
    }
    static _GArrowLocalFileSystemClass* GARROW_LOCAL_FILE_SYSTEM_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LOCAL_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    c_ulong garrow_local_file_system_get_type() @nogc nothrow;
    struct _GArrowLocalFileSystem{};
    alias GArrowLocalFileSystem = _GArrowLocalFileSystem;
    alias GArrowLocalFileSystemClass = _GArrowLocalFileSystemClass;
    alias GArrowLocalFileSystem_autoptr = _GArrowLocalFileSystem*;
    static void glib_autoptr_cleanup_GArrowLocalFileSystem(_GArrowLocalFileSystem**) @nogc nothrow;
    static _GArrowLocalFileSystem* GARROW_LOCAL_FILE_SYSTEM(void*) @nogc nothrow;
    static _GArrowLocalFileSystemClass* GARROW_LOCAL_FILE_SYSTEM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_LOCAL_FILE_SYSTEM(void*) @nogc nothrow;
    _GArrowLocalFileSystem* garrow_local_file_system_new(_GArrowLocalFileSystemOptions*) @nogc nothrow;
    alias GArrowMetadataVersion = _Anonymous_19;
    enum _Anonymous_19
    {
        GARROW_METADATA_VERSION_V1 = 0,
        GARROW_METADATA_VERSION_V2 = 1,
        GARROW_METADATA_VERSION_V3 = 2,
    }
    enum GARROW_METADATA_VERSION_V1 = _Anonymous_19.GARROW_METADATA_VERSION_V1;
    enum GARROW_METADATA_VERSION_V2 = _Anonymous_19.GARROW_METADATA_VERSION_V2;
    enum GARROW_METADATA_VERSION_V3 = _Anonymous_19.GARROW_METADATA_VERSION_V3;
    static _GArrowOutputStream* GARROW_OUTPUT_STREAM(void*) @nogc nothrow;
    static _GArrowOutputStreamClass* GARROW_OUTPUT_STREAM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_OUTPUT_STREAM(void*) @nogc nothrow;
    static int GARROW_IS_OUTPUT_STREAM_CLASS(void*) @nogc nothrow;
    static _GArrowOutputStreamClass* GARROW_OUTPUT_STREAM_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowOutputStreamClass
    {
        _GObjectClass parent_class;
    }
    struct _GArrowOutputStream
    {
        _GObject parent_instance;
    }
    alias GArrowOutputStream_autoptr = _GArrowOutputStream*;
    alias GArrowOutputStreamClass = _GArrowOutputStreamClass;
    alias GArrowOutputStream = _GArrowOutputStream;
    c_ulong garrow_output_stream_get_type() @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowOutputStream(_GArrowOutputStream**) @nogc nothrow;
    int garrow_output_stream_align(_GArrowOutputStream*, int, _GError**) @nogc nothrow;
    c_long garrow_output_stream_write_tensor(_GArrowOutputStream*, _GArrowTensor*, _GError**) @nogc nothrow;
    c_long garrow_output_stream_write_record_batch(_GArrowOutputStream*, _GArrowRecordBatch*, _GArrowWriteOptions*, _GError**) @nogc nothrow;
    struct __fsid_t
    {
        int[2] __val;
    }
    alias __pid_t = int;
    alias GArrowFileOutputStream = _GArrowFileOutputStream;
    struct _GArrowFileOutputStream
    {
        _GArrowOutputStream parent_instance;
    }
    alias GArrowFileOutputStreamClass = _GArrowFileOutputStreamClass;
    struct _GArrowFileOutputStreamClass
    {
        _GArrowOutputStreamClass parent_class;
    }
    c_ulong garrow_file_output_stream_get_type() @nogc nothrow;
    _GArrowFileOutputStream* garrow_file_output_stream_new(const(char)*, int, _GError**) @nogc nothrow;
    alias __off64_t = c_long;
    alias __off_t = c_long;
    alias GArrowBufferOutputStream = _GArrowBufferOutputStream;
    struct _GArrowBufferOutputStream
    {
        _GArrowOutputStream parent_instance;
    }
    alias GArrowBufferOutputStreamClass = _GArrowBufferOutputStreamClass;
    struct _GArrowBufferOutputStreamClass
    {
        _GArrowOutputStreamClass parent_class;
    }
    c_ulong garrow_buffer_output_stream_get_type() @nogc nothrow;
    _GArrowBufferOutputStream* garrow_buffer_output_stream_new(_GArrowResizableBuffer*) @nogc nothrow;
    alias __nlink_t = c_ulong;
    alias __mode_t = uint;
    alias GArrowGIOOutputStream = _GArrowGIOOutputStream;
    struct _GArrowGIOOutputStream
    {
        _GArrowOutputStream parent_instance;
    }
    alias GArrowGIOOutputStreamClass = _GArrowGIOOutputStreamClass;
    struct _GArrowGIOOutputStreamClass
    {
        _GArrowOutputStreamClass parent_class;
    }
    c_ulong garrow_gio_output_stream_get_type() @nogc nothrow;
    _GArrowGIOOutputStream* garrow_gio_output_stream_new(_GOutputStream*) @nogc nothrow;
    _GOutputStream* garrow_gio_output_stream_get_raw(_GArrowGIOOutputStream*) @nogc nothrow;
    alias __ino64_t = c_ulong;
    struct _GArrowCompressedOutputStreamClass
    {
        _GArrowOutputStreamClass parent_class;
    }
    c_ulong garrow_compressed_output_stream_get_type() @nogc nothrow;
    struct _GArrowCompressedOutputStream{};
    alias GArrowCompressedOutputStream = _GArrowCompressedOutputStream;
    alias GArrowCompressedOutputStreamClass = _GArrowCompressedOutputStreamClass;
    alias GArrowCompressedOutputStream_autoptr = _GArrowCompressedOutputStream*;
    static void glib_autoptr_cleanup_GArrowCompressedOutputStream(_GArrowCompressedOutputStream**) @nogc nothrow;
    static _GArrowCompressedOutputStream* GARROW_COMPRESSED_OUTPUT_STREAM(void*) @nogc nothrow;
    static _GArrowCompressedOutputStreamClass* GARROW_COMPRESSED_OUTPUT_STREAM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_COMPRESSED_OUTPUT_STREAM_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_COMPRESSED_OUTPUT_STREAM(void*) @nogc nothrow;
    static _GArrowCompressedOutputStreamClass* GARROW_COMPRESSED_OUTPUT_STREAM_GET_CLASS(void*) @nogc nothrow;
    _GArrowCompressedOutputStream* garrow_compressed_output_stream_new(_GArrowCodec*, _GArrowOutputStream*, _GError**) @nogc nothrow;
    struct _GArrowReadable{};
    alias GArrowReadable = _GArrowReadable;
    struct _GArrowReadableInterface{};
    alias GArrowReadableInterface = _GArrowReadableInterface;
    alias GArrowReadable_autoptr = _GArrowReadable*;
    static void glib_autoptr_cleanup_GArrowReadable(_GArrowReadable**) @nogc nothrow;
    static _GArrowReadable* GARROW_READABLE(void*) @nogc nothrow;
    static int GARROW_IS_READABLE(void*) @nogc nothrow;
    static _GArrowReadableInterface* GARROW_READABLE_GET_IFACE(void*) @nogc nothrow;
    c_ulong garrow_readable_get_type() @nogc nothrow;
    _GArrowBuffer* garrow_readable_read(_GArrowReadable*, c_long, _GError**) @nogc nothrow;
    _GBytes* garrow_readable_read_bytes(_GArrowReadable*, c_long, _GError**) @nogc nothrow;
    static _GArrowRecordBatchReaderClass* GARROW_RECORD_BATCH_READER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_RECORD_BATCH_READER_CLASS(void*) @nogc nothrow;
    struct _GArrowRecordBatchReaderClass
    {
        _GObjectClass parent_class;
    }
    static int GARROW_IS_RECORD_BATCH_READER(void*) @nogc nothrow;
    static _GArrowRecordBatchReaderClass* GARROW_RECORD_BATCH_READER_GET_CLASS(void*) @nogc nothrow;
    struct _GArrowRecordBatchReader
    {
        _GObject parent_instance;
    }
    alias GArrowRecordBatchReaderClass = _GArrowRecordBatchReaderClass;
    alias GArrowRecordBatchReader = _GArrowRecordBatchReader;
    c_ulong garrow_record_batch_reader_get_type() @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowRecordBatchReader(_GArrowRecordBatchReader**) @nogc nothrow;
    alias GArrowRecordBatchReader_autoptr = _GArrowRecordBatchReader*;
    static _GArrowRecordBatchReader* GARROW_RECORD_BATCH_READER(void*) @nogc nothrow;
    _GArrowSchema* garrow_record_batch_reader_get_schema(_GArrowRecordBatchReader*) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_reader_get_next_record_batch(_GArrowRecordBatchReader*, _GError**) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_reader_read_next_record_batch(_GArrowRecordBatchReader*, _GError**) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_reader_read_next(_GArrowRecordBatchReader*, _GError**) @nogc nothrow;
    struct _GArrowTableBatchReaderClass
    {
        _GArrowRecordBatchReaderClass parent_class;
    }
    static _GArrowTableBatchReaderClass* GARROW_TABLE_BATCH_READER_GET_CLASS(void*) @nogc nothrow;
    c_ulong garrow_table_batch_reader_get_type() @nogc nothrow;
    struct _GArrowTableBatchReader{};
    alias GArrowTableBatchReader = _GArrowTableBatchReader;
    alias GArrowTableBatchReaderClass = _GArrowTableBatchReaderClass;
    alias GArrowTableBatchReader_autoptr = _GArrowTableBatchReader*;
    static void glib_autoptr_cleanup_GArrowTableBatchReader(_GArrowTableBatchReader**) @nogc nothrow;
    static _GArrowTableBatchReader* GARROW_TABLE_BATCH_READER(void*) @nogc nothrow;
    static _GArrowTableBatchReaderClass* GARROW_TABLE_BATCH_READER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TABLE_BATCH_READER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TABLE_BATCH_READER(void*) @nogc nothrow;
    _GArrowTableBatchReader* garrow_table_batch_reader_new(_GArrowTable*) @nogc nothrow;
    alias __ino_t = c_ulong;
    alias __gid_t = uint;
    alias GArrowRecordBatchStreamReader = _GArrowRecordBatchStreamReader;
    struct _GArrowRecordBatchStreamReader
    {
        _GArrowRecordBatchReader parent_instance;
    }
    alias GArrowRecordBatchStreamReaderClass = _GArrowRecordBatchStreamReaderClass;
    struct _GArrowRecordBatchStreamReaderClass
    {
        _GArrowRecordBatchReaderClass parent_class;
    }
    c_ulong garrow_record_batch_stream_reader_get_type() @nogc nothrow;
    _GArrowRecordBatchStreamReader* garrow_record_batch_stream_reader_new(_GArrowInputStream*, _GError**) @nogc nothrow;
    alias __uid_t = uint;
    alias __dev_t = c_ulong;
    alias GArrowRecordBatchFileReader = _GArrowRecordBatchFileReader;
    struct _GArrowRecordBatchFileReader
    {
        _GObject parent_instance;
    }
    alias GArrowRecordBatchFileReaderClass = _GArrowRecordBatchFileReaderClass;
    struct _GArrowRecordBatchFileReaderClass
    {
        _GObjectClass parent_class;
    }
    c_ulong garrow_record_batch_file_reader_get_type() @nogc nothrow;
    _GArrowRecordBatchFileReader* garrow_record_batch_file_reader_new(_GArrowSeekableInputStream*, _GError**) @nogc nothrow;
    _GArrowSchema* garrow_record_batch_file_reader_get_schema(_GArrowRecordBatchFileReader*) @nogc nothrow;
    uint garrow_record_batch_file_reader_get_n_record_batches(_GArrowRecordBatchFileReader*) @nogc nothrow;
    GArrowMetadataVersion garrow_record_batch_file_reader_get_version(_GArrowRecordBatchFileReader*) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_file_reader_get_record_batch(_GArrowRecordBatchFileReader*, uint, _GError**) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_file_reader_read_record_batch(_GArrowRecordBatchFileReader*, uint, _GError**) @nogc nothrow;
    static _GArrowFeatherFileReaderClass* GARROW_FEATHER_FILE_READER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FEATHER_FILE_READER_CLASS(void*) @nogc nothrow;
    struct _GArrowFeatherFileReaderClass
    {
        _GObjectClass parent_class;
    }
    struct _GArrowFeatherFileReader{};
    alias GArrowFeatherFileReader = _GArrowFeatherFileReader;
    alias GArrowFeatherFileReaderClass = _GArrowFeatherFileReaderClass;
    alias GArrowFeatherFileReader_autoptr = _GArrowFeatherFileReader*;
    static void glib_autoptr_cleanup_GArrowFeatherFileReader(_GArrowFeatherFileReader**) @nogc nothrow;
    static _GArrowFeatherFileReader* GARROW_FEATHER_FILE_READER(void*) @nogc nothrow;
    static _GArrowFeatherFileReaderClass* GARROW_FEATHER_FILE_READER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FEATHER_FILE_READER(void*) @nogc nothrow;
    c_ulong garrow_feather_file_reader_get_type() @nogc nothrow;
    _GArrowFeatherFileReader* garrow_feather_file_reader_new(_GArrowSeekableInputStream*, _GError**) @nogc nothrow;
    int garrow_feather_file_reader_get_version(_GArrowFeatherFileReader*) @nogc nothrow;
    _GArrowTable* garrow_feather_file_reader_read(_GArrowFeatherFileReader*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_feather_file_reader_read_indices(_GArrowFeatherFileReader*, const(int)*, uint, _GError**) @nogc nothrow;
    _GArrowTable* garrow_feather_file_reader_read_names(_GArrowFeatherFileReader*, const(char)**, uint, _GError**) @nogc nothrow;
    alias __uintmax_t = c_ulong;
    alias GArrowCSVReadOptionsClass = _GArrowCSVReadOptionsClass;
    c_ulong garrow_csv_read_options_get_type() @nogc nothrow;
    struct _GArrowCSVReadOptions{};
    struct _GArrowCSVReadOptionsClass
    {
        _GObjectClass parent_class;
    }
    alias GArrowCSVReadOptions = _GArrowCSVReadOptions;
    static _GArrowCSVReadOptionsClass* GARROW_CSV_READ_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_CSV_READ_OPTIONS_CLASS(void*) @nogc nothrow;
    alias GArrowCSVReadOptions_autoptr = _GArrowCSVReadOptions*;
    static void glib_autoptr_cleanup_GArrowCSVReadOptions(_GArrowCSVReadOptions**) @nogc nothrow;
    static _GArrowCSVReadOptions* GARROW_CSV_READ_OPTIONS(void*) @nogc nothrow;
    static _GArrowCSVReadOptionsClass* GARROW_CSV_READ_OPTIONS_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_CSV_READ_OPTIONS(void*) @nogc nothrow;
    _GArrowCSVReadOptions* garrow_csv_read_options_new() @nogc nothrow;
    void garrow_csv_read_options_add_column_type(_GArrowCSVReadOptions*, const(char)*, _GArrowDataType*) @nogc nothrow;
    void garrow_csv_read_options_add_schema(_GArrowCSVReadOptions*, _GArrowSchema*) @nogc nothrow;
    _GHashTable* garrow_csv_read_options_get_column_types(_GArrowCSVReadOptions*) @nogc nothrow;
    void garrow_csv_read_options_set_null_values(_GArrowCSVReadOptions*, const(char)**, c_ulong) @nogc nothrow;
    char** garrow_csv_read_options_get_null_values(_GArrowCSVReadOptions*) @nogc nothrow;
    void garrow_csv_read_options_add_null_value(_GArrowCSVReadOptions*, const(char)*) @nogc nothrow;
    void garrow_csv_read_options_set_true_values(_GArrowCSVReadOptions*, const(char)**, c_ulong) @nogc nothrow;
    char** garrow_csv_read_options_get_true_values(_GArrowCSVReadOptions*) @nogc nothrow;
    void garrow_csv_read_options_add_true_value(_GArrowCSVReadOptions*, const(char)*) @nogc nothrow;
    void garrow_csv_read_options_set_false_values(_GArrowCSVReadOptions*, const(char)**, c_ulong) @nogc nothrow;
    char** garrow_csv_read_options_get_false_values(_GArrowCSVReadOptions*) @nogc nothrow;
    void garrow_csv_read_options_add_false_value(_GArrowCSVReadOptions*, const(char)*) @nogc nothrow;
    void garrow_csv_read_options_set_column_names(_GArrowCSVReadOptions*, const(char)**, c_ulong) @nogc nothrow;
    char** garrow_csv_read_options_get_column_names(_GArrowCSVReadOptions*) @nogc nothrow;
    void garrow_csv_read_options_add_column_name(_GArrowCSVReadOptions*, const(char)*) @nogc nothrow;
    alias __intmax_t = c_long;
    static _GArrowCSVReaderClass* GARROW_CSV_READER_GET_CLASS(void*) @nogc nothrow;
    c_ulong garrow_csv_reader_get_type() @nogc nothrow;
    struct _GArrowCSVReader{};
    alias GArrowCSVReader = _GArrowCSVReader;
    struct _GArrowCSVReaderClass{};
    alias GArrowCSVReaderClass = _GArrowCSVReaderClass;
    alias GArrowCSVReader_autoptr = _GArrowCSVReader*;
    static void glib_autoptr_cleanup_GArrowCSVReader(_GArrowCSVReader**) @nogc nothrow;
    static _GArrowCSVReader* GARROW_CSV_READER(void*) @nogc nothrow;
    static _GArrowCSVReaderClass* GARROW_CSV_READER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_CSV_READER(void*) @nogc nothrow;
    static int GARROW_IS_CSV_READER_CLASS(void*) @nogc nothrow;
    _GArrowCSVReader* garrow_csv_reader_new(_GArrowInputStream*, _GArrowCSVReadOptions*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_csv_reader_read(_GArrowCSVReader*, _GError**) @nogc nothrow;
    alias GArrowJSONReadUnexpectedFieldBehavior = _Anonymous_20;
    enum _Anonymous_20
    {
        GARROW_JSON_READ_IGNORE = 0,
        GARROW_JSON_READ_ERROR = 1,
        GARROW_JSON_READ_INFER_TYPE = 2,
    }
    enum GARROW_JSON_READ_IGNORE = _Anonymous_20.GARROW_JSON_READ_IGNORE;
    enum GARROW_JSON_READ_ERROR = _Anonymous_20.GARROW_JSON_READ_ERROR;
    enum GARROW_JSON_READ_INFER_TYPE = _Anonymous_20.GARROW_JSON_READ_INFER_TYPE;
    struct _GArrowJSONReadOptionsClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowJSONReadOptionsClass* GARROW_JSON_READ_OPTIONS_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_JSON_READ_OPTIONS_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_JSON_READ_OPTIONS(void*) @nogc nothrow;
    static _GArrowJSONReadOptionsClass* GARROW_JSON_READ_OPTIONS_CLASS(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowJSONReadOptions(_GArrowJSONReadOptions**) @nogc nothrow;
    alias GArrowJSONReadOptions_autoptr = _GArrowJSONReadOptions*;
    struct _GArrowJSONReadOptions
    {
        _GObject parent_instance;
    }
    alias GArrowJSONReadOptionsClass = _GArrowJSONReadOptionsClass;
    static _GArrowJSONReadOptions* GARROW_JSON_READ_OPTIONS(void*) @nogc nothrow;
    alias GArrowJSONReadOptions = _GArrowJSONReadOptions;
    c_ulong garrow_json_read_options_get_type() @nogc nothrow;
    _GArrowJSONReadOptions* garrow_json_read_options_new() @nogc nothrow;
    alias __u_quad_t = c_ulong;
    struct _GArrowJSONReader
    {
        _GObject parent_instance;
    }
    alias GArrowJSONReader_autoptr = _GArrowJSONReader*;
    c_ulong garrow_json_reader_get_type() @nogc nothrow;
    alias GArrowJSONReader = _GArrowJSONReader;
    struct _GArrowJSONReaderClass{};
    alias GArrowJSONReaderClass = _GArrowJSONReaderClass;
    static void glib_autoptr_cleanup_GArrowJSONReader(_GArrowJSONReader**) @nogc nothrow;
    static _GArrowJSONReader* GARROW_JSON_READER(void*) @nogc nothrow;
    static _GArrowJSONReaderClass* GARROW_JSON_READER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_JSON_READER(void*) @nogc nothrow;
    static int GARROW_IS_JSON_READER_CLASS(void*) @nogc nothrow;
    static _GArrowJSONReaderClass* GARROW_JSON_READER_GET_CLASS(void*) @nogc nothrow;
    _GArrowJSONReader* garrow_json_reader_new(_GArrowInputStream*, _GArrowJSONReadOptions*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_json_reader_read(_GArrowJSONReader*, _GError**) @nogc nothrow;
    alias __quad_t = c_long;
    alias GArrowRecordBatch = _GArrowRecordBatch;
    struct _GArrowRecordBatch{};
    struct _GArrowRecordBatchClass{};
    alias GArrowRecordBatchClass = _GArrowRecordBatchClass;
    c_ulong garrow_record_batch_get_type() @nogc nothrow;
    alias GArrowRecordBatch_autoptr = _GArrowRecordBatch*;
    static void glib_autoptr_cleanup_GArrowRecordBatch(_GArrowRecordBatch**) @nogc nothrow;
    static _GArrowRecordBatch* GARROW_RECORD_BATCH(void*) @nogc nothrow;
    static _GArrowRecordBatchClass* GARROW_RECORD_BATCH_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_RECORD_BATCH(void*) @nogc nothrow;
    static int GARROW_IS_RECORD_BATCH_CLASS(void*) @nogc nothrow;
    static _GArrowRecordBatchClass* GARROW_RECORD_BATCH_GET_CLASS(void*) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_new(_GArrowSchema*, uint, _GList*, _GError**) @nogc nothrow;
    int garrow_record_batch_equal(_GArrowRecordBatch*, _GArrowRecordBatch*) @nogc nothrow;
    int garrow_record_batch_equal_metadata(_GArrowRecordBatch*, _GArrowRecordBatch*, int) @nogc nothrow;
    _GArrowSchema* garrow_record_batch_get_schema(_GArrowRecordBatch*) @nogc nothrow;
    _GArrowArray* garrow_record_batch_get_column_data(_GArrowRecordBatch*, int) @nogc nothrow;
    const(char)* garrow_record_batch_get_column_name(_GArrowRecordBatch*, int) @nogc nothrow;
    uint garrow_record_batch_get_n_columns(_GArrowRecordBatch*) @nogc nothrow;
    c_long garrow_record_batch_get_n_rows(_GArrowRecordBatch*) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_slice(_GArrowRecordBatch*, c_long, c_long) @nogc nothrow;
    char* garrow_record_batch_to_string(_GArrowRecordBatch*, _GError**) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_add_column(_GArrowRecordBatch*, uint, _GArrowField*, _GArrowArray*, _GError**) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_remove_column(_GArrowRecordBatch*, uint, _GError**) @nogc nothrow;
    _GArrowBuffer* garrow_record_batch_serialize(_GArrowRecordBatch*, _GArrowWriteOptions*, _GError**) @nogc nothrow;
    c_ulong garrow_record_batch_iterator_get_type() @nogc nothrow;
    alias GArrowRecordBatchIteratorClass = _GArrowRecordBatchIteratorClass;
    alias GArrowRecordBatchIterator = _GArrowRecordBatchIterator;
    struct _GArrowRecordBatchIteratorClass{};
    static _GArrowRecordBatchIteratorClass* GARROW_RECORD_BATCH_ITERATOR_GET_CLASS(void*) @nogc nothrow;
    alias GArrowRecordBatchIterator_autoptr = _GArrowRecordBatchIterator*;
    static void glib_autoptr_cleanup_GArrowRecordBatchIterator(_GArrowRecordBatchIterator**) @nogc nothrow;
    static _GArrowRecordBatchIterator* GARROW_RECORD_BATCH_ITERATOR(void*) @nogc nothrow;
    static _GArrowRecordBatchIteratorClass* GARROW_RECORD_BATCH_ITERATOR_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_RECORD_BATCH_ITERATOR(void*) @nogc nothrow;
    static int GARROW_IS_RECORD_BATCH_ITERATOR_CLASS(void*) @nogc nothrow;
    struct _GArrowRecordBatchIterator{};
    _GArrowRecordBatchIterator* garrow_record_batch_iterator_new(_GList*) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_iterator_next(_GArrowRecordBatchIterator*, _GError**) @nogc nothrow;
    int garrow_record_batch_iterator_equal(_GArrowRecordBatchIterator*, _GArrowRecordBatchIterator*) @nogc nothrow;
    _GList* garrow_record_batch_iterator_to_list(_GArrowRecordBatchIterator*, _GError**) @nogc nothrow;
    alias __uint64_t = c_ulong;
    c_ulong garrow_schema_get_type() @nogc nothrow;
    struct _GArrowSchema{};
    alias GArrowSchema = _GArrowSchema;
    struct _GArrowSchemaClass{};
    alias GArrowSchemaClass = _GArrowSchemaClass;
    alias GArrowSchema_autoptr = _GArrowSchema*;
    static void glib_autoptr_cleanup_GArrowSchema(_GArrowSchema**) @nogc nothrow;
    static _GArrowSchema* GARROW_SCHEMA(void*) @nogc nothrow;
    static _GArrowSchemaClass* GARROW_SCHEMA_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_SCHEMA(void*) @nogc nothrow;
    static int GARROW_IS_SCHEMA_CLASS(void*) @nogc nothrow;
    static _GArrowSchemaClass* GARROW_SCHEMA_GET_CLASS(void*) @nogc nothrow;
    _GArrowSchema* garrow_schema_new(_GList*) @nogc nothrow;
    int garrow_schema_equal(_GArrowSchema*, _GArrowSchema*) @nogc nothrow;
    _GArrowField* garrow_schema_get_field(_GArrowSchema*, uint) @nogc nothrow;
    _GArrowField* garrow_schema_get_field_by_name(_GArrowSchema*, const(char)*) @nogc nothrow;
    int garrow_schema_get_field_index(_GArrowSchema*, const(char)*) @nogc nothrow;
    uint garrow_schema_n_fields(_GArrowSchema*) @nogc nothrow;
    _GList* garrow_schema_get_fields(_GArrowSchema*) @nogc nothrow;
    char* garrow_schema_to_string(_GArrowSchema*) @nogc nothrow;
    char* garrow_schema_to_string_metadata(_GArrowSchema*, int) @nogc nothrow;
    _GArrowSchema* garrow_schema_add_field(_GArrowSchema*, uint, _GArrowField*, _GError**) @nogc nothrow;
    _GArrowSchema* garrow_schema_remove_field(_GArrowSchema*, uint, _GError**) @nogc nothrow;
    _GArrowSchema* garrow_schema_replace_field(_GArrowSchema*, uint, _GArrowField*, _GError**) @nogc nothrow;
    int garrow_schema_has_metadata(_GArrowSchema*) @nogc nothrow;
    _GHashTable* garrow_schema_get_metadata(_GArrowSchema*) @nogc nothrow;
    _GArrowSchema* garrow_schema_with_metadata(_GArrowSchema*, _GHashTable*) @nogc nothrow;
    alias __int64_t = c_long;
    struct _GArrowRecordBatchBuilderClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowRecordBatchBuilderClass* GARROW_RECORD_BATCH_BUILDER_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_RECORD_BATCH_BUILDER_CLASS(void*) @nogc nothrow;
    c_ulong garrow_record_batch_builder_get_type() @nogc nothrow;
    struct _GArrowRecordBatchBuilder{};
    alias GArrowRecordBatchBuilder = _GArrowRecordBatchBuilder;
    alias GArrowRecordBatchBuilderClass = _GArrowRecordBatchBuilderClass;
    alias GArrowRecordBatchBuilder_autoptr = _GArrowRecordBatchBuilder*;
    static void glib_autoptr_cleanup_GArrowRecordBatchBuilder(_GArrowRecordBatchBuilder**) @nogc nothrow;
    static _GArrowRecordBatchBuilder* GARROW_RECORD_BATCH_BUILDER(void*) @nogc nothrow;
    static _GArrowRecordBatchBuilderClass* GARROW_RECORD_BATCH_BUILDER_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_RECORD_BATCH_BUILDER(void*) @nogc nothrow;
    _GArrowRecordBatchBuilder* garrow_record_batch_builder_new(_GArrowSchema*, _GError**) @nogc nothrow;
    c_long garrow_record_batch_builder_get_initial_capacity(_GArrowRecordBatchBuilder*) @nogc nothrow;
    void garrow_record_batch_builder_set_initial_capacity(_GArrowRecordBatchBuilder*, c_long) @nogc nothrow;
    _GArrowSchema* garrow_record_batch_builder_get_schema(_GArrowRecordBatchBuilder*) @nogc nothrow;
    int garrow_record_batch_builder_get_n_fields(_GArrowRecordBatchBuilder*) @nogc nothrow;
    int garrow_record_batch_builder_get_n_columns(_GArrowRecordBatchBuilder*) @nogc nothrow;
    _GArrowArrayBuilder* garrow_record_batch_builder_get_field(_GArrowRecordBatchBuilder*, int) @nogc nothrow;
    _GArrowArrayBuilder* garrow_record_batch_builder_get_column_builder(_GArrowRecordBatchBuilder*, int) @nogc nothrow;
    _GArrowRecordBatch* garrow_record_batch_builder_flush(_GArrowRecordBatchBuilder*, _GError**) @nogc nothrow;
    struct _GArrowTableClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowTableClass* GARROW_TABLE_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TABLE_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TABLE(void*) @nogc nothrow;
    static _GArrowTableClass* GARROW_TABLE_CLASS(void*) @nogc nothrow;
    static _GArrowTable* GARROW_TABLE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowTable(_GArrowTable**) @nogc nothrow;
    alias GArrowTable_autoptr = _GArrowTable*;
    struct _GArrowTable
    {
        _GObject parent_instance;
    }
    alias GArrowTableClass = _GArrowTableClass;
    alias GArrowTable = _GArrowTable;
    c_ulong garrow_table_get_type() @nogc nothrow;
    _GArrowTable* garrow_table_new_values(_GArrowSchema*, _GList*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_new_chunked_arrays(_GArrowSchema*, _GArrowChunkedArray**, c_ulong, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_new_arrays(_GArrowSchema*, _GArrowArray**, c_ulong, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_new_record_batches(_GArrowSchema*, _GArrowRecordBatch**, c_ulong, _GError**) @nogc nothrow;
    int garrow_table_equal(_GArrowTable*, _GArrowTable*) @nogc nothrow;
    int garrow_table_equal_metadata(_GArrowTable*, _GArrowTable*, int) @nogc nothrow;
    _GArrowSchema* garrow_table_get_schema(_GArrowTable*) @nogc nothrow;
    _GArrowChunkedArray* garrow_table_get_column_data(_GArrowTable*, int) @nogc nothrow;
    uint garrow_table_get_n_columns(_GArrowTable*) @nogc nothrow;
    c_ulong garrow_table_get_n_rows(_GArrowTable*) @nogc nothrow;
    _GArrowTable* garrow_table_add_column(_GArrowTable*, uint, _GArrowField*, _GArrowChunkedArray*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_remove_column(_GArrowTable*, uint, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_replace_column(_GArrowTable*, uint, _GArrowField*, _GArrowChunkedArray*, _GError**) @nogc nothrow;
    char* garrow_table_to_string(_GArrowTable*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_concatenate(_GArrowTable*, _GList*, _GError**) @nogc nothrow;
    _GArrowTable* garrow_table_slice(_GArrowTable*, c_long, c_long) @nogc nothrow;
    _GArrowTable* garrow_table_combine_chunks(_GArrowTable*, _GError**) @nogc nothrow;
    alias __uint32_t = uint;
    struct _GArrowFeatherWritePropertiesClass
    {
        _GObjectClass parent_class;
    }
    static _GArrowFeatherWritePropertiesClass* GARROW_FEATHER_WRITE_PROPERTIES_GET_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FEATHER_WRITE_PROPERTIES_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_FEATHER_WRITE_PROPERTIES(void*) @nogc nothrow;
    static _GArrowFeatherWritePropertiesClass* GARROW_FEATHER_WRITE_PROPERTIES_CLASS(void*) @nogc nothrow;
    static _GArrowFeatherWriteProperties* GARROW_FEATHER_WRITE_PROPERTIES(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowFeatherWriteProperties(_GArrowFeatherWriteProperties**) @nogc nothrow;
    alias GArrowFeatherWriteProperties_autoptr = _GArrowFeatherWriteProperties*;
    alias GArrowFeatherWritePropertiesClass = _GArrowFeatherWritePropertiesClass;
    alias GArrowFeatherWriteProperties = _GArrowFeatherWriteProperties;
    struct _GArrowFeatherWriteProperties{};
    c_ulong garrow_feather_write_properties_get_type() @nogc nothrow;
    _GArrowFeatherWriteProperties* garrow_feather_write_properties_new() @nogc nothrow;
    int garrow_table_write_as_feather(_GArrowTable*, _GArrowOutputStream*, _GArrowFeatherWriteProperties*, _GError**) @nogc nothrow;
    alias __int32_t = int;
    struct _GArrowTensor{};
    c_ulong garrow_tensor_get_type() @nogc nothrow;
    alias GArrowTensor = _GArrowTensor;
    struct _GArrowTensorClass{};
    alias GArrowTensorClass = _GArrowTensorClass;
    alias GArrowTensor_autoptr = _GArrowTensor*;
    static int GARROW_IS_TENSOR_CLASS(void*) @nogc nothrow;
    static int GARROW_IS_TENSOR(void*) @nogc nothrow;
    static _GArrowTensorClass* GARROW_TENSOR_CLASS(void*) @nogc nothrow;
    static _GArrowTensor* GARROW_TENSOR(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GArrowTensor(_GArrowTensor**) @nogc nothrow;
    static _GArrowTensorClass* GARROW_TENSOR_GET_CLASS(void*) @nogc nothrow;
    _GArrowTensor* garrow_tensor_new(_GArrowDataType*, _GArrowBuffer*, c_long*, c_ulong, c_long*, c_ulong, char**, c_ulong) @nogc nothrow;
    int garrow_tensor_equal(_GArrowTensor*, _GArrowTensor*) @nogc nothrow;
    _GArrowDataType* garrow_tensor_get_value_data_type(_GArrowTensor*) @nogc nothrow;
    GArrowType garrow_tensor_get_value_type(_GArrowTensor*) @nogc nothrow;
    _GArrowBuffer* garrow_tensor_get_buffer(_GArrowTensor*) @nogc nothrow;
    c_long* garrow_tensor_get_shape(_GArrowTensor*, int*) @nogc nothrow;
    c_long* garrow_tensor_get_strides(_GArrowTensor*, int*) @nogc nothrow;
    int garrow_tensor_get_n_dimensions(_GArrowTensor*) @nogc nothrow;
    const(char)* garrow_tensor_get_dimension_name(_GArrowTensor*, int) @nogc nothrow;
    c_long garrow_tensor_get_size(_GArrowTensor*) @nogc nothrow;
    int garrow_tensor_is_mutable(_GArrowTensor*) @nogc nothrow;
    int garrow_tensor_is_contiguous(_GArrowTensor*) @nogc nothrow;
    int garrow_tensor_is_row_major(_GArrowTensor*) @nogc nothrow;
    int garrow_tensor_is_column_major(_GArrowTensor*) @nogc nothrow;
    alias GArrowType = _Anonymous_21;
    enum _Anonymous_21
    {
        GARROW_TYPE_NA = 0,
        GARROW_TYPE_BOOLEAN = 1,
        GARROW_TYPE_UINT8 = 2,
        GARROW_TYPE_INT8 = 3,
        GARROW_TYPE_UINT16 = 4,
        GARROW_TYPE_INT16 = 5,
        GARROW_TYPE_UINT32 = 6,
        GARROW_TYPE_INT32 = 7,
        GARROW_TYPE_UINT64 = 8,
        GARROW_TYPE_INT64 = 9,
        GARROW_TYPE_HALF_FLOAT = 10,
        GARROW_TYPE_FLOAT = 11,
        GARROW_TYPE_DOUBLE = 12,
        GARROW_TYPE_STRING = 13,
        GARROW_TYPE_BINARY = 14,
        GARROW_TYPE_FIXED_SIZE_BINARY = 15,
        GARROW_TYPE_DATE32 = 16,
        GARROW_TYPE_DATE64 = 17,
        GARROW_TYPE_TIMESTAMP = 18,
        GARROW_TYPE_TIME32 = 19,
        GARROW_TYPE_TIME64 = 20,
        GARROW_TYPE_INTERVAL_MONTHS = 21,
        GARROW_TYPE_INTERVAL_DAY_TIME = 22,
        GARROW_TYPE_DECIMAL128 = 23,
        GARROW_TYPE_DECIMAL256 = 24,
        GARROW_TYPE_LIST = 25,
        GARROW_TYPE_STRUCT = 26,
        GARROW_TYPE_SPARSE_UNION = 27,
        GARROW_TYPE_DENSE_UNION = 28,
        GARROW_TYPE_DICTIONARY = 29,
        GARROW_TYPE_MAP = 30,
        GARROW_TYPE_EXTENSION = 31,
        GARROW_TYPE_FIXED_SIZE_LIST = 32,
        GARROW_TYPE_DURATION = 33,
        GARROW_TYPE_LARGE_STRING = 34,
        GARROW_TYPE_LARGE_BINARY = 35,
        GARROW_TYPE_LARGE_LIST = 36,
    }
    enum GARROW_TYPE_NA = _Anonymous_21.GARROW_TYPE_NA;
    enum GARROW_TYPE_BOOLEAN = _Anonymous_21.GARROW_TYPE_BOOLEAN;
    enum GARROW_TYPE_UINT8 = _Anonymous_21.GARROW_TYPE_UINT8;
    enum GARROW_TYPE_INT8 = _Anonymous_21.GARROW_TYPE_INT8;
    enum GARROW_TYPE_UINT16 = _Anonymous_21.GARROW_TYPE_UINT16;
    enum GARROW_TYPE_INT16 = _Anonymous_21.GARROW_TYPE_INT16;
    enum GARROW_TYPE_UINT32 = _Anonymous_21.GARROW_TYPE_UINT32;
    enum GARROW_TYPE_INT32 = _Anonymous_21.GARROW_TYPE_INT32;
    enum GARROW_TYPE_UINT64 = _Anonymous_21.GARROW_TYPE_UINT64;
    enum GARROW_TYPE_INT64 = _Anonymous_21.GARROW_TYPE_INT64;
    enum GARROW_TYPE_HALF_FLOAT = _Anonymous_21.GARROW_TYPE_HALF_FLOAT;
    enum GARROW_TYPE_FLOAT = _Anonymous_21.GARROW_TYPE_FLOAT;
    enum GARROW_TYPE_DOUBLE = _Anonymous_21.GARROW_TYPE_DOUBLE;
    enum GARROW_TYPE_STRING = _Anonymous_21.GARROW_TYPE_STRING;
    enum GARROW_TYPE_BINARY = _Anonymous_21.GARROW_TYPE_BINARY;
    enum GARROW_TYPE_FIXED_SIZE_BINARY = _Anonymous_21.GARROW_TYPE_FIXED_SIZE_BINARY;
    enum GARROW_TYPE_DATE32 = _Anonymous_21.GARROW_TYPE_DATE32;
    enum GARROW_TYPE_DATE64 = _Anonymous_21.GARROW_TYPE_DATE64;
    enum GARROW_TYPE_TIMESTAMP = _Anonymous_21.GARROW_TYPE_TIMESTAMP;
    enum GARROW_TYPE_TIME32 = _Anonymous_21.GARROW_TYPE_TIME32;
    enum GARROW_TYPE_TIME64 = _Anonymous_21.GARROW_TYPE_TIME64;
    enum GARROW_TYPE_INTERVAL_MONTHS = _Anonymous_21.GARROW_TYPE_INTERVAL_MONTHS;
    enum GARROW_TYPE_INTERVAL_DAY_TIME = _Anonymous_21.GARROW_TYPE_INTERVAL_DAY_TIME;
    enum GARROW_TYPE_DECIMAL128 = _Anonymous_21.GARROW_TYPE_DECIMAL128;
    enum GARROW_TYPE_DECIMAL256 = _Anonymous_21.GARROW_TYPE_DECIMAL256;
    enum GARROW_TYPE_LIST = _Anonymous_21.GARROW_TYPE_LIST;
    enum GARROW_TYPE_STRUCT = _Anonymous_21.GARROW_TYPE_STRUCT;
    enum GARROW_TYPE_SPARSE_UNION = _Anonymous_21.GARROW_TYPE_SPARSE_UNION;
    enum GARROW_TYPE_DENSE_UNION = _Anonymous_21.GARROW_TYPE_DENSE_UNION;
    enum GARROW_TYPE_DICTIONARY = _Anonymous_21.GARROW_TYPE_DICTIONARY;
    enum GARROW_TYPE_MAP = _Anonymous_21.GARROW_TYPE_MAP;
    enum GARROW_TYPE_EXTENSION = _Anonymous_21.GARROW_TYPE_EXTENSION;
    enum GARROW_TYPE_FIXED_SIZE_LIST = _Anonymous_21.GARROW_TYPE_FIXED_SIZE_LIST;
    enum GARROW_TYPE_DURATION = _Anonymous_21.GARROW_TYPE_DURATION;
    enum GARROW_TYPE_LARGE_STRING = _Anonymous_21.GARROW_TYPE_LARGE_STRING;
    enum GARROW_TYPE_LARGE_BINARY = _Anonymous_21.GARROW_TYPE_LARGE_BINARY;
    enum GARROW_TYPE_LARGE_LIST = _Anonymous_21.GARROW_TYPE_LARGE_LIST;
    alias GArrowTimeUnit = _Anonymous_22;
    enum _Anonymous_22
    {
        GARROW_TIME_UNIT_SECOND = 0,
        GARROW_TIME_UNIT_MILLI = 1,
        GARROW_TIME_UNIT_MICRO = 2,
        GARROW_TIME_UNIT_NANO = 3,
    }
    enum GARROW_TIME_UNIT_SECOND = _Anonymous_22.GARROW_TIME_UNIT_SECOND;
    enum GARROW_TIME_UNIT_MILLI = _Anonymous_22.GARROW_TIME_UNIT_MILLI;
    enum GARROW_TIME_UNIT_MICRO = _Anonymous_22.GARROW_TIME_UNIT_MICRO;
    enum GARROW_TIME_UNIT_NANO = _Anonymous_22.GARROW_TIME_UNIT_NANO;
    alias __uint16_t = ushort;
    alias __int16_t = short;
    alias __uint8_t = ubyte;
    alias __int8_t = byte;
    alias __u_long = c_ulong;
    alias __u_int = uint;
    alias __u_short = ushort;
    alias __u_char = ubyte;
    struct __pthread_cond_s
    {
        static union _Anonymous_23
        {
            ulong __wseq;
            static struct _Anonymous_24
            {
                uint __low;
                uint __high;
            }
            _Anonymous_24 __wseq32;
        }
        _Anonymous_23 _anonymous_25;
        ref auto __wseq() @property @nogc pure nothrow { return _anonymous_25.__wseq; }
        void __wseq(_T_)(auto ref _T_ val) @property @nogc pure nothrow { _anonymous_25.__wseq = val; }
        ref auto __wseq32() @property @nogc pure nothrow { return _anonymous_25.__wseq32; }
        void __wseq32(_T_)(auto ref _T_ val) @property @nogc pure nothrow { _anonymous_25.__wseq32 = val; }
        static union _Anonymous_26
        {
            ulong __g1_start;
            static struct _Anonymous_27
            {
                uint __low;
                uint __high;
            }
            _Anonymous_27 __g1_start32;
        }
        _Anonymous_26 _anonymous_28;
        ref auto __g1_start() @property @nogc pure nothrow { return _anonymous_28.__g1_start; }
        void __g1_start(_T_)(auto ref _T_ val) @property @nogc pure nothrow { _anonymous_28.__g1_start = val; }
        ref auto __g1_start32() @property @nogc pure nothrow { return _anonymous_28.__g1_start32; }
        void __g1_start32(_T_)(auto ref _T_ val) @property @nogc pure nothrow { _anonymous_28.__g1_start32 = val; }
        uint[2] __g_refs;
        uint[2] __g_size;
        uint __g1_orig_size;
        uint __wrefs;
        uint[2] __g_signals;
    }
    struct __pthread_mutex_s
    {
        int __lock;
        uint __count;
        int __owner;
        uint __nusers;
        int __kind;
        short __spins;
        short __elision;
        __pthread_internal_list __list;
    }
    struct __pthread_internal_list
    {
        __pthread_internal_list* __prev;
        __pthread_internal_list* __next;
    }
    alias __pthread_list_t = __pthread_internal_list;
    alias int64_t = c_long;
    alias int32_t = int;
    alias int16_t = short;
    alias int8_t = byte;
    enum _Anonymous_29
    {
        SS_ONSTACK = 1,
        SS_DISABLE = 2,
    }
    enum SS_ONSTACK = _Anonymous_29.SS_ONSTACK;
    enum SS_DISABLE = _Anonymous_29.SS_DISABLE;
    int pthread_kill(c_ulong, int) @nogc nothrow;
    int pthread_sigmask(int, const(__sigset_t)*, __sigset_t*) @nogc nothrow;
    c_ulong garrow_writable_file_get_type() @nogc nothrow;
    struct _GArrowWritableFile{};
    alias GArrowWritableFile = _GArrowWritableFile;
    struct _GArrowWritableFileInterface{};
    alias GArrowWritableFileInterface = _GArrowWritableFileInterface;
    alias GArrowWritableFile_autoptr = _GArrowWritableFile*;
    static void glib_autoptr_cleanup_GArrowWritableFile(_GArrowWritableFile**) @nogc nothrow;
    static _GArrowWritableFile* GARROW_WRITABLE_FILE(void*) @nogc nothrow;
    static int GARROW_IS_WRITABLE_FILE(void*) @nogc nothrow;
    static _GArrowWritableFileInterface* GARROW_WRITABLE_FILE_GET_IFACE(void*) @nogc nothrow;
    int garrow_writable_file_write_at(_GArrowWritableFile*, c_long, const(ubyte)*, c_long, _GError**) @nogc nothrow;
    enum _Anonymous_30
    {
        POLL_IN = 1,
        POLL_OUT = 2,
        POLL_MSG = 3,
        POLL_ERR = 4,
        POLL_PRI = 5,
        POLL_HUP = 6,
    }
    enum POLL_IN = _Anonymous_30.POLL_IN;
    enum POLL_OUT = _Anonymous_30.POLL_OUT;
    enum POLL_MSG = _Anonymous_30.POLL_MSG;
    enum POLL_ERR = _Anonymous_30.POLL_ERR;
    enum POLL_PRI = _Anonymous_30.POLL_PRI;
    enum POLL_HUP = _Anonymous_30.POLL_HUP;
    c_ulong garrow_writable_get_type() @nogc nothrow;
    struct _GArrowWritable{};
    alias GArrowWritable = _GArrowWritable;
    struct _GArrowWritableInterface{};
    alias GArrowWritableInterface = _GArrowWritableInterface;
    alias GArrowWritable_autoptr = _GArrowWritable*;
    static void glib_autoptr_cleanup_GArrowWritable(_GArrowWritable**) @nogc nothrow;
    static _GArrowWritable* GARROW_WRITABLE(void*) @nogc nothrow;
    static int GARROW_IS_WRITABLE(void*) @nogc nothrow;
    static _GArrowWritableInterface* GARROW_WRITABLE_GET_IFACE(void*) @nogc nothrow;
    int garrow_writable_write(_GArrowWritable*, const(ubyte)*, c_long, _GError**) @nogc nothrow;
    int garrow_writable_flush(_GArrowWritable*, _GError**) @nogc nothrow;
    enum _Anonymous_31
    {
        CLD_EXITED = 1,
        CLD_KILLED = 2,
        CLD_DUMPED = 3,
        CLD_TRAPPED = 4,
        CLD_STOPPED = 5,
        CLD_CONTINUED = 6,
    }
    enum CLD_EXITED = _Anonymous_31.CLD_EXITED;
    enum CLD_KILLED = _Anonymous_31.CLD_KILLED;
    enum CLD_DUMPED = _Anonymous_31.CLD_DUMPED;
    enum CLD_TRAPPED = _Anonymous_31.CLD_TRAPPED;
    enum CLD_STOPPED = _Anonymous_31.CLD_STOPPED;
    enum CLD_CONTINUED = _Anonymous_31.CLD_CONTINUED;
    enum _Anonymous_32
    {
        BUS_ADRALN = 1,
        BUS_ADRERR = 2,
        BUS_OBJERR = 3,
        BUS_MCEERR_AR = 4,
        BUS_MCEERR_AO = 5,
    }
    enum BUS_ADRALN = _Anonymous_32.BUS_ADRALN;
    enum BUS_ADRERR = _Anonymous_32.BUS_ADRERR;
    enum BUS_OBJERR = _Anonymous_32.BUS_OBJERR;
    enum BUS_MCEERR_AR = _Anonymous_32.BUS_MCEERR_AR;
    enum BUS_MCEERR_AO = _Anonymous_32.BUS_MCEERR_AO;
    enum _Anonymous_33
    {
        SEGV_MAPERR = 1,
        SEGV_ACCERR = 2,
        SEGV_BNDERR = 3,
        SEGV_PKUERR = 4,
    }
    enum SEGV_MAPERR = _Anonymous_33.SEGV_MAPERR;
    enum SEGV_ACCERR = _Anonymous_33.SEGV_ACCERR;
    enum SEGV_BNDERR = _Anonymous_33.SEGV_BNDERR;
    enum SEGV_PKUERR = _Anonymous_33.SEGV_PKUERR;
    enum _Anonymous_34
    {
        FPE_INTDIV = 1,
        FPE_INTOVF = 2,
        FPE_FLTDIV = 3,
        FPE_FLTOVF = 4,
        FPE_FLTUND = 5,
        FPE_FLTRES = 6,
        FPE_FLTINV = 7,
        FPE_FLTSUB = 8,
    }
    enum FPE_INTDIV = _Anonymous_34.FPE_INTDIV;
    enum FPE_INTOVF = _Anonymous_34.FPE_INTOVF;
    enum FPE_FLTDIV = _Anonymous_34.FPE_FLTDIV;
    enum FPE_FLTOVF = _Anonymous_34.FPE_FLTOVF;
    enum FPE_FLTUND = _Anonymous_34.FPE_FLTUND;
    enum FPE_FLTRES = _Anonymous_34.FPE_FLTRES;
    enum FPE_FLTINV = _Anonymous_34.FPE_FLTINV;
    enum FPE_FLTSUB = _Anonymous_34.FPE_FLTSUB;
    enum _Anonymous_35
    {
        ILL_ILLOPC = 1,
        ILL_ILLOPN = 2,
        ILL_ILLADR = 3,
        ILL_ILLTRP = 4,
        ILL_PRVOPC = 5,
        ILL_PRVREG = 6,
        ILL_COPROC = 7,
        ILL_BADSTK = 8,
    }
    enum ILL_ILLOPC = _Anonymous_35.ILL_ILLOPC;
    enum ILL_ILLOPN = _Anonymous_35.ILL_ILLOPN;
    enum ILL_ILLADR = _Anonymous_35.ILL_ILLADR;
    enum ILL_ILLTRP = _Anonymous_35.ILL_ILLTRP;
    enum ILL_PRVOPC = _Anonymous_35.ILL_PRVOPC;
    enum ILL_PRVREG = _Anonymous_35.ILL_PRVREG;
    enum ILL_COPROC = _Anonymous_35.ILL_COPROC;
    enum ILL_BADSTK = _Anonymous_35.ILL_BADSTK;
    alias GArrowRecordBatchWriter = _GArrowRecordBatchWriter;
    struct _GArrowRecordBatchWriter
    {
        _GObject parent_instance;
    }
    alias GArrowRecordBatchWriterClass = _GArrowRecordBatchWriterClass;
    struct _GArrowRecordBatchWriterClass
    {
        _GObjectClass parent_class;
    }
    c_ulong garrow_record_batch_writer_get_type() @nogc nothrow;
    int garrow_record_batch_writer_write_record_batch(_GArrowRecordBatchWriter*, _GArrowRecordBatch*, _GError**) @nogc nothrow;
    int garrow_record_batch_writer_write_table(_GArrowRecordBatchWriter*, _GArrowTable*, _GError**) @nogc nothrow;
    int garrow_record_batch_writer_close(_GArrowRecordBatchWriter*, _GError**) @nogc nothrow;
    enum _Anonymous_36
    {
        SI_ASYNCNL = -60,
        SI_TKILL = -6,
        SI_SIGIO = -5,
        SI_ASYNCIO = -4,
        SI_MESGQ = -3,
        SI_TIMER = -2,
        SI_QUEUE = -1,
        SI_USER = 0,
        SI_KERNEL = 128,
    }
    enum SI_ASYNCNL = _Anonymous_36.SI_ASYNCNL;
    enum SI_TKILL = _Anonymous_36.SI_TKILL;
    enum SI_SIGIO = _Anonymous_36.SI_SIGIO;
    enum SI_ASYNCIO = _Anonymous_36.SI_ASYNCIO;
    enum SI_MESGQ = _Anonymous_36.SI_MESGQ;
    enum SI_TIMER = _Anonymous_36.SI_TIMER;
    enum SI_QUEUE = _Anonymous_36.SI_QUEUE;
    enum SI_USER = _Anonymous_36.SI_USER;
    enum SI_KERNEL = _Anonymous_36.SI_KERNEL;
    alias GArrowRecordBatchStreamWriter = _GArrowRecordBatchStreamWriter;
    struct _GArrowRecordBatchStreamWriter
    {
        _GArrowRecordBatchWriter parent_instance;
    }
    alias GArrowRecordBatchStreamWriterClass = _GArrowRecordBatchStreamWriterClass;
    struct _GArrowRecordBatchStreamWriterClass
    {
        _GArrowRecordBatchWriterClass parent_class;
    }
    c_ulong garrow_record_batch_stream_writer_get_type() @nogc nothrow;
    _GArrowRecordBatchStreamWriter* garrow_record_batch_stream_writer_new(_GArrowOutputStream*, _GArrowSchema*, _GError**) @nogc nothrow;
    enum _Anonymous_37
    {
        SIGEV_SIGNAL = 0,
        SIGEV_NONE = 1,
        SIGEV_THREAD = 2,
        SIGEV_THREAD_ID = 4,
    }
    enum SIGEV_SIGNAL = _Anonymous_37.SIGEV_SIGNAL;
    enum SIGEV_NONE = _Anonymous_37.SIGEV_NONE;
    enum SIGEV_THREAD = _Anonymous_37.SIGEV_THREAD;
    enum SIGEV_THREAD_ID = _Anonymous_37.SIGEV_THREAD_ID;
    struct _xstate
    {
        _fpstate fpstate;
        _xsave_hdr xstate_hdr;
        _ymmh_state ymmh;
    }
    struct _ymmh_state
    {
        uint[64] ymmh_space;
    }
    struct _xsave_hdr
    {
        c_ulong xstate_bv;
        c_ulong[2] __glibc_reserved1;
        c_ulong[5] __glibc_reserved2;
    }
    alias GArrowRecordBatchFileWriter = _GArrowRecordBatchFileWriter;
    struct _GArrowRecordBatchFileWriter
    {
        _GArrowRecordBatchStreamWriter parent_instance;
    }
    alias GArrowRecordBatchFileWriterClass = _GArrowRecordBatchFileWriterClass;
    struct _GArrowRecordBatchFileWriterClass
    {
        _GArrowRecordBatchStreamWriterClass parent_class;
    }
    c_ulong garrow_record_batch_file_writer_get_type() @nogc nothrow;
    _GArrowRecordBatchFileWriter* garrow_record_batch_file_writer_new(_GArrowOutputStream*, _GArrowSchema*, _GError**) @nogc nothrow;
    struct sigcontext
    {
        c_ulong r8;
        c_ulong r9;
        c_ulong r10;
        c_ulong r11;
        c_ulong r12;
        c_ulong r13;
        c_ulong r14;
        c_ulong r15;
        c_ulong rdi;
        c_ulong rsi;
        c_ulong rbp;
        c_ulong rbx;
        c_ulong rdx;
        c_ulong rax;
        c_ulong rcx;
        c_ulong rsp;
        c_ulong rip;
        c_ulong eflags;
        ushort cs;
        ushort gs;
        ushort fs;
        ushort __pad0;
        c_ulong err;
        c_ulong trapno;
        c_ulong oldmask;
        c_ulong cr2;
        static union _Anonymous_38
        {
            _fpstate* fpstate;
            c_ulong __fpstate_word;
        }
        _Anonymous_38 _anonymous_39;
        ref auto fpstate() @property @nogc pure nothrow { return _anonymous_39.fpstate; }
        void fpstate(_T_)(auto ref _T_ val) @property @nogc pure nothrow { _anonymous_39.fpstate = val; }
        ref auto __fpstate_word() @property @nogc pure nothrow { return _anonymous_39.__fpstate_word; }
        void __fpstate_word(_T_)(auto ref _T_ val) @property @nogc pure nothrow { _anonymous_39.__fpstate_word = val; }
        c_ulong[8] __reserved1;
    }
    struct _fpstate
    {
        ushort cwd;
        ushort swd;
        ushort ftw;
        ushort fop;
        c_ulong rip;
        c_ulong rdp;
        uint mxcsr;
        uint mxcr_mask;
        _fpxreg[8] _st;
        _xmmreg[16] _xmm;
        uint[24] __glibc_reserved1;
    }
    pragma(mangle, "alloca") void* alloca_(c_ulong) @nogc nothrow;
    struct _xmmreg
    {
        uint[4] element;
    }
    struct _fpxreg
    {
        ushort[4] significand;
        ushort exponent;
        ushort[3] __glibc_reserved1;
    }
    struct _fpreg
    {
        ushort[4] significand;
        ushort exponent;
    }
    enum _Anonymous_40
    {
        DT_UNKNOWN = 0,
        DT_FIFO = 1,
        DT_CHR = 2,
        DT_DIR = 4,
        DT_BLK = 6,
        DT_REG = 8,
        DT_LNK = 10,
        DT_SOCK = 12,
        DT_WHT = 14,
    }
    enum DT_UNKNOWN = _Anonymous_40.DT_UNKNOWN;
    enum DT_FIFO = _Anonymous_40.DT_FIFO;
    enum DT_CHR = _Anonymous_40.DT_CHR;
    enum DT_DIR = _Anonymous_40.DT_DIR;
    enum DT_BLK = _Anonymous_40.DT_BLK;
    enum DT_REG = _Anonymous_40.DT_REG;
    enum DT_LNK = _Anonymous_40.DT_LNK;
    enum DT_SOCK = _Anonymous_40.DT_SOCK;
    enum DT_WHT = _Anonymous_40.DT_WHT;
    struct _fpx_sw_bytes
    {
        uint magic1;
        uint extended_size;
        c_ulong xstate_bv;
        uint xstate_size;
        uint[7] __glibc_reserved1;
    }
    struct sigaction
    {
        static union _Anonymous_41
        {
            void function(int) sa_handler;
            void function(int, siginfo_t*, void*) sa_sigaction;
        }
        _Anonymous_41 __sigaction_handler;
        __sigset_t sa_mask;
        int sa_flags;
        void function() sa_restorer;
    }
    alias __jmp_buf = c_long[8];
    alias DIR = __dirstream;
    struct __dirstream{};
    __dirstream* opendir(const(char)*) @nogc nothrow;
    __dirstream* fdopendir(int) @nogc nothrow;
    int closedir(__dirstream*) @nogc nothrow;
    dirent* readdir(__dirstream*) @nogc nothrow;
    int readdir_r(__dirstream*, dirent*, dirent**) @nogc nothrow;
    void rewinddir(__dirstream*) @nogc nothrow;
    void seekdir(__dirstream*, c_long) @nogc nothrow;
    c_long telldir(__dirstream*) @nogc nothrow;
    int dirfd(__dirstream*) @nogc nothrow;
    int scandir(const(char)*, dirent***, int function(const(dirent)*), int function(const(dirent)**, const(dirent)**)) @nogc nothrow;
    int alphasort(const(dirent)**, const(dirent)**) @nogc nothrow;
    c_long getdirentries(int, char*, c_ulong, c_long*) @nogc nothrow;
    struct sched_param
    {
        int sched_priority;
    }
    union pthread_barrierattr_t
    {
        char[4] __size;
        int __align;
    }
    union pthread_barrier_t
    {
        char[32] __size;
        c_long __align;
    }
    alias pthread_spinlock_t = int;
    union pthread_rwlockattr_t
    {
        char[8] __size;
        c_long __align;
    }
    union pthread_rwlock_t
    {
        __pthread_rwlock_arch_t __data;
        char[56] __size;
        c_long __align;
    }
    union pthread_cond_t
    {
        __pthread_cond_s __data;
        char[48] __size;
        long __align;
    }
    union pthread_mutex_t
    {
        __pthread_mutex_s __data;
        char[40] __size;
        c_long __align;
    }
    union pthread_attr_t
    {
        char[56] __size;
        c_long __align;
    }
    alias pthread_once_t = int;
    alias pthread_key_t = uint;
    union pthread_condattr_t
    {
        char[4] __size;
        int __align;
    }
    union pthread_mutexattr_t
    {
        char[4] __size;
        int __align;
    }
    alias pthread_t = c_ulong;
    struct __pthread_rwlock_arch_t
    {
        uint __readers;
        uint __writers;
        uint __wrphase_futex;
        uint __writers_futex;
        uint __pad3;
        uint __pad4;
        int __cur_writer;
        int __shared;
        byte __rwelision;
        ubyte[7] __pad1;
        c_ulong __pad2;
        uint __flags;
    }
    alias GActionInterface = _GActionInterface;
    struct _GActionInterface
    {
        _GTypeInterface g_iface;
        const(char)* function(_GAction*) get_name;
        const(_GVariantType)* function(_GAction*) get_parameter_type;
        const(_GVariantType)* function(_GAction*) get_state_type;
        _GVariant* function(_GAction*) get_state_hint;
        int function(_GAction*) get_enabled;
        _GVariant* function(_GAction*) get_state;
        void function(_GAction*, _GVariant*) change_state;
        void function(_GAction*, _GVariant*) activate;
    }
    c_ulong g_action_get_type() @nogc nothrow;
    const(char)* g_action_get_name(_GAction*) @nogc nothrow;
    const(_GVariantType)* g_action_get_parameter_type(_GAction*) @nogc nothrow;
    const(_GVariantType)* g_action_get_state_type(_GAction*) @nogc nothrow;
    _GVariant* g_action_get_state_hint(_GAction*) @nogc nothrow;
    int g_action_get_enabled(_GAction*) @nogc nothrow;
    _GVariant* g_action_get_state(_GAction*) @nogc nothrow;
    void g_action_change_state(_GAction*, _GVariant*) @nogc nothrow;
    void g_action_activate(_GAction*, _GVariant*) @nogc nothrow;
    int g_action_name_is_valid(const(char)*) @nogc nothrow;
    int g_action_parse_detailed_name(const(char)*, char**, _GVariant**, _GError**) @nogc nothrow;
    char* g_action_print_detailed_name(const(char)*, _GVariant*) @nogc nothrow;
    alias GActionGroupInterface = _GActionGroupInterface;
    struct _GActionGroupInterface
    {
        _GTypeInterface g_iface;
        int function(_GActionGroup*, const(char)*) has_action;
        char** function(_GActionGroup*) list_actions;
        int function(_GActionGroup*, const(char)*) get_action_enabled;
        const(_GVariantType)* function(_GActionGroup*, const(char)*) get_action_parameter_type;
        const(_GVariantType)* function(_GActionGroup*, const(char)*) get_action_state_type;
        _GVariant* function(_GActionGroup*, const(char)*) get_action_state_hint;
        _GVariant* function(_GActionGroup*, const(char)*) get_action_state;
        void function(_GActionGroup*, const(char)*, _GVariant*) change_action_state;
        void function(_GActionGroup*, const(char)*, _GVariant*) activate_action;
        void function(_GActionGroup*, const(char)*) action_added;
        void function(_GActionGroup*, const(char)*) action_removed;
        void function(_GActionGroup*, const(char)*, int) action_enabled_changed;
        void function(_GActionGroup*, const(char)*, _GVariant*) action_state_changed;
        int function(_GActionGroup*, const(char)*, int*, const(_GVariantType)**, const(_GVariantType)**, _GVariant**, _GVariant**) query_action;
    }
    c_ulong g_action_group_get_type() @nogc nothrow;
    int g_action_group_has_action(_GActionGroup*, const(char)*) @nogc nothrow;
    char** g_action_group_list_actions(_GActionGroup*) @nogc nothrow;
    const(_GVariantType)* g_action_group_get_action_parameter_type(_GActionGroup*, const(char)*) @nogc nothrow;
    const(_GVariantType)* g_action_group_get_action_state_type(_GActionGroup*, const(char)*) @nogc nothrow;
    _GVariant* g_action_group_get_action_state_hint(_GActionGroup*, const(char)*) @nogc nothrow;
    int g_action_group_get_action_enabled(_GActionGroup*, const(char)*) @nogc nothrow;
    _GVariant* g_action_group_get_action_state(_GActionGroup*, const(char)*) @nogc nothrow;
    void g_action_group_change_action_state(_GActionGroup*, const(char)*, _GVariant*) @nogc nothrow;
    void g_action_group_activate_action(_GActionGroup*, const(char)*, _GVariant*) @nogc nothrow;
    void g_action_group_action_added(_GActionGroup*, const(char)*) @nogc nothrow;
    void g_action_group_action_removed(_GActionGroup*, const(char)*) @nogc nothrow;
    void g_action_group_action_enabled_changed(_GActionGroup*, const(char)*, int) @nogc nothrow;
    void g_action_group_action_state_changed(_GActionGroup*, const(char)*, _GVariant*) @nogc nothrow;
    int g_action_group_query_action(_GActionGroup*, const(char)*, int*, const(_GVariantType)**, const(_GVariantType)**, _GVariant**, _GVariant**) @nogc nothrow;
    uint g_dbus_connection_export_action_group(_GDBusConnection*, const(char)*, _GActionGroup*, _GError**) @nogc nothrow;
    void g_dbus_connection_unexport_action_group(_GDBusConnection*, uint) @nogc nothrow;
    alias GActionMapInterface = _GActionMapInterface;
    struct _GActionMapInterface
    {
        _GTypeInterface g_iface;
        _GAction* function(_GActionMap*, const(char)*) lookup_action;
        void function(_GActionMap*, _GAction*) add_action;
        void function(_GActionMap*, const(char)*) remove_action;
    }
    alias GActionEntry = _GActionEntry;
    struct _GActionEntry
    {
        const(char)* name;
        void function(_GSimpleAction*, _GVariant*, void*) activate;
        const(char)* parameter_type;
        const(char)* state;
        void function(_GSimpleAction*, _GVariant*, void*) change_state;
        c_ulong[3] padding;
    }
    c_ulong g_action_map_get_type() @nogc nothrow;
    _GAction* g_action_map_lookup_action(_GActionMap*, const(char)*) @nogc nothrow;
    void g_action_map_add_action(_GActionMap*, _GAction*) @nogc nothrow;
    void g_action_map_remove_action(_GActionMap*, const(char)*) @nogc nothrow;
    void g_action_map_add_action_entries(_GActionMap*, const(_GActionEntry)*, int, void*) @nogc nothrow;
    alias GAppLaunchContextClass = _GAppLaunchContextClass;
    struct _GAppLaunchContextClass
    {
        _GObjectClass parent_class;
        char* function(_GAppLaunchContext*, _GAppInfo*, _GList*) get_display;
        char* function(_GAppLaunchContext*, _GAppInfo*, _GList*) get_startup_notify_id;
        void function(_GAppLaunchContext*, const(char)*) launch_failed;
        void function(_GAppLaunchContext*, _GAppInfo*, _GVariant*) launched;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
    }
    alias GAppLaunchContextPrivate = _GAppLaunchContextPrivate;
    struct _GAppLaunchContextPrivate{};
    alias GAppInfoIface = _GAppInfoIface;
    struct _GAppInfoIface
    {
        _GTypeInterface g_iface;
        _GAppInfo* function(_GAppInfo*) dup;
        int function(_GAppInfo*, _GAppInfo*) equal;
        const(char)* function(_GAppInfo*) get_id;
        const(char)* function(_GAppInfo*) get_name;
        const(char)* function(_GAppInfo*) get_description;
        const(char)* function(_GAppInfo*) get_executable;
        _GIcon* function(_GAppInfo*) get_icon;
        int function(_GAppInfo*, _GList*, _GAppLaunchContext*, _GError**) launch;
        int function(_GAppInfo*) supports_uris;
        int function(_GAppInfo*) supports_files;
        int function(_GAppInfo*, _GList*, _GAppLaunchContext*, _GError**) launch_uris;
        int function(_GAppInfo*) should_show;
        int function(_GAppInfo*, const(char)*, _GError**) set_as_default_for_type;
        int function(_GAppInfo*, const(char)*, _GError**) set_as_default_for_extension;
        int function(_GAppInfo*, const(char)*, _GError**) add_supports_type;
        int function(_GAppInfo*) can_remove_supports_type;
        int function(_GAppInfo*, const(char)*, _GError**) remove_supports_type;
        int function(_GAppInfo*) can_delete;
        int function(_GAppInfo*) do_delete;
        const(char)* function(_GAppInfo*) get_commandline;
        const(char)* function(_GAppInfo*) get_display_name;
        int function(_GAppInfo*, const(char)*, _GError**) set_as_last_used_for_type;
        const(char)** function(_GAppInfo*) get_supported_types;
    }
    c_ulong g_app_info_get_type() @nogc nothrow;
    _GAppInfo* g_app_info_create_from_commandline(const(char)*, const(char)*, GAppInfoCreateFlags, _GError**) @nogc nothrow;
    _GAppInfo* g_app_info_dup(_GAppInfo*) @nogc nothrow;
    int g_app_info_equal(_GAppInfo*, _GAppInfo*) @nogc nothrow;
    const(char)* g_app_info_get_id(_GAppInfo*) @nogc nothrow;
    const(char)* g_app_info_get_name(_GAppInfo*) @nogc nothrow;
    const(char)* g_app_info_get_display_name(_GAppInfo*) @nogc nothrow;
    const(char)* g_app_info_get_description(_GAppInfo*) @nogc nothrow;
    const(char)* g_app_info_get_executable(_GAppInfo*) @nogc nothrow;
    const(char)* g_app_info_get_commandline(_GAppInfo*) @nogc nothrow;
    _GIcon* g_app_info_get_icon(_GAppInfo*) @nogc nothrow;
    int g_app_info_launch(_GAppInfo*, _GList*, _GAppLaunchContext*, _GError**) @nogc nothrow;
    int g_app_info_supports_uris(_GAppInfo*) @nogc nothrow;
    int g_app_info_supports_files(_GAppInfo*) @nogc nothrow;
    int g_app_info_launch_uris(_GAppInfo*, _GList*, _GAppLaunchContext*, _GError**) @nogc nothrow;
    int g_app_info_should_show(_GAppInfo*) @nogc nothrow;
    int g_app_info_set_as_default_for_type(_GAppInfo*, const(char)*, _GError**) @nogc nothrow;
    int g_app_info_set_as_default_for_extension(_GAppInfo*, const(char)*, _GError**) @nogc nothrow;
    int g_app_info_add_supports_type(_GAppInfo*, const(char)*, _GError**) @nogc nothrow;
    int g_app_info_can_remove_supports_type(_GAppInfo*) @nogc nothrow;
    int g_app_info_remove_supports_type(_GAppInfo*, const(char)*, _GError**) @nogc nothrow;
    const(char)** g_app_info_get_supported_types(_GAppInfo*) @nogc nothrow;
    int g_app_info_can_delete(_GAppInfo*) @nogc nothrow;
    int g_app_info_delete(_GAppInfo*) @nogc nothrow;
    int g_app_info_set_as_last_used_for_type(_GAppInfo*, const(char)*, _GError**) @nogc nothrow;
    _GList* g_app_info_get_all() @nogc nothrow;
    _GList* g_app_info_get_all_for_type(const(char)*) @nogc nothrow;
    _GList* g_app_info_get_recommended_for_type(const(char)*) @nogc nothrow;
    _GList* g_app_info_get_fallback_for_type(const(char)*) @nogc nothrow;
    void g_app_info_reset_type_associations(const(char)*) @nogc nothrow;
    _GAppInfo* g_app_info_get_default_for_type(const(char)*, int) @nogc nothrow;
    _GAppInfo* g_app_info_get_default_for_uri_scheme(const(char)*) @nogc nothrow;
    int g_app_info_launch_default_for_uri(const(char)*, _GAppLaunchContext*, _GError**) @nogc nothrow;
    void g_app_info_launch_default_for_uri_async(const(char)*, _GAppLaunchContext*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_app_info_launch_default_for_uri_finish(_GAsyncResult*, _GError**) @nogc nothrow;
    c_ulong g_app_launch_context_get_type() @nogc nothrow;
    _GAppLaunchContext* g_app_launch_context_new() @nogc nothrow;
    void g_app_launch_context_setenv(_GAppLaunchContext*, const(char)*, const(char)*) @nogc nothrow;
    void g_app_launch_context_unsetenv(_GAppLaunchContext*, const(char)*) @nogc nothrow;
    char** g_app_launch_context_get_environment(_GAppLaunchContext*) @nogc nothrow;
    char* g_app_launch_context_get_display(_GAppLaunchContext*, _GAppInfo*, _GList*) @nogc nothrow;
    char* g_app_launch_context_get_startup_notify_id(_GAppLaunchContext*, _GAppInfo*, _GList*) @nogc nothrow;
    void g_app_launch_context_launch_failed(_GAppLaunchContext*, const(char)*) @nogc nothrow;
    int getopt(int, char**, const(char)*) @nogc nothrow;
    alias GAppInfoMonitor = _GAppInfoMonitor;
    struct _GAppInfoMonitor{};
    c_ulong g_app_info_monitor_get_type() @nogc nothrow;
    _GAppInfoMonitor* g_app_info_monitor_get() @nogc nothrow;
    extern __gshared int optopt;
    extern __gshared int opterr;
    extern __gshared int optind;
    extern __gshared char* optarg;
    alias GApplicationPrivate = _GApplicationPrivate;
    struct _GApplicationPrivate{};
    alias GApplicationClass = _GApplicationClass;
    struct _GApplicationClass
    {
        _GObjectClass parent_class;
        void function(_GApplication*) startup;
        void function(_GApplication*) activate;
        void function(_GApplication*, _GFile**, int, const(char)*) open;
        int function(_GApplication*, _GApplicationCommandLine*) command_line;
        int function(_GApplication*, char***, int*) local_command_line;
        void function(_GApplication*, _GVariant*) before_emit;
        void function(_GApplication*, _GVariant*) after_emit;
        void function(_GApplication*, _GVariantBuilder*) add_platform_data;
        void function(_GApplication*) quit_mainloop;
        void function(_GApplication*) run_mainloop;
        void function(_GApplication*) shutdown;
        int function(_GApplication*, _GDBusConnection*, const(char)*, _GError**) dbus_register;
        void function(_GApplication*, _GDBusConnection*, const(char)*) dbus_unregister;
        int function(_GApplication*, _GVariantDict*) handle_local_options;
        void*[8] padding;
    }
    c_ulong g_application_get_type() @nogc nothrow;
    int g_application_id_is_valid(const(char)*) @nogc nothrow;
    _GApplication* g_application_new(const(char)*, GApplicationFlags) @nogc nothrow;
    const(char)* g_application_get_application_id(_GApplication*) @nogc nothrow;
    void g_application_set_application_id(_GApplication*, const(char)*) @nogc nothrow;
    _GDBusConnection* g_application_get_dbus_connection(_GApplication*) @nogc nothrow;
    const(char)* g_application_get_dbus_object_path(_GApplication*) @nogc nothrow;
    uint g_application_get_inactivity_timeout(_GApplication*) @nogc nothrow;
    void g_application_set_inactivity_timeout(_GApplication*, uint) @nogc nothrow;
    GApplicationFlags g_application_get_flags(_GApplication*) @nogc nothrow;
    void g_application_set_flags(_GApplication*, GApplicationFlags) @nogc nothrow;
    const(char)* g_application_get_resource_base_path(_GApplication*) @nogc nothrow;
    void g_application_set_resource_base_path(_GApplication*, const(char)*) @nogc nothrow;
    void g_application_set_action_group(_GApplication*, _GActionGroup*) @nogc nothrow;
    void g_application_add_main_option_entries(_GApplication*, const(_GOptionEntry)*) @nogc nothrow;
    void g_application_add_main_option(_GApplication*, const(char)*, char, GOptionFlags, GOptionArg, const(char)*, const(char)*) @nogc nothrow;
    void g_application_add_option_group(_GApplication*, _GOptionGroup*) @nogc nothrow;
    void g_application_set_option_context_parameter_string(_GApplication*, const(char)*) @nogc nothrow;
    void g_application_set_option_context_summary(_GApplication*, const(char)*) @nogc nothrow;
    void g_application_set_option_context_description(_GApplication*, const(char)*) @nogc nothrow;
    int g_application_get_is_registered(_GApplication*) @nogc nothrow;
    int g_application_get_is_remote(_GApplication*) @nogc nothrow;
    int g_application_register(_GApplication*, _GCancellable*, _GError**) @nogc nothrow;
    void g_application_hold(_GApplication*) @nogc nothrow;
    void g_application_release(_GApplication*) @nogc nothrow;
    void g_application_activate(_GApplication*) @nogc nothrow;
    void g_application_open(_GApplication*, _GFile**, int, const(char)*) @nogc nothrow;
    int g_application_run(_GApplication*, int, char**) @nogc nothrow;
    void g_application_quit(_GApplication*) @nogc nothrow;
    _GApplication* g_application_get_default() @nogc nothrow;
    void g_application_set_default(_GApplication*) @nogc nothrow;
    void g_application_mark_busy(_GApplication*) @nogc nothrow;
    void g_application_unmark_busy(_GApplication*) @nogc nothrow;
    int g_application_get_is_busy(_GApplication*) @nogc nothrow;
    void g_application_send_notification(_GApplication*, const(char)*, _GNotification*) @nogc nothrow;
    void g_application_withdraw_notification(_GApplication*, const(char)*) @nogc nothrow;
    void g_application_bind_busy_property(_GApplication*, void*, const(char)*) @nogc nothrow;
    void g_application_unbind_busy_property(_GApplication*, void*, const(char)*) @nogc nothrow;
    alias GApplicationCommandLinePrivate = _GApplicationCommandLinePrivate;
    struct _GApplicationCommandLinePrivate{};
    alias GApplicationCommandLineClass = _GApplicationCommandLineClass;
    struct _GApplicationCommandLineClass
    {
        _GObjectClass parent_class;
        void function(_GApplicationCommandLine*, const(char)*) print_literal;
        void function(_GApplicationCommandLine*, const(char)*) printerr_literal;
        _GInputStream* function(_GApplicationCommandLine*) get_stdin;
        void*[11] padding;
    }
    c_ulong g_application_command_line_get_type() @nogc nothrow;
    char** g_application_command_line_get_arguments(_GApplicationCommandLine*, int*) @nogc nothrow;
    _GVariantDict* g_application_command_line_get_options_dict(_GApplicationCommandLine*) @nogc nothrow;
    _GInputStream* g_application_command_line_get_stdin(_GApplicationCommandLine*) @nogc nothrow;
    const(const(char)*)* g_application_command_line_get_environ(_GApplicationCommandLine*) @nogc nothrow;
    const(char)* g_application_command_line_getenv(_GApplicationCommandLine*, const(char)*) @nogc nothrow;
    const(char)* g_application_command_line_get_cwd(_GApplicationCommandLine*) @nogc nothrow;
    int g_application_command_line_get_is_remote(_GApplicationCommandLine*) @nogc nothrow;
    void g_application_command_line_print(_GApplicationCommandLine*, const(char)*, ...) @nogc nothrow;
    void g_application_command_line_printerr(_GApplicationCommandLine*, const(char)*, ...) @nogc nothrow;
    int g_application_command_line_get_exit_status(_GApplicationCommandLine*) @nogc nothrow;
    void g_application_command_line_set_exit_status(_GApplicationCommandLine*, int) @nogc nothrow;
    _GVariant* g_application_command_line_get_platform_data(_GApplicationCommandLine*) @nogc nothrow;
    _GFile* g_application_command_line_create_file_for_arg(_GApplicationCommandLine*, const(char)*) @nogc nothrow;
    alias _Float64x = real;
    alias GAsyncInitableIface = _GAsyncInitableIface;
    struct _GAsyncInitableIface
    {
        _GTypeInterface g_iface;
        void function(_GAsyncInitable*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) init_async;
        int function(_GAsyncInitable*, _GAsyncResult*, _GError**) init_finish;
    }
    c_ulong g_async_initable_get_type() @nogc nothrow;
    void g_async_initable_init_async(_GAsyncInitable*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_async_initable_init_finish(_GAsyncInitable*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_async_initable_new_async(c_ulong, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*, const(char)*, ...) @nogc nothrow;
    void g_async_initable_newv_async(c_ulong, uint, _GParameter*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    void g_async_initable_new_valist_async(c_ulong, const(char)*, va_list*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GObject* g_async_initable_new_finish(_GAsyncInitable*, _GAsyncResult*, _GError**) @nogc nothrow;
    alias _Float32x = double;
    alias GAsyncResultIface = _GAsyncResultIface;
    struct _GAsyncResultIface
    {
        _GTypeInterface g_iface;
        void* function(_GAsyncResult*) get_user_data;
        _GObject* function(_GAsyncResult*) get_source_object;
        int function(_GAsyncResult*, void*) is_tagged;
    }
    c_ulong g_async_result_get_type() @nogc nothrow;
    void* g_async_result_get_user_data(_GAsyncResult*) @nogc nothrow;
    _GObject* g_async_result_get_source_object(_GAsyncResult*) @nogc nothrow;
    int g_async_result_legacy_propagate_error(_GAsyncResult*, _GError**) @nogc nothrow;
    int g_async_result_is_tagged(_GAsyncResult*, void*) @nogc nothrow;
    alias _Float64 = double;
    alias _Float32 = float;
    alias GBufferedInputStreamClass = _GBufferedInputStreamClass;
    struct _GBufferedInputStreamClass
    {
        _GFilterInputStreamClass parent_class;
        c_long function(_GBufferedInputStream*, c_long, _GCancellable*, _GError**) fill;
        void function(_GBufferedInputStream*, c_long, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) fill_async;
        c_long function(_GBufferedInputStream*, _GAsyncResult*, _GError**) fill_finish;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GBufferedInputStreamPrivate = _GBufferedInputStreamPrivate;
    struct _GBufferedInputStreamPrivate{};
    c_ulong g_buffered_input_stream_get_type() @nogc nothrow;
    _GInputStream* g_buffered_input_stream_new(_GInputStream*) @nogc nothrow;
    _GInputStream* g_buffered_input_stream_new_sized(_GInputStream*, c_ulong) @nogc nothrow;
    c_ulong g_buffered_input_stream_get_buffer_size(_GBufferedInputStream*) @nogc nothrow;
    void g_buffered_input_stream_set_buffer_size(_GBufferedInputStream*, c_ulong) @nogc nothrow;
    c_ulong g_buffered_input_stream_get_available(_GBufferedInputStream*) @nogc nothrow;
    c_ulong g_buffered_input_stream_peek(_GBufferedInputStream*, void*, c_ulong, c_ulong) @nogc nothrow;
    const(void)* g_buffered_input_stream_peek_buffer(_GBufferedInputStream*, c_ulong*) @nogc nothrow;
    c_long g_buffered_input_stream_fill(_GBufferedInputStream*, c_long, _GCancellable*, _GError**) @nogc nothrow;
    void g_buffered_input_stream_fill_async(_GBufferedInputStream*, c_long, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    c_long g_buffered_input_stream_fill_finish(_GBufferedInputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_buffered_input_stream_read_byte(_GBufferedInputStream*, _GCancellable*, _GError**) @nogc nothrow;
    alias GBufferedOutputStreamClass = _GBufferedOutputStreamClass;
    struct _GBufferedOutputStreamClass
    {
        _GFilterOutputStreamClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
    }
    alias GBufferedOutputStreamPrivate = _GBufferedOutputStreamPrivate;
    struct _GBufferedOutputStreamPrivate{};
    c_ulong g_buffered_output_stream_get_type() @nogc nothrow;
    _GOutputStream* g_buffered_output_stream_new(_GOutputStream*) @nogc nothrow;
    _GOutputStream* g_buffered_output_stream_new_sized(_GOutputStream*, c_ulong) @nogc nothrow;
    c_ulong g_buffered_output_stream_get_buffer_size(_GBufferedOutputStream*) @nogc nothrow;
    void g_buffered_output_stream_set_buffer_size(_GBufferedOutputStream*, c_ulong) @nogc nothrow;
    int g_buffered_output_stream_get_auto_grow(_GBufferedOutputStream*) @nogc nothrow;
    void g_buffered_output_stream_set_auto_grow(_GBufferedOutputStream*, int) @nogc nothrow;
    c_ulong g_bytes_icon_get_type() @nogc nothrow;
    _GIcon* g_bytes_icon_new(_GBytes*) @nogc nothrow;
    _GBytes* g_bytes_icon_get_bytes(_GBytesIcon*) @nogc nothrow;
    alias GCancellableClass = _GCancellableClass;
    struct _GCancellableClass
    {
        _GObjectClass parent_class;
        void function(_GCancellable*) cancelled;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GCancellablePrivate = _GCancellablePrivate;
    struct _GCancellablePrivate{};
    c_ulong g_cancellable_get_type() @nogc nothrow;
    _GCancellable* g_cancellable_new() @nogc nothrow;
    int g_cancellable_is_cancelled(_GCancellable*) @nogc nothrow;
    int g_cancellable_set_error_if_cancelled(_GCancellable*, _GError**) @nogc nothrow;
    int g_cancellable_get_fd(_GCancellable*) @nogc nothrow;
    int g_cancellable_make_pollfd(_GCancellable*, _GPollFD*) @nogc nothrow;
    void g_cancellable_release_fd(_GCancellable*) @nogc nothrow;
    _GSource* g_cancellable_source_new(_GCancellable*) @nogc nothrow;
    _GCancellable* g_cancellable_get_current() @nogc nothrow;
    void g_cancellable_push_current(_GCancellable*) @nogc nothrow;
    void g_cancellable_pop_current(_GCancellable*) @nogc nothrow;
    void g_cancellable_reset(_GCancellable*) @nogc nothrow;
    c_ulong g_cancellable_connect(_GCancellable*, void function(), void*, void function(void*)) @nogc nothrow;
    void g_cancellable_disconnect(_GCancellable*, c_ulong) @nogc nothrow;
    void g_cancellable_cancel(_GCancellable*) @nogc nothrow;
    alias GCharsetConverterClass = _GCharsetConverterClass;
    struct _GCharsetConverterClass
    {
        _GObjectClass parent_class;
    }
    c_ulong g_charset_converter_get_type() @nogc nothrow;
    _GCharsetConverter* g_charset_converter_new(const(char)*, const(char)*, _GError**) @nogc nothrow;
    void g_charset_converter_set_use_fallback(_GCharsetConverter*, int) @nogc nothrow;
    int g_charset_converter_get_use_fallback(_GCharsetConverter*) @nogc nothrow;
    uint g_charset_converter_get_num_fallbacks(_GCharsetConverter*) @nogc nothrow;
    int g_content_type_equals(const(char)*, const(char)*) @nogc nothrow;
    int g_content_type_is_a(const(char)*, const(char)*) @nogc nothrow;
    int g_content_type_is_mime_type(const(char)*, const(char)*) @nogc nothrow;
    int g_content_type_is_unknown(const(char)*) @nogc nothrow;
    char* g_content_type_get_description(const(char)*) @nogc nothrow;
    char* g_content_type_get_mime_type(const(char)*) @nogc nothrow;
    _GIcon* g_content_type_get_icon(const(char)*) @nogc nothrow;
    _GIcon* g_content_type_get_symbolic_icon(const(char)*) @nogc nothrow;
    char* g_content_type_get_generic_icon_name(const(char)*) @nogc nothrow;
    int g_content_type_can_be_executable(const(char)*) @nogc nothrow;
    char* g_content_type_from_mime_type(const(char)*) @nogc nothrow;
    char* g_content_type_guess(const(char)*, const(ubyte)*, c_ulong, int*) @nogc nothrow;
    char** g_content_type_guess_for_tree(_GFile*) @nogc nothrow;
    _GList* g_content_types_get_registered() @nogc nothrow;
    alias GConverterIface = _GConverterIface;
    struct _GConverterIface
    {
        _GTypeInterface g_iface;
        GConverterResult function(_GConverter*, const(void)*, c_ulong, void*, c_ulong, GConverterFlags, c_ulong*, c_ulong*, _GError**) convert;
        void function(_GConverter*) reset;
    }
    c_ulong g_converter_get_type() @nogc nothrow;
    GConverterResult g_converter_convert(_GConverter*, const(void)*, c_ulong, void*, c_ulong, GConverterFlags, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    void g_converter_reset(_GConverter*) @nogc nothrow;
    struct dirent
    {
        c_ulong d_ino;
        c_long d_off;
        ushort d_reclen;
        ubyte d_type;
        char[256] d_name;
    }
    alias GConverterInputStreamClass = _GConverterInputStreamClass;
    struct _GConverterInputStreamClass
    {
        _GFilterInputStreamClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GConverterInputStreamPrivate = _GConverterInputStreamPrivate;
    struct _GConverterInputStreamPrivate{};
    c_ulong g_converter_input_stream_get_type() @nogc nothrow;
    _GInputStream* g_converter_input_stream_new(_GInputStream*, _GConverter*) @nogc nothrow;
    _GConverter* g_converter_input_stream_get_converter(_GConverterInputStream*) @nogc nothrow;
    void __sched_cpufree(cpu_set_t*) @nogc nothrow;
    cpu_set_t* __sched_cpualloc(c_ulong) @nogc nothrow;
    int __sched_cpucount(c_ulong, const(cpu_set_t)*) @nogc nothrow;
    alias GConverterOutputStreamClass = _GConverterOutputStreamClass;
    struct _GConverterOutputStreamClass
    {
        _GFilterOutputStreamClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GConverterOutputStreamPrivate = _GConverterOutputStreamPrivate;
    struct _GConverterOutputStreamPrivate{};
    c_ulong g_converter_output_stream_get_type() @nogc nothrow;
    _GOutputStream* g_converter_output_stream_new(_GOutputStream*, _GConverter*) @nogc nothrow;
    _GConverter* g_converter_output_stream_get_converter(_GConverterOutputStream*) @nogc nothrow;
    struct cpu_set_t
    {
        c_ulong[16] __bits;
    }
    alias GCredentialsClass = _GCredentialsClass;
    struct _GCredentialsClass{};
    c_ulong g_credentials_get_type() @nogc nothrow;
    _GCredentials* g_credentials_new() @nogc nothrow;
    char* g_credentials_to_string(_GCredentials*) @nogc nothrow;
    void* g_credentials_get_native(_GCredentials*, GCredentialsType) @nogc nothrow;
    void g_credentials_set_native(_GCredentials*, GCredentialsType, void*) @nogc nothrow;
    int g_credentials_is_same_user(_GCredentials*, _GCredentials*, _GError**) @nogc nothrow;
    int g_credentials_get_unix_pid(_GCredentials*, _GError**) @nogc nothrow;
    uint g_credentials_get_unix_user(_GCredentials*, _GError**) @nogc nothrow;
    int g_credentials_set_unix_user(_GCredentials*, uint, _GError**) @nogc nothrow;
    alias __cpu_mask = c_ulong;
    enum _Anonymous_42
    {
        _CS_PATH = 0,
        _CS_V6_WIDTH_RESTRICTED_ENVS = 1,
        _CS_GNU_LIBC_VERSION = 2,
        _CS_GNU_LIBPTHREAD_VERSION = 3,
        _CS_V5_WIDTH_RESTRICTED_ENVS = 4,
        _CS_V7_WIDTH_RESTRICTED_ENVS = 5,
        _CS_LFS_CFLAGS = 1000,
        _CS_LFS_LDFLAGS = 1001,
        _CS_LFS_LIBS = 1002,
        _CS_LFS_LINTFLAGS = 1003,
        _CS_LFS64_CFLAGS = 1004,
        _CS_LFS64_LDFLAGS = 1005,
        _CS_LFS64_LIBS = 1006,
        _CS_LFS64_LINTFLAGS = 1007,
        _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
        _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,
        _CS_XBS5_ILP32_OFF32_LIBS = 1102,
        _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,
        _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,
        _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,
        _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,
        _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,
        _CS_XBS5_LP64_OFF64_CFLAGS = 1108,
        _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,
        _CS_XBS5_LP64_OFF64_LIBS = 1110,
        _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,
        _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,
        _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,
        _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,
        _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,
        _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,
        _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,
        _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,
        _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,
        _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,
        _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,
        _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,
        _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,
        _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,
        _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,
        _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,
        _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,
        _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,
        _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,
        _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,
        _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,
        _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,
        _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,
        _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,
        _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,
        _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,
        _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,
        _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,
        _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,
        _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,
        _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,
        _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,
        _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,
        _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,
        _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,
        _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,
        _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147,
        _CS_V6_ENV = 1148,
        _CS_V7_ENV = 1149,
    }
    enum _CS_PATH = _Anonymous_42._CS_PATH;
    enum _CS_V6_WIDTH_RESTRICTED_ENVS = _Anonymous_42._CS_V6_WIDTH_RESTRICTED_ENVS;
    enum _CS_GNU_LIBC_VERSION = _Anonymous_42._CS_GNU_LIBC_VERSION;
    enum _CS_GNU_LIBPTHREAD_VERSION = _Anonymous_42._CS_GNU_LIBPTHREAD_VERSION;
    enum _CS_V5_WIDTH_RESTRICTED_ENVS = _Anonymous_42._CS_V5_WIDTH_RESTRICTED_ENVS;
    enum _CS_V7_WIDTH_RESTRICTED_ENVS = _Anonymous_42._CS_V7_WIDTH_RESTRICTED_ENVS;
    enum _CS_LFS_CFLAGS = _Anonymous_42._CS_LFS_CFLAGS;
    enum _CS_LFS_LDFLAGS = _Anonymous_42._CS_LFS_LDFLAGS;
    enum _CS_LFS_LIBS = _Anonymous_42._CS_LFS_LIBS;
    enum _CS_LFS_LINTFLAGS = _Anonymous_42._CS_LFS_LINTFLAGS;
    enum _CS_LFS64_CFLAGS = _Anonymous_42._CS_LFS64_CFLAGS;
    enum _CS_LFS64_LDFLAGS = _Anonymous_42._CS_LFS64_LDFLAGS;
    enum _CS_LFS64_LIBS = _Anonymous_42._CS_LFS64_LIBS;
    enum _CS_LFS64_LINTFLAGS = _Anonymous_42._CS_LFS64_LINTFLAGS;
    enum _CS_XBS5_ILP32_OFF32_CFLAGS = _Anonymous_42._CS_XBS5_ILP32_OFF32_CFLAGS;
    enum _CS_XBS5_ILP32_OFF32_LDFLAGS = _Anonymous_42._CS_XBS5_ILP32_OFF32_LDFLAGS;
    enum _CS_XBS5_ILP32_OFF32_LIBS = _Anonymous_42._CS_XBS5_ILP32_OFF32_LIBS;
    enum _CS_XBS5_ILP32_OFF32_LINTFLAGS = _Anonymous_42._CS_XBS5_ILP32_OFF32_LINTFLAGS;
    enum _CS_XBS5_ILP32_OFFBIG_CFLAGS = _Anonymous_42._CS_XBS5_ILP32_OFFBIG_CFLAGS;
    enum _CS_XBS5_ILP32_OFFBIG_LDFLAGS = _Anonymous_42._CS_XBS5_ILP32_OFFBIG_LDFLAGS;
    enum _CS_XBS5_ILP32_OFFBIG_LIBS = _Anonymous_42._CS_XBS5_ILP32_OFFBIG_LIBS;
    enum _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = _Anonymous_42._CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
    enum _CS_XBS5_LP64_OFF64_CFLAGS = _Anonymous_42._CS_XBS5_LP64_OFF64_CFLAGS;
    enum _CS_XBS5_LP64_OFF64_LDFLAGS = _Anonymous_42._CS_XBS5_LP64_OFF64_LDFLAGS;
    enum _CS_XBS5_LP64_OFF64_LIBS = _Anonymous_42._CS_XBS5_LP64_OFF64_LIBS;
    enum _CS_XBS5_LP64_OFF64_LINTFLAGS = _Anonymous_42._CS_XBS5_LP64_OFF64_LINTFLAGS;
    enum _CS_XBS5_LPBIG_OFFBIG_CFLAGS = _Anonymous_42._CS_XBS5_LPBIG_OFFBIG_CFLAGS;
    enum _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = _Anonymous_42._CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
    enum _CS_XBS5_LPBIG_OFFBIG_LIBS = _Anonymous_42._CS_XBS5_LPBIG_OFFBIG_LIBS;
    enum _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = _Anonymous_42._CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
    enum _CS_POSIX_V6_ILP32_OFF32_CFLAGS = _Anonymous_42._CS_POSIX_V6_ILP32_OFF32_CFLAGS;
    enum _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = _Anonymous_42._CS_POSIX_V6_ILP32_OFF32_LDFLAGS;
    enum _CS_POSIX_V6_ILP32_OFF32_LIBS = _Anonymous_42._CS_POSIX_V6_ILP32_OFF32_LIBS;
    enum _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = _Anonymous_42._CS_POSIX_V6_ILP32_OFF32_LINTFLAGS;
    enum _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = _Anonymous_42._CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;
    enum _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = _Anonymous_42._CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;
    enum _CS_POSIX_V6_ILP32_OFFBIG_LIBS = _Anonymous_42._CS_POSIX_V6_ILP32_OFFBIG_LIBS;
    enum _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = _Anonymous_42._CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS;
    enum _CS_POSIX_V6_LP64_OFF64_CFLAGS = _Anonymous_42._CS_POSIX_V6_LP64_OFF64_CFLAGS;
    enum _CS_POSIX_V6_LP64_OFF64_LDFLAGS = _Anonymous_42._CS_POSIX_V6_LP64_OFF64_LDFLAGS;
    enum _CS_POSIX_V6_LP64_OFF64_LIBS = _Anonymous_42._CS_POSIX_V6_LP64_OFF64_LIBS;
    enum _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = _Anonymous_42._CS_POSIX_V6_LP64_OFF64_LINTFLAGS;
    enum _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = _Anonymous_42._CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;
    enum _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = _Anonymous_42._CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;
    enum _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = _Anonymous_42._CS_POSIX_V6_LPBIG_OFFBIG_LIBS;
    enum _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = _Anonymous_42._CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS;
    enum _CS_POSIX_V7_ILP32_OFF32_CFLAGS = _Anonymous_42._CS_POSIX_V7_ILP32_OFF32_CFLAGS;
    enum _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = _Anonymous_42._CS_POSIX_V7_ILP32_OFF32_LDFLAGS;
    enum _CS_POSIX_V7_ILP32_OFF32_LIBS = _Anonymous_42._CS_POSIX_V7_ILP32_OFF32_LIBS;
    enum _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = _Anonymous_42._CS_POSIX_V7_ILP32_OFF32_LINTFLAGS;
    enum _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = _Anonymous_42._CS_POSIX_V7_ILP32_OFFBIG_CFLAGS;
    enum _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = _Anonymous_42._CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS;
    enum _CS_POSIX_V7_ILP32_OFFBIG_LIBS = _Anonymous_42._CS_POSIX_V7_ILP32_OFFBIG_LIBS;
    enum _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = _Anonymous_42._CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS;
    enum _CS_POSIX_V7_LP64_OFF64_CFLAGS = _Anonymous_42._CS_POSIX_V7_LP64_OFF64_CFLAGS;
    enum _CS_POSIX_V7_LP64_OFF64_LDFLAGS = _Anonymous_42._CS_POSIX_V7_LP64_OFF64_LDFLAGS;
    enum _CS_POSIX_V7_LP64_OFF64_LIBS = _Anonymous_42._CS_POSIX_V7_LP64_OFF64_LIBS;
    enum _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = _Anonymous_42._CS_POSIX_V7_LP64_OFF64_LINTFLAGS;
    enum _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = _Anonymous_42._CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS;
    enum _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = _Anonymous_42._CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS;
    enum _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = _Anonymous_42._CS_POSIX_V7_LPBIG_OFFBIG_LIBS;
    enum _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = _Anonymous_42._CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS;
    enum _CS_V6_ENV = _Anonymous_42._CS_V6_ENV;
    enum _CS_V7_ENV = _Anonymous_42._CS_V7_ENV;
    enum _Anonymous_43
    {
        _SC_ARG_MAX = 0,
        _SC_CHILD_MAX = 1,
        _SC_CLK_TCK = 2,
        _SC_NGROUPS_MAX = 3,
        _SC_OPEN_MAX = 4,
        _SC_STREAM_MAX = 5,
        _SC_TZNAME_MAX = 6,
        _SC_JOB_CONTROL = 7,
        _SC_SAVED_IDS = 8,
        _SC_REALTIME_SIGNALS = 9,
        _SC_PRIORITY_SCHEDULING = 10,
        _SC_TIMERS = 11,
        _SC_ASYNCHRONOUS_IO = 12,
        _SC_PRIORITIZED_IO = 13,
        _SC_SYNCHRONIZED_IO = 14,
        _SC_FSYNC = 15,
        _SC_MAPPED_FILES = 16,
        _SC_MEMLOCK = 17,
        _SC_MEMLOCK_RANGE = 18,
        _SC_MEMORY_PROTECTION = 19,
        _SC_MESSAGE_PASSING = 20,
        _SC_SEMAPHORES = 21,
        _SC_SHARED_MEMORY_OBJECTS = 22,
        _SC_AIO_LISTIO_MAX = 23,
        _SC_AIO_MAX = 24,
        _SC_AIO_PRIO_DELTA_MAX = 25,
        _SC_DELAYTIMER_MAX = 26,
        _SC_MQ_OPEN_MAX = 27,
        _SC_MQ_PRIO_MAX = 28,
        _SC_VERSION = 29,
        _SC_PAGESIZE = 30,
        _SC_RTSIG_MAX = 31,
        _SC_SEM_NSEMS_MAX = 32,
        _SC_SEM_VALUE_MAX = 33,
        _SC_SIGQUEUE_MAX = 34,
        _SC_TIMER_MAX = 35,
        _SC_BC_BASE_MAX = 36,
        _SC_BC_DIM_MAX = 37,
        _SC_BC_SCALE_MAX = 38,
        _SC_BC_STRING_MAX = 39,
        _SC_COLL_WEIGHTS_MAX = 40,
        _SC_EQUIV_CLASS_MAX = 41,
        _SC_EXPR_NEST_MAX = 42,
        _SC_LINE_MAX = 43,
        _SC_RE_DUP_MAX = 44,
        _SC_CHARCLASS_NAME_MAX = 45,
        _SC_2_VERSION = 46,
        _SC_2_C_BIND = 47,
        _SC_2_C_DEV = 48,
        _SC_2_FORT_DEV = 49,
        _SC_2_FORT_RUN = 50,
        _SC_2_SW_DEV = 51,
        _SC_2_LOCALEDEF = 52,
        _SC_PII = 53,
        _SC_PII_XTI = 54,
        _SC_PII_SOCKET = 55,
        _SC_PII_INTERNET = 56,
        _SC_PII_OSI = 57,
        _SC_POLL = 58,
        _SC_SELECT = 59,
        _SC_UIO_MAXIOV = 60,
        _SC_IOV_MAX = 60,
        _SC_PII_INTERNET_STREAM = 61,
        _SC_PII_INTERNET_DGRAM = 62,
        _SC_PII_OSI_COTS = 63,
        _SC_PII_OSI_CLTS = 64,
        _SC_PII_OSI_M = 65,
        _SC_T_IOV_MAX = 66,
        _SC_THREADS = 67,
        _SC_THREAD_SAFE_FUNCTIONS = 68,
        _SC_GETGR_R_SIZE_MAX = 69,
        _SC_GETPW_R_SIZE_MAX = 70,
        _SC_LOGIN_NAME_MAX = 71,
        _SC_TTY_NAME_MAX = 72,
        _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,
        _SC_THREAD_KEYS_MAX = 74,
        _SC_THREAD_STACK_MIN = 75,
        _SC_THREAD_THREADS_MAX = 76,
        _SC_THREAD_ATTR_STACKADDR = 77,
        _SC_THREAD_ATTR_STACKSIZE = 78,
        _SC_THREAD_PRIORITY_SCHEDULING = 79,
        _SC_THREAD_PRIO_INHERIT = 80,
        _SC_THREAD_PRIO_PROTECT = 81,
        _SC_THREAD_PROCESS_SHARED = 82,
        _SC_NPROCESSORS_CONF = 83,
        _SC_NPROCESSORS_ONLN = 84,
        _SC_PHYS_PAGES = 85,
        _SC_AVPHYS_PAGES = 86,
        _SC_ATEXIT_MAX = 87,
        _SC_PASS_MAX = 88,
        _SC_XOPEN_VERSION = 89,
        _SC_XOPEN_XCU_VERSION = 90,
        _SC_XOPEN_UNIX = 91,
        _SC_XOPEN_CRYPT = 92,
        _SC_XOPEN_ENH_I18N = 93,
        _SC_XOPEN_SHM = 94,
        _SC_2_CHAR_TERM = 95,
        _SC_2_C_VERSION = 96,
        _SC_2_UPE = 97,
        _SC_XOPEN_XPG2 = 98,
        _SC_XOPEN_XPG3 = 99,
        _SC_XOPEN_XPG4 = 100,
        _SC_CHAR_BIT = 101,
        _SC_CHAR_MAX = 102,
        _SC_CHAR_MIN = 103,
        _SC_INT_MAX = 104,
        _SC_INT_MIN = 105,
        _SC_LONG_BIT = 106,
        _SC_WORD_BIT = 107,
        _SC_MB_LEN_MAX = 108,
        _SC_NZERO = 109,
        _SC_SSIZE_MAX = 110,
        _SC_SCHAR_MAX = 111,
        _SC_SCHAR_MIN = 112,
        _SC_SHRT_MAX = 113,
        _SC_SHRT_MIN = 114,
        _SC_UCHAR_MAX = 115,
        _SC_UINT_MAX = 116,
        _SC_ULONG_MAX = 117,
        _SC_USHRT_MAX = 118,
        _SC_NL_ARGMAX = 119,
        _SC_NL_LANGMAX = 120,
        _SC_NL_MSGMAX = 121,
        _SC_NL_NMAX = 122,
        _SC_NL_SETMAX = 123,
        _SC_NL_TEXTMAX = 124,
        _SC_XBS5_ILP32_OFF32 = 125,
        _SC_XBS5_ILP32_OFFBIG = 126,
        _SC_XBS5_LP64_OFF64 = 127,
        _SC_XBS5_LPBIG_OFFBIG = 128,
        _SC_XOPEN_LEGACY = 129,
        _SC_XOPEN_REALTIME = 130,
        _SC_XOPEN_REALTIME_THREADS = 131,
        _SC_ADVISORY_INFO = 132,
        _SC_BARRIERS = 133,
        _SC_BASE = 134,
        _SC_C_LANG_SUPPORT = 135,
        _SC_C_LANG_SUPPORT_R = 136,
        _SC_CLOCK_SELECTION = 137,
        _SC_CPUTIME = 138,
        _SC_THREAD_CPUTIME = 139,
        _SC_DEVICE_IO = 140,
        _SC_DEVICE_SPECIFIC = 141,
        _SC_DEVICE_SPECIFIC_R = 142,
        _SC_FD_MGMT = 143,
        _SC_FIFO = 144,
        _SC_PIPE = 145,
        _SC_FILE_ATTRIBUTES = 146,
        _SC_FILE_LOCKING = 147,
        _SC_FILE_SYSTEM = 148,
        _SC_MONOTONIC_CLOCK = 149,
        _SC_MULTI_PROCESS = 150,
        _SC_SINGLE_PROCESS = 151,
        _SC_NETWORKING = 152,
        _SC_READER_WRITER_LOCKS = 153,
        _SC_SPIN_LOCKS = 154,
        _SC_REGEXP = 155,
        _SC_REGEX_VERSION = 156,
        _SC_SHELL = 157,
        _SC_SIGNALS = 158,
        _SC_SPAWN = 159,
        _SC_SPORADIC_SERVER = 160,
        _SC_THREAD_SPORADIC_SERVER = 161,
        _SC_SYSTEM_DATABASE = 162,
        _SC_SYSTEM_DATABASE_R = 163,
        _SC_TIMEOUTS = 164,
        _SC_TYPED_MEMORY_OBJECTS = 165,
        _SC_USER_GROUPS = 166,
        _SC_USER_GROUPS_R = 167,
        _SC_2_PBS = 168,
        _SC_2_PBS_ACCOUNTING = 169,
        _SC_2_PBS_LOCATE = 170,
        _SC_2_PBS_MESSAGE = 171,
        _SC_2_PBS_TRACK = 172,
        _SC_SYMLOOP_MAX = 173,
        _SC_STREAMS = 174,
        _SC_2_PBS_CHECKPOINT = 175,
        _SC_V6_ILP32_OFF32 = 176,
        _SC_V6_ILP32_OFFBIG = 177,
        _SC_V6_LP64_OFF64 = 178,
        _SC_V6_LPBIG_OFFBIG = 179,
        _SC_HOST_NAME_MAX = 180,
        _SC_TRACE = 181,
        _SC_TRACE_EVENT_FILTER = 182,
        _SC_TRACE_INHERIT = 183,
        _SC_TRACE_LOG = 184,
        _SC_LEVEL1_ICACHE_SIZE = 185,
        _SC_LEVEL1_ICACHE_ASSOC = 186,
        _SC_LEVEL1_ICACHE_LINESIZE = 187,
        _SC_LEVEL1_DCACHE_SIZE = 188,
        _SC_LEVEL1_DCACHE_ASSOC = 189,
        _SC_LEVEL1_DCACHE_LINESIZE = 190,
        _SC_LEVEL2_CACHE_SIZE = 191,
        _SC_LEVEL2_CACHE_ASSOC = 192,
        _SC_LEVEL2_CACHE_LINESIZE = 193,
        _SC_LEVEL3_CACHE_SIZE = 194,
        _SC_LEVEL3_CACHE_ASSOC = 195,
        _SC_LEVEL3_CACHE_LINESIZE = 196,
        _SC_LEVEL4_CACHE_SIZE = 197,
        _SC_LEVEL4_CACHE_ASSOC = 198,
        _SC_LEVEL4_CACHE_LINESIZE = 199,
        _SC_IPV6 = 235,
        _SC_RAW_SOCKETS = 236,
        _SC_V7_ILP32_OFF32 = 237,
        _SC_V7_ILP32_OFFBIG = 238,
        _SC_V7_LP64_OFF64 = 239,
        _SC_V7_LPBIG_OFFBIG = 240,
        _SC_SS_REPL_MAX = 241,
        _SC_TRACE_EVENT_NAME_MAX = 242,
        _SC_TRACE_NAME_MAX = 243,
        _SC_TRACE_SYS_MAX = 244,
        _SC_TRACE_USER_EVENT_MAX = 245,
        _SC_XOPEN_STREAMS = 246,
        _SC_THREAD_ROBUST_PRIO_INHERIT = 247,
        _SC_THREAD_ROBUST_PRIO_PROTECT = 248,
    }
    enum _SC_ARG_MAX = _Anonymous_43._SC_ARG_MAX;
    enum _SC_CHILD_MAX = _Anonymous_43._SC_CHILD_MAX;
    enum _SC_CLK_TCK = _Anonymous_43._SC_CLK_TCK;
    enum _SC_NGROUPS_MAX = _Anonymous_43._SC_NGROUPS_MAX;
    enum _SC_OPEN_MAX = _Anonymous_43._SC_OPEN_MAX;
    enum _SC_STREAM_MAX = _Anonymous_43._SC_STREAM_MAX;
    enum _SC_TZNAME_MAX = _Anonymous_43._SC_TZNAME_MAX;
    enum _SC_JOB_CONTROL = _Anonymous_43._SC_JOB_CONTROL;
    enum _SC_SAVED_IDS = _Anonymous_43._SC_SAVED_IDS;
    enum _SC_REALTIME_SIGNALS = _Anonymous_43._SC_REALTIME_SIGNALS;
    enum _SC_PRIORITY_SCHEDULING = _Anonymous_43._SC_PRIORITY_SCHEDULING;
    enum _SC_TIMERS = _Anonymous_43._SC_TIMERS;
    enum _SC_ASYNCHRONOUS_IO = _Anonymous_43._SC_ASYNCHRONOUS_IO;
    enum _SC_PRIORITIZED_IO = _Anonymous_43._SC_PRIORITIZED_IO;
    enum _SC_SYNCHRONIZED_IO = _Anonymous_43._SC_SYNCHRONIZED_IO;
    enum _SC_FSYNC = _Anonymous_43._SC_FSYNC;
    enum _SC_MAPPED_FILES = _Anonymous_43._SC_MAPPED_FILES;
    enum _SC_MEMLOCK = _Anonymous_43._SC_MEMLOCK;
    enum _SC_MEMLOCK_RANGE = _Anonymous_43._SC_MEMLOCK_RANGE;
    enum _SC_MEMORY_PROTECTION = _Anonymous_43._SC_MEMORY_PROTECTION;
    enum _SC_MESSAGE_PASSING = _Anonymous_43._SC_MESSAGE_PASSING;
    enum _SC_SEMAPHORES = _Anonymous_43._SC_SEMAPHORES;
    enum _SC_SHARED_MEMORY_OBJECTS = _Anonymous_43._SC_SHARED_MEMORY_OBJECTS;
    enum _SC_AIO_LISTIO_MAX = _Anonymous_43._SC_AIO_LISTIO_MAX;
    enum _SC_AIO_MAX = _Anonymous_43._SC_AIO_MAX;
    enum _SC_AIO_PRIO_DELTA_MAX = _Anonymous_43._SC_AIO_PRIO_DELTA_MAX;
    enum _SC_DELAYTIMER_MAX = _Anonymous_43._SC_DELAYTIMER_MAX;
    enum _SC_MQ_OPEN_MAX = _Anonymous_43._SC_MQ_OPEN_MAX;
    enum _SC_MQ_PRIO_MAX = _Anonymous_43._SC_MQ_PRIO_MAX;
    enum _SC_VERSION = _Anonymous_43._SC_VERSION;
    enum _SC_PAGESIZE = _Anonymous_43._SC_PAGESIZE;
    enum _SC_RTSIG_MAX = _Anonymous_43._SC_RTSIG_MAX;
    enum _SC_SEM_NSEMS_MAX = _Anonymous_43._SC_SEM_NSEMS_MAX;
    enum _SC_SEM_VALUE_MAX = _Anonymous_43._SC_SEM_VALUE_MAX;
    enum _SC_SIGQUEUE_MAX = _Anonymous_43._SC_SIGQUEUE_MAX;
    enum _SC_TIMER_MAX = _Anonymous_43._SC_TIMER_MAX;
    enum _SC_BC_BASE_MAX = _Anonymous_43._SC_BC_BASE_MAX;
    enum _SC_BC_DIM_MAX = _Anonymous_43._SC_BC_DIM_MAX;
    enum _SC_BC_SCALE_MAX = _Anonymous_43._SC_BC_SCALE_MAX;
    enum _SC_BC_STRING_MAX = _Anonymous_43._SC_BC_STRING_MAX;
    enum _SC_COLL_WEIGHTS_MAX = _Anonymous_43._SC_COLL_WEIGHTS_MAX;
    enum _SC_EQUIV_CLASS_MAX = _Anonymous_43._SC_EQUIV_CLASS_MAX;
    enum _SC_EXPR_NEST_MAX = _Anonymous_43._SC_EXPR_NEST_MAX;
    enum _SC_LINE_MAX = _Anonymous_43._SC_LINE_MAX;
    enum _SC_RE_DUP_MAX = _Anonymous_43._SC_RE_DUP_MAX;
    enum _SC_CHARCLASS_NAME_MAX = _Anonymous_43._SC_CHARCLASS_NAME_MAX;
    enum _SC_2_VERSION = _Anonymous_43._SC_2_VERSION;
    enum _SC_2_C_BIND = _Anonymous_43._SC_2_C_BIND;
    enum _SC_2_C_DEV = _Anonymous_43._SC_2_C_DEV;
    enum _SC_2_FORT_DEV = _Anonymous_43._SC_2_FORT_DEV;
    enum _SC_2_FORT_RUN = _Anonymous_43._SC_2_FORT_RUN;
    enum _SC_2_SW_DEV = _Anonymous_43._SC_2_SW_DEV;
    enum _SC_2_LOCALEDEF = _Anonymous_43._SC_2_LOCALEDEF;
    enum _SC_PII = _Anonymous_43._SC_PII;
    enum _SC_PII_XTI = _Anonymous_43._SC_PII_XTI;
    enum _SC_PII_SOCKET = _Anonymous_43._SC_PII_SOCKET;
    enum _SC_PII_INTERNET = _Anonymous_43._SC_PII_INTERNET;
    enum _SC_PII_OSI = _Anonymous_43._SC_PII_OSI;
    enum _SC_POLL = _Anonymous_43._SC_POLL;
    enum _SC_SELECT = _Anonymous_43._SC_SELECT;
    enum _SC_UIO_MAXIOV = _Anonymous_43._SC_UIO_MAXIOV;
    enum _SC_IOV_MAX = _Anonymous_43._SC_IOV_MAX;
    enum _SC_PII_INTERNET_STREAM = _Anonymous_43._SC_PII_INTERNET_STREAM;
    enum _SC_PII_INTERNET_DGRAM = _Anonymous_43._SC_PII_INTERNET_DGRAM;
    enum _SC_PII_OSI_COTS = _Anonymous_43._SC_PII_OSI_COTS;
    enum _SC_PII_OSI_CLTS = _Anonymous_43._SC_PII_OSI_CLTS;
    enum _SC_PII_OSI_M = _Anonymous_43._SC_PII_OSI_M;
    enum _SC_T_IOV_MAX = _Anonymous_43._SC_T_IOV_MAX;
    enum _SC_THREADS = _Anonymous_43._SC_THREADS;
    enum _SC_THREAD_SAFE_FUNCTIONS = _Anonymous_43._SC_THREAD_SAFE_FUNCTIONS;
    enum _SC_GETGR_R_SIZE_MAX = _Anonymous_43._SC_GETGR_R_SIZE_MAX;
    enum _SC_GETPW_R_SIZE_MAX = _Anonymous_43._SC_GETPW_R_SIZE_MAX;
    enum _SC_LOGIN_NAME_MAX = _Anonymous_43._SC_LOGIN_NAME_MAX;
    enum _SC_TTY_NAME_MAX = _Anonymous_43._SC_TTY_NAME_MAX;
    enum _SC_THREAD_DESTRUCTOR_ITERATIONS = _Anonymous_43._SC_THREAD_DESTRUCTOR_ITERATIONS;
    enum _SC_THREAD_KEYS_MAX = _Anonymous_43._SC_THREAD_KEYS_MAX;
    enum _SC_THREAD_STACK_MIN = _Anonymous_43._SC_THREAD_STACK_MIN;
    enum _SC_THREAD_THREADS_MAX = _Anonymous_43._SC_THREAD_THREADS_MAX;
    enum _SC_THREAD_ATTR_STACKADDR = _Anonymous_43._SC_THREAD_ATTR_STACKADDR;
    enum _SC_THREAD_ATTR_STACKSIZE = _Anonymous_43._SC_THREAD_ATTR_STACKSIZE;
    enum _SC_THREAD_PRIORITY_SCHEDULING = _Anonymous_43._SC_THREAD_PRIORITY_SCHEDULING;
    enum _SC_THREAD_PRIO_INHERIT = _Anonymous_43._SC_THREAD_PRIO_INHERIT;
    enum _SC_THREAD_PRIO_PROTECT = _Anonymous_43._SC_THREAD_PRIO_PROTECT;
    enum _SC_THREAD_PROCESS_SHARED = _Anonymous_43._SC_THREAD_PROCESS_SHARED;
    enum _SC_NPROCESSORS_CONF = _Anonymous_43._SC_NPROCESSORS_CONF;
    enum _SC_NPROCESSORS_ONLN = _Anonymous_43._SC_NPROCESSORS_ONLN;
    enum _SC_PHYS_PAGES = _Anonymous_43._SC_PHYS_PAGES;
    enum _SC_AVPHYS_PAGES = _Anonymous_43._SC_AVPHYS_PAGES;
    enum _SC_ATEXIT_MAX = _Anonymous_43._SC_ATEXIT_MAX;
    enum _SC_PASS_MAX = _Anonymous_43._SC_PASS_MAX;
    enum _SC_XOPEN_VERSION = _Anonymous_43._SC_XOPEN_VERSION;
    enum _SC_XOPEN_XCU_VERSION = _Anonymous_43._SC_XOPEN_XCU_VERSION;
    enum _SC_XOPEN_UNIX = _Anonymous_43._SC_XOPEN_UNIX;
    enum _SC_XOPEN_CRYPT = _Anonymous_43._SC_XOPEN_CRYPT;
    enum _SC_XOPEN_ENH_I18N = _Anonymous_43._SC_XOPEN_ENH_I18N;
    enum _SC_XOPEN_SHM = _Anonymous_43._SC_XOPEN_SHM;
    enum _SC_2_CHAR_TERM = _Anonymous_43._SC_2_CHAR_TERM;
    enum _SC_2_C_VERSION = _Anonymous_43._SC_2_C_VERSION;
    enum _SC_2_UPE = _Anonymous_43._SC_2_UPE;
    enum _SC_XOPEN_XPG2 = _Anonymous_43._SC_XOPEN_XPG2;
    enum _SC_XOPEN_XPG3 = _Anonymous_43._SC_XOPEN_XPG3;
    enum _SC_XOPEN_XPG4 = _Anonymous_43._SC_XOPEN_XPG4;
    enum _SC_CHAR_BIT = _Anonymous_43._SC_CHAR_BIT;
    enum _SC_CHAR_MAX = _Anonymous_43._SC_CHAR_MAX;
    enum _SC_CHAR_MIN = _Anonymous_43._SC_CHAR_MIN;
    enum _SC_INT_MAX = _Anonymous_43._SC_INT_MAX;
    enum _SC_INT_MIN = _Anonymous_43._SC_INT_MIN;
    enum _SC_LONG_BIT = _Anonymous_43._SC_LONG_BIT;
    enum _SC_WORD_BIT = _Anonymous_43._SC_WORD_BIT;
    enum _SC_MB_LEN_MAX = _Anonymous_43._SC_MB_LEN_MAX;
    enum _SC_NZERO = _Anonymous_43._SC_NZERO;
    enum _SC_SSIZE_MAX = _Anonymous_43._SC_SSIZE_MAX;
    enum _SC_SCHAR_MAX = _Anonymous_43._SC_SCHAR_MAX;
    enum _SC_SCHAR_MIN = _Anonymous_43._SC_SCHAR_MIN;
    enum _SC_SHRT_MAX = _Anonymous_43._SC_SHRT_MAX;
    enum _SC_SHRT_MIN = _Anonymous_43._SC_SHRT_MIN;
    enum _SC_UCHAR_MAX = _Anonymous_43._SC_UCHAR_MAX;
    enum _SC_UINT_MAX = _Anonymous_43._SC_UINT_MAX;
    enum _SC_ULONG_MAX = _Anonymous_43._SC_ULONG_MAX;
    enum _SC_USHRT_MAX = _Anonymous_43._SC_USHRT_MAX;
    enum _SC_NL_ARGMAX = _Anonymous_43._SC_NL_ARGMAX;
    enum _SC_NL_LANGMAX = _Anonymous_43._SC_NL_LANGMAX;
    enum _SC_NL_MSGMAX = _Anonymous_43._SC_NL_MSGMAX;
    enum _SC_NL_NMAX = _Anonymous_43._SC_NL_NMAX;
    enum _SC_NL_SETMAX = _Anonymous_43._SC_NL_SETMAX;
    enum _SC_NL_TEXTMAX = _Anonymous_43._SC_NL_TEXTMAX;
    enum _SC_XBS5_ILP32_OFF32 = _Anonymous_43._SC_XBS5_ILP32_OFF32;
    enum _SC_XBS5_ILP32_OFFBIG = _Anonymous_43._SC_XBS5_ILP32_OFFBIG;
    enum _SC_XBS5_LP64_OFF64 = _Anonymous_43._SC_XBS5_LP64_OFF64;
    enum _SC_XBS5_LPBIG_OFFBIG = _Anonymous_43._SC_XBS5_LPBIG_OFFBIG;
    enum _SC_XOPEN_LEGACY = _Anonymous_43._SC_XOPEN_LEGACY;
    enum _SC_XOPEN_REALTIME = _Anonymous_43._SC_XOPEN_REALTIME;
    enum _SC_XOPEN_REALTIME_THREADS = _Anonymous_43._SC_XOPEN_REALTIME_THREADS;
    enum _SC_ADVISORY_INFO = _Anonymous_43._SC_ADVISORY_INFO;
    enum _SC_BARRIERS = _Anonymous_43._SC_BARRIERS;
    enum _SC_BASE = _Anonymous_43._SC_BASE;
    enum _SC_C_LANG_SUPPORT = _Anonymous_43._SC_C_LANG_SUPPORT;
    enum _SC_C_LANG_SUPPORT_R = _Anonymous_43._SC_C_LANG_SUPPORT_R;
    enum _SC_CLOCK_SELECTION = _Anonymous_43._SC_CLOCK_SELECTION;
    enum _SC_CPUTIME = _Anonymous_43._SC_CPUTIME;
    enum _SC_THREAD_CPUTIME = _Anonymous_43._SC_THREAD_CPUTIME;
    enum _SC_DEVICE_IO = _Anonymous_43._SC_DEVICE_IO;
    enum _SC_DEVICE_SPECIFIC = _Anonymous_43._SC_DEVICE_SPECIFIC;
    enum _SC_DEVICE_SPECIFIC_R = _Anonymous_43._SC_DEVICE_SPECIFIC_R;
    enum _SC_FD_MGMT = _Anonymous_43._SC_FD_MGMT;
    enum _SC_FIFO = _Anonymous_43._SC_FIFO;
    enum _SC_PIPE = _Anonymous_43._SC_PIPE;
    enum _SC_FILE_ATTRIBUTES = _Anonymous_43._SC_FILE_ATTRIBUTES;
    enum _SC_FILE_LOCKING = _Anonymous_43._SC_FILE_LOCKING;
    enum _SC_FILE_SYSTEM = _Anonymous_43._SC_FILE_SYSTEM;
    enum _SC_MONOTONIC_CLOCK = _Anonymous_43._SC_MONOTONIC_CLOCK;
    enum _SC_MULTI_PROCESS = _Anonymous_43._SC_MULTI_PROCESS;
    enum _SC_SINGLE_PROCESS = _Anonymous_43._SC_SINGLE_PROCESS;
    enum _SC_NETWORKING = _Anonymous_43._SC_NETWORKING;
    enum _SC_READER_WRITER_LOCKS = _Anonymous_43._SC_READER_WRITER_LOCKS;
    enum _SC_SPIN_LOCKS = _Anonymous_43._SC_SPIN_LOCKS;
    enum _SC_REGEXP = _Anonymous_43._SC_REGEXP;
    enum _SC_REGEX_VERSION = _Anonymous_43._SC_REGEX_VERSION;
    enum _SC_SHELL = _Anonymous_43._SC_SHELL;
    enum _SC_SIGNALS = _Anonymous_43._SC_SIGNALS;
    enum _SC_SPAWN = _Anonymous_43._SC_SPAWN;
    enum _SC_SPORADIC_SERVER = _Anonymous_43._SC_SPORADIC_SERVER;
    enum _SC_THREAD_SPORADIC_SERVER = _Anonymous_43._SC_THREAD_SPORADIC_SERVER;
    enum _SC_SYSTEM_DATABASE = _Anonymous_43._SC_SYSTEM_DATABASE;
    enum _SC_SYSTEM_DATABASE_R = _Anonymous_43._SC_SYSTEM_DATABASE_R;
    enum _SC_TIMEOUTS = _Anonymous_43._SC_TIMEOUTS;
    enum _SC_TYPED_MEMORY_OBJECTS = _Anonymous_43._SC_TYPED_MEMORY_OBJECTS;
    enum _SC_USER_GROUPS = _Anonymous_43._SC_USER_GROUPS;
    enum _SC_USER_GROUPS_R = _Anonymous_43._SC_USER_GROUPS_R;
    enum _SC_2_PBS = _Anonymous_43._SC_2_PBS;
    enum _SC_2_PBS_ACCOUNTING = _Anonymous_43._SC_2_PBS_ACCOUNTING;
    enum _SC_2_PBS_LOCATE = _Anonymous_43._SC_2_PBS_LOCATE;
    enum _SC_2_PBS_MESSAGE = _Anonymous_43._SC_2_PBS_MESSAGE;
    enum _SC_2_PBS_TRACK = _Anonymous_43._SC_2_PBS_TRACK;
    enum _SC_SYMLOOP_MAX = _Anonymous_43._SC_SYMLOOP_MAX;
    enum _SC_STREAMS = _Anonymous_43._SC_STREAMS;
    enum _SC_2_PBS_CHECKPOINT = _Anonymous_43._SC_2_PBS_CHECKPOINT;
    enum _SC_V6_ILP32_OFF32 = _Anonymous_43._SC_V6_ILP32_OFF32;
    enum _SC_V6_ILP32_OFFBIG = _Anonymous_43._SC_V6_ILP32_OFFBIG;
    enum _SC_V6_LP64_OFF64 = _Anonymous_43._SC_V6_LP64_OFF64;
    enum _SC_V6_LPBIG_OFFBIG = _Anonymous_43._SC_V6_LPBIG_OFFBIG;
    enum _SC_HOST_NAME_MAX = _Anonymous_43._SC_HOST_NAME_MAX;
    enum _SC_TRACE = _Anonymous_43._SC_TRACE;
    enum _SC_TRACE_EVENT_FILTER = _Anonymous_43._SC_TRACE_EVENT_FILTER;
    enum _SC_TRACE_INHERIT = _Anonymous_43._SC_TRACE_INHERIT;
    enum _SC_TRACE_LOG = _Anonymous_43._SC_TRACE_LOG;
    enum _SC_LEVEL1_ICACHE_SIZE = _Anonymous_43._SC_LEVEL1_ICACHE_SIZE;
    enum _SC_LEVEL1_ICACHE_ASSOC = _Anonymous_43._SC_LEVEL1_ICACHE_ASSOC;
    enum _SC_LEVEL1_ICACHE_LINESIZE = _Anonymous_43._SC_LEVEL1_ICACHE_LINESIZE;
    enum _SC_LEVEL1_DCACHE_SIZE = _Anonymous_43._SC_LEVEL1_DCACHE_SIZE;
    enum _SC_LEVEL1_DCACHE_ASSOC = _Anonymous_43._SC_LEVEL1_DCACHE_ASSOC;
    enum _SC_LEVEL1_DCACHE_LINESIZE = _Anonymous_43._SC_LEVEL1_DCACHE_LINESIZE;
    enum _SC_LEVEL2_CACHE_SIZE = _Anonymous_43._SC_LEVEL2_CACHE_SIZE;
    enum _SC_LEVEL2_CACHE_ASSOC = _Anonymous_43._SC_LEVEL2_CACHE_ASSOC;
    enum _SC_LEVEL2_CACHE_LINESIZE = _Anonymous_43._SC_LEVEL2_CACHE_LINESIZE;
    enum _SC_LEVEL3_CACHE_SIZE = _Anonymous_43._SC_LEVEL3_CACHE_SIZE;
    enum _SC_LEVEL3_CACHE_ASSOC = _Anonymous_43._SC_LEVEL3_CACHE_ASSOC;
    enum _SC_LEVEL3_CACHE_LINESIZE = _Anonymous_43._SC_LEVEL3_CACHE_LINESIZE;
    enum _SC_LEVEL4_CACHE_SIZE = _Anonymous_43._SC_LEVEL4_CACHE_SIZE;
    enum _SC_LEVEL4_CACHE_ASSOC = _Anonymous_43._SC_LEVEL4_CACHE_ASSOC;
    enum _SC_LEVEL4_CACHE_LINESIZE = _Anonymous_43._SC_LEVEL4_CACHE_LINESIZE;
    enum _SC_IPV6 = _Anonymous_43._SC_IPV6;
    enum _SC_RAW_SOCKETS = _Anonymous_43._SC_RAW_SOCKETS;
    enum _SC_V7_ILP32_OFF32 = _Anonymous_43._SC_V7_ILP32_OFF32;
    enum _SC_V7_ILP32_OFFBIG = _Anonymous_43._SC_V7_ILP32_OFFBIG;
    enum _SC_V7_LP64_OFF64 = _Anonymous_43._SC_V7_LP64_OFF64;
    enum _SC_V7_LPBIG_OFFBIG = _Anonymous_43._SC_V7_LPBIG_OFFBIG;
    enum _SC_SS_REPL_MAX = _Anonymous_43._SC_SS_REPL_MAX;
    enum _SC_TRACE_EVENT_NAME_MAX = _Anonymous_43._SC_TRACE_EVENT_NAME_MAX;
    enum _SC_TRACE_NAME_MAX = _Anonymous_43._SC_TRACE_NAME_MAX;
    enum _SC_TRACE_SYS_MAX = _Anonymous_43._SC_TRACE_SYS_MAX;
    enum _SC_TRACE_USER_EVENT_MAX = _Anonymous_43._SC_TRACE_USER_EVENT_MAX;
    enum _SC_XOPEN_STREAMS = _Anonymous_43._SC_XOPEN_STREAMS;
    enum _SC_THREAD_ROBUST_PRIO_INHERIT = _Anonymous_43._SC_THREAD_ROBUST_PRIO_INHERIT;
    enum _SC_THREAD_ROBUST_PRIO_PROTECT = _Anonymous_43._SC_THREAD_ROBUST_PRIO_PROTECT;
    alias GDatagramBasedInterface = _GDatagramBasedInterface;
    struct _GDatagramBasedInterface
    {
        _GTypeInterface g_iface;
        int function(_GDatagramBased*, _GInputMessage*, uint, int, c_long, _GCancellable*, _GError**) receive_messages;
        int function(_GDatagramBased*, _GOutputMessage*, uint, int, c_long, _GCancellable*, _GError**) send_messages;
        _GSource* function(_GDatagramBased*, GIOCondition, _GCancellable*) create_source;
        GIOCondition function(_GDatagramBased*, GIOCondition) condition_check;
        int function(_GDatagramBased*, GIOCondition, c_long, _GCancellable*, _GError**) condition_wait;
    }
    c_ulong g_datagram_based_get_type() @nogc nothrow;
    int g_datagram_based_receive_messages(_GDatagramBased*, _GInputMessage*, uint, int, c_long, _GCancellable*, _GError**) @nogc nothrow;
    int g_datagram_based_send_messages(_GDatagramBased*, _GOutputMessage*, uint, int, c_long, _GCancellable*, _GError**) @nogc nothrow;
    _GSource* g_datagram_based_create_source(_GDatagramBased*, GIOCondition, _GCancellable*) @nogc nothrow;
    GIOCondition g_datagram_based_condition_check(_GDatagramBased*, GIOCondition) @nogc nothrow;
    int g_datagram_based_condition_wait(_GDatagramBased*, GIOCondition, c_long, _GCancellable*, _GError**) @nogc nothrow;
    enum _Anonymous_44
    {
        _PC_LINK_MAX = 0,
        _PC_MAX_CANON = 1,
        _PC_MAX_INPUT = 2,
        _PC_NAME_MAX = 3,
        _PC_PATH_MAX = 4,
        _PC_PIPE_BUF = 5,
        _PC_CHOWN_RESTRICTED = 6,
        _PC_NO_TRUNC = 7,
        _PC_VDISABLE = 8,
        _PC_SYNC_IO = 9,
        _PC_ASYNC_IO = 10,
        _PC_PRIO_IO = 11,
        _PC_SOCK_MAXBUF = 12,
        _PC_FILESIZEBITS = 13,
        _PC_REC_INCR_XFER_SIZE = 14,
        _PC_REC_MAX_XFER_SIZE = 15,
        _PC_REC_MIN_XFER_SIZE = 16,
        _PC_REC_XFER_ALIGN = 17,
        _PC_ALLOC_SIZE_MIN = 18,
        _PC_SYMLINK_MAX = 19,
        _PC_2_SYMLINKS = 20,
    }
    enum _PC_LINK_MAX = _Anonymous_44._PC_LINK_MAX;
    enum _PC_MAX_CANON = _Anonymous_44._PC_MAX_CANON;
    enum _PC_MAX_INPUT = _Anonymous_44._PC_MAX_INPUT;
    enum _PC_NAME_MAX = _Anonymous_44._PC_NAME_MAX;
    enum _PC_PATH_MAX = _Anonymous_44._PC_PATH_MAX;
    enum _PC_PIPE_BUF = _Anonymous_44._PC_PIPE_BUF;
    enum _PC_CHOWN_RESTRICTED = _Anonymous_44._PC_CHOWN_RESTRICTED;
    enum _PC_NO_TRUNC = _Anonymous_44._PC_NO_TRUNC;
    enum _PC_VDISABLE = _Anonymous_44._PC_VDISABLE;
    enum _PC_SYNC_IO = _Anonymous_44._PC_SYNC_IO;
    enum _PC_ASYNC_IO = _Anonymous_44._PC_ASYNC_IO;
    enum _PC_PRIO_IO = _Anonymous_44._PC_PRIO_IO;
    enum _PC_SOCK_MAXBUF = _Anonymous_44._PC_SOCK_MAXBUF;
    enum _PC_FILESIZEBITS = _Anonymous_44._PC_FILESIZEBITS;
    enum _PC_REC_INCR_XFER_SIZE = _Anonymous_44._PC_REC_INCR_XFER_SIZE;
    enum _PC_REC_MAX_XFER_SIZE = _Anonymous_44._PC_REC_MAX_XFER_SIZE;
    enum _PC_REC_MIN_XFER_SIZE = _Anonymous_44._PC_REC_MIN_XFER_SIZE;
    enum _PC_REC_XFER_ALIGN = _Anonymous_44._PC_REC_XFER_ALIGN;
    enum _PC_ALLOC_SIZE_MIN = _Anonymous_44._PC_ALLOC_SIZE_MIN;
    enum _PC_SYMLINK_MAX = _Anonymous_44._PC_SYMLINK_MAX;
    enum _PC_2_SYMLINKS = _Anonymous_44._PC_2_SYMLINKS;
    alias GDataInputStreamClass = _GDataInputStreamClass;
    struct _GDataInputStreamClass
    {
        _GBufferedInputStreamClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GDataInputStreamPrivate = _GDataInputStreamPrivate;
    struct _GDataInputStreamPrivate{};
    c_ulong g_data_input_stream_get_type() @nogc nothrow;
    _GDataInputStream* g_data_input_stream_new(_GInputStream*) @nogc nothrow;
    void g_data_input_stream_set_byte_order(_GDataInputStream*, GDataStreamByteOrder) @nogc nothrow;
    GDataStreamByteOrder g_data_input_stream_get_byte_order(_GDataInputStream*) @nogc nothrow;
    void g_data_input_stream_set_newline_type(_GDataInputStream*, GDataStreamNewlineType) @nogc nothrow;
    GDataStreamNewlineType g_data_input_stream_get_newline_type(_GDataInputStream*) @nogc nothrow;
    ubyte g_data_input_stream_read_byte(_GDataInputStream*, _GCancellable*, _GError**) @nogc nothrow;
    short g_data_input_stream_read_int16(_GDataInputStream*, _GCancellable*, _GError**) @nogc nothrow;
    ushort g_data_input_stream_read_uint16(_GDataInputStream*, _GCancellable*, _GError**) @nogc nothrow;
    int g_data_input_stream_read_int32(_GDataInputStream*, _GCancellable*, _GError**) @nogc nothrow;
    uint g_data_input_stream_read_uint32(_GDataInputStream*, _GCancellable*, _GError**) @nogc nothrow;
    c_long g_data_input_stream_read_int64(_GDataInputStream*, _GCancellable*, _GError**) @nogc nothrow;
    c_ulong g_data_input_stream_read_uint64(_GDataInputStream*, _GCancellable*, _GError**) @nogc nothrow;
    char* g_data_input_stream_read_line(_GDataInputStream*, c_ulong*, _GCancellable*, _GError**) @nogc nothrow;
    char* g_data_input_stream_read_line_utf8(_GDataInputStream*, c_ulong*, _GCancellable*, _GError**) @nogc nothrow;
    void g_data_input_stream_read_line_async(_GDataInputStream*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    char* g_data_input_stream_read_line_finish(_GDataInputStream*, _GAsyncResult*, c_ulong*, _GError**) @nogc nothrow;
    char* g_data_input_stream_read_line_finish_utf8(_GDataInputStream*, _GAsyncResult*, c_ulong*, _GError**) @nogc nothrow;
    char* g_data_input_stream_read_until(_GDataInputStream*, const(char)*, c_ulong*, _GCancellable*, _GError**) @nogc nothrow;
    void g_data_input_stream_read_until_async(_GDataInputStream*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    char* g_data_input_stream_read_until_finish(_GDataInputStream*, _GAsyncResult*, c_ulong*, _GError**) @nogc nothrow;
    char* g_data_input_stream_read_upto(_GDataInputStream*, const(char)*, c_long, c_ulong*, _GCancellable*, _GError**) @nogc nothrow;
    void g_data_input_stream_read_upto_async(_GDataInputStream*, const(char)*, c_long, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    char* g_data_input_stream_read_upto_finish(_GDataInputStream*, _GAsyncResult*, c_ulong*, _GError**) @nogc nothrow;
    alias GDataOutputStream = _GDataOutputStream;
    struct _GDataOutputStream
    {
        _GFilterOutputStream parent_instance;
        _GDataOutputStreamPrivate* priv;
    }
    alias GDataOutputStreamClass = _GDataOutputStreamClass;
    struct _GDataOutputStreamClass
    {
        _GFilterOutputStreamClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GDataOutputStreamPrivate = _GDataOutputStreamPrivate;
    struct _GDataOutputStreamPrivate{};
    c_ulong g_data_output_stream_get_type() @nogc nothrow;
    _GDataOutputStream* g_data_output_stream_new(_GOutputStream*) @nogc nothrow;
    void g_data_output_stream_set_byte_order(_GDataOutputStream*, GDataStreamByteOrder) @nogc nothrow;
    GDataStreamByteOrder g_data_output_stream_get_byte_order(_GDataOutputStream*) @nogc nothrow;
    int g_data_output_stream_put_byte(_GDataOutputStream*, ubyte, _GCancellable*, _GError**) @nogc nothrow;
    int g_data_output_stream_put_int16(_GDataOutputStream*, short, _GCancellable*, _GError**) @nogc nothrow;
    int g_data_output_stream_put_uint16(_GDataOutputStream*, ushort, _GCancellable*, _GError**) @nogc nothrow;
    int g_data_output_stream_put_int32(_GDataOutputStream*, int, _GCancellable*, _GError**) @nogc nothrow;
    int g_data_output_stream_put_uint32(_GDataOutputStream*, uint, _GCancellable*, _GError**) @nogc nothrow;
    int g_data_output_stream_put_int64(_GDataOutputStream*, c_long, _GCancellable*, _GError**) @nogc nothrow;
    int g_data_output_stream_put_uint64(_GDataOutputStream*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    int g_data_output_stream_put_string(_GDataOutputStream*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    c_ulong g_dbus_action_group_get_type() @nogc nothrow;
    _GDBusActionGroup* g_dbus_action_group_get(_GDBusConnection*, const(char)*, const(char)*) @nogc nothrow;
    char* g_dbus_address_escape_value(const(char)*) @nogc nothrow;
    int g_dbus_is_address(const(char)*) @nogc nothrow;
    int g_dbus_is_supported_address(const(char)*, _GError**) @nogc nothrow;
    void g_dbus_address_get_stream(const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GIOStream* g_dbus_address_get_stream_finish(_GAsyncResult*, char**, _GError**) @nogc nothrow;
    _GIOStream* g_dbus_address_get_stream_sync(const(char)*, char**, _GCancellable*, _GError**) @nogc nothrow;
    char* g_dbus_address_get_for_bus_sync(GBusType, _GCancellable*, _GError**) @nogc nothrow;
    int getentropy(void*, c_ulong) @nogc nothrow;
    c_ulong g_dbus_auth_observer_get_type() @nogc nothrow;
    _GDBusAuthObserver* g_dbus_auth_observer_new() @nogc nothrow;
    int g_dbus_auth_observer_authorize_authenticated_peer(_GDBusAuthObserver*, _GIOStream*, _GCredentials*) @nogc nothrow;
    int g_dbus_auth_observer_allow_mechanism(_GDBusAuthObserver*, const(char)*) @nogc nothrow;
    int fdatasync(int) @nogc nothrow;
    int lockf(int, int, c_long) @nogc nothrow;
    c_ulong g_dbus_connection_get_type() @nogc nothrow;
    void g_bus_get(GBusType, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GDBusConnection* g_bus_get_finish(_GAsyncResult*, _GError**) @nogc nothrow;
    _GDBusConnection* g_bus_get_sync(GBusType, _GCancellable*, _GError**) @nogc nothrow;
    void g_dbus_connection_new(_GIOStream*, const(char)*, GDBusConnectionFlags, _GDBusAuthObserver*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GDBusConnection* g_dbus_connection_new_finish(_GAsyncResult*, _GError**) @nogc nothrow;
    _GDBusConnection* g_dbus_connection_new_sync(_GIOStream*, const(char)*, GDBusConnectionFlags, _GDBusAuthObserver*, _GCancellable*, _GError**) @nogc nothrow;
    void g_dbus_connection_new_for_address(const(char)*, GDBusConnectionFlags, _GDBusAuthObserver*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GDBusConnection* g_dbus_connection_new_for_address_finish(_GAsyncResult*, _GError**) @nogc nothrow;
    _GDBusConnection* g_dbus_connection_new_for_address_sync(const(char)*, GDBusConnectionFlags, _GDBusAuthObserver*, _GCancellable*, _GError**) @nogc nothrow;
    void g_dbus_connection_start_message_processing(_GDBusConnection*) @nogc nothrow;
    int g_dbus_connection_is_closed(_GDBusConnection*) @nogc nothrow;
    _GIOStream* g_dbus_connection_get_stream(_GDBusConnection*) @nogc nothrow;
    const(char)* g_dbus_connection_get_guid(_GDBusConnection*) @nogc nothrow;
    const(char)* g_dbus_connection_get_unique_name(_GDBusConnection*) @nogc nothrow;
    _GCredentials* g_dbus_connection_get_peer_credentials(_GDBusConnection*) @nogc nothrow;
    uint g_dbus_connection_get_last_serial(_GDBusConnection*) @nogc nothrow;
    int g_dbus_connection_get_exit_on_close(_GDBusConnection*) @nogc nothrow;
    void g_dbus_connection_set_exit_on_close(_GDBusConnection*, int) @nogc nothrow;
    GDBusCapabilityFlags g_dbus_connection_get_capabilities(_GDBusConnection*) @nogc nothrow;
    void g_dbus_connection_close(_GDBusConnection*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_dbus_connection_close_finish(_GDBusConnection*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_dbus_connection_close_sync(_GDBusConnection*, _GCancellable*, _GError**) @nogc nothrow;
    void g_dbus_connection_flush(_GDBusConnection*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_dbus_connection_flush_finish(_GDBusConnection*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_dbus_connection_flush_sync(_GDBusConnection*, _GCancellable*, _GError**) @nogc nothrow;
    int g_dbus_connection_send_message(_GDBusConnection*, _GDBusMessage*, GDBusSendMessageFlags, uint*, _GError**) @nogc nothrow;
    void g_dbus_connection_send_message_with_reply(_GDBusConnection*, _GDBusMessage*, GDBusSendMessageFlags, int, uint*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GDBusMessage* g_dbus_connection_send_message_with_reply_finish(_GDBusConnection*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GDBusMessage* g_dbus_connection_send_message_with_reply_sync(_GDBusConnection*, _GDBusMessage*, GDBusSendMessageFlags, int, uint*, _GCancellable*, _GError**) @nogc nothrow;
    int g_dbus_connection_emit_signal(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, _GError**) @nogc nothrow;
    void g_dbus_connection_call(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, const(_GVariantType)*, GDBusCallFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GVariant* g_dbus_connection_call_finish(_GDBusConnection*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GVariant* g_dbus_connection_call_sync(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, const(_GVariantType)*, GDBusCallFlags, int, _GCancellable*, _GError**) @nogc nothrow;
    void g_dbus_connection_call_with_unix_fd_list(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, const(_GVariantType)*, GDBusCallFlags, int, _GUnixFDList*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GVariant* g_dbus_connection_call_with_unix_fd_list_finish(_GDBusConnection*, _GUnixFDList**, _GAsyncResult*, _GError**) @nogc nothrow;
    _GVariant* g_dbus_connection_call_with_unix_fd_list_sync(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, const(_GVariantType)*, GDBusCallFlags, int, _GUnixFDList*, _GUnixFDList**, _GCancellable*, _GError**) @nogc nothrow;
    alias GDBusInterfaceMethodCallFunc = void function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, _GDBusMethodInvocation*, void*);
    alias GDBusInterfaceGetPropertyFunc = _GVariant* function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GError**, void*);
    alias GDBusInterfaceSetPropertyFunc = int function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, _GError**, void*);
    uint g_dbus_connection_register_object(_GDBusConnection*, const(char)*, _GDBusInterfaceInfo*, const(_GDBusInterfaceVTable)*, void*, void function(void*), _GError**) @nogc nothrow;
    uint g_dbus_connection_register_object_with_closures(_GDBusConnection*, const(char)*, _GDBusInterfaceInfo*, _GClosure*, _GClosure*, _GClosure*, _GError**) @nogc nothrow;
    int g_dbus_connection_unregister_object(_GDBusConnection*, uint) @nogc nothrow;
    alias GDBusSubtreeEnumerateFunc = char** function(_GDBusConnection*, const(char)*, const(char)*, void*);
    alias GDBusSubtreeIntrospectFunc = _GDBusInterfaceInfo** function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, void*);
    alias GDBusSubtreeDispatchFunc = const(_GDBusInterfaceVTable)* function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, void**, void*);
    uint g_dbus_connection_register_subtree(_GDBusConnection*, const(char)*, const(_GDBusSubtreeVTable)*, GDBusSubtreeFlags, void*, void function(void*), _GError**) @nogc nothrow;
    int g_dbus_connection_unregister_subtree(_GDBusConnection*, uint) @nogc nothrow;
    alias GDBusSignalCallback = void function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, void*);
    uint g_dbus_connection_signal_subscribe(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, const(char)*, GDBusSignalFlags, void function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, void*), void*, void function(void*)) @nogc nothrow;
    void g_dbus_connection_signal_unsubscribe(_GDBusConnection*, uint) @nogc nothrow;
    alias GDBusMessageFilterFunction = _GDBusMessage* function(_GDBusConnection*, _GDBusMessage*, int, void*);
    uint g_dbus_connection_add_filter(_GDBusConnection*, _GDBusMessage* function(_GDBusConnection*, _GDBusMessage*, int, void*), void*, void function(void*)) @nogc nothrow;
    void g_dbus_connection_remove_filter(_GDBusConnection*, uint) @nogc nothrow;
    uint g_dbus_error_quark() @nogc nothrow;
    int g_dbus_error_is_remote_error(const(_GError)*) @nogc nothrow;
    char* g_dbus_error_get_remote_error(const(_GError)*) @nogc nothrow;
    int g_dbus_error_strip_remote_error(_GError*) @nogc nothrow;
    int g_dbus_error_register_error(uint, int, const(char)*) @nogc nothrow;
    int g_dbus_error_unregister_error(uint, int, const(char)*) @nogc nothrow;
    void g_dbus_error_register_error_domain(const(char)*, c_ulong*, const(_GDBusErrorEntry)*, uint) @nogc nothrow;
    _GError* g_dbus_error_new_for_dbus_error(const(char)*, const(char)*) @nogc nothrow;
    void g_dbus_error_set_dbus_error(_GError**, const(char)*, const(char)*, const(char)*, ...) @nogc nothrow;
    void g_dbus_error_set_dbus_error_valist(_GError**, const(char)*, const(char)*, const(char)*, va_list*) @nogc nothrow;
    char* g_dbus_error_encode_gerror(const(_GError)*) @nogc nothrow;
    c_long syscall(c_long, ...) @nogc nothrow;
    void* sbrk(c_long) @nogc nothrow;
    alias GDBusInterfaceIface = _GDBusInterfaceIface;
    struct _GDBusInterfaceIface
    {
        _GTypeInterface parent_iface;
        _GDBusInterfaceInfo* function(_GDBusInterface*) get_info;
        _GDBusObject* function(_GDBusInterface*) get_object;
        void function(_GDBusInterface*, _GDBusObject*) set_object;
        _GDBusObject* function(_GDBusInterface*) dup_object;
    }
    c_ulong g_dbus_interface_get_type() @nogc nothrow;
    _GDBusInterfaceInfo* g_dbus_interface_get_info(_GDBusInterface*) @nogc nothrow;
    _GDBusObject* g_dbus_interface_get_object(_GDBusInterface*) @nogc nothrow;
    void g_dbus_interface_set_object(_GDBusInterface*, _GDBusObject*) @nogc nothrow;
    _GDBusObject* g_dbus_interface_dup_object(_GDBusInterface*) @nogc nothrow;
    int brk(void*) @nogc nothrow;
    int ftruncate(int, c_long) @nogc nothrow;
    alias GDBusInterfaceSkeletonClass = _GDBusInterfaceSkeletonClass;
    struct _GDBusInterfaceSkeletonClass
    {
        _GObjectClass parent_class;
        _GDBusInterfaceInfo* function(_GDBusInterfaceSkeleton*) get_info;
        _GDBusInterfaceVTable* function(_GDBusInterfaceSkeleton*) get_vtable;
        _GVariant* function(_GDBusInterfaceSkeleton*) get_properties;
        void function(_GDBusInterfaceSkeleton*) flush;
        void*[8] vfunc_padding;
        int function(_GDBusInterfaceSkeleton*, _GDBusMethodInvocation*) g_authorize_method;
        void*[8] signal_padding;
    }
    alias GDBusInterfaceSkeletonPrivate = _GDBusInterfaceSkeletonPrivate;
    struct _GDBusInterfaceSkeletonPrivate{};
    c_ulong g_dbus_interface_skeleton_get_type() @nogc nothrow;
    GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags(_GDBusInterfaceSkeleton*) @nogc nothrow;
    void g_dbus_interface_skeleton_set_flags(_GDBusInterfaceSkeleton*, GDBusInterfaceSkeletonFlags) @nogc nothrow;
    _GDBusInterfaceInfo* g_dbus_interface_skeleton_get_info(_GDBusInterfaceSkeleton*) @nogc nothrow;
    _GDBusInterfaceVTable* g_dbus_interface_skeleton_get_vtable(_GDBusInterfaceSkeleton*) @nogc nothrow;
    _GVariant* g_dbus_interface_skeleton_get_properties(_GDBusInterfaceSkeleton*) @nogc nothrow;
    void g_dbus_interface_skeleton_flush(_GDBusInterfaceSkeleton*) @nogc nothrow;
    int g_dbus_interface_skeleton_export(_GDBusInterfaceSkeleton*, _GDBusConnection*, const(char)*, _GError**) @nogc nothrow;
    void g_dbus_interface_skeleton_unexport(_GDBusInterfaceSkeleton*) @nogc nothrow;
    void g_dbus_interface_skeleton_unexport_from_connection(_GDBusInterfaceSkeleton*, _GDBusConnection*) @nogc nothrow;
    _GDBusConnection* g_dbus_interface_skeleton_get_connection(_GDBusInterfaceSkeleton*) @nogc nothrow;
    _GList* g_dbus_interface_skeleton_get_connections(_GDBusInterfaceSkeleton*) @nogc nothrow;
    int g_dbus_interface_skeleton_has_connection(_GDBusInterfaceSkeleton*, _GDBusConnection*) @nogc nothrow;
    const(char)* g_dbus_interface_skeleton_get_object_path(_GDBusInterfaceSkeleton*) @nogc nothrow;
    const(char)* g_dbus_annotation_info_lookup(_GDBusAnnotationInfo**, const(char)*) @nogc nothrow;
    _GDBusMethodInfo* g_dbus_interface_info_lookup_method(_GDBusInterfaceInfo*, const(char)*) @nogc nothrow;
    _GDBusSignalInfo* g_dbus_interface_info_lookup_signal(_GDBusInterfaceInfo*, const(char)*) @nogc nothrow;
    _GDBusPropertyInfo* g_dbus_interface_info_lookup_property(_GDBusInterfaceInfo*, const(char)*) @nogc nothrow;
    void g_dbus_interface_info_cache_build(_GDBusInterfaceInfo*) @nogc nothrow;
    void g_dbus_interface_info_cache_release(_GDBusInterfaceInfo*) @nogc nothrow;
    void g_dbus_interface_info_generate_xml(_GDBusInterfaceInfo*, uint, _GString*) @nogc nothrow;
    _GDBusNodeInfo* g_dbus_node_info_new_for_xml(const(char)*, _GError**) @nogc nothrow;
    _GDBusInterfaceInfo* g_dbus_node_info_lookup_interface(_GDBusNodeInfo*, const(char)*) @nogc nothrow;
    void g_dbus_node_info_generate_xml(_GDBusNodeInfo*, uint, _GString*) @nogc nothrow;
    _GDBusNodeInfo* g_dbus_node_info_ref(_GDBusNodeInfo*) @nogc nothrow;
    _GDBusInterfaceInfo* g_dbus_interface_info_ref(_GDBusInterfaceInfo*) @nogc nothrow;
    _GDBusMethodInfo* g_dbus_method_info_ref(_GDBusMethodInfo*) @nogc nothrow;
    _GDBusSignalInfo* g_dbus_signal_info_ref(_GDBusSignalInfo*) @nogc nothrow;
    _GDBusPropertyInfo* g_dbus_property_info_ref(_GDBusPropertyInfo*) @nogc nothrow;
    _GDBusArgInfo* g_dbus_arg_info_ref(_GDBusArgInfo*) @nogc nothrow;
    _GDBusAnnotationInfo* g_dbus_annotation_info_ref(_GDBusAnnotationInfo*) @nogc nothrow;
    void g_dbus_node_info_unref(_GDBusNodeInfo*) @nogc nothrow;
    void g_dbus_interface_info_unref(_GDBusInterfaceInfo*) @nogc nothrow;
    void g_dbus_method_info_unref(_GDBusMethodInfo*) @nogc nothrow;
    void g_dbus_signal_info_unref(_GDBusSignalInfo*) @nogc nothrow;
    void g_dbus_property_info_unref(_GDBusPropertyInfo*) @nogc nothrow;
    void g_dbus_arg_info_unref(_GDBusArgInfo*) @nogc nothrow;
    void g_dbus_annotation_info_unref(_GDBusAnnotationInfo*) @nogc nothrow;
    int truncate(const(char)*, c_long) @nogc nothrow;
    c_ulong g_dbus_node_info_get_type() @nogc nothrow;
    c_ulong g_dbus_interface_info_get_type() @nogc nothrow;
    c_ulong g_dbus_method_info_get_type() @nogc nothrow;
    c_ulong g_dbus_signal_info_get_type() @nogc nothrow;
    c_ulong g_dbus_property_info_get_type() @nogc nothrow;
    c_ulong g_dbus_arg_info_get_type() @nogc nothrow;
    c_ulong g_dbus_annotation_info_get_type() @nogc nothrow;
    int getdtablesize() @nogc nothrow;
    int getpagesize() @nogc nothrow;
    alias GDBusMenuModel = _GDBusMenuModel;
    struct _GDBusMenuModel{};
    c_ulong g_dbus_menu_model_get_type() @nogc nothrow;
    _GDBusMenuModel* g_dbus_menu_model_get(_GDBusConnection*, const(char)*, const(char)*) @nogc nothrow;
    void sync() @nogc nothrow;
    c_long gethostid() @nogc nothrow;
    c_ulong g_dbus_message_get_type() @nogc nothrow;
    _GDBusMessage* g_dbus_message_new() @nogc nothrow;
    _GDBusMessage* g_dbus_message_new_signal(const(char)*, const(char)*, const(char)*) @nogc nothrow;
    _GDBusMessage* g_dbus_message_new_method_call(const(char)*, const(char)*, const(char)*, const(char)*) @nogc nothrow;
    _GDBusMessage* g_dbus_message_new_method_reply(_GDBusMessage*) @nogc nothrow;
    _GDBusMessage* g_dbus_message_new_method_error(_GDBusMessage*, const(char)*, const(char)*, ...) @nogc nothrow;
    _GDBusMessage* g_dbus_message_new_method_error_valist(_GDBusMessage*, const(char)*, const(char)*, va_list*) @nogc nothrow;
    _GDBusMessage* g_dbus_message_new_method_error_literal(_GDBusMessage*, const(char)*, const(char)*) @nogc nothrow;
    char* g_dbus_message_print(_GDBusMessage*, uint) @nogc nothrow;
    int g_dbus_message_get_locked(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_lock(_GDBusMessage*) @nogc nothrow;
    _GDBusMessage* g_dbus_message_copy(_GDBusMessage*, _GError**) @nogc nothrow;
    GDBusMessageByteOrder g_dbus_message_get_byte_order(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_byte_order(_GDBusMessage*, GDBusMessageByteOrder) @nogc nothrow;
    GDBusMessageType g_dbus_message_get_message_type(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_message_type(_GDBusMessage*, GDBusMessageType) @nogc nothrow;
    GDBusMessageFlags g_dbus_message_get_flags(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_flags(_GDBusMessage*, GDBusMessageFlags) @nogc nothrow;
    uint g_dbus_message_get_serial(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_serial(_GDBusMessage*, uint) @nogc nothrow;
    _GVariant* g_dbus_message_get_header(_GDBusMessage*, GDBusMessageHeaderField) @nogc nothrow;
    void g_dbus_message_set_header(_GDBusMessage*, GDBusMessageHeaderField, _GVariant*) @nogc nothrow;
    ubyte* g_dbus_message_get_header_fields(_GDBusMessage*) @nogc nothrow;
    _GVariant* g_dbus_message_get_body(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_body(_GDBusMessage*, _GVariant*) @nogc nothrow;
    _GUnixFDList* g_dbus_message_get_unix_fd_list(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_unix_fd_list(_GDBusMessage*, _GUnixFDList*) @nogc nothrow;
    uint g_dbus_message_get_reply_serial(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_reply_serial(_GDBusMessage*, uint) @nogc nothrow;
    const(char)* g_dbus_message_get_interface(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_interface(_GDBusMessage*, const(char)*) @nogc nothrow;
    const(char)* g_dbus_message_get_member(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_member(_GDBusMessage*, const(char)*) @nogc nothrow;
    const(char)* g_dbus_message_get_path(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_path(_GDBusMessage*, const(char)*) @nogc nothrow;
    const(char)* g_dbus_message_get_sender(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_sender(_GDBusMessage*, const(char)*) @nogc nothrow;
    const(char)* g_dbus_message_get_destination(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_destination(_GDBusMessage*, const(char)*) @nogc nothrow;
    const(char)* g_dbus_message_get_error_name(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_error_name(_GDBusMessage*, const(char)*) @nogc nothrow;
    const(char)* g_dbus_message_get_signature(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_signature(_GDBusMessage*, const(char)*) @nogc nothrow;
    uint g_dbus_message_get_num_unix_fds(_GDBusMessage*) @nogc nothrow;
    void g_dbus_message_set_num_unix_fds(_GDBusMessage*, uint) @nogc nothrow;
    const(char)* g_dbus_message_get_arg0(_GDBusMessage*) @nogc nothrow;
    _GDBusMessage* g_dbus_message_new_from_blob(ubyte*, c_ulong, GDBusCapabilityFlags, _GError**) @nogc nothrow;
    c_long g_dbus_message_bytes_needed(ubyte*, c_ulong, _GError**) @nogc nothrow;
    ubyte* g_dbus_message_to_blob(_GDBusMessage*, c_ulong*, GDBusCapabilityFlags, _GError**) @nogc nothrow;
    int g_dbus_message_to_gerror(_GDBusMessage*, _GError**) @nogc nothrow;
    int fsync(int) @nogc nothrow;
    char* getpass(const(char)*) @nogc nothrow;
    c_ulong g_dbus_method_invocation_get_type() @nogc nothrow;
    const(char)* g_dbus_method_invocation_get_sender(_GDBusMethodInvocation*) @nogc nothrow;
    const(char)* g_dbus_method_invocation_get_object_path(_GDBusMethodInvocation*) @nogc nothrow;
    const(char)* g_dbus_method_invocation_get_interface_name(_GDBusMethodInvocation*) @nogc nothrow;
    const(char)* g_dbus_method_invocation_get_method_name(_GDBusMethodInvocation*) @nogc nothrow;
    const(_GDBusMethodInfo)* g_dbus_method_invocation_get_method_info(_GDBusMethodInvocation*) @nogc nothrow;
    const(_GDBusPropertyInfo)* g_dbus_method_invocation_get_property_info(_GDBusMethodInvocation*) @nogc nothrow;
    _GDBusConnection* g_dbus_method_invocation_get_connection(_GDBusMethodInvocation*) @nogc nothrow;
    _GDBusMessage* g_dbus_method_invocation_get_message(_GDBusMethodInvocation*) @nogc nothrow;
    _GVariant* g_dbus_method_invocation_get_parameters(_GDBusMethodInvocation*) @nogc nothrow;
    void* g_dbus_method_invocation_get_user_data(_GDBusMethodInvocation*) @nogc nothrow;
    void g_dbus_method_invocation_return_value(_GDBusMethodInvocation*, _GVariant*) @nogc nothrow;
    void g_dbus_method_invocation_return_value_with_unix_fd_list(_GDBusMethodInvocation*, _GVariant*, _GUnixFDList*) @nogc nothrow;
    void g_dbus_method_invocation_return_error(_GDBusMethodInvocation*, uint, int, const(char)*, ...) @nogc nothrow;
    void g_dbus_method_invocation_return_error_valist(_GDBusMethodInvocation*, uint, int, const(char)*, va_list*) @nogc nothrow;
    void g_dbus_method_invocation_return_error_literal(_GDBusMethodInvocation*, uint, int, const(char)*) @nogc nothrow;
    void g_dbus_method_invocation_return_gerror(_GDBusMethodInvocation*, const(_GError)*) @nogc nothrow;
    void g_dbus_method_invocation_take_error(_GDBusMethodInvocation*, _GError*) @nogc nothrow;
    void g_dbus_method_invocation_return_dbus_error(_GDBusMethodInvocation*, const(char)*, const(char)*) @nogc nothrow;
    alias GBusAcquiredCallback = void function(_GDBusConnection*, const(char)*, void*);
    alias GBusNameAcquiredCallback = void function(_GDBusConnection*, const(char)*, void*);
    alias GBusNameLostCallback = void function(_GDBusConnection*, const(char)*, void*);
    uint g_bus_own_name(GBusType, const(char)*, GBusNameOwnerFlags, void function(_GDBusConnection*, const(char)*, void*), void function(_GDBusConnection*, const(char)*, void*), void function(_GDBusConnection*, const(char)*, void*), void*, void function(void*)) @nogc nothrow;
    uint g_bus_own_name_on_connection(_GDBusConnection*, const(char)*, GBusNameOwnerFlags, void function(_GDBusConnection*, const(char)*, void*), void function(_GDBusConnection*, const(char)*, void*), void*, void function(void*)) @nogc nothrow;
    uint g_bus_own_name_with_closures(GBusType, const(char)*, GBusNameOwnerFlags, _GClosure*, _GClosure*, _GClosure*) @nogc nothrow;
    uint g_bus_own_name_on_connection_with_closures(_GDBusConnection*, const(char)*, GBusNameOwnerFlags, _GClosure*, _GClosure*) @nogc nothrow;
    void g_bus_unown_name(uint) @nogc nothrow;
    alias GBusNameAppearedCallback = void function(_GDBusConnection*, const(char)*, const(char)*, void*);
    alias GBusNameVanishedCallback = void function(_GDBusConnection*, const(char)*, void*);
    uint g_bus_watch_name(GBusType, const(char)*, GBusNameWatcherFlags, void function(_GDBusConnection*, const(char)*, const(char)*, void*), void function(_GDBusConnection*, const(char)*, void*), void*, void function(void*)) @nogc nothrow;
    uint g_bus_watch_name_on_connection(_GDBusConnection*, const(char)*, GBusNameWatcherFlags, void function(_GDBusConnection*, const(char)*, const(char)*, void*), void function(_GDBusConnection*, const(char)*, void*), void*, void function(void*)) @nogc nothrow;
    uint g_bus_watch_name_with_closures(GBusType, const(char)*, GBusNameWatcherFlags, _GClosure*, _GClosure*) @nogc nothrow;
    uint g_bus_watch_name_on_connection_with_closures(_GDBusConnection*, const(char)*, GBusNameWatcherFlags, _GClosure*, _GClosure*) @nogc nothrow;
    void g_bus_unwatch_name(uint) @nogc nothrow;
    int chroot(const(char)*) @nogc nothrow;
    alias GDBusObjectIface = _GDBusObjectIface;
    struct _GDBusObjectIface
    {
        _GTypeInterface parent_iface;
        const(char)* function(_GDBusObject*) get_object_path;
        _GList* function(_GDBusObject*) get_interfaces;
        _GDBusInterface* function(_GDBusObject*, const(char)*) get_interface;
        void function(_GDBusObject*, _GDBusInterface*) interface_added;
        void function(_GDBusObject*, _GDBusInterface*) interface_removed;
    }
    c_ulong g_dbus_object_get_type() @nogc nothrow;
    const(char)* g_dbus_object_get_object_path(_GDBusObject*) @nogc nothrow;
    _GList* g_dbus_object_get_interfaces(_GDBusObject*) @nogc nothrow;
    _GDBusInterface* g_dbus_object_get_interface(_GDBusObject*, const(char)*) @nogc nothrow;
    int daemon(int, int) @nogc nothrow;
    void setusershell() @nogc nothrow;
    alias GDBusObjectManagerIface = _GDBusObjectManagerIface;
    struct _GDBusObjectManagerIface
    {
        _GTypeInterface parent_iface;
        const(char)* function(_GDBusObjectManager*) get_object_path;
        _GList* function(_GDBusObjectManager*) get_objects;
        _GDBusObject* function(_GDBusObjectManager*, const(char)*) get_object;
        _GDBusInterface* function(_GDBusObjectManager*, const(char)*, const(char)*) get_interface;
        void function(_GDBusObjectManager*, _GDBusObject*) object_added;
        void function(_GDBusObjectManager*, _GDBusObject*) object_removed;
        void function(_GDBusObjectManager*, _GDBusObject*, _GDBusInterface*) interface_added;
        void function(_GDBusObjectManager*, _GDBusObject*, _GDBusInterface*) interface_removed;
    }
    c_ulong g_dbus_object_manager_get_type() @nogc nothrow;
    const(char)* g_dbus_object_manager_get_object_path(_GDBusObjectManager*) @nogc nothrow;
    _GList* g_dbus_object_manager_get_objects(_GDBusObjectManager*) @nogc nothrow;
    _GDBusObject* g_dbus_object_manager_get_object(_GDBusObjectManager*, const(char)*) @nogc nothrow;
    _GDBusInterface* g_dbus_object_manager_get_interface(_GDBusObjectManager*, const(char)*, const(char)*) @nogc nothrow;
    void endusershell() @nogc nothrow;
    char* getusershell() @nogc nothrow;
    int acct(const(char)*) @nogc nothrow;
    alias GDBusObjectManagerClientClass = _GDBusObjectManagerClientClass;
    struct _GDBusObjectManagerClientClass
    {
        _GObjectClass parent_class;
        void function(_GDBusObjectManagerClient*, _GDBusObjectProxy*, _GDBusProxy*, const(char)*, const(char)*, _GVariant*) interface_proxy_signal;
        void function(_GDBusObjectManagerClient*, _GDBusObjectProxy*, _GDBusProxy*, _GVariant*, const(const(char)*)*) interface_proxy_properties_changed;
        void*[8] padding;
    }
    alias GDBusObjectManagerClientPrivate = _GDBusObjectManagerClientPrivate;
    struct _GDBusObjectManagerClientPrivate{};
    c_ulong g_dbus_object_manager_client_get_type() @nogc nothrow;
    void g_dbus_object_manager_client_new(_GDBusConnection*, GDBusObjectManagerClientFlags, const(char)*, const(char)*, c_ulong function(_GDBusObjectManagerClient*, const(char)*, const(char)*, void*), void*, void function(void*), _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GDBusObjectManager* g_dbus_object_manager_client_new_finish(_GAsyncResult*, _GError**) @nogc nothrow;
    _GDBusObjectManager* g_dbus_object_manager_client_new_sync(_GDBusConnection*, GDBusObjectManagerClientFlags, const(char)*, const(char)*, c_ulong function(_GDBusObjectManagerClient*, const(char)*, const(char)*, void*), void*, void function(void*), _GCancellable*, _GError**) @nogc nothrow;
    void g_dbus_object_manager_client_new_for_bus(GBusType, GDBusObjectManagerClientFlags, const(char)*, const(char)*, c_ulong function(_GDBusObjectManagerClient*, const(char)*, const(char)*, void*), void*, void function(void*), _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GDBusObjectManager* g_dbus_object_manager_client_new_for_bus_finish(_GAsyncResult*, _GError**) @nogc nothrow;
    _GDBusObjectManager* g_dbus_object_manager_client_new_for_bus_sync(GBusType, GDBusObjectManagerClientFlags, const(char)*, const(char)*, c_ulong function(_GDBusObjectManagerClient*, const(char)*, const(char)*, void*), void*, void function(void*), _GCancellable*, _GError**) @nogc nothrow;
    _GDBusConnection* g_dbus_object_manager_client_get_connection(_GDBusObjectManagerClient*) @nogc nothrow;
    GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags(_GDBusObjectManagerClient*) @nogc nothrow;
    const(char)* g_dbus_object_manager_client_get_name(_GDBusObjectManagerClient*) @nogc nothrow;
    char* g_dbus_object_manager_client_get_name_owner(_GDBusObjectManagerClient*) @nogc nothrow;
    int profil(ushort*, c_ulong, c_ulong, uint) @nogc nothrow;
    int revoke(const(char)*) @nogc nothrow;
    int vhangup() @nogc nothrow;
    alias GDBusObjectManagerServerClass = _GDBusObjectManagerServerClass;
    struct _GDBusObjectManagerServerClass
    {
        _GObjectClass parent_class;
        void*[8] padding;
    }
    alias GDBusObjectManagerServerPrivate = _GDBusObjectManagerServerPrivate;
    struct _GDBusObjectManagerServerPrivate{};
    c_ulong g_dbus_object_manager_server_get_type() @nogc nothrow;
    _GDBusObjectManagerServer* g_dbus_object_manager_server_new(const(char)*) @nogc nothrow;
    _GDBusConnection* g_dbus_object_manager_server_get_connection(_GDBusObjectManagerServer*) @nogc nothrow;
    void g_dbus_object_manager_server_set_connection(_GDBusObjectManagerServer*, _GDBusConnection*) @nogc nothrow;
    void g_dbus_object_manager_server_export(_GDBusObjectManagerServer*, _GDBusObjectSkeleton*) @nogc nothrow;
    void g_dbus_object_manager_server_export_uniquely(_GDBusObjectManagerServer*, _GDBusObjectSkeleton*) @nogc nothrow;
    int g_dbus_object_manager_server_is_exported(_GDBusObjectManagerServer*, _GDBusObjectSkeleton*) @nogc nothrow;
    int g_dbus_object_manager_server_unexport(_GDBusObjectManagerServer*, const(char)*) @nogc nothrow;
    int setdomainname(const(char)*, c_ulong) @nogc nothrow;
    alias GDBusObjectProxyClass = _GDBusObjectProxyClass;
    struct _GDBusObjectProxyClass
    {
        _GObjectClass parent_class;
        void*[8] padding;
    }
    alias GDBusObjectProxyPrivate = _GDBusObjectProxyPrivate;
    struct _GDBusObjectProxyPrivate{};
    c_ulong g_dbus_object_proxy_get_type() @nogc nothrow;
    _GDBusObjectProxy* g_dbus_object_proxy_new(_GDBusConnection*, const(char)*) @nogc nothrow;
    _GDBusConnection* g_dbus_object_proxy_get_connection(_GDBusObjectProxy*) @nogc nothrow;
    int getdomainname(char*, c_ulong) @nogc nothrow;
    int sethostid(c_long) @nogc nothrow;
    alias GDBusObjectSkeletonClass = _GDBusObjectSkeletonClass;
    struct _GDBusObjectSkeletonClass
    {
        _GObjectClass parent_class;
        int function(_GDBusObjectSkeleton*, _GDBusInterfaceSkeleton*, _GDBusMethodInvocation*) authorize_method;
        void*[8] padding;
    }
    alias GDBusObjectSkeletonPrivate = _GDBusObjectSkeletonPrivate;
    struct _GDBusObjectSkeletonPrivate{};
    c_ulong g_dbus_object_skeleton_get_type() @nogc nothrow;
    _GDBusObjectSkeleton* g_dbus_object_skeleton_new(const(char)*) @nogc nothrow;
    void g_dbus_object_skeleton_flush(_GDBusObjectSkeleton*) @nogc nothrow;
    void g_dbus_object_skeleton_add_interface(_GDBusObjectSkeleton*, _GDBusInterfaceSkeleton*) @nogc nothrow;
    void g_dbus_object_skeleton_remove_interface(_GDBusObjectSkeleton*, _GDBusInterfaceSkeleton*) @nogc nothrow;
    void g_dbus_object_skeleton_remove_interface_by_name(_GDBusObjectSkeleton*, const(char)*) @nogc nothrow;
    void g_dbus_object_skeleton_set_object_path(_GDBusObjectSkeleton*, const(char)*) @nogc nothrow;
    int sethostname(const(char)*, c_ulong) @nogc nothrow;
    int gethostname(char*, c_ulong) @nogc nothrow;
    alias GDBusProxyClass = _GDBusProxyClass;
    struct _GDBusProxyClass
    {
        _GObjectClass parent_class;
        void function(_GDBusProxy*, _GVariant*, const(const(char)*)*) g_properties_changed;
        void function(_GDBusProxy*, const(char)*, const(char)*, _GVariant*) g_signal;
        void*[32] padding;
    }
    alias GDBusProxyPrivate = _GDBusProxyPrivate;
    struct _GDBusProxyPrivate{};
    c_ulong g_dbus_proxy_get_type() @nogc nothrow;
    void g_dbus_proxy_new(_GDBusConnection*, GDBusProxyFlags, _GDBusInterfaceInfo*, const(char)*, const(char)*, const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GDBusProxy* g_dbus_proxy_new_finish(_GAsyncResult*, _GError**) @nogc nothrow;
    _GDBusProxy* g_dbus_proxy_new_sync(_GDBusConnection*, GDBusProxyFlags, _GDBusInterfaceInfo*, const(char)*, const(char)*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    void g_dbus_proxy_new_for_bus(GBusType, GDBusProxyFlags, _GDBusInterfaceInfo*, const(char)*, const(char)*, const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GDBusProxy* g_dbus_proxy_new_for_bus_finish(_GAsyncResult*, _GError**) @nogc nothrow;
    _GDBusProxy* g_dbus_proxy_new_for_bus_sync(GBusType, GDBusProxyFlags, _GDBusInterfaceInfo*, const(char)*, const(char)*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    _GDBusConnection* g_dbus_proxy_get_connection(_GDBusProxy*) @nogc nothrow;
    GDBusProxyFlags g_dbus_proxy_get_flags(_GDBusProxy*) @nogc nothrow;
    const(char)* g_dbus_proxy_get_name(_GDBusProxy*) @nogc nothrow;
    char* g_dbus_proxy_get_name_owner(_GDBusProxy*) @nogc nothrow;
    const(char)* g_dbus_proxy_get_object_path(_GDBusProxy*) @nogc nothrow;
    const(char)* g_dbus_proxy_get_interface_name(_GDBusProxy*) @nogc nothrow;
    int g_dbus_proxy_get_default_timeout(_GDBusProxy*) @nogc nothrow;
    void g_dbus_proxy_set_default_timeout(_GDBusProxy*, int) @nogc nothrow;
    _GDBusInterfaceInfo* g_dbus_proxy_get_interface_info(_GDBusProxy*) @nogc nothrow;
    void g_dbus_proxy_set_interface_info(_GDBusProxy*, _GDBusInterfaceInfo*) @nogc nothrow;
    _GVariant* g_dbus_proxy_get_cached_property(_GDBusProxy*, const(char)*) @nogc nothrow;
    void g_dbus_proxy_set_cached_property(_GDBusProxy*, const(char)*, _GVariant*) @nogc nothrow;
    char** g_dbus_proxy_get_cached_property_names(_GDBusProxy*) @nogc nothrow;
    void g_dbus_proxy_call(_GDBusProxy*, const(char)*, _GVariant*, GDBusCallFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GVariant* g_dbus_proxy_call_finish(_GDBusProxy*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GVariant* g_dbus_proxy_call_sync(_GDBusProxy*, const(char)*, _GVariant*, GDBusCallFlags, int, _GCancellable*, _GError**) @nogc nothrow;
    void g_dbus_proxy_call_with_unix_fd_list(_GDBusProxy*, const(char)*, _GVariant*, GDBusCallFlags, int, _GUnixFDList*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GVariant* g_dbus_proxy_call_with_unix_fd_list_finish(_GDBusProxy*, _GUnixFDList**, _GAsyncResult*, _GError**) @nogc nothrow;
    _GVariant* g_dbus_proxy_call_with_unix_fd_list_sync(_GDBusProxy*, const(char)*, _GVariant*, GDBusCallFlags, int, _GUnixFDList*, _GUnixFDList**, _GCancellable*, _GError**) @nogc nothrow;
    int setlogin(const(char)*) @nogc nothrow;
    c_ulong g_dbus_server_get_type() @nogc nothrow;
    _GDBusServer* g_dbus_server_new_sync(const(char)*, GDBusServerFlags, const(char)*, _GDBusAuthObserver*, _GCancellable*, _GError**) @nogc nothrow;
    const(char)* g_dbus_server_get_client_address(_GDBusServer*) @nogc nothrow;
    const(char)* g_dbus_server_get_guid(_GDBusServer*) @nogc nothrow;
    GDBusServerFlags g_dbus_server_get_flags(_GDBusServer*) @nogc nothrow;
    void g_dbus_server_start(_GDBusServer*) @nogc nothrow;
    void g_dbus_server_stop(_GDBusServer*) @nogc nothrow;
    int g_dbus_server_is_active(_GDBusServer*) @nogc nothrow;
    int g_dbus_is_guid(const(char)*) @nogc nothrow;
    char* g_dbus_generate_guid() @nogc nothrow;
    int g_dbus_is_name(const(char)*) @nogc nothrow;
    int g_dbus_is_unique_name(const(char)*) @nogc nothrow;
    int g_dbus_is_member_name(const(char)*) @nogc nothrow;
    int g_dbus_is_interface_name(const(char)*) @nogc nothrow;
    void g_dbus_gvariant_to_gvalue(_GVariant*, _GValue*) @nogc nothrow;
    _GVariant* g_dbus_gvalue_to_gvariant(const(_GValue)*, const(_GVariantType)*) @nogc nothrow;
    int getlogin_r(char*, c_ulong) @nogc nothrow;
    char* getlogin() @nogc nothrow;
    alias GDriveIface = _GDriveIface;
    struct _GDriveIface
    {
        _GTypeInterface g_iface;
        void function(_GDrive*) changed;
        void function(_GDrive*) disconnected;
        void function(_GDrive*) eject_button;
        char* function(_GDrive*) get_name;
        _GIcon* function(_GDrive*) get_icon;
        int function(_GDrive*) has_volumes;
        _GList* function(_GDrive*) get_volumes;
        int function(_GDrive*) is_media_removable;
        int function(_GDrive*) has_media;
        int function(_GDrive*) is_media_check_automatic;
        int function(_GDrive*) can_eject;
        int function(_GDrive*) can_poll_for_media;
        void function(_GDrive*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) eject;
        int function(_GDrive*, _GAsyncResult*, _GError**) eject_finish;
        void function(_GDrive*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) poll_for_media;
        int function(_GDrive*, _GAsyncResult*, _GError**) poll_for_media_finish;
        char* function(_GDrive*, const(char)*) get_identifier;
        char** function(_GDrive*) enumerate_identifiers;
        GDriveStartStopType function(_GDrive*) get_start_stop_type;
        int function(_GDrive*) can_start;
        int function(_GDrive*) can_start_degraded;
        void function(_GDrive*, GDriveStartFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) start;
        int function(_GDrive*, _GAsyncResult*, _GError**) start_finish;
        int function(_GDrive*) can_stop;
        void function(_GDrive*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) stop;
        int function(_GDrive*, _GAsyncResult*, _GError**) stop_finish;
        void function(_GDrive*) stop_button;
        void function(_GDrive*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) eject_with_operation;
        int function(_GDrive*, _GAsyncResult*, _GError**) eject_with_operation_finish;
        const(char)* function(_GDrive*) get_sort_key;
        _GIcon* function(_GDrive*) get_symbolic_icon;
        int function(_GDrive*) is_removable;
    }
    c_ulong g_drive_get_type() @nogc nothrow;
    char* g_drive_get_name(_GDrive*) @nogc nothrow;
    _GIcon* g_drive_get_icon(_GDrive*) @nogc nothrow;
    _GIcon* g_drive_get_symbolic_icon(_GDrive*) @nogc nothrow;
    int g_drive_has_volumes(_GDrive*) @nogc nothrow;
    _GList* g_drive_get_volumes(_GDrive*) @nogc nothrow;
    int g_drive_is_removable(_GDrive*) @nogc nothrow;
    int g_drive_is_media_removable(_GDrive*) @nogc nothrow;
    int g_drive_has_media(_GDrive*) @nogc nothrow;
    int g_drive_is_media_check_automatic(_GDrive*) @nogc nothrow;
    int g_drive_can_poll_for_media(_GDrive*) @nogc nothrow;
    int g_drive_can_eject(_GDrive*) @nogc nothrow;
    void g_drive_eject(_GDrive*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_drive_eject_finish(_GDrive*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_drive_poll_for_media(_GDrive*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_drive_poll_for_media_finish(_GDrive*, _GAsyncResult*, _GError**) @nogc nothrow;
    char* g_drive_get_identifier(_GDrive*, const(char)*) @nogc nothrow;
    char** g_drive_enumerate_identifiers(_GDrive*) @nogc nothrow;
    GDriveStartStopType g_drive_get_start_stop_type(_GDrive*) @nogc nothrow;
    int g_drive_can_start(_GDrive*) @nogc nothrow;
    int g_drive_can_start_degraded(_GDrive*) @nogc nothrow;
    void g_drive_start(_GDrive*, GDriveStartFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_drive_start_finish(_GDrive*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_drive_can_stop(_GDrive*) @nogc nothrow;
    void g_drive_stop(_GDrive*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_drive_stop_finish(_GDrive*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_drive_eject_with_operation(_GDrive*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_drive_eject_with_operation_finish(_GDrive*, _GAsyncResult*, _GError**) @nogc nothrow;
    const(char)* g_drive_get_sort_key(_GDrive*) @nogc nothrow;
    int tcsetpgrp(int, int) @nogc nothrow;
    int tcgetpgrp(int) @nogc nothrow;
    alias GDtlsClientConnectionInterface = _GDtlsClientConnectionInterface;
    struct _GDtlsClientConnectionInterface
    {
        _GTypeInterface g_iface;
    }
    c_ulong g_dtls_client_connection_get_type() @nogc nothrow;
    _GDatagramBased* g_dtls_client_connection_new(_GDatagramBased*, _GSocketConnectable*, _GError**) @nogc nothrow;
    GTlsCertificateFlags g_dtls_client_connection_get_validation_flags(_GDtlsClientConnection*) @nogc nothrow;
    void g_dtls_client_connection_set_validation_flags(_GDtlsClientConnection*, GTlsCertificateFlags) @nogc nothrow;
    _GSocketConnectable* g_dtls_client_connection_get_server_identity(_GDtlsClientConnection*) @nogc nothrow;
    void g_dtls_client_connection_set_server_identity(_GDtlsClientConnection*, _GSocketConnectable*) @nogc nothrow;
    _GList* g_dtls_client_connection_get_accepted_cas(_GDtlsClientConnection*) @nogc nothrow;
    int rmdir(const(char)*) @nogc nothrow;
    int unlinkat(int, const(char)*, int) @nogc nothrow;
    alias GDtlsConnectionInterface = _GDtlsConnectionInterface;
    struct _GDtlsConnectionInterface
    {
        _GTypeInterface g_iface;
        int function(_GDtlsConnection*, _GTlsCertificate*, GTlsCertificateFlags) accept_certificate;
        int function(_GDtlsConnection*, _GCancellable*, _GError**) handshake;
        void function(_GDtlsConnection*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) handshake_async;
        int function(_GDtlsConnection*, _GAsyncResult*, _GError**) handshake_finish;
        int function(_GDtlsConnection*, int, int, _GCancellable*, _GError**) shutdown;
        void function(_GDtlsConnection*, int, int, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) shutdown_async;
        int function(_GDtlsConnection*, _GAsyncResult*, _GError**) shutdown_finish;
    }
    c_ulong g_dtls_connection_get_type() @nogc nothrow;
    void g_dtls_connection_set_database(_GDtlsConnection*, _GTlsDatabase*) @nogc nothrow;
    _GTlsDatabase* g_dtls_connection_get_database(_GDtlsConnection*) @nogc nothrow;
    void g_dtls_connection_set_certificate(_GDtlsConnection*, _GTlsCertificate*) @nogc nothrow;
    _GTlsCertificate* g_dtls_connection_get_certificate(_GDtlsConnection*) @nogc nothrow;
    void g_dtls_connection_set_interaction(_GDtlsConnection*, _GTlsInteraction*) @nogc nothrow;
    _GTlsInteraction* g_dtls_connection_get_interaction(_GDtlsConnection*) @nogc nothrow;
    _GTlsCertificate* g_dtls_connection_get_peer_certificate(_GDtlsConnection*) @nogc nothrow;
    GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors(_GDtlsConnection*) @nogc nothrow;
    void g_dtls_connection_set_require_close_notify(_GDtlsConnection*, int) @nogc nothrow;
    int g_dtls_connection_get_require_close_notify(_GDtlsConnection*) @nogc nothrow;
    void g_dtls_connection_set_rehandshake_mode(_GDtlsConnection*, GTlsRehandshakeMode) @nogc nothrow;
    GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode(_GDtlsConnection*) @nogc nothrow;
    int g_dtls_connection_handshake(_GDtlsConnection*, _GCancellable*, _GError**) @nogc nothrow;
    void g_dtls_connection_handshake_async(_GDtlsConnection*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_dtls_connection_handshake_finish(_GDtlsConnection*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_dtls_connection_shutdown(_GDtlsConnection*, int, int, _GCancellable*, _GError**) @nogc nothrow;
    void g_dtls_connection_shutdown_async(_GDtlsConnection*, int, int, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_dtls_connection_shutdown_finish(_GDtlsConnection*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_dtls_connection_close(_GDtlsConnection*, _GCancellable*, _GError**) @nogc nothrow;
    void g_dtls_connection_close_async(_GDtlsConnection*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_dtls_connection_close_finish(_GDtlsConnection*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_dtls_connection_emit_accept_certificate(_GDtlsConnection*, _GTlsCertificate*, GTlsCertificateFlags) @nogc nothrow;
    int unlink(const(char)*) @nogc nothrow;
    alias GDtlsServerConnectionInterface = _GDtlsServerConnectionInterface;
    struct _GDtlsServerConnectionInterface
    {
        _GTypeInterface g_iface;
    }
    c_ulong g_dtls_server_connection_get_type() @nogc nothrow;
    _GDatagramBased* g_dtls_server_connection_new(_GDatagramBased*, _GTlsCertificate*, _GError**) @nogc nothrow;
    c_long readlinkat(int, const(char)*, char*, c_ulong) @nogc nothrow;
    int symlinkat(const(char)*, int, const(char)*) @nogc nothrow;
    alias GEmblem = _GEmblem;
    struct _GEmblem{};
    alias GEmblemClass = _GEmblemClass;
    struct _GEmblemClass{};
    c_ulong g_emblem_get_type() @nogc nothrow;
    _GEmblem* g_emblem_new(_GIcon*) @nogc nothrow;
    _GEmblem* g_emblem_new_with_origin(_GIcon*, GEmblemOrigin) @nogc nothrow;
    _GIcon* g_emblem_get_icon(_GEmblem*) @nogc nothrow;
    GEmblemOrigin g_emblem_get_origin(_GEmblem*) @nogc nothrow;
    c_long readlink(const(char)*, char*, c_ulong) @nogc nothrow;
    alias GEmblemedIcon = _GEmblemedIcon;
    struct _GEmblemedIcon
    {
        _GObject parent_instance;
        _GEmblemedIconPrivate* priv;
    }
    alias GEmblemedIconClass = _GEmblemedIconClass;
    struct _GEmblemedIconClass
    {
        _GObjectClass parent_class;
    }
    alias GEmblemedIconPrivate = _GEmblemedIconPrivate;
    struct _GEmblemedIconPrivate{};
    c_ulong g_emblemed_icon_get_type() @nogc nothrow;
    _GIcon* g_emblemed_icon_new(_GIcon*, _GEmblem*) @nogc nothrow;
    _GIcon* g_emblemed_icon_get_icon(_GEmblemedIcon*) @nogc nothrow;
    _GList* g_emblemed_icon_get_emblems(_GEmblemedIcon*) @nogc nothrow;
    void g_emblemed_icon_add_emblem(_GEmblemedIcon*, _GEmblem*) @nogc nothrow;
    void g_emblemed_icon_clear_emblems(_GEmblemedIcon*) @nogc nothrow;
    int symlink(const(char)*, const(char)*) @nogc nothrow;
    alias GFileIface = _GFileIface;
    struct _GFileIface
    {
        _GTypeInterface g_iface;
        _GFile* function(_GFile*) dup;
        uint function(_GFile*) hash;
        int function(_GFile*, _GFile*) equal;
        int function(_GFile*) is_native;
        int function(_GFile*, const(char)*) has_uri_scheme;
        char* function(_GFile*) get_uri_scheme;
        char* function(_GFile*) get_basename;
        char* function(_GFile*) get_path;
        char* function(_GFile*) get_uri;
        char* function(_GFile*) get_parse_name;
        _GFile* function(_GFile*) get_parent;
        int function(_GFile*, _GFile*) prefix_matches;
        char* function(_GFile*, _GFile*) get_relative_path;
        _GFile* function(_GFile*, const(char)*) resolve_relative_path;
        _GFile* function(_GFile*, const(char)*, _GError**) get_child_for_display_name;
        _GFileEnumerator* function(_GFile*, const(char)*, GFileQueryInfoFlags, _GCancellable*, _GError**) enumerate_children;
        void function(_GFile*, const(char)*, GFileQueryInfoFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) enumerate_children_async;
        _GFileEnumerator* function(_GFile*, _GAsyncResult*, _GError**) enumerate_children_finish;
        _GFileInfo* function(_GFile*, const(char)*, GFileQueryInfoFlags, _GCancellable*, _GError**) query_info;
        void function(_GFile*, const(char)*, GFileQueryInfoFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) query_info_async;
        _GFileInfo* function(_GFile*, _GAsyncResult*, _GError**) query_info_finish;
        _GFileInfo* function(_GFile*, const(char)*, _GCancellable*, _GError**) query_filesystem_info;
        void function(_GFile*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) query_filesystem_info_async;
        _GFileInfo* function(_GFile*, _GAsyncResult*, _GError**) query_filesystem_info_finish;
        _GMount* function(_GFile*, _GCancellable*, _GError**) find_enclosing_mount;
        void function(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) find_enclosing_mount_async;
        _GMount* function(_GFile*, _GAsyncResult*, _GError**) find_enclosing_mount_finish;
        _GFile* function(_GFile*, const(char)*, _GCancellable*, _GError**) set_display_name;
        void function(_GFile*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) set_display_name_async;
        _GFile* function(_GFile*, _GAsyncResult*, _GError**) set_display_name_finish;
        _GFileAttributeInfoList* function(_GFile*, _GCancellable*, _GError**) query_settable_attributes;
        void function() _query_settable_attributes_async;
        void function() _query_settable_attributes_finish;
        _GFileAttributeInfoList* function(_GFile*, _GCancellable*, _GError**) query_writable_namespaces;
        void function() _query_writable_namespaces_async;
        void function() _query_writable_namespaces_finish;
        int function(_GFile*, const(char)*, GFileAttributeType, void*, GFileQueryInfoFlags, _GCancellable*, _GError**) set_attribute;
        int function(_GFile*, _GFileInfo*, GFileQueryInfoFlags, _GCancellable*, _GError**) set_attributes_from_info;
        void function(_GFile*, _GFileInfo*, GFileQueryInfoFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) set_attributes_async;
        int function(_GFile*, _GAsyncResult*, _GFileInfo**, _GError**) set_attributes_finish;
        _GFileInputStream* function(_GFile*, _GCancellable*, _GError**) read_fn;
        void function(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) read_async;
        _GFileInputStream* function(_GFile*, _GAsyncResult*, _GError**) read_finish;
        _GFileOutputStream* function(_GFile*, GFileCreateFlags, _GCancellable*, _GError**) append_to;
        void function(_GFile*, GFileCreateFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) append_to_async;
        _GFileOutputStream* function(_GFile*, _GAsyncResult*, _GError**) append_to_finish;
        _GFileOutputStream* function(_GFile*, GFileCreateFlags, _GCancellable*, _GError**) create;
        void function(_GFile*, GFileCreateFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) create_async;
        _GFileOutputStream* function(_GFile*, _GAsyncResult*, _GError**) create_finish;
        _GFileOutputStream* function(_GFile*, const(char)*, int, GFileCreateFlags, _GCancellable*, _GError**) replace;
        void function(_GFile*, const(char)*, int, GFileCreateFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) replace_async;
        _GFileOutputStream* function(_GFile*, _GAsyncResult*, _GError**) replace_finish;
        int function(_GFile*, _GCancellable*, _GError**) delete_file;
        void function(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) delete_file_async;
        int function(_GFile*, _GAsyncResult*, _GError**) delete_file_finish;
        int function(_GFile*, _GCancellable*, _GError**) trash;
        void function(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) trash_async;
        int function(_GFile*, _GAsyncResult*, _GError**) trash_finish;
        int function(_GFile*, _GCancellable*, _GError**) make_directory;
        void function(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) make_directory_async;
        int function(_GFile*, _GAsyncResult*, _GError**) make_directory_finish;
        int function(_GFile*, const(char)*, _GCancellable*, _GError**) make_symbolic_link;
        void function() _make_symbolic_link_async;
        void function() _make_symbolic_link_finish;
        int function(_GFile*, _GFile*, GFileCopyFlags, _GCancellable*, void function(c_long, c_long, void*), void*, _GError**) copy;
        void function(_GFile*, _GFile*, GFileCopyFlags, int, _GCancellable*, void function(c_long, c_long, void*), void*, void function(_GObject*, _GAsyncResult*, void*), void*) copy_async;
        int function(_GFile*, _GAsyncResult*, _GError**) copy_finish;
        int function(_GFile*, _GFile*, GFileCopyFlags, _GCancellable*, void function(c_long, c_long, void*), void*, _GError**) move;
        void function() _move_async;
        void function() _move_finish;
        void function(_GFile*, GMountMountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) mount_mountable;
        _GFile* function(_GFile*, _GAsyncResult*, _GError**) mount_mountable_finish;
        void function(_GFile*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) unmount_mountable;
        int function(_GFile*, _GAsyncResult*, _GError**) unmount_mountable_finish;
        void function(_GFile*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) eject_mountable;
        int function(_GFile*, _GAsyncResult*, _GError**) eject_mountable_finish;
        void function(_GFile*, GMountMountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) mount_enclosing_volume;
        int function(_GFile*, _GAsyncResult*, _GError**) mount_enclosing_volume_finish;
        _GFileMonitor* function(_GFile*, GFileMonitorFlags, _GCancellable*, _GError**) monitor_dir;
        _GFileMonitor* function(_GFile*, GFileMonitorFlags, _GCancellable*, _GError**) monitor_file;
        _GFileIOStream* function(_GFile*, _GCancellable*, _GError**) open_readwrite;
        void function(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) open_readwrite_async;
        _GFileIOStream* function(_GFile*, _GAsyncResult*, _GError**) open_readwrite_finish;
        _GFileIOStream* function(_GFile*, GFileCreateFlags, _GCancellable*, _GError**) create_readwrite;
        void function(_GFile*, GFileCreateFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) create_readwrite_async;
        _GFileIOStream* function(_GFile*, _GAsyncResult*, _GError**) create_readwrite_finish;
        _GFileIOStream* function(_GFile*, const(char)*, int, GFileCreateFlags, _GCancellable*, _GError**) replace_readwrite;
        void function(_GFile*, const(char)*, int, GFileCreateFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) replace_readwrite_async;
        _GFileIOStream* function(_GFile*, _GAsyncResult*, _GError**) replace_readwrite_finish;
        void function(_GFile*, GDriveStartFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) start_mountable;
        int function(_GFile*, _GAsyncResult*, _GError**) start_mountable_finish;
        void function(_GFile*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) stop_mountable;
        int function(_GFile*, _GAsyncResult*, _GError**) stop_mountable_finish;
        int supports_thread_contexts;
        void function(_GFile*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) unmount_mountable_with_operation;
        int function(_GFile*, _GAsyncResult*, _GError**) unmount_mountable_with_operation_finish;
        void function(_GFile*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) eject_mountable_with_operation;
        int function(_GFile*, _GAsyncResult*, _GError**) eject_mountable_with_operation_finish;
        void function(_GFile*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) poll_mountable;
        int function(_GFile*, _GAsyncResult*, _GError**) poll_mountable_finish;
        int function(_GFile*, GFileMeasureFlags, _GCancellable*, void function(int, c_ulong, c_ulong, c_ulong, void*), void*, c_ulong*, c_ulong*, c_ulong*, _GError**) measure_disk_usage;
        void function(_GFile*, GFileMeasureFlags, int, _GCancellable*, void function(int, c_ulong, c_ulong, c_ulong, void*), void*, void function(_GObject*, _GAsyncResult*, void*), void*) measure_disk_usage_async;
        int function(_GFile*, _GAsyncResult*, c_ulong*, c_ulong*, c_ulong*, _GError**) measure_disk_usage_finish;
    }
    c_ulong g_file_get_type() @nogc nothrow;
    _GFile* g_file_new_for_path(const(char)*) @nogc nothrow;
    _GFile* g_file_new_for_uri(const(char)*) @nogc nothrow;
    _GFile* g_file_new_for_commandline_arg(const(char)*) @nogc nothrow;
    _GFile* g_file_new_for_commandline_arg_and_cwd(const(char)*, const(char)*) @nogc nothrow;
    _GFile* g_file_new_tmp(const(char)*, _GFileIOStream**, _GError**) @nogc nothrow;
    _GFile* g_file_parse_name(const(char)*) @nogc nothrow;
    _GFile* g_file_new_build_filename(const(char)*, ...) @nogc nothrow;
    _GFile* g_file_dup(_GFile*) @nogc nothrow;
    uint g_file_hash(const(void)*) @nogc nothrow;
    int g_file_equal(_GFile*, _GFile*) @nogc nothrow;
    char* g_file_get_basename(_GFile*) @nogc nothrow;
    char* g_file_get_path(_GFile*) @nogc nothrow;
    const(char)* g_file_peek_path(_GFile*) @nogc nothrow;
    char* g_file_get_uri(_GFile*) @nogc nothrow;
    char* g_file_get_parse_name(_GFile*) @nogc nothrow;
    _GFile* g_file_get_parent(_GFile*) @nogc nothrow;
    int g_file_has_parent(_GFile*, _GFile*) @nogc nothrow;
    _GFile* g_file_get_child(_GFile*, const(char)*) @nogc nothrow;
    _GFile* g_file_get_child_for_display_name(_GFile*, const(char)*, _GError**) @nogc nothrow;
    int g_file_has_prefix(_GFile*, _GFile*) @nogc nothrow;
    char* g_file_get_relative_path(_GFile*, _GFile*) @nogc nothrow;
    _GFile* g_file_resolve_relative_path(_GFile*, const(char)*) @nogc nothrow;
    int g_file_is_native(_GFile*) @nogc nothrow;
    int g_file_has_uri_scheme(_GFile*, const(char)*) @nogc nothrow;
    char* g_file_get_uri_scheme(_GFile*) @nogc nothrow;
    _GFileInputStream* g_file_read(_GFile*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_read_async(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileInputStream* g_file_read_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GFileOutputStream* g_file_append_to(_GFile*, GFileCreateFlags, _GCancellable*, _GError**) @nogc nothrow;
    _GFileOutputStream* g_file_create(_GFile*, GFileCreateFlags, _GCancellable*, _GError**) @nogc nothrow;
    _GFileOutputStream* g_file_replace(_GFile*, const(char)*, int, GFileCreateFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_append_to_async(_GFile*, GFileCreateFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileOutputStream* g_file_append_to_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_file_create_async(_GFile*, GFileCreateFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileOutputStream* g_file_create_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_file_replace_async(_GFile*, const(char)*, int, GFileCreateFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileOutputStream* g_file_replace_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GFileIOStream* g_file_open_readwrite(_GFile*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_open_readwrite_async(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileIOStream* g_file_open_readwrite_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GFileIOStream* g_file_create_readwrite(_GFile*, GFileCreateFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_create_readwrite_async(_GFile*, GFileCreateFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileIOStream* g_file_create_readwrite_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GFileIOStream* g_file_replace_readwrite(_GFile*, const(char)*, int, GFileCreateFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_replace_readwrite_async(_GFile*, const(char)*, int, GFileCreateFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileIOStream* g_file_replace_readwrite_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_file_query_exists(_GFile*, _GCancellable*) @nogc nothrow;
    GFileType g_file_query_file_type(_GFile*, GFileQueryInfoFlags, _GCancellable*) @nogc nothrow;
    _GFileInfo* g_file_query_info(_GFile*, const(char)*, GFileQueryInfoFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_query_info_async(_GFile*, const(char)*, GFileQueryInfoFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileInfo* g_file_query_info_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GFileInfo* g_file_query_filesystem_info(_GFile*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_query_filesystem_info_async(_GFile*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileInfo* g_file_query_filesystem_info_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GMount* g_file_find_enclosing_mount(_GFile*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_find_enclosing_mount_async(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GMount* g_file_find_enclosing_mount_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GFileEnumerator* g_file_enumerate_children(_GFile*, const(char)*, GFileQueryInfoFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_enumerate_children_async(_GFile*, const(char)*, GFileQueryInfoFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileEnumerator* g_file_enumerate_children_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GFile* g_file_set_display_name(_GFile*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_set_display_name_async(_GFile*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFile* g_file_set_display_name_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_file_delete(_GFile*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_delete_async(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_delete_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_file_trash(_GFile*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_trash_async(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_trash_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_file_copy(_GFile*, _GFile*, GFileCopyFlags, _GCancellable*, void function(c_long, c_long, void*), void*, _GError**) @nogc nothrow;
    void g_file_copy_async(_GFile*, _GFile*, GFileCopyFlags, int, _GCancellable*, void function(c_long, c_long, void*), void*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_copy_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_file_move(_GFile*, _GFile*, GFileCopyFlags, _GCancellable*, void function(c_long, c_long, void*), void*, _GError**) @nogc nothrow;
    int g_file_make_directory(_GFile*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_make_directory_async(_GFile*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_make_directory_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_file_make_directory_with_parents(_GFile*, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_make_symbolic_link(_GFile*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    _GFileAttributeInfoList* g_file_query_settable_attributes(_GFile*, _GCancellable*, _GError**) @nogc nothrow;
    _GFileAttributeInfoList* g_file_query_writable_namespaces(_GFile*, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_set_attribute(_GFile*, const(char)*, GFileAttributeType, void*, GFileQueryInfoFlags, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_set_attributes_from_info(_GFile*, _GFileInfo*, GFileQueryInfoFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_set_attributes_async(_GFile*, _GFileInfo*, GFileQueryInfoFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_set_attributes_finish(_GFile*, _GAsyncResult*, _GFileInfo**, _GError**) @nogc nothrow;
    int g_file_set_attribute_string(_GFile*, const(char)*, const(char)*, GFileQueryInfoFlags, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_set_attribute_byte_string(_GFile*, const(char)*, const(char)*, GFileQueryInfoFlags, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_set_attribute_uint32(_GFile*, const(char)*, uint, GFileQueryInfoFlags, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_set_attribute_int32(_GFile*, const(char)*, int, GFileQueryInfoFlags, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_set_attribute_uint64(_GFile*, const(char)*, c_ulong, GFileQueryInfoFlags, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_set_attribute_int64(_GFile*, const(char)*, c_long, GFileQueryInfoFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_mount_enclosing_volume(_GFile*, GMountMountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_mount_enclosing_volume_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_file_mount_mountable(_GFile*, GMountMountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFile* g_file_mount_mountable_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_file_unmount_mountable(_GFile*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_unmount_mountable_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_file_unmount_mountable_with_operation(_GFile*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_unmount_mountable_with_operation_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_file_eject_mountable(_GFile*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_eject_mountable_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_file_eject_mountable_with_operation(_GFile*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_eject_mountable_with_operation_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_file_copy_attributes(_GFile*, _GFile*, GFileCopyFlags, _GCancellable*, _GError**) @nogc nothrow;
    _GFileMonitor* g_file_monitor_directory(_GFile*, GFileMonitorFlags, _GCancellable*, _GError**) @nogc nothrow;
    _GFileMonitor* g_file_monitor_file(_GFile*, GFileMonitorFlags, _GCancellable*, _GError**) @nogc nothrow;
    _GFileMonitor* g_file_monitor(_GFile*, GFileMonitorFlags, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_measure_disk_usage(_GFile*, GFileMeasureFlags, _GCancellable*, void function(int, c_ulong, c_ulong, c_ulong, void*), void*, c_ulong*, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    void g_file_measure_disk_usage_async(_GFile*, GFileMeasureFlags, int, _GCancellable*, void function(int, c_ulong, c_ulong, c_ulong, void*), void*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_measure_disk_usage_finish(_GFile*, _GAsyncResult*, c_ulong*, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    void g_file_start_mountable(_GFile*, GDriveStartFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_start_mountable_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_file_stop_mountable(_GFile*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_stop_mountable_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_file_poll_mountable(_GFile*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_poll_mountable_finish(_GFile*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GAppInfo* g_file_query_default_handler(_GFile*, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_load_contents(_GFile*, _GCancellable*, char**, c_ulong*, char**, _GError**) @nogc nothrow;
    void g_file_load_contents_async(_GFile*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_load_contents_finish(_GFile*, _GAsyncResult*, char**, c_ulong*, char**, _GError**) @nogc nothrow;
    void g_file_load_partial_contents_async(_GFile*, _GCancellable*, int function(const(char)*, c_long, void*), void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_load_partial_contents_finish(_GFile*, _GAsyncResult*, char**, c_ulong*, char**, _GError**) @nogc nothrow;
    int g_file_replace_contents(_GFile*, const(char)*, c_ulong, const(char)*, int, GFileCreateFlags, char**, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_replace_contents_async(_GFile*, const(char)*, c_ulong, const(char)*, int, GFileCreateFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    void g_file_replace_contents_bytes_async(_GFile*, _GBytes*, const(char)*, int, GFileCreateFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_replace_contents_finish(_GFile*, _GAsyncResult*, char**, _GError**) @nogc nothrow;
    int g_file_supports_thread_contexts(_GFile*) @nogc nothrow;
    _GBytes* g_file_load_bytes(_GFile*, _GCancellable*, char**, _GError**) @nogc nothrow;
    void g_file_load_bytes_async(_GFile*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GBytes* g_file_load_bytes_finish(_GFile*, _GAsyncResult*, char**, _GError**) @nogc nothrow;
    int linkat(int, const(char)*, int, const(char)*, int) @nogc nothrow;
    c_ulong g_file_attribute_info_list_get_type() @nogc nothrow;
    _GFileAttributeInfoList* g_file_attribute_info_list_new() @nogc nothrow;
    _GFileAttributeInfoList* g_file_attribute_info_list_ref(_GFileAttributeInfoList*) @nogc nothrow;
    void g_file_attribute_info_list_unref(_GFileAttributeInfoList*) @nogc nothrow;
    _GFileAttributeInfoList* g_file_attribute_info_list_dup(_GFileAttributeInfoList*) @nogc nothrow;
    const(_GFileAttributeInfo)* g_file_attribute_info_list_lookup(_GFileAttributeInfoList*, const(char)*) @nogc nothrow;
    void g_file_attribute_info_list_add(_GFileAttributeInfoList*, const(char)*, GFileAttributeType, GFileAttributeInfoFlags) @nogc nothrow;
    int link(const(char)*, const(char)*) @nogc nothrow;
    int ttyslot() @nogc nothrow;
    alias GFileEnumeratorClass = _GFileEnumeratorClass;
    struct _GFileEnumeratorClass
    {
        _GObjectClass parent_class;
        _GFileInfo* function(_GFileEnumerator*, _GCancellable*, _GError**) next_file;
        int function(_GFileEnumerator*, _GCancellable*, _GError**) close_fn;
        void function(_GFileEnumerator*, int, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) next_files_async;
        _GList* function(_GFileEnumerator*, _GAsyncResult*, _GError**) next_files_finish;
        void function(_GFileEnumerator*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) close_async;
        int function(_GFileEnumerator*, _GAsyncResult*, _GError**) close_finish;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
        void function() _g_reserved7;
    }
    alias GFileEnumeratorPrivate = _GFileEnumeratorPrivate;
    struct _GFileEnumeratorPrivate{};
    c_ulong g_file_enumerator_get_type() @nogc nothrow;
    _GFileInfo* g_file_enumerator_next_file(_GFileEnumerator*, _GCancellable*, _GError**) @nogc nothrow;
    int g_file_enumerator_close(_GFileEnumerator*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_enumerator_next_files_async(_GFileEnumerator*, int, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GList* g_file_enumerator_next_files_finish(_GFileEnumerator*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_file_enumerator_close_async(_GFileEnumerator*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_file_enumerator_close_finish(_GFileEnumerator*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_file_enumerator_is_closed(_GFileEnumerator*) @nogc nothrow;
    int g_file_enumerator_has_pending(_GFileEnumerator*) @nogc nothrow;
    void g_file_enumerator_set_pending(_GFileEnumerator*, int) @nogc nothrow;
    _GFile* g_file_enumerator_get_container(_GFileEnumerator*) @nogc nothrow;
    _GFile* g_file_enumerator_get_child(_GFileEnumerator*, _GFileInfo*) @nogc nothrow;
    int g_file_enumerator_iterate(_GFileEnumerator*, _GFileInfo**, _GFile**, _GCancellable*, _GError**) @nogc nothrow;
    int isatty(int) @nogc nothrow;
    int ttyname_r(int, char*, c_ulong) @nogc nothrow;
    alias GFileIconClass = _GFileIconClass;
    struct _GFileIconClass{};
    c_ulong g_file_icon_get_type() @nogc nothrow;
    _GIcon* g_file_icon_new(_GFile*) @nogc nothrow;
    _GFile* g_file_icon_get_file(_GFileIcon*) @nogc nothrow;
    char* ttyname(int) @nogc nothrow;
    int vfork() @nogc nothrow;
    int fork() @nogc nothrow;
    alias GFileInfoClass = _GFileInfoClass;
    struct _GFileInfoClass{};
    int setegid(uint) @nogc nothrow;
    int setregid(uint, uint) @nogc nothrow;
    int setgid(uint) @nogc nothrow;
    int seteuid(uint) @nogc nothrow;
    int setreuid(uint, uint) @nogc nothrow;
    int setuid(uint) @nogc nothrow;
    int getgroups(int, uint*) @nogc nothrow;
    uint getegid() @nogc nothrow;
    uint getgid() @nogc nothrow;
    uint geteuid() @nogc nothrow;
    uint getuid() @nogc nothrow;
    int getsid(int) @nogc nothrow;
    int setsid() @nogc nothrow;
    int setpgrp() @nogc nothrow;
    int setpgid(int, int) @nogc nothrow;
    int getpgid(int) @nogc nothrow;
    int __getpgid(int) @nogc nothrow;
    int getpgrp() @nogc nothrow;
    int getppid() @nogc nothrow;
    int getpid() @nogc nothrow;
    c_ulong confstr(int, char*, c_ulong) @nogc nothrow;
    c_long sysconf(int) @nogc nothrow;
    c_long fpathconf(int, int) @nogc nothrow;
    c_long pathconf(const(char)*, int) @nogc nothrow;
    void _exit(int) @nogc nothrow;
    int nice(int) @nogc nothrow;
    int execlp(const(char)*, const(char)*, ...) @nogc nothrow;
    int execvp(const(char)*, char**) @nogc nothrow;
    int execl(const(char)*, const(char)*, ...) @nogc nothrow;
    c_ulong g_file_info_get_type() @nogc nothrow;
    _GFileInfo* g_file_info_new() @nogc nothrow;
    _GFileInfo* g_file_info_dup(_GFileInfo*) @nogc nothrow;
    void g_file_info_copy_into(_GFileInfo*, _GFileInfo*) @nogc nothrow;
    int g_file_info_has_attribute(_GFileInfo*, const(char)*) @nogc nothrow;
    int g_file_info_has_namespace(_GFileInfo*, const(char)*) @nogc nothrow;
    char** g_file_info_list_attributes(_GFileInfo*, const(char)*) @nogc nothrow;
    int g_file_info_get_attribute_data(_GFileInfo*, const(char)*, GFileAttributeType*, void**, GFileAttributeStatus*) @nogc nothrow;
    GFileAttributeType g_file_info_get_attribute_type(_GFileInfo*, const(char)*) @nogc nothrow;
    void g_file_info_remove_attribute(_GFileInfo*, const(char)*) @nogc nothrow;
    GFileAttributeStatus g_file_info_get_attribute_status(_GFileInfo*, const(char)*) @nogc nothrow;
    int g_file_info_set_attribute_status(_GFileInfo*, const(char)*, GFileAttributeStatus) @nogc nothrow;
    char* g_file_info_get_attribute_as_string(_GFileInfo*, const(char)*) @nogc nothrow;
    const(char)* g_file_info_get_attribute_string(_GFileInfo*, const(char)*) @nogc nothrow;
    const(char)* g_file_info_get_attribute_byte_string(_GFileInfo*, const(char)*) @nogc nothrow;
    int g_file_info_get_attribute_boolean(_GFileInfo*, const(char)*) @nogc nothrow;
    uint g_file_info_get_attribute_uint32(_GFileInfo*, const(char)*) @nogc nothrow;
    int g_file_info_get_attribute_int32(_GFileInfo*, const(char)*) @nogc nothrow;
    c_ulong g_file_info_get_attribute_uint64(_GFileInfo*, const(char)*) @nogc nothrow;
    c_long g_file_info_get_attribute_int64(_GFileInfo*, const(char)*) @nogc nothrow;
    _GObject* g_file_info_get_attribute_object(_GFileInfo*, const(char)*) @nogc nothrow;
    char** g_file_info_get_attribute_stringv(_GFileInfo*, const(char)*) @nogc nothrow;
    void g_file_info_set_attribute(_GFileInfo*, const(char)*, GFileAttributeType, void*) @nogc nothrow;
    void g_file_info_set_attribute_string(_GFileInfo*, const(char)*, const(char)*) @nogc nothrow;
    void g_file_info_set_attribute_byte_string(_GFileInfo*, const(char)*, const(char)*) @nogc nothrow;
    void g_file_info_set_attribute_boolean(_GFileInfo*, const(char)*, int) @nogc nothrow;
    void g_file_info_set_attribute_uint32(_GFileInfo*, const(char)*, uint) @nogc nothrow;
    void g_file_info_set_attribute_int32(_GFileInfo*, const(char)*, int) @nogc nothrow;
    void g_file_info_set_attribute_uint64(_GFileInfo*, const(char)*, c_ulong) @nogc nothrow;
    void g_file_info_set_attribute_int64(_GFileInfo*, const(char)*, c_long) @nogc nothrow;
    void g_file_info_set_attribute_object(_GFileInfo*, const(char)*, _GObject*) @nogc nothrow;
    void g_file_info_set_attribute_stringv(_GFileInfo*, const(char)*, char**) @nogc nothrow;
    void g_file_info_clear_status(_GFileInfo*) @nogc nothrow;
    _GDateTime* g_file_info_get_deletion_date(_GFileInfo*) @nogc nothrow;
    GFileType g_file_info_get_file_type(_GFileInfo*) @nogc nothrow;
    int g_file_info_get_is_hidden(_GFileInfo*) @nogc nothrow;
    int g_file_info_get_is_backup(_GFileInfo*) @nogc nothrow;
    int g_file_info_get_is_symlink(_GFileInfo*) @nogc nothrow;
    const(char)* g_file_info_get_name(_GFileInfo*) @nogc nothrow;
    const(char)* g_file_info_get_display_name(_GFileInfo*) @nogc nothrow;
    const(char)* g_file_info_get_edit_name(_GFileInfo*) @nogc nothrow;
    _GIcon* g_file_info_get_icon(_GFileInfo*) @nogc nothrow;
    _GIcon* g_file_info_get_symbolic_icon(_GFileInfo*) @nogc nothrow;
    const(char)* g_file_info_get_content_type(_GFileInfo*) @nogc nothrow;
    c_long g_file_info_get_size(_GFileInfo*) @nogc nothrow;
    void g_file_info_get_modification_time(_GFileInfo*, _GTimeVal*) @nogc nothrow;
    const(char)* g_file_info_get_symlink_target(_GFileInfo*) @nogc nothrow;
    const(char)* g_file_info_get_etag(_GFileInfo*) @nogc nothrow;
    int g_file_info_get_sort_order(_GFileInfo*) @nogc nothrow;
    void g_file_info_set_attribute_mask(_GFileInfo*, _GFileAttributeMatcher*) @nogc nothrow;
    void g_file_info_unset_attribute_mask(_GFileInfo*) @nogc nothrow;
    void g_file_info_set_file_type(_GFileInfo*, GFileType) @nogc nothrow;
    void g_file_info_set_is_hidden(_GFileInfo*, int) @nogc nothrow;
    void g_file_info_set_is_symlink(_GFileInfo*, int) @nogc nothrow;
    void g_file_info_set_name(_GFileInfo*, const(char)*) @nogc nothrow;
    void g_file_info_set_display_name(_GFileInfo*, const(char)*) @nogc nothrow;
    void g_file_info_set_edit_name(_GFileInfo*, const(char)*) @nogc nothrow;
    void g_file_info_set_icon(_GFileInfo*, _GIcon*) @nogc nothrow;
    void g_file_info_set_symbolic_icon(_GFileInfo*, _GIcon*) @nogc nothrow;
    void g_file_info_set_content_type(_GFileInfo*, const(char)*) @nogc nothrow;
    void g_file_info_set_size(_GFileInfo*, c_long) @nogc nothrow;
    void g_file_info_set_modification_time(_GFileInfo*, _GTimeVal*) @nogc nothrow;
    void g_file_info_set_symlink_target(_GFileInfo*, const(char)*) @nogc nothrow;
    void g_file_info_set_sort_order(_GFileInfo*, int) @nogc nothrow;
    int execle(const(char)*, const(char)*, ...) @nogc nothrow;
    c_ulong g_file_attribute_matcher_get_type() @nogc nothrow;
    _GFileAttributeMatcher* g_file_attribute_matcher_new(const(char)*) @nogc nothrow;
    _GFileAttributeMatcher* g_file_attribute_matcher_ref(_GFileAttributeMatcher*) @nogc nothrow;
    void g_file_attribute_matcher_unref(_GFileAttributeMatcher*) @nogc nothrow;
    _GFileAttributeMatcher* g_file_attribute_matcher_subtract(_GFileAttributeMatcher*, _GFileAttributeMatcher*) @nogc nothrow;
    int g_file_attribute_matcher_matches(_GFileAttributeMatcher*, const(char)*) @nogc nothrow;
    int g_file_attribute_matcher_matches_only(_GFileAttributeMatcher*, const(char)*) @nogc nothrow;
    int g_file_attribute_matcher_enumerate_namespace(_GFileAttributeMatcher*, const(char)*) @nogc nothrow;
    const(char)* g_file_attribute_matcher_enumerate_next(_GFileAttributeMatcher*) @nogc nothrow;
    char* g_file_attribute_matcher_to_string(_GFileAttributeMatcher*) @nogc nothrow;
    int execv(const(char)*, char**) @nogc nothrow;
    int fexecve(int, char**, char**) @nogc nothrow;
    alias GFileInputStreamClass = _GFileInputStreamClass;
    struct _GFileInputStreamClass
    {
        _GInputStreamClass parent_class;
        c_long function(_GFileInputStream*) tell;
        int function(_GFileInputStream*) can_seek;
        int function(_GFileInputStream*, c_long, GSeekType, _GCancellable*, _GError**) seek;
        _GFileInfo* function(_GFileInputStream*, const(char)*, _GCancellable*, _GError**) query_info;
        void function(_GFileInputStream*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) query_info_async;
        _GFileInfo* function(_GFileInputStream*, _GAsyncResult*, _GError**) query_info_finish;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GFileInputStreamPrivate = _GFileInputStreamPrivate;
    struct _GFileInputStreamPrivate{};
    c_ulong g_file_input_stream_get_type() @nogc nothrow;
    _GFileInfo* g_file_input_stream_query_info(_GFileInputStream*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_input_stream_query_info_async(_GFileInputStream*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileInfo* g_file_input_stream_query_info_finish(_GFileInputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    int execve(const(char)*, char**, char**) @nogc nothrow;
    extern __gshared char** __environ;
    int dup2(int, int) @nogc nothrow;
    alias GFileIOStreamClass = _GFileIOStreamClass;
    struct _GFileIOStreamClass
    {
        _GIOStreamClass parent_class;
        c_long function(_GFileIOStream*) tell;
        int function(_GFileIOStream*) can_seek;
        int function(_GFileIOStream*, c_long, GSeekType, _GCancellable*, _GError**) seek;
        int function(_GFileIOStream*) can_truncate;
        int function(_GFileIOStream*, c_long, _GCancellable*, _GError**) truncate_fn;
        _GFileInfo* function(_GFileIOStream*, const(char)*, _GCancellable*, _GError**) query_info;
        void function(_GFileIOStream*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) query_info_async;
        _GFileInfo* function(_GFileIOStream*, _GAsyncResult*, _GError**) query_info_finish;
        char* function(_GFileIOStream*) get_etag;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GFileIOStreamPrivate = _GFileIOStreamPrivate;
    struct _GFileIOStreamPrivate{};
    c_ulong g_file_io_stream_get_type() @nogc nothrow;
    _GFileInfo* g_file_io_stream_query_info(_GFileIOStream*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_io_stream_query_info_async(_GFileIOStream*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileInfo* g_file_io_stream_query_info_finish(_GFileIOStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    char* g_file_io_stream_get_etag(_GFileIOStream*) @nogc nothrow;
    int dup(int) @nogc nothrow;
    char* getwd(char*) @nogc nothrow;
    alias GFileMonitorClass = _GFileMonitorClass;
    struct _GFileMonitorClass
    {
        _GObjectClass parent_class;
        void function(_GFileMonitor*, _GFile*, _GFile*, GFileMonitorEvent) changed;
        int function(_GFileMonitor*) cancel;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GFileMonitorPrivate = _GFileMonitorPrivate;
    struct _GFileMonitorPrivate{};
    c_ulong g_file_monitor_get_type() @nogc nothrow;
    int g_file_monitor_cancel(_GFileMonitor*) @nogc nothrow;
    int g_file_monitor_is_cancelled(_GFileMonitor*) @nogc nothrow;
    void g_file_monitor_set_rate_limit(_GFileMonitor*, int) @nogc nothrow;
    void g_file_monitor_emit_event(_GFileMonitor*, _GFile*, _GFile*, GFileMonitorEvent) @nogc nothrow;
    char* getcwd(char*, c_ulong) @nogc nothrow;
    alias GFilenameCompleterClass = _GFilenameCompleterClass;
    struct _GFilenameCompleterClass
    {
        _GObjectClass parent_class;
        void function(_GFilenameCompleter*) got_completion_data;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
    }
    c_ulong g_filename_completer_get_type() @nogc nothrow;
    _GFilenameCompleter* g_filename_completer_new() @nogc nothrow;
    char* g_filename_completer_get_completion_suffix(_GFilenameCompleter*, const(char)*) @nogc nothrow;
    char** g_filename_completer_get_completions(_GFilenameCompleter*, const(char)*) @nogc nothrow;
    void g_filename_completer_set_dirs_only(_GFilenameCompleter*, int) @nogc nothrow;
    int fchdir(int) @nogc nothrow;
    int chdir(const(char)*) @nogc nothrow;
    alias GFileOutputStreamClass = _GFileOutputStreamClass;
    struct _GFileOutputStreamClass
    {
        _GOutputStreamClass parent_class;
        c_long function(_GFileOutputStream*) tell;
        int function(_GFileOutputStream*) can_seek;
        int function(_GFileOutputStream*, c_long, GSeekType, _GCancellable*, _GError**) seek;
        int function(_GFileOutputStream*) can_truncate;
        int function(_GFileOutputStream*, c_long, _GCancellable*, _GError**) truncate_fn;
        _GFileInfo* function(_GFileOutputStream*, const(char)*, _GCancellable*, _GError**) query_info;
        void function(_GFileOutputStream*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) query_info_async;
        _GFileInfo* function(_GFileOutputStream*, _GAsyncResult*, _GError**) query_info_finish;
        char* function(_GFileOutputStream*) get_etag;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GFileOutputStreamPrivate = _GFileOutputStreamPrivate;
    struct _GFileOutputStreamPrivate{};
    c_ulong g_file_output_stream_get_type() @nogc nothrow;
    _GFileInfo* g_file_output_stream_query_info(_GFileOutputStream*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    void g_file_output_stream_query_info_async(_GFileOutputStream*, const(char)*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GFileInfo* g_file_output_stream_query_info_finish(_GFileOutputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    char* g_file_output_stream_get_etag(_GFileOutputStream*) @nogc nothrow;
    int fchownat(int, const(char)*, uint, uint, int) @nogc nothrow;
    alias GFilterInputStreamClass = _GFilterInputStreamClass;
    struct _GFilterInputStreamClass
    {
        _GInputStreamClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
    }
    c_ulong g_filter_input_stream_get_type() @nogc nothrow;
    _GInputStream* g_filter_input_stream_get_base_stream(_GFilterInputStream*) @nogc nothrow;
    int g_filter_input_stream_get_close_base_stream(_GFilterInputStream*) @nogc nothrow;
    void g_filter_input_stream_set_close_base_stream(_GFilterInputStream*, int) @nogc nothrow;
    int lchown(const(char)*, uint, uint) @nogc nothrow;
    int fchown(int, uint, uint) @nogc nothrow;
    alias GFilterOutputStreamClass = _GFilterOutputStreamClass;
    struct _GFilterOutputStreamClass
    {
        _GOutputStreamClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
    }
    c_ulong g_filter_output_stream_get_type() @nogc nothrow;
    _GOutputStream* g_filter_output_stream_get_base_stream(_GFilterOutputStream*) @nogc nothrow;
    int g_filter_output_stream_get_close_base_stream(_GFilterOutputStream*) @nogc nothrow;
    void g_filter_output_stream_set_close_base_stream(_GFilterOutputStream*, int) @nogc nothrow;
    int chown(const(char)*, uint, uint) @nogc nothrow;
    int pause() @nogc nothrow;
    int usleep(uint) @nogc nothrow;
    alias GIconIface = _GIconIface;
    struct _GIconIface
    {
        _GTypeInterface g_iface;
        uint function(_GIcon*) hash;
        int function(_GIcon*, _GIcon*) equal;
        int function(_GIcon*, _GPtrArray*, int*) to_tokens;
        _GIcon* function(char**, int, int, _GError**) from_tokens;
        _GVariant* function(_GIcon*) serialize;
    }
    c_ulong g_icon_get_type() @nogc nothrow;
    uint g_icon_hash(const(void)*) @nogc nothrow;
    int g_icon_equal(_GIcon*, _GIcon*) @nogc nothrow;
    char* g_icon_to_string(_GIcon*) @nogc nothrow;
    _GIcon* g_icon_new_for_string(const(char)*, _GError**) @nogc nothrow;
    _GVariant* g_icon_serialize(_GIcon*) @nogc nothrow;
    _GIcon* g_icon_deserialize(_GVariant*) @nogc nothrow;
    uint ualarm(uint, uint) @nogc nothrow;
    uint sleep(uint) @nogc nothrow;
    uint alarm(uint) @nogc nothrow;
    alias GInetAddressClass = _GInetAddressClass;
    struct _GInetAddressClass
    {
        _GObjectClass parent_class;
        char* function(_GInetAddress*) to_string;
        const(ubyte)* function(_GInetAddress*) to_bytes;
    }
    alias GInetAddressPrivate = _GInetAddressPrivate;
    struct _GInetAddressPrivate{};
    c_ulong g_inet_address_get_type() @nogc nothrow;
    _GInetAddress* g_inet_address_new_from_string(const(char)*) @nogc nothrow;
    _GInetAddress* g_inet_address_new_from_bytes(const(ubyte)*, GSocketFamily) @nogc nothrow;
    _GInetAddress* g_inet_address_new_loopback(GSocketFamily) @nogc nothrow;
    _GInetAddress* g_inet_address_new_any(GSocketFamily) @nogc nothrow;
    int g_inet_address_equal(_GInetAddress*, _GInetAddress*) @nogc nothrow;
    char* g_inet_address_to_string(_GInetAddress*) @nogc nothrow;
    const(ubyte)* g_inet_address_to_bytes(_GInetAddress*) @nogc nothrow;
    c_ulong g_inet_address_get_native_size(_GInetAddress*) @nogc nothrow;
    GSocketFamily g_inet_address_get_family(_GInetAddress*) @nogc nothrow;
    int g_inet_address_get_is_any(_GInetAddress*) @nogc nothrow;
    int g_inet_address_get_is_loopback(_GInetAddress*) @nogc nothrow;
    int g_inet_address_get_is_link_local(_GInetAddress*) @nogc nothrow;
    int g_inet_address_get_is_site_local(_GInetAddress*) @nogc nothrow;
    int g_inet_address_get_is_multicast(_GInetAddress*) @nogc nothrow;
    int g_inet_address_get_is_mc_global(_GInetAddress*) @nogc nothrow;
    int g_inet_address_get_is_mc_link_local(_GInetAddress*) @nogc nothrow;
    int g_inet_address_get_is_mc_node_local(_GInetAddress*) @nogc nothrow;
    int g_inet_address_get_is_mc_org_local(_GInetAddress*) @nogc nothrow;
    int g_inet_address_get_is_mc_site_local(_GInetAddress*) @nogc nothrow;
    int pipe(int*) @nogc nothrow;
    c_long pwrite(int, const(void)*, c_ulong, c_long) @nogc nothrow;
    c_long pread(int, void*, c_ulong, c_long) @nogc nothrow;
    alias GInetAddressMaskClass = _GInetAddressMaskClass;
    struct _GInetAddressMaskClass
    {
        _GObjectClass parent_class;
    }
    alias GInetAddressMaskPrivate = _GInetAddressMaskPrivate;
    struct _GInetAddressMaskPrivate{};
    c_ulong g_inet_address_mask_get_type() @nogc nothrow;
    _GInetAddressMask* g_inet_address_mask_new(_GInetAddress*, uint, _GError**) @nogc nothrow;
    _GInetAddressMask* g_inet_address_mask_new_from_string(const(char)*, _GError**) @nogc nothrow;
    char* g_inet_address_mask_to_string(_GInetAddressMask*) @nogc nothrow;
    GSocketFamily g_inet_address_mask_get_family(_GInetAddressMask*) @nogc nothrow;
    _GInetAddress* g_inet_address_mask_get_address(_GInetAddressMask*) @nogc nothrow;
    uint g_inet_address_mask_get_length(_GInetAddressMask*) @nogc nothrow;
    int g_inet_address_mask_matches(_GInetAddressMask*, _GInetAddress*) @nogc nothrow;
    int g_inet_address_mask_equal(_GInetAddressMask*, _GInetAddressMask*) @nogc nothrow;
    c_long write(int, const(void)*, c_ulong) @nogc nothrow;
    c_long read(int, void*, c_ulong) @nogc nothrow;
    int close(int) @nogc nothrow;
    c_long lseek(int, c_long, int) @nogc nothrow;
    alias GInetSocketAddressClass = _GInetSocketAddressClass;
    struct _GInetSocketAddressClass
    {
        _GSocketAddressClass parent_class;
    }
    alias GInetSocketAddressPrivate = _GInetSocketAddressPrivate;
    struct _GInetSocketAddressPrivate{};
    c_ulong g_inet_socket_address_get_type() @nogc nothrow;
    _GSocketAddress* g_inet_socket_address_new(_GInetAddress*, ushort) @nogc nothrow;
    _GSocketAddress* g_inet_socket_address_new_from_string(const(char)*, uint) @nogc nothrow;
    _GInetAddress* g_inet_socket_address_get_address(_GInetSocketAddress*) @nogc nothrow;
    ushort g_inet_socket_address_get_port(_GInetSocketAddress*) @nogc nothrow;
    uint g_inet_socket_address_get_flowinfo(_GInetSocketAddress*) @nogc nothrow;
    uint g_inet_socket_address_get_scope_id(_GInetSocketAddress*) @nogc nothrow;
    int faccessat(int, const(char)*, int, int) @nogc nothrow;
    alias GInitableIface = _GInitableIface;
    struct _GInitableIface
    {
        _GTypeInterface g_iface;
        int function(_GInitable*, _GCancellable*, _GError**) init;
    }
    c_ulong g_initable_get_type() @nogc nothrow;
    int g_initable_init(_GInitable*, _GCancellable*, _GError**) @nogc nothrow;
    void* g_initable_new(c_ulong, _GCancellable*, _GError**, const(char)*, ...) @nogc nothrow;
    void* g_initable_newv(c_ulong, uint, _GParameter*, _GCancellable*, _GError**) @nogc nothrow;
    _GObject* g_initable_new_valist(c_ulong, const(char)*, va_list*, _GCancellable*, _GError**) @nogc nothrow;
    int access(const(char)*, int) @nogc nothrow;
    alias socklen_t = uint;
    alias intptr_t = c_long;
    alias GInputStreamClass = _GInputStreamClass;
    struct _GInputStreamClass
    {
        _GObjectClass parent_class;
        c_long function(_GInputStream*, void*, c_ulong, _GCancellable*, _GError**) read_fn;
        c_long function(_GInputStream*, c_ulong, _GCancellable*, _GError**) skip;
        int function(_GInputStream*, _GCancellable*, _GError**) close_fn;
        void function(_GInputStream*, void*, c_ulong, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) read_async;
        c_long function(_GInputStream*, _GAsyncResult*, _GError**) read_finish;
        void function(_GInputStream*, c_ulong, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) skip_async;
        c_long function(_GInputStream*, _GAsyncResult*, _GError**) skip_finish;
        void function(_GInputStream*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) close_async;
        int function(_GInputStream*, _GAsyncResult*, _GError**) close_finish;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GInputStreamPrivate = _GInputStreamPrivate;
    struct _GInputStreamPrivate{};
    c_ulong g_input_stream_get_type() @nogc nothrow;
    c_long g_input_stream_read(_GInputStream*, void*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    int g_input_stream_read_all(_GInputStream*, void*, c_ulong, c_ulong*, _GCancellable*, _GError**) @nogc nothrow;
    _GBytes* g_input_stream_read_bytes(_GInputStream*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    c_long g_input_stream_skip(_GInputStream*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    int g_input_stream_close(_GInputStream*, _GCancellable*, _GError**) @nogc nothrow;
    void g_input_stream_read_async(_GInputStream*, void*, c_ulong, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    c_long g_input_stream_read_finish(_GInputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_input_stream_read_all_async(_GInputStream*, void*, c_ulong, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_input_stream_read_all_finish(_GInputStream*, _GAsyncResult*, c_ulong*, _GError**) @nogc nothrow;
    void g_input_stream_read_bytes_async(_GInputStream*, c_ulong, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GBytes* g_input_stream_read_bytes_finish(_GInputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_input_stream_skip_async(_GInputStream*, c_ulong, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    c_long g_input_stream_skip_finish(_GInputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_input_stream_close_async(_GInputStream*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_input_stream_close_finish(_GInputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_input_stream_is_closed(_GInputStream*) @nogc nothrow;
    int g_input_stream_has_pending(_GInputStream*) @nogc nothrow;
    int g_input_stream_set_pending(_GInputStream*, _GError**) @nogc nothrow;
    void g_input_stream_clear_pending(_GInputStream*) @nogc nothrow;
    alias GAction_autoptr = _GAction*;
    alias GAction_listautoptr = _GList*;
    alias GAction_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GAction(_GAction**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GAction(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GAction(_GSList**) @nogc nothrow;
    alias GActionMap_slistautoptr = _GSList*;
    alias GActionMap_autoptr = _GActionMap*;
    alias GActionMap_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GActionMap(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GActionMap(_GActionMap**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GActionMap(_GList**) @nogc nothrow;
    alias GAppInfo_autoptr = _GAppInfo*;
    alias GAppInfo_listautoptr = _GList*;
    alias GAppInfo_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GAppInfo(_GAppInfo**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GAppInfo(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GAppInfo(_GSList**) @nogc nothrow;
    alias GAppLaunchContext_autoptr = _GAppLaunchContext*;
    alias GAppLaunchContext_listautoptr = _GList*;
    alias GAppLaunchContext_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GAppLaunchContext(_GAppLaunchContext**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GAppLaunchContext(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GAppLaunchContext(_GSList**) @nogc nothrow;
    alias GAppInfoMonitor_autoptr = _GAppInfoMonitor*;
    alias GAppInfoMonitor_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GAppInfoMonitor(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GAppInfoMonitor(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GAppInfoMonitor(_GAppInfoMonitor**) @nogc nothrow;
    alias GAppInfoMonitor_slistautoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GApplicationCommandLine(_GSList**) @nogc nothrow;
    alias GApplicationCommandLine_listautoptr = _GList*;
    alias GApplicationCommandLine_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GApplicationCommandLine(_GApplicationCommandLine**) @nogc nothrow;
    alias GApplicationCommandLine_autoptr = _GApplicationCommandLine*;
    static void glib_listautoptr_cleanup_GApplicationCommandLine(_GList**) @nogc nothrow;
    alias GApplication_autoptr = _GApplication*;
    alias GApplication_listautoptr = _GList*;
    alias GApplication_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GApplication(_GApplication**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GApplication(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GApplication(_GSList**) @nogc nothrow;
    alias GAsyncInitable_autoptr = _GAsyncInitable*;
    alias GAsyncInitable_listautoptr = _GList*;
    alias GAsyncInitable_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GAsyncInitable(_GAsyncInitable**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GAsyncInitable(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GAsyncInitable(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GAsyncResult(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GAsyncResult(_GList**) @nogc nothrow;
    alias GAsyncResult_autoptr = _GAsyncResult*;
    alias GAsyncResult_listautoptr = _GList*;
    alias GAsyncResult_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GAsyncResult(_GAsyncResult**) @nogc nothrow;
    alias GBufferedInputStream_autoptr = _GBufferedInputStream*;
    static void glib_listautoptr_cleanup_GBufferedInputStream(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GBufferedInputStream(_GBufferedInputStream**) @nogc nothrow;
    alias GBufferedInputStream_slistautoptr = _GSList*;
    alias GBufferedInputStream_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GBufferedInputStream(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GBufferedOutputStream(_GBufferedOutputStream**) @nogc nothrow;
    alias GBufferedOutputStream_listautoptr = _GList*;
    alias GBufferedOutputStream_autoptr = _GBufferedOutputStream*;
    alias GBufferedOutputStream_slistautoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GBufferedOutputStream(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GBufferedOutputStream(_GList**) @nogc nothrow;
    alias GBytesIcon_autoptr = _GBytesIcon*;
    alias GBytesIcon_listautoptr = _GList*;
    alias GBytesIcon_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GBytesIcon(_GBytesIcon**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GBytesIcon(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GBytesIcon(_GSList**) @nogc nothrow;
    alias GCancellable_autoptr = _GCancellable*;
    alias GCancellable_listautoptr = _GList*;
    alias GCancellable_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GCancellable(_GCancellable**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GCancellable(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GCancellable(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GCharsetConverter(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GCharsetConverter(_GList**) @nogc nothrow;
    alias GCharsetConverter_autoptr = _GCharsetConverter*;
    alias GCharsetConverter_listautoptr = _GList*;
    alias GCharsetConverter_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GCharsetConverter(_GCharsetConverter**) @nogc nothrow;
    alias GConverter_autoptr = _GConverter*;
    alias GConverter_listautoptr = _GList*;
    alias GConverter_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GConverter(_GConverter**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GConverter(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GConverter(_GSList**) @nogc nothrow;
    alias GConverterInputStream_autoptr = _GConverterInputStream*;
    alias GConverterInputStream_listautoptr = _GList*;
    alias GConverterInputStream_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GConverterInputStream(_GConverterInputStream**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GConverterInputStream(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GConverterInputStream(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GConverterOutputStream(_GSList**) @nogc nothrow;
    alias GConverterOutputStream_listautoptr = _GList*;
    alias GConverterOutputStream_autoptr = _GConverterOutputStream*;
    static void glib_listautoptr_cleanup_GConverterOutputStream(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GConverterOutputStream(_GConverterOutputStream**) @nogc nothrow;
    alias GConverterOutputStream_slistautoptr = _GSList*;
    alias GCredentials_autoptr = _GCredentials*;
    alias GCredentials_listautoptr = _GList*;
    alias GCredentials_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GCredentials(_GCredentials**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GCredentials(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GCredentials(_GSList**) @nogc nothrow;
    alias GDatagramBased_autoptr = _GDatagramBased*;
    alias GDatagramBased_listautoptr = _GList*;
    alias GDatagramBased_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDatagramBased(_GDatagramBased**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDatagramBased(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDatagramBased(_GSList**) @nogc nothrow;
    alias GDataInputStream_slistautoptr = _GSList*;
    alias GDataInputStream_autoptr = _GDataInputStream*;
    static void glib_listautoptr_cleanup_GDataInputStream(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GDataInputStream(_GDataInputStream**) @nogc nothrow;
    alias GDataInputStream_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GDataInputStream(_GSList**) @nogc nothrow;
    alias GDataOutputStream_autoptr = _GDataOutputStream*;
    alias GDataOutputStream_listautoptr = _GList*;
    alias GDataOutputStream_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDataOutputStream(_GDataOutputStream**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDataOutputStream(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDataOutputStream(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusActionGroup(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusActionGroup(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GDBusActionGroup(_GDBusActionGroup**) @nogc nothrow;
    alias GDBusActionGroup_slistautoptr = _GSList*;
    alias GDBusActionGroup_listautoptr = _GList*;
    alias GDBusActionGroup_autoptr = _GDBusActionGroup*;
    static void glib_listautoptr_cleanup_GDBusAuthObserver(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusAuthObserver(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GDBusAuthObserver(_GDBusAuthObserver**) @nogc nothrow;
    alias GDBusAuthObserver_slistautoptr = _GSList*;
    alias GDBusAuthObserver_listautoptr = _GList*;
    alias GDBusAuthObserver_autoptr = _GDBusAuthObserver*;
    static void glib_slistautoptr_cleanup_GDBusConnection(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusConnection(_GList**) @nogc nothrow;
    alias GDBusConnection_slistautoptr = _GSList*;
    alias GDBusConnection_listautoptr = _GList*;
    alias GDBusConnection_autoptr = _GDBusConnection*;
    static void glib_autoptr_cleanup_GDBusConnection(_GDBusConnection**) @nogc nothrow;
    static void glib_autoptr_cleanup_GDBusInterface(_GDBusInterface**) @nogc nothrow;
    alias GDBusInterface_autoptr = _GDBusInterface*;
    alias GDBusInterface_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GDBusInterface(_GSList**) @nogc nothrow;
    alias GDBusInterface_slistautoptr = _GSList*;
    static void glib_listautoptr_cleanup_GDBusInterface(_GList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusInterfaceSkeleton(_GList**) @nogc nothrow;
    alias GDBusInterfaceSkeleton_autoptr = _GDBusInterfaceSkeleton*;
    alias GDBusInterfaceSkeleton_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GDBusInterfaceSkeleton(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GDBusInterfaceSkeleton(_GDBusInterfaceSkeleton**) @nogc nothrow;
    alias GDBusInterfaceSkeleton_slistautoptr = _GSList*;
    alias GDBusMenuModel_listautoptr = _GList*;
    alias GDBusMenuModel_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDBusMenuModel(_GDBusMenuModel**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusMenuModel(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusMenuModel(_GSList**) @nogc nothrow;
    alias GDBusMenuModel_autoptr = _GDBusMenuModel*;
    static void glib_slistautoptr_cleanup_GDBusMessage(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusMessage(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GDBusMessage(_GDBusMessage**) @nogc nothrow;
    alias GDBusMessage_slistautoptr = _GSList*;
    alias GDBusMessage_listautoptr = _GList*;
    alias GDBusMessage_autoptr = _GDBusMessage*;
    static void glib_slistautoptr_cleanup_GDBusMethodInvocation(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusMethodInvocation(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GDBusMethodInvocation(_GDBusMethodInvocation**) @nogc nothrow;
    alias GDBusMethodInvocation_slistautoptr = _GSList*;
    alias GDBusMethodInvocation_listautoptr = _GList*;
    alias GDBusMethodInvocation_autoptr = _GDBusMethodInvocation*;
    static void glib_autoptr_cleanup_GDBusNodeInfo(_GDBusNodeInfo**) @nogc nothrow;
    alias GDBusNodeInfo_slistautoptr = _GSList*;
    alias GDBusNodeInfo_listautoptr = _GList*;
    alias GDBusNodeInfo_autoptr = _GDBusNodeInfo*;
    static void glib_listautoptr_cleanup_GDBusNodeInfo(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusNodeInfo(_GSList**) @nogc nothrow;
    alias GDBusObject_listautoptr = _GList*;
    alias GDBusObject_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDBusObject(_GDBusObject**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusObject(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusObject(_GSList**) @nogc nothrow;
    alias GDBusObject_autoptr = _GDBusObject*;
    alias GDBusObjectManagerClient_autoptr = _GDBusObjectManagerClient*;
    alias GDBusObjectManagerClient_listautoptr = _GList*;
    alias GDBusObjectManagerClient_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDBusObjectManagerClient(_GDBusObjectManagerClient**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusObjectManagerClient(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusObjectManagerClient(_GSList**) @nogc nothrow;
    alias GDBusObjectManager_autoptr = _GDBusObjectManager*;
    alias GDBusObjectManager_listautoptr = _GList*;
    alias GDBusObjectManager_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDBusObjectManager(_GDBusObjectManager**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusObjectManager(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusObjectManager(_GSList**) @nogc nothrow;
    alias GDBusObjectManagerServer_autoptr = _GDBusObjectManagerServer*;
    alias GDBusObjectManagerServer_listautoptr = _GList*;
    static void glib_autoptr_cleanup_GDBusObjectManagerServer(_GDBusObjectManagerServer**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusObjectManagerServer(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusObjectManagerServer(_GSList**) @nogc nothrow;
    alias GDBusObjectManagerServer_slistautoptr = _GSList*;
    alias GDBusObjectProxy_autoptr = _GDBusObjectProxy*;
    alias GDBusObjectProxy_listautoptr = _GList*;
    alias GDBusObjectProxy_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDBusObjectProxy(_GDBusObjectProxy**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusObjectProxy(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusObjectProxy(_GSList**) @nogc nothrow;
    alias GDBusObjectSkeleton_autoptr = _GDBusObjectSkeleton*;
    alias GDBusObjectSkeleton_listautoptr = _GList*;
    alias GDBusObjectSkeleton_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDBusObjectSkeleton(_GDBusObjectSkeleton**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusObjectSkeleton(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusObjectSkeleton(_GSList**) @nogc nothrow;
    alias GDBusProxy_listautoptr = _GList*;
    alias GDBusProxy_autoptr = _GDBusProxy*;
    alias GDBusProxy_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDBusProxy(_GDBusProxy**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusProxy(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusProxy(_GSList**) @nogc nothrow;
    alias GDBusServer_autoptr = _GDBusServer*;
    alias GDBusServer_listautoptr = _GList*;
    alias GDBusServer_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDBusServer(_GDBusServer**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDBusServer(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDBusServer(_GSList**) @nogc nothrow;
    alias GDrive_autoptr = _GDrive*;
    alias GDrive_listautoptr = _GList*;
    alias GDrive_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDrive(_GDrive**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDrive(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDrive(_GSList**) @nogc nothrow;
    alias GEmblemedIcon_autoptr = _GEmblemedIcon*;
    alias GEmblemedIcon_listautoptr = _GList*;
    alias GEmblemedIcon_slistautoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GEmblemedIcon(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GEmblemedIcon(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GEmblemedIcon(_GEmblemedIcon**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GEmblem(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GEmblem(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GEmblem(_GEmblem**) @nogc nothrow;
    alias GEmblem_slistautoptr = _GSList*;
    alias GEmblem_listautoptr = _GList*;
    alias GEmblem_autoptr = _GEmblem*;
    static void glib_slistautoptr_cleanup_GFileEnumerator(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFileEnumerator(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GFileEnumerator(_GFileEnumerator**) @nogc nothrow;
    alias GFileEnumerator_slistautoptr = _GSList*;
    alias GFileEnumerator_listautoptr = _GList*;
    alias GFileEnumerator_autoptr = _GFileEnumerator*;
    static void glib_slistautoptr_cleanup_GFile(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFile(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GFile(_GFile**) @nogc nothrow;
    alias GFile_slistautoptr = _GSList*;
    alias GFile_listautoptr = _GList*;
    alias GFile_autoptr = _GFile*;
    alias GFileAttributeInfoList_listautoptr = _GList*;
    alias GFileAttributeInfoList_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GFileAttributeInfoList(_GFileAttributeInfoList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFileAttributeInfoList(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GFileAttributeInfoList(_GSList**) @nogc nothrow;
    alias GFileAttributeInfoList_autoptr = _GFileAttributeInfoList*;
    alias GFileIcon_autoptr = _GFileIcon*;
    alias GFileIcon_listautoptr = _GList*;
    alias GFileIcon_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GFileIcon(_GFileIcon**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFileIcon(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GFileIcon(_GSList**) @nogc nothrow;
    alias GFileInfo_autoptr = _GFileInfo*;
    alias GFileInfo_listautoptr = _GList*;
    alias GFileInfo_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GFileInfo(_GFileInfo**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFileInfo(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GFileInfo(_GSList**) @nogc nothrow;
    alias GFileInputStream_autoptr = _GFileInputStream*;
    alias GFileInputStream_listautoptr = _GList*;
    alias GFileInputStream_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GFileInputStream(_GFileInputStream**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFileInputStream(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GFileInputStream(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GFileIOStream(_GSList**) @nogc nothrow;
    alias GFileIOStream_autoptr = _GFileIOStream*;
    alias GFileIOStream_listautoptr = _GList*;
    alias GFileIOStream_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GFileIOStream(_GFileIOStream**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFileIOStream(_GList**) @nogc nothrow;
    alias GFileMonitor_autoptr = _GFileMonitor*;
    alias GFileMonitor_listautoptr = _GList*;
    alias GFileMonitor_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GFileMonitor(_GFileMonitor**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFileMonitor(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GFileMonitor(_GSList**) @nogc nothrow;
    alias GFilenameCompleter_autoptr = _GFilenameCompleter*;
    alias GFilenameCompleter_listautoptr = _GList*;
    alias GFilenameCompleter_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GFilenameCompleter(_GFilenameCompleter**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFilenameCompleter(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GFilenameCompleter(_GSList**) @nogc nothrow;
    alias GFileOutputStream_autoptr = _GFileOutputStream*;
    alias GFileOutputStream_listautoptr = _GList*;
    alias GFileOutputStream_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GFileOutputStream(_GFileOutputStream**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFileOutputStream(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GFileOutputStream(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GFilterInputStream(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GFilterInputStream(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GFilterInputStream(_GFilterInputStream**) @nogc nothrow;
    alias GFilterInputStream_listautoptr = _GList*;
    alias GFilterInputStream_slistautoptr = _GSList*;
    alias GFilterInputStream_autoptr = _GFilterInputStream*;
    static void glib_autoptr_cleanup_GFilterOutputStream(_GFilterOutputStream**) @nogc nothrow;
    alias GFilterOutputStream_autoptr = _GFilterOutputStream*;
    static void glib_listautoptr_cleanup_GFilterOutputStream(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GFilterOutputStream(_GSList**) @nogc nothrow;
    alias GFilterOutputStream_listautoptr = _GList*;
    alias GFilterOutputStream_slistautoptr = _GSList*;
    alias GIcon_autoptr = _GIcon*;
    static void glib_listautoptr_cleanup_GIcon(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GIcon(_GSList**) @nogc nothrow;
    alias GIcon_listautoptr = _GList*;
    alias GIcon_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GIcon(_GIcon**) @nogc nothrow;
    alias GInetAddress_autoptr = _GInetAddress*;
    alias GInetAddress_listautoptr = _GList*;
    alias GInetAddress_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GInetAddress(_GInetAddress**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GInetAddress(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GInetAddress(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GInetAddressMask(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GInetAddressMask(_GSList**) @nogc nothrow;
    alias GInetAddressMask_slistautoptr = _GSList*;
    alias GInetAddressMask_listautoptr = _GList*;
    alias GInetAddressMask_autoptr = _GInetAddressMask*;
    static void glib_autoptr_cleanup_GInetAddressMask(_GInetAddressMask**) @nogc nothrow;
    alias GInetSocketAddress_autoptr = _GInetSocketAddress*;
    alias GInetSocketAddress_listautoptr = _GList*;
    alias GInetSocketAddress_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GInetSocketAddress(_GInetSocketAddress**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GInetSocketAddress(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GInetSocketAddress(_GSList**) @nogc nothrow;
    alias GInitable_autoptr = _GInitable*;
    alias GInitable_listautoptr = _GList*;
    alias GInitable_slistautoptr = _GSList*;
    static void glib_listautoptr_cleanup_GInitable(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GInitable(_GInitable**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GInitable(_GSList**) @nogc nothrow;
    alias GInputStream_slistautoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GInputStream(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GInputStream(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GInputStream(_GInputStream**) @nogc nothrow;
    alias GInputStream_autoptr = _GInputStream*;
    alias GInputStream_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GIOModule(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GIOModule(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GIOModule(_GIOModule**) @nogc nothrow;
    alias GIOModule_slistautoptr = _GSList*;
    alias GIOModule_listautoptr = _GList*;
    alias GIOModule_autoptr = _GIOModule*;
    static void glib_slistautoptr_cleanup_GIOStream(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GIOStream(_GList**) @nogc nothrow;
    alias GIOStream_autoptr = _GIOStream*;
    alias GIOStream_listautoptr = _GList*;
    static void glib_autoptr_cleanup_GIOStream(_GIOStream**) @nogc nothrow;
    alias GIOStream_slistautoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GLoadableIcon(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GLoadableIcon(_GList**) @nogc nothrow;
    alias GLoadableIcon_autoptr = _GLoadableIcon*;
    static void glib_autoptr_cleanup_GLoadableIcon(_GLoadableIcon**) @nogc nothrow;
    alias GLoadableIcon_slistautoptr = _GSList*;
    alias GLoadableIcon_listautoptr = _GList*;
    alias GMemoryInputStream_autoptr = _GMemoryInputStream*;
    static void glib_listautoptr_cleanup_GMemoryInputStream(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GMemoryInputStream(_GMemoryInputStream**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMemoryInputStream(_GSList**) @nogc nothrow;
    alias GMemoryInputStream_listautoptr = _GList*;
    alias GMemoryInputStream_slistautoptr = _GSList*;
    alias GMemoryOutputStream_slistautoptr = _GSList*;
    static void glib_listautoptr_cleanup_GMemoryOutputStream(_GList**) @nogc nothrow;
    alias GMemoryOutputStream_listautoptr = _GList*;
    alias GMemoryOutputStream_autoptr = _GMemoryOutputStream*;
    static void glib_slistautoptr_cleanup_GMemoryOutputStream(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GMemoryOutputStream(_GMemoryOutputStream**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMenu(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GMenu(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GMenu(_GMenu**) @nogc nothrow;
    alias GMenu_slistautoptr = _GSList*;
    alias GMenu_listautoptr = _GList*;
    alias GMenu_autoptr = _GMenu*;
    static void glib_autoptr_cleanup_GMenuItem(_GMenuItem**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMenuItem(_GSList**) @nogc nothrow;
    alias GMenuItem_slistautoptr = _GSList*;
    alias GMenuItem_listautoptr = _GList*;
    alias GMenuItem_autoptr = _GMenuItem*;
    static void glib_listautoptr_cleanup_GMenuItem(_GList**) @nogc nothrow;
    alias GMenuModel_autoptr = _GMenuModel*;
    alias GMenuModel_listautoptr = _GList*;
    alias GMenuModel_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GMenuModel(_GMenuModel**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GMenuModel(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMenuModel(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMenuAttributeIter(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GMenuAttributeIter(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GMenuAttributeIter(_GMenuAttributeIter**) @nogc nothrow;
    alias GMenuAttributeIter_slistautoptr = _GSList*;
    alias GMenuAttributeIter_listautoptr = _GList*;
    alias GMenuAttributeIter_autoptr = _GMenuAttributeIter*;
    static void glib_listautoptr_cleanup_GMenuLinkIter(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GMenuLinkIter(_GMenuLinkIter**) @nogc nothrow;
    alias GMenuLinkIter_slistautoptr = _GSList*;
    alias GMenuLinkIter_listautoptr = _GList*;
    alias GMenuLinkIter_autoptr = _GMenuLinkIter*;
    static void glib_slistautoptr_cleanup_GMenuLinkIter(_GSList**) @nogc nothrow;
    alias GMount_autoptr = _GMount*;
    alias GMount_listautoptr = _GList*;
    alias GMount_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GMount(_GMount**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GMount(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMount(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMountOperation(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GMountOperation(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GMountOperation(_GMountOperation**) @nogc nothrow;
    alias GMountOperation_slistautoptr = _GSList*;
    alias GMountOperation_autoptr = _GMountOperation*;
    alias GMountOperation_listautoptr = _GList*;
    alias GNativeVolumeMonitor_autoptr = _GNativeVolumeMonitor*;
    alias GNativeVolumeMonitor_listautoptr = _GList*;
    alias GNativeVolumeMonitor_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GNativeVolumeMonitor(_GNativeVolumeMonitor**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GNativeVolumeMonitor(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GNativeVolumeMonitor(_GSList**) @nogc nothrow;
    alias GNetworkAddress_autoptr = _GNetworkAddress*;
    alias GNetworkAddress_listautoptr = _GList*;
    alias GNetworkAddress_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GNetworkAddress(_GNetworkAddress**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GNetworkAddress(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GNetworkAddress(_GSList**) @nogc nothrow;
    alias GNetworkMonitor_autoptr = _GNetworkMonitor*;
    alias GNetworkMonitor_listautoptr = _GList*;
    alias GNetworkMonitor_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GNetworkMonitor(_GNetworkMonitor**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GNetworkMonitor(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GNetworkMonitor(_GSList**) @nogc nothrow;
    alias GNetworkService_autoptr = _GNetworkService*;
    static void glib_listautoptr_cleanup_GNetworkService(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GNetworkService(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GNetworkService(_GNetworkService**) @nogc nothrow;
    alias GNetworkService_slistautoptr = _GSList*;
    alias GNetworkService_listautoptr = _GList*;
    alias GNotification_autoptr = _GNotification*;
    alias GNotification_listautoptr = _GList*;
    alias GNotification_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GNotification(_GNotification**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GNotification(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GNotification(_GSList**) @nogc nothrow;
    alias GOutputStream_autoptr = _GOutputStream*;
    alias GOutputStream_listautoptr = _GList*;
    alias GOutputStream_slistautoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GOutputStream(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GOutputStream(_GOutputStream**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GOutputStream(_GList**) @nogc nothrow;
    alias GPermission_autoptr = _GPermission*;
    static void glib_slistautoptr_cleanup_GPermission(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GPermission(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GPermission(_GPermission**) @nogc nothrow;
    alias GPermission_slistautoptr = _GSList*;
    alias GPermission_listautoptr = _GList*;
    alias GPollableInputStream_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GPollableInputStream(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GPollableInputStream(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GPollableInputStream(_GPollableInputStream**) @nogc nothrow;
    alias GPollableInputStream_slistautoptr = _GSList*;
    alias GPollableInputStream_autoptr = _GPollableInputStream*;
    static void glib_slistautoptr_cleanup_GPollableOutputStream(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GPollableOutputStream(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GPollableOutputStream(_GPollableOutputStream**) @nogc nothrow;
    alias GPollableOutputStream_slistautoptr = _GSList*;
    alias GPollableOutputStream_listautoptr = _GList*;
    alias GPollableOutputStream_autoptr = _GPollableOutputStream*;
    static void glib_slistautoptr_cleanup_GPropertyAction(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GPropertyAction(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GPropertyAction(_GPropertyAction**) @nogc nothrow;
    alias GPropertyAction_slistautoptr = _GSList*;
    alias GPropertyAction_listautoptr = _GList*;
    alias GPropertyAction_autoptr = _GPropertyAction*;
    alias GProxyAddressEnumerator_autoptr = _GProxyAddressEnumerator*;
    alias GProxyAddressEnumerator_listautoptr = _GList*;
    alias GProxyAddressEnumerator_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GProxyAddressEnumerator(_GProxyAddressEnumerator**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GProxyAddressEnumerator(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GProxyAddressEnumerator(_GSList**) @nogc nothrow;
    alias GProxyAddress_autoptr = _GProxyAddress*;
    static void glib_slistautoptr_cleanup_GProxyAddress(_GSList**) @nogc nothrow;
    alias GProxyAddress_listautoptr = _GList*;
    alias GProxyAddress_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GProxyAddress(_GProxyAddress**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GProxyAddress(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GProxy(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GProxy(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GProxy(_GProxy**) @nogc nothrow;
    alias GProxy_slistautoptr = _GSList*;
    alias GProxy_listautoptr = _GList*;
    alias GProxy_autoptr = _GProxy*;
    alias GProxyResolver_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GProxyResolver(_GProxyResolver**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GProxyResolver(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GProxyResolver(_GSList**) @nogc nothrow;
    alias GProxyResolver_autoptr = _GProxyResolver*;
    alias GProxyResolver_listautoptr = _GList*;
    static void glib_autoptr_cleanup_GRemoteActionGroup(_GRemoteActionGroup**) @nogc nothrow;
    alias GRemoteActionGroup_autoptr = _GRemoteActionGroup*;
    static void glib_listautoptr_cleanup_GRemoteActionGroup(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GRemoteActionGroup(_GSList**) @nogc nothrow;
    alias GRemoteActionGroup_listautoptr = _GList*;
    alias GRemoteActionGroup_slistautoptr = _GSList*;
    alias GResolver_autoptr = _GResolver*;
    alias GResolver_listautoptr = _GList*;
    alias GResolver_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GResolver(_GResolver**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GResolver(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GResolver(_GSList**) @nogc nothrow;
    alias GSeekable_autoptr = _GSeekable*;
    alias GSeekable_listautoptr = _GList*;
    alias GSeekable_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSeekable(_GSeekable**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSeekable(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSeekable(_GSList**) @nogc nothrow;
    alias GSettingsBackend_autoptr = _GSettingsBackend*;
    alias GSettingsBackend_listautoptr = _GList*;
    alias GSettingsBackend_slistautoptr = _GSList*;
    static void glib_listautoptr_cleanup_GSettingsBackend(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSettingsBackend(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GSettingsBackend(_GSettingsBackend**) @nogc nothrow;
    alias GSettingsSchema_autoptr = _GSettingsSchema*;
    alias GSettingsSchema_listautoptr = _GList*;
    alias GSettingsSchema_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSettingsSchema(_GSettingsSchema**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSettingsSchema(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSettingsSchema(_GSList**) @nogc nothrow;
    alias GSettings_autoptr = _GSettings*;
    alias GSettings_listautoptr = _GList*;
    alias GSettings_slistautoptr = _GSList*;
    static void glib_listautoptr_cleanup_GSettings(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GSettings(_GSettings**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSettings(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSimpleActionGroup(_GSList**) @nogc nothrow;
    alias GSimpleActionGroup_autoptr = _GSimpleActionGroup*;
    alias GSimpleActionGroup_listautoptr = _GList*;
    alias GSimpleActionGroup_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSimpleActionGroup(_GSimpleActionGroup**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSimpleActionGroup(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSimpleAction(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSimpleAction(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GSimpleAction(_GSimpleAction**) @nogc nothrow;
    alias GSimpleAction_slistautoptr = _GSList*;
    alias GSimpleAction_listautoptr = _GList*;
    alias GSimpleAction_autoptr = _GSimpleAction*;
    alias GSimpleAsyncResult_autoptr = _GSimpleAsyncResult*;
    alias GSimpleAsyncResult_listautoptr = _GList*;
    alias GSimpleAsyncResult_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSimpleAsyncResult(_GSimpleAsyncResult**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSimpleAsyncResult(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSimpleAsyncResult(_GSList**) @nogc nothrow;
    alias GSimplePermission_autoptr = _GSimplePermission*;
    static void glib_autoptr_cleanup_GSimplePermission(_GSimplePermission**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSimplePermission(_GList**) @nogc nothrow;
    alias GSimplePermission_slistautoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GSimplePermission(_GSList**) @nogc nothrow;
    alias GSimplePermission_listautoptr = _GList*;
    alias GSimpleProxyResolver_autoptr = _GSimpleProxyResolver*;
    alias GSimpleProxyResolver_listautoptr = _GList*;
    alias GSimpleProxyResolver_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSimpleProxyResolver(_GSimpleProxyResolver**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSimpleProxyResolver(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSimpleProxyResolver(_GSList**) @nogc nothrow;
    alias GSocketAddressEnumerator_autoptr = _GSocketAddressEnumerator*;
    alias GSocketAddressEnumerator_listautoptr = _GList*;
    alias GSocketAddressEnumerator_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSocketAddressEnumerator(_GSocketAddressEnumerator**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSocketAddressEnumerator(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSocketAddressEnumerator(_GSList**) @nogc nothrow;
    alias GSocketAddress_listautoptr = _GList*;
    alias GSocketAddress_autoptr = _GSocketAddress*;
    alias GSocketAddress_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSocketAddress(_GSocketAddress**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSocketAddress(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSocketAddress(_GSList**) @nogc nothrow;
    alias GSocketClient_autoptr = _GSocketClient*;
    alias GSocketClient_listautoptr = _GList*;
    alias GSocketClient_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSocketClient(_GSocketClient**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSocketClient(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSocketClient(_GSList**) @nogc nothrow;
    alias GSocketConnectable_autoptr = _GSocketConnectable*;
    alias GSocketConnectable_listautoptr = _GList*;
    alias GSocketConnectable_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSocketConnectable(_GSocketConnectable**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSocketConnectable(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSocketConnectable(_GSList**) @nogc nothrow;
    alias GSocketConnection_autoptr = _GSocketConnection*;
    alias GSocketConnection_listautoptr = _GList*;
    alias GSocketConnection_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSocketConnection(_GSocketConnection**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSocketConnection(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSocketConnection(_GSList**) @nogc nothrow;
    alias GSocketControlMessage_autoptr = _GSocketControlMessage*;
    alias GSocketControlMessage_listautoptr = _GList*;
    alias GSocketControlMessage_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSocketControlMessage(_GSocketControlMessage**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSocketControlMessage(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSocketControlMessage(_GSList**) @nogc nothrow;
    alias GSocket_autoptr = _GSocket*;
    alias GSocket_listautoptr = _GList*;
    alias GSocket_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSocket(_GSocket**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSocket(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSocket(_GSList**) @nogc nothrow;
    alias GSocketListener_autoptr = _GSocketListener*;
    alias GSocketListener_listautoptr = _GList*;
    alias GSocketListener_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSocketListener(_GSocketListener**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSocketListener(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSocketListener(_GSList**) @nogc nothrow;
    alias GSocketService_autoptr = _GSocketService*;
    alias GSocketService_listautoptr = _GList*;
    alias GSocketService_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSocketService(_GSocketService**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSocketService(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSocketService(_GSList**) @nogc nothrow;
    alias GSubprocess_autoptr = _GSubprocess*;
    alias GSubprocess_listautoptr = _GList*;
    alias GSubprocess_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSubprocess(_GSubprocess**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSubprocess(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSubprocess(_GSList**) @nogc nothrow;
    alias GSubprocessLauncher_listautoptr = _GList*;
    alias GSubprocessLauncher_autoptr = _GSubprocessLauncher*;
    static void glib_slistautoptr_cleanup_GSubprocessLauncher(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSubprocessLauncher(_GList**) @nogc nothrow;
    alias GSubprocessLauncher_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSubprocessLauncher(_GSubprocessLauncher**) @nogc nothrow;
    static void glib_autoptr_cleanup_GTask(_GTask**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTask(_GList**) @nogc nothrow;
    alias GTask_listautoptr = _GList*;
    alias GTask_slistautoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GTask(_GSList**) @nogc nothrow;
    alias GTask_autoptr = _GTask*;
    static void glib_listautoptr_cleanup_GTcpConnection(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GTcpConnection(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GTcpConnection(_GTcpConnection**) @nogc nothrow;
    alias GTcpConnection_slistautoptr = _GSList*;
    alias GTcpConnection_listautoptr = _GList*;
    alias GTcpConnection_autoptr = _GTcpConnection*;
    static void glib_slistautoptr_cleanup_GTcpWrapperConnection(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTcpWrapperConnection(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GTcpWrapperConnection(_GTcpWrapperConnection**) @nogc nothrow;
    alias GTcpWrapperConnection_slistautoptr = _GSList*;
    alias GTcpWrapperConnection_listautoptr = _GList*;
    alias GTcpWrapperConnection_autoptr = _GTcpWrapperConnection*;
    static void glib_slistautoptr_cleanup_GTestDBus(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTestDBus(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GTestDBus(_GTestDBus**) @nogc nothrow;
    alias GTestDBus_slistautoptr = _GSList*;
    alias GTestDBus_listautoptr = _GList*;
    alias GTestDBus_autoptr = _GTestDBus*;
    alias GThemedIcon_autoptr = _GThemedIcon*;
    alias GThemedIcon_listautoptr = _GList*;
    alias GThemedIcon_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GThemedIcon(_GThemedIcon**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GThemedIcon(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GThemedIcon(_GSList**) @nogc nothrow;
    alias GThreadedSocketService_autoptr = _GThreadedSocketService*;
    alias GThreadedSocketService_listautoptr = _GList*;
    alias GThreadedSocketService_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GThreadedSocketService(_GThreadedSocketService**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GThreadedSocketService(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GThreadedSocketService(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTlsBackend(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GTlsBackend(_GTlsBackend**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GTlsBackend(_GSList**) @nogc nothrow;
    alias GTlsBackend_listautoptr = _GList*;
    alias GTlsBackend_autoptr = _GTlsBackend*;
    alias GTlsBackend_slistautoptr = _GSList*;
    alias GTlsCertificate_autoptr = _GTlsCertificate*;
    alias GTlsCertificate_listautoptr = _GList*;
    alias GTlsCertificate_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GTlsCertificate(_GTlsCertificate**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTlsCertificate(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GTlsCertificate(_GSList**) @nogc nothrow;
    alias GTlsClientConnection_autoptr = _GTlsClientConnection*;
    alias GTlsClientConnection_listautoptr = _GList*;
    alias GTlsClientConnection_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GTlsClientConnection(_GTlsClientConnection**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTlsClientConnection(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GTlsClientConnection(_GSList**) @nogc nothrow;
    alias GTlsConnection_autoptr = _GTlsConnection*;
    static void glib_autoptr_cleanup_GTlsConnection(_GTlsConnection**) @nogc nothrow;
    alias GTlsConnection_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GTlsConnection(_GSList**) @nogc nothrow;
    alias GTlsConnection_slistautoptr = _GSList*;
    static void glib_listautoptr_cleanup_GTlsConnection(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GTlsDatabase(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTlsDatabase(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GTlsDatabase(_GTlsDatabase**) @nogc nothrow;
    alias GTlsDatabase_slistautoptr = _GSList*;
    alias GTlsDatabase_listautoptr = _GList*;
    alias GTlsDatabase_autoptr = _GTlsDatabase*;
    static void glib_slistautoptr_cleanup_GTlsFileDatabase(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTlsFileDatabase(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GTlsFileDatabase(_GTlsFileDatabase**) @nogc nothrow;
    alias GTlsFileDatabase_slistautoptr = _GSList*;
    alias GTlsFileDatabase_listautoptr = _GList*;
    alias GTlsFileDatabase_autoptr = _GTlsFileDatabase*;
    static void glib_slistautoptr_cleanup_GTlsInteraction(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTlsInteraction(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GTlsInteraction(_GTlsInteraction**) @nogc nothrow;
    alias GTlsInteraction_slistautoptr = _GSList*;
    alias GTlsInteraction_listautoptr = _GList*;
    alias GTlsInteraction_autoptr = _GTlsInteraction*;
    static void glib_slistautoptr_cleanup_GTlsPassword(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTlsPassword(_GList**) @nogc nothrow;
    alias GTlsPassword_slistautoptr = _GSList*;
    alias GTlsPassword_listautoptr = _GList*;
    alias GTlsPassword_autoptr = _GTlsPassword*;
    static void glib_autoptr_cleanup_GTlsPassword(_GTlsPassword**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GTlsServerConnection(_GSList**) @nogc nothrow;
    alias GTlsServerConnection_autoptr = _GTlsServerConnection*;
    alias GTlsServerConnection_listautoptr = _GList*;
    alias GTlsServerConnection_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GTlsServerConnection(_GTlsServerConnection**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTlsServerConnection(_GList**) @nogc nothrow;
    alias GVfs_autoptr = _GVfs*;
    alias GVfs_listautoptr = _GList*;
    alias GVfs_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GVfs(_GVfs**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GVfs(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GVfs(_GSList**) @nogc nothrow;
    alias GVolume_autoptr = _GVolume*;
    alias GVolume_listautoptr = _GList*;
    alias GVolume_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GVolume(_GVolume**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GVolume(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GVolume(_GSList**) @nogc nothrow;
    alias GVolumeMonitor_autoptr = _GVolumeMonitor*;
    alias GVolumeMonitor_listautoptr = _GList*;
    alias GVolumeMonitor_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GVolumeMonitor(_GVolumeMonitor**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GVolumeMonitor(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GVolumeMonitor(_GSList**) @nogc nothrow;
    alias GZlibCompressor_autoptr = _GZlibCompressor*;
    alias GZlibCompressor_listautoptr = _GList*;
    alias GZlibCompressor_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GZlibCompressor(_GZlibCompressor**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GZlibCompressor(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GZlibCompressor(_GSList**) @nogc nothrow;
    alias GZlibDecompressor_autoptr = _GZlibDecompressor*;
    alias GZlibDecompressor_listautoptr = _GList*;
    alias GZlibDecompressor_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GZlibDecompressor(_GZlibDecompressor**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GZlibDecompressor(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GZlibDecompressor(_GSList**) @nogc nothrow;
    alias useconds_t = uint;
    alias GAppInfoCreateFlags = _Anonymous_45;
    enum _Anonymous_45
    {
        G_APP_INFO_CREATE_NONE = 0,
        G_APP_INFO_CREATE_NEEDS_TERMINAL = 1,
        G_APP_INFO_CREATE_SUPPORTS_URIS = 2,
        G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4,
    }
    enum G_APP_INFO_CREATE_NONE = _Anonymous_45.G_APP_INFO_CREATE_NONE;
    enum G_APP_INFO_CREATE_NEEDS_TERMINAL = _Anonymous_45.G_APP_INFO_CREATE_NEEDS_TERMINAL;
    enum G_APP_INFO_CREATE_SUPPORTS_URIS = _Anonymous_45.G_APP_INFO_CREATE_SUPPORTS_URIS;
    enum G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = _Anonymous_45.G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION;
    alias GConverterFlags = _Anonymous_46;
    enum _Anonymous_46
    {
        G_CONVERTER_NO_FLAGS = 0,
        G_CONVERTER_INPUT_AT_END = 1,
        G_CONVERTER_FLUSH = 2,
    }
    enum G_CONVERTER_NO_FLAGS = _Anonymous_46.G_CONVERTER_NO_FLAGS;
    enum G_CONVERTER_INPUT_AT_END = _Anonymous_46.G_CONVERTER_INPUT_AT_END;
    enum G_CONVERTER_FLUSH = _Anonymous_46.G_CONVERTER_FLUSH;
    alias GConverterResult = _Anonymous_47;
    enum _Anonymous_47
    {
        G_CONVERTER_ERROR = 0,
        G_CONVERTER_CONVERTED = 1,
        G_CONVERTER_FINISHED = 2,
        G_CONVERTER_FLUSHED = 3,
    }
    enum G_CONVERTER_ERROR = _Anonymous_47.G_CONVERTER_ERROR;
    enum G_CONVERTER_CONVERTED = _Anonymous_47.G_CONVERTER_CONVERTED;
    enum G_CONVERTER_FINISHED = _Anonymous_47.G_CONVERTER_FINISHED;
    enum G_CONVERTER_FLUSHED = _Anonymous_47.G_CONVERTER_FLUSHED;
    alias GDataStreamByteOrder = _Anonymous_48;
    enum _Anonymous_48
    {
        G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0,
        G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1,
        G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2,
    }
    enum G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = _Anonymous_48.G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN;
    enum G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = _Anonymous_48.G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN;
    enum G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = _Anonymous_48.G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN;
    alias GDataStreamNewlineType = _Anonymous_49;
    enum _Anonymous_49
    {
        G_DATA_STREAM_NEWLINE_TYPE_LF = 0,
        G_DATA_STREAM_NEWLINE_TYPE_CR = 1,
        G_DATA_STREAM_NEWLINE_TYPE_CR_LF = 2,
        G_DATA_STREAM_NEWLINE_TYPE_ANY = 3,
    }
    enum G_DATA_STREAM_NEWLINE_TYPE_LF = _Anonymous_49.G_DATA_STREAM_NEWLINE_TYPE_LF;
    enum G_DATA_STREAM_NEWLINE_TYPE_CR = _Anonymous_49.G_DATA_STREAM_NEWLINE_TYPE_CR;
    enum G_DATA_STREAM_NEWLINE_TYPE_CR_LF = _Anonymous_49.G_DATA_STREAM_NEWLINE_TYPE_CR_LF;
    enum G_DATA_STREAM_NEWLINE_TYPE_ANY = _Anonymous_49.G_DATA_STREAM_NEWLINE_TYPE_ANY;
    alias GFileAttributeType = _Anonymous_50;
    enum _Anonymous_50
    {
        G_FILE_ATTRIBUTE_TYPE_INVALID = 0,
        G_FILE_ATTRIBUTE_TYPE_STRING = 1,
        G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2,
        G_FILE_ATTRIBUTE_TYPE_BOOLEAN = 3,
        G_FILE_ATTRIBUTE_TYPE_UINT32 = 4,
        G_FILE_ATTRIBUTE_TYPE_INT32 = 5,
        G_FILE_ATTRIBUTE_TYPE_UINT64 = 6,
        G_FILE_ATTRIBUTE_TYPE_INT64 = 7,
        G_FILE_ATTRIBUTE_TYPE_OBJECT = 8,
        G_FILE_ATTRIBUTE_TYPE_STRINGV = 9,
    }
    enum G_FILE_ATTRIBUTE_TYPE_INVALID = _Anonymous_50.G_FILE_ATTRIBUTE_TYPE_INVALID;
    enum G_FILE_ATTRIBUTE_TYPE_STRING = _Anonymous_50.G_FILE_ATTRIBUTE_TYPE_STRING;
    enum G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = _Anonymous_50.G_FILE_ATTRIBUTE_TYPE_BYTE_STRING;
    enum G_FILE_ATTRIBUTE_TYPE_BOOLEAN = _Anonymous_50.G_FILE_ATTRIBUTE_TYPE_BOOLEAN;
    enum G_FILE_ATTRIBUTE_TYPE_UINT32 = _Anonymous_50.G_FILE_ATTRIBUTE_TYPE_UINT32;
    enum G_FILE_ATTRIBUTE_TYPE_INT32 = _Anonymous_50.G_FILE_ATTRIBUTE_TYPE_INT32;
    enum G_FILE_ATTRIBUTE_TYPE_UINT64 = _Anonymous_50.G_FILE_ATTRIBUTE_TYPE_UINT64;
    enum G_FILE_ATTRIBUTE_TYPE_INT64 = _Anonymous_50.G_FILE_ATTRIBUTE_TYPE_INT64;
    enum G_FILE_ATTRIBUTE_TYPE_OBJECT = _Anonymous_50.G_FILE_ATTRIBUTE_TYPE_OBJECT;
    enum G_FILE_ATTRIBUTE_TYPE_STRINGV = _Anonymous_50.G_FILE_ATTRIBUTE_TYPE_STRINGV;
    alias GFileAttributeInfoFlags = _Anonymous_51;
    enum _Anonymous_51
    {
        G_FILE_ATTRIBUTE_INFO_NONE = 0,
        G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1,
        G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2,
    }
    enum G_FILE_ATTRIBUTE_INFO_NONE = _Anonymous_51.G_FILE_ATTRIBUTE_INFO_NONE;
    enum G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = _Anonymous_51.G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE;
    enum G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = _Anonymous_51.G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED;
    alias GFileAttributeStatus = _Anonymous_52;
    enum _Anonymous_52
    {
        G_FILE_ATTRIBUTE_STATUS_UNSET = 0,
        G_FILE_ATTRIBUTE_STATUS_SET = 1,
        G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2,
    }
    enum G_FILE_ATTRIBUTE_STATUS_UNSET = _Anonymous_52.G_FILE_ATTRIBUTE_STATUS_UNSET;
    enum G_FILE_ATTRIBUTE_STATUS_SET = _Anonymous_52.G_FILE_ATTRIBUTE_STATUS_SET;
    enum G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = _Anonymous_52.G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING;
    alias GFileQueryInfoFlags = _Anonymous_53;
    enum _Anonymous_53
    {
        G_FILE_QUERY_INFO_NONE = 0,
        G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1,
    }
    enum G_FILE_QUERY_INFO_NONE = _Anonymous_53.G_FILE_QUERY_INFO_NONE;
    enum G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = _Anonymous_53.G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS;
    alias GFileCreateFlags = _Anonymous_54;
    enum _Anonymous_54
    {
        G_FILE_CREATE_NONE = 0,
        G_FILE_CREATE_PRIVATE = 1,
        G_FILE_CREATE_REPLACE_DESTINATION = 2,
    }
    enum G_FILE_CREATE_NONE = _Anonymous_54.G_FILE_CREATE_NONE;
    enum G_FILE_CREATE_PRIVATE = _Anonymous_54.G_FILE_CREATE_PRIVATE;
    enum G_FILE_CREATE_REPLACE_DESTINATION = _Anonymous_54.G_FILE_CREATE_REPLACE_DESTINATION;
    alias GFileMeasureFlags = _Anonymous_55;
    enum _Anonymous_55
    {
        G_FILE_MEASURE_NONE = 0,
        G_FILE_MEASURE_REPORT_ANY_ERROR = 2,
        G_FILE_MEASURE_APPARENT_SIZE = 4,
        G_FILE_MEASURE_NO_XDEV = 8,
    }
    enum G_FILE_MEASURE_NONE = _Anonymous_55.G_FILE_MEASURE_NONE;
    enum G_FILE_MEASURE_REPORT_ANY_ERROR = _Anonymous_55.G_FILE_MEASURE_REPORT_ANY_ERROR;
    enum G_FILE_MEASURE_APPARENT_SIZE = _Anonymous_55.G_FILE_MEASURE_APPARENT_SIZE;
    enum G_FILE_MEASURE_NO_XDEV = _Anonymous_55.G_FILE_MEASURE_NO_XDEV;
    alias GMountMountFlags = _Anonymous_56;
    enum _Anonymous_56
    {
        G_MOUNT_MOUNT_NONE = 0,
    }
    enum G_MOUNT_MOUNT_NONE = _Anonymous_56.G_MOUNT_MOUNT_NONE;
    alias GMountUnmountFlags = _Anonymous_57;
    enum _Anonymous_57
    {
        G_MOUNT_UNMOUNT_NONE = 0,
        G_MOUNT_UNMOUNT_FORCE = 1,
    }
    enum G_MOUNT_UNMOUNT_NONE = _Anonymous_57.G_MOUNT_UNMOUNT_NONE;
    enum G_MOUNT_UNMOUNT_FORCE = _Anonymous_57.G_MOUNT_UNMOUNT_FORCE;
    alias GDriveStartFlags = _Anonymous_58;
    enum _Anonymous_58
    {
        G_DRIVE_START_NONE = 0,
    }
    enum G_DRIVE_START_NONE = _Anonymous_58.G_DRIVE_START_NONE;
    alias GDriveStartStopType = _Anonymous_59;
    enum _Anonymous_59
    {
        G_DRIVE_START_STOP_TYPE_UNKNOWN = 0,
        G_DRIVE_START_STOP_TYPE_SHUTDOWN = 1,
        G_DRIVE_START_STOP_TYPE_NETWORK = 2,
        G_DRIVE_START_STOP_TYPE_MULTIDISK = 3,
        G_DRIVE_START_STOP_TYPE_PASSWORD = 4,
    }
    enum G_DRIVE_START_STOP_TYPE_UNKNOWN = _Anonymous_59.G_DRIVE_START_STOP_TYPE_UNKNOWN;
    enum G_DRIVE_START_STOP_TYPE_SHUTDOWN = _Anonymous_59.G_DRIVE_START_STOP_TYPE_SHUTDOWN;
    enum G_DRIVE_START_STOP_TYPE_NETWORK = _Anonymous_59.G_DRIVE_START_STOP_TYPE_NETWORK;
    enum G_DRIVE_START_STOP_TYPE_MULTIDISK = _Anonymous_59.G_DRIVE_START_STOP_TYPE_MULTIDISK;
    enum G_DRIVE_START_STOP_TYPE_PASSWORD = _Anonymous_59.G_DRIVE_START_STOP_TYPE_PASSWORD;
    alias GFileCopyFlags = _Anonymous_60;
    enum _Anonymous_60
    {
        G_FILE_COPY_NONE = 0,
        G_FILE_COPY_OVERWRITE = 1,
        G_FILE_COPY_BACKUP = 2,
        G_FILE_COPY_NOFOLLOW_SYMLINKS = 4,
        G_FILE_COPY_ALL_METADATA = 8,
        G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 16,
        G_FILE_COPY_TARGET_DEFAULT_PERMS = 32,
    }
    enum G_FILE_COPY_NONE = _Anonymous_60.G_FILE_COPY_NONE;
    enum G_FILE_COPY_OVERWRITE = _Anonymous_60.G_FILE_COPY_OVERWRITE;
    enum G_FILE_COPY_BACKUP = _Anonymous_60.G_FILE_COPY_BACKUP;
    enum G_FILE_COPY_NOFOLLOW_SYMLINKS = _Anonymous_60.G_FILE_COPY_NOFOLLOW_SYMLINKS;
    enum G_FILE_COPY_ALL_METADATA = _Anonymous_60.G_FILE_COPY_ALL_METADATA;
    enum G_FILE_COPY_NO_FALLBACK_FOR_MOVE = _Anonymous_60.G_FILE_COPY_NO_FALLBACK_FOR_MOVE;
    enum G_FILE_COPY_TARGET_DEFAULT_PERMS = _Anonymous_60.G_FILE_COPY_TARGET_DEFAULT_PERMS;
    alias GFileMonitorFlags = _Anonymous_61;
    enum _Anonymous_61
    {
        G_FILE_MONITOR_NONE = 0,
        G_FILE_MONITOR_WATCH_MOUNTS = 1,
        G_FILE_MONITOR_SEND_MOVED = 2,
        G_FILE_MONITOR_WATCH_HARD_LINKS = 4,
        G_FILE_MONITOR_WATCH_MOVES = 8,
    }
    enum G_FILE_MONITOR_NONE = _Anonymous_61.G_FILE_MONITOR_NONE;
    enum G_FILE_MONITOR_WATCH_MOUNTS = _Anonymous_61.G_FILE_MONITOR_WATCH_MOUNTS;
    enum G_FILE_MONITOR_SEND_MOVED = _Anonymous_61.G_FILE_MONITOR_SEND_MOVED;
    enum G_FILE_MONITOR_WATCH_HARD_LINKS = _Anonymous_61.G_FILE_MONITOR_WATCH_HARD_LINKS;
    enum G_FILE_MONITOR_WATCH_MOVES = _Anonymous_61.G_FILE_MONITOR_WATCH_MOVES;
    alias GFileType = _Anonymous_62;
    enum _Anonymous_62
    {
        G_FILE_TYPE_UNKNOWN = 0,
        G_FILE_TYPE_REGULAR = 1,
        G_FILE_TYPE_DIRECTORY = 2,
        G_FILE_TYPE_SYMBOLIC_LINK = 3,
        G_FILE_TYPE_SPECIAL = 4,
        G_FILE_TYPE_SHORTCUT = 5,
        G_FILE_TYPE_MOUNTABLE = 6,
    }
    enum G_FILE_TYPE_UNKNOWN = _Anonymous_62.G_FILE_TYPE_UNKNOWN;
    enum G_FILE_TYPE_REGULAR = _Anonymous_62.G_FILE_TYPE_REGULAR;
    enum G_FILE_TYPE_DIRECTORY = _Anonymous_62.G_FILE_TYPE_DIRECTORY;
    enum G_FILE_TYPE_SYMBOLIC_LINK = _Anonymous_62.G_FILE_TYPE_SYMBOLIC_LINK;
    enum G_FILE_TYPE_SPECIAL = _Anonymous_62.G_FILE_TYPE_SPECIAL;
    enum G_FILE_TYPE_SHORTCUT = _Anonymous_62.G_FILE_TYPE_SHORTCUT;
    enum G_FILE_TYPE_MOUNTABLE = _Anonymous_62.G_FILE_TYPE_MOUNTABLE;
    alias GFilesystemPreviewType = _Anonymous_63;
    enum _Anonymous_63
    {
        G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
        G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1,
        G_FILESYSTEM_PREVIEW_TYPE_NEVER = 2,
    }
    enum G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = _Anonymous_63.G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS;
    enum G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = _Anonymous_63.G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL;
    enum G_FILESYSTEM_PREVIEW_TYPE_NEVER = _Anonymous_63.G_FILESYSTEM_PREVIEW_TYPE_NEVER;
    alias GFileMonitorEvent = _Anonymous_64;
    enum _Anonymous_64
    {
        G_FILE_MONITOR_EVENT_CHANGED = 0,
        G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1,
        G_FILE_MONITOR_EVENT_DELETED = 2,
        G_FILE_MONITOR_EVENT_CREATED = 3,
        G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4,
        G_FILE_MONITOR_EVENT_PRE_UNMOUNT = 5,
        G_FILE_MONITOR_EVENT_UNMOUNTED = 6,
        G_FILE_MONITOR_EVENT_MOVED = 7,
        G_FILE_MONITOR_EVENT_RENAMED = 8,
        G_FILE_MONITOR_EVENT_MOVED_IN = 9,
        G_FILE_MONITOR_EVENT_MOVED_OUT = 10,
    }
    enum G_FILE_MONITOR_EVENT_CHANGED = _Anonymous_64.G_FILE_MONITOR_EVENT_CHANGED;
    enum G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = _Anonymous_64.G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT;
    enum G_FILE_MONITOR_EVENT_DELETED = _Anonymous_64.G_FILE_MONITOR_EVENT_DELETED;
    enum G_FILE_MONITOR_EVENT_CREATED = _Anonymous_64.G_FILE_MONITOR_EVENT_CREATED;
    enum G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = _Anonymous_64.G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED;
    enum G_FILE_MONITOR_EVENT_PRE_UNMOUNT = _Anonymous_64.G_FILE_MONITOR_EVENT_PRE_UNMOUNT;
    enum G_FILE_MONITOR_EVENT_UNMOUNTED = _Anonymous_64.G_FILE_MONITOR_EVENT_UNMOUNTED;
    enum G_FILE_MONITOR_EVENT_MOVED = _Anonymous_64.G_FILE_MONITOR_EVENT_MOVED;
    enum G_FILE_MONITOR_EVENT_RENAMED = _Anonymous_64.G_FILE_MONITOR_EVENT_RENAMED;
    enum G_FILE_MONITOR_EVENT_MOVED_IN = _Anonymous_64.G_FILE_MONITOR_EVENT_MOVED_IN;
    enum G_FILE_MONITOR_EVENT_MOVED_OUT = _Anonymous_64.G_FILE_MONITOR_EVENT_MOVED_OUT;
    alias GIOErrorEnum = _Anonymous_65;
    enum _Anonymous_65
    {
        G_IO_ERROR_FAILED = 0,
        G_IO_ERROR_NOT_FOUND = 1,
        G_IO_ERROR_EXISTS = 2,
        G_IO_ERROR_IS_DIRECTORY = 3,
        G_IO_ERROR_NOT_DIRECTORY = 4,
        G_IO_ERROR_NOT_EMPTY = 5,
        G_IO_ERROR_NOT_REGULAR_FILE = 6,
        G_IO_ERROR_NOT_SYMBOLIC_LINK = 7,
        G_IO_ERROR_NOT_MOUNTABLE_FILE = 8,
        G_IO_ERROR_FILENAME_TOO_LONG = 9,
        G_IO_ERROR_INVALID_FILENAME = 10,
        G_IO_ERROR_TOO_MANY_LINKS = 11,
        G_IO_ERROR_NO_SPACE = 12,
        G_IO_ERROR_INVALID_ARGUMENT = 13,
        G_IO_ERROR_PERMISSION_DENIED = 14,
        G_IO_ERROR_NOT_SUPPORTED = 15,
        G_IO_ERROR_NOT_MOUNTED = 16,
        G_IO_ERROR_ALREADY_MOUNTED = 17,
        G_IO_ERROR_CLOSED = 18,
        G_IO_ERROR_CANCELLED = 19,
        G_IO_ERROR_PENDING = 20,
        G_IO_ERROR_READ_ONLY = 21,
        G_IO_ERROR_CANT_CREATE_BACKUP = 22,
        G_IO_ERROR_WRONG_ETAG = 23,
        G_IO_ERROR_TIMED_OUT = 24,
        G_IO_ERROR_WOULD_RECURSE = 25,
        G_IO_ERROR_BUSY = 26,
        G_IO_ERROR_WOULD_BLOCK = 27,
        G_IO_ERROR_HOST_NOT_FOUND = 28,
        G_IO_ERROR_WOULD_MERGE = 29,
        G_IO_ERROR_FAILED_HANDLED = 30,
        G_IO_ERROR_TOO_MANY_OPEN_FILES = 31,
        G_IO_ERROR_NOT_INITIALIZED = 32,
        G_IO_ERROR_ADDRESS_IN_USE = 33,
        G_IO_ERROR_PARTIAL_INPUT = 34,
        G_IO_ERROR_INVALID_DATA = 35,
        G_IO_ERROR_DBUS_ERROR = 36,
        G_IO_ERROR_HOST_UNREACHABLE = 37,
        G_IO_ERROR_NETWORK_UNREACHABLE = 38,
        G_IO_ERROR_CONNECTION_REFUSED = 39,
        G_IO_ERROR_PROXY_FAILED = 40,
        G_IO_ERROR_PROXY_AUTH_FAILED = 41,
        G_IO_ERROR_PROXY_NEED_AUTH = 42,
        G_IO_ERROR_PROXY_NOT_ALLOWED = 43,
        G_IO_ERROR_BROKEN_PIPE = 44,
        G_IO_ERROR_CONNECTION_CLOSED = 44,
        G_IO_ERROR_NOT_CONNECTED = 45,
        G_IO_ERROR_MESSAGE_TOO_LARGE = 46,
    }
    enum G_IO_ERROR_FAILED = _Anonymous_65.G_IO_ERROR_FAILED;
    enum G_IO_ERROR_NOT_FOUND = _Anonymous_65.G_IO_ERROR_NOT_FOUND;
    enum G_IO_ERROR_EXISTS = _Anonymous_65.G_IO_ERROR_EXISTS;
    enum G_IO_ERROR_IS_DIRECTORY = _Anonymous_65.G_IO_ERROR_IS_DIRECTORY;
    enum G_IO_ERROR_NOT_DIRECTORY = _Anonymous_65.G_IO_ERROR_NOT_DIRECTORY;
    enum G_IO_ERROR_NOT_EMPTY = _Anonymous_65.G_IO_ERROR_NOT_EMPTY;
    enum G_IO_ERROR_NOT_REGULAR_FILE = _Anonymous_65.G_IO_ERROR_NOT_REGULAR_FILE;
    enum G_IO_ERROR_NOT_SYMBOLIC_LINK = _Anonymous_65.G_IO_ERROR_NOT_SYMBOLIC_LINK;
    enum G_IO_ERROR_NOT_MOUNTABLE_FILE = _Anonymous_65.G_IO_ERROR_NOT_MOUNTABLE_FILE;
    enum G_IO_ERROR_FILENAME_TOO_LONG = _Anonymous_65.G_IO_ERROR_FILENAME_TOO_LONG;
    enum G_IO_ERROR_INVALID_FILENAME = _Anonymous_65.G_IO_ERROR_INVALID_FILENAME;
    enum G_IO_ERROR_TOO_MANY_LINKS = _Anonymous_65.G_IO_ERROR_TOO_MANY_LINKS;
    enum G_IO_ERROR_NO_SPACE = _Anonymous_65.G_IO_ERROR_NO_SPACE;
    enum G_IO_ERROR_INVALID_ARGUMENT = _Anonymous_65.G_IO_ERROR_INVALID_ARGUMENT;
    enum G_IO_ERROR_PERMISSION_DENIED = _Anonymous_65.G_IO_ERROR_PERMISSION_DENIED;
    enum G_IO_ERROR_NOT_SUPPORTED = _Anonymous_65.G_IO_ERROR_NOT_SUPPORTED;
    enum G_IO_ERROR_NOT_MOUNTED = _Anonymous_65.G_IO_ERROR_NOT_MOUNTED;
    enum G_IO_ERROR_ALREADY_MOUNTED = _Anonymous_65.G_IO_ERROR_ALREADY_MOUNTED;
    enum G_IO_ERROR_CLOSED = _Anonymous_65.G_IO_ERROR_CLOSED;
    enum G_IO_ERROR_CANCELLED = _Anonymous_65.G_IO_ERROR_CANCELLED;
    enum G_IO_ERROR_PENDING = _Anonymous_65.G_IO_ERROR_PENDING;
    enum G_IO_ERROR_READ_ONLY = _Anonymous_65.G_IO_ERROR_READ_ONLY;
    enum G_IO_ERROR_CANT_CREATE_BACKUP = _Anonymous_65.G_IO_ERROR_CANT_CREATE_BACKUP;
    enum G_IO_ERROR_WRONG_ETAG = _Anonymous_65.G_IO_ERROR_WRONG_ETAG;
    enum G_IO_ERROR_TIMED_OUT = _Anonymous_65.G_IO_ERROR_TIMED_OUT;
    enum G_IO_ERROR_WOULD_RECURSE = _Anonymous_65.G_IO_ERROR_WOULD_RECURSE;
    enum G_IO_ERROR_BUSY = _Anonymous_65.G_IO_ERROR_BUSY;
    enum G_IO_ERROR_WOULD_BLOCK = _Anonymous_65.G_IO_ERROR_WOULD_BLOCK;
    enum G_IO_ERROR_HOST_NOT_FOUND = _Anonymous_65.G_IO_ERROR_HOST_NOT_FOUND;
    enum G_IO_ERROR_WOULD_MERGE = _Anonymous_65.G_IO_ERROR_WOULD_MERGE;
    enum G_IO_ERROR_FAILED_HANDLED = _Anonymous_65.G_IO_ERROR_FAILED_HANDLED;
    enum G_IO_ERROR_TOO_MANY_OPEN_FILES = _Anonymous_65.G_IO_ERROR_TOO_MANY_OPEN_FILES;
    enum G_IO_ERROR_NOT_INITIALIZED = _Anonymous_65.G_IO_ERROR_NOT_INITIALIZED;
    enum G_IO_ERROR_ADDRESS_IN_USE = _Anonymous_65.G_IO_ERROR_ADDRESS_IN_USE;
    enum G_IO_ERROR_PARTIAL_INPUT = _Anonymous_65.G_IO_ERROR_PARTIAL_INPUT;
    enum G_IO_ERROR_INVALID_DATA = _Anonymous_65.G_IO_ERROR_INVALID_DATA;
    enum G_IO_ERROR_DBUS_ERROR = _Anonymous_65.G_IO_ERROR_DBUS_ERROR;
    enum G_IO_ERROR_HOST_UNREACHABLE = _Anonymous_65.G_IO_ERROR_HOST_UNREACHABLE;
    enum G_IO_ERROR_NETWORK_UNREACHABLE = _Anonymous_65.G_IO_ERROR_NETWORK_UNREACHABLE;
    enum G_IO_ERROR_CONNECTION_REFUSED = _Anonymous_65.G_IO_ERROR_CONNECTION_REFUSED;
    enum G_IO_ERROR_PROXY_FAILED = _Anonymous_65.G_IO_ERROR_PROXY_FAILED;
    enum G_IO_ERROR_PROXY_AUTH_FAILED = _Anonymous_65.G_IO_ERROR_PROXY_AUTH_FAILED;
    enum G_IO_ERROR_PROXY_NEED_AUTH = _Anonymous_65.G_IO_ERROR_PROXY_NEED_AUTH;
    enum G_IO_ERROR_PROXY_NOT_ALLOWED = _Anonymous_65.G_IO_ERROR_PROXY_NOT_ALLOWED;
    enum G_IO_ERROR_BROKEN_PIPE = _Anonymous_65.G_IO_ERROR_BROKEN_PIPE;
    enum G_IO_ERROR_CONNECTION_CLOSED = _Anonymous_65.G_IO_ERROR_CONNECTION_CLOSED;
    enum G_IO_ERROR_NOT_CONNECTED = _Anonymous_65.G_IO_ERROR_NOT_CONNECTED;
    enum G_IO_ERROR_MESSAGE_TOO_LARGE = _Anonymous_65.G_IO_ERROR_MESSAGE_TOO_LARGE;
    alias GAskPasswordFlags = _Anonymous_66;
    enum _Anonymous_66
    {
        G_ASK_PASSWORD_NEED_PASSWORD = 1,
        G_ASK_PASSWORD_NEED_USERNAME = 2,
        G_ASK_PASSWORD_NEED_DOMAIN = 4,
        G_ASK_PASSWORD_SAVING_SUPPORTED = 8,
        G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16,
    }
    enum G_ASK_PASSWORD_NEED_PASSWORD = _Anonymous_66.G_ASK_PASSWORD_NEED_PASSWORD;
    enum G_ASK_PASSWORD_NEED_USERNAME = _Anonymous_66.G_ASK_PASSWORD_NEED_USERNAME;
    enum G_ASK_PASSWORD_NEED_DOMAIN = _Anonymous_66.G_ASK_PASSWORD_NEED_DOMAIN;
    enum G_ASK_PASSWORD_SAVING_SUPPORTED = _Anonymous_66.G_ASK_PASSWORD_SAVING_SUPPORTED;
    enum G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = _Anonymous_66.G_ASK_PASSWORD_ANONYMOUS_SUPPORTED;
    alias GPasswordSave = _Anonymous_67;
    enum _Anonymous_67
    {
        G_PASSWORD_SAVE_NEVER = 0,
        G_PASSWORD_SAVE_FOR_SESSION = 1,
        G_PASSWORD_SAVE_PERMANENTLY = 2,
    }
    enum G_PASSWORD_SAVE_NEVER = _Anonymous_67.G_PASSWORD_SAVE_NEVER;
    enum G_PASSWORD_SAVE_FOR_SESSION = _Anonymous_67.G_PASSWORD_SAVE_FOR_SESSION;
    enum G_PASSWORD_SAVE_PERMANENTLY = _Anonymous_67.G_PASSWORD_SAVE_PERMANENTLY;
    alias GMountOperationResult = _Anonymous_68;
    enum _Anonymous_68
    {
        G_MOUNT_OPERATION_HANDLED = 0,
        G_MOUNT_OPERATION_ABORTED = 1,
        G_MOUNT_OPERATION_UNHANDLED = 2,
    }
    enum G_MOUNT_OPERATION_HANDLED = _Anonymous_68.G_MOUNT_OPERATION_HANDLED;
    enum G_MOUNT_OPERATION_ABORTED = _Anonymous_68.G_MOUNT_OPERATION_ABORTED;
    enum G_MOUNT_OPERATION_UNHANDLED = _Anonymous_68.G_MOUNT_OPERATION_UNHANDLED;
    alias GOutputStreamSpliceFlags = _Anonymous_69;
    enum _Anonymous_69
    {
        G_OUTPUT_STREAM_SPLICE_NONE = 0,
        G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1,
        G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2,
    }
    enum G_OUTPUT_STREAM_SPLICE_NONE = _Anonymous_69.G_OUTPUT_STREAM_SPLICE_NONE;
    enum G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = _Anonymous_69.G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE;
    enum G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = _Anonymous_69.G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET;
    alias GIOStreamSpliceFlags = _Anonymous_70;
    enum _Anonymous_70
    {
        G_IO_STREAM_SPLICE_NONE = 0,
        G_IO_STREAM_SPLICE_CLOSE_STREAM1 = 1,
        G_IO_STREAM_SPLICE_CLOSE_STREAM2 = 2,
        G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = 4,
    }
    enum G_IO_STREAM_SPLICE_NONE = _Anonymous_70.G_IO_STREAM_SPLICE_NONE;
    enum G_IO_STREAM_SPLICE_CLOSE_STREAM1 = _Anonymous_70.G_IO_STREAM_SPLICE_CLOSE_STREAM1;
    enum G_IO_STREAM_SPLICE_CLOSE_STREAM2 = _Anonymous_70.G_IO_STREAM_SPLICE_CLOSE_STREAM2;
    enum G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = _Anonymous_70.G_IO_STREAM_SPLICE_WAIT_FOR_BOTH;
    alias GEmblemOrigin = _Anonymous_71;
    enum _Anonymous_71
    {
        G_EMBLEM_ORIGIN_UNKNOWN = 0,
        G_EMBLEM_ORIGIN_DEVICE = 1,
        G_EMBLEM_ORIGIN_LIVEMETADATA = 2,
        G_EMBLEM_ORIGIN_TAG = 3,
    }
    enum G_EMBLEM_ORIGIN_UNKNOWN = _Anonymous_71.G_EMBLEM_ORIGIN_UNKNOWN;
    enum G_EMBLEM_ORIGIN_DEVICE = _Anonymous_71.G_EMBLEM_ORIGIN_DEVICE;
    enum G_EMBLEM_ORIGIN_LIVEMETADATA = _Anonymous_71.G_EMBLEM_ORIGIN_LIVEMETADATA;
    enum G_EMBLEM_ORIGIN_TAG = _Anonymous_71.G_EMBLEM_ORIGIN_TAG;
    alias GResolverError = _Anonymous_72;
    enum _Anonymous_72
    {
        G_RESOLVER_ERROR_NOT_FOUND = 0,
        G_RESOLVER_ERROR_TEMPORARY_FAILURE = 1,
        G_RESOLVER_ERROR_INTERNAL = 2,
    }
    enum G_RESOLVER_ERROR_NOT_FOUND = _Anonymous_72.G_RESOLVER_ERROR_NOT_FOUND;
    enum G_RESOLVER_ERROR_TEMPORARY_FAILURE = _Anonymous_72.G_RESOLVER_ERROR_TEMPORARY_FAILURE;
    enum G_RESOLVER_ERROR_INTERNAL = _Anonymous_72.G_RESOLVER_ERROR_INTERNAL;
    alias GResolverRecordType = _Anonymous_73;
    enum _Anonymous_73
    {
        G_RESOLVER_RECORD_SRV = 1,
        G_RESOLVER_RECORD_MX = 2,
        G_RESOLVER_RECORD_TXT = 3,
        G_RESOLVER_RECORD_SOA = 4,
        G_RESOLVER_RECORD_NS = 5,
    }
    enum G_RESOLVER_RECORD_SRV = _Anonymous_73.G_RESOLVER_RECORD_SRV;
    enum G_RESOLVER_RECORD_MX = _Anonymous_73.G_RESOLVER_RECORD_MX;
    enum G_RESOLVER_RECORD_TXT = _Anonymous_73.G_RESOLVER_RECORD_TXT;
    enum G_RESOLVER_RECORD_SOA = _Anonymous_73.G_RESOLVER_RECORD_SOA;
    enum G_RESOLVER_RECORD_NS = _Anonymous_73.G_RESOLVER_RECORD_NS;
    alias GResourceError = _Anonymous_74;
    enum _Anonymous_74
    {
        G_RESOURCE_ERROR_NOT_FOUND = 0,
        G_RESOURCE_ERROR_INTERNAL = 1,
    }
    enum G_RESOURCE_ERROR_NOT_FOUND = _Anonymous_74.G_RESOURCE_ERROR_NOT_FOUND;
    enum G_RESOURCE_ERROR_INTERNAL = _Anonymous_74.G_RESOURCE_ERROR_INTERNAL;
    alias GResourceFlags = _Anonymous_75;
    enum _Anonymous_75
    {
        G_RESOURCE_FLAGS_NONE = 0,
        G_RESOURCE_FLAGS_COMPRESSED = 1,
    }
    enum G_RESOURCE_FLAGS_NONE = _Anonymous_75.G_RESOURCE_FLAGS_NONE;
    enum G_RESOURCE_FLAGS_COMPRESSED = _Anonymous_75.G_RESOURCE_FLAGS_COMPRESSED;
    alias GResourceLookupFlags = _Anonymous_76;
    enum _Anonymous_76
    {
        G_RESOURCE_LOOKUP_FLAGS_NONE = 0,
    }
    enum G_RESOURCE_LOOKUP_FLAGS_NONE = _Anonymous_76.G_RESOURCE_LOOKUP_FLAGS_NONE;
    alias GSocketFamily = _Anonymous_77;
    enum _Anonymous_77
    {
        G_SOCKET_FAMILY_INVALID = 0,
        G_SOCKET_FAMILY_UNIX = 1,
        G_SOCKET_FAMILY_IPV4 = 2,
        G_SOCKET_FAMILY_IPV6 = 10,
    }
    enum G_SOCKET_FAMILY_INVALID = _Anonymous_77.G_SOCKET_FAMILY_INVALID;
    enum G_SOCKET_FAMILY_UNIX = _Anonymous_77.G_SOCKET_FAMILY_UNIX;
    enum G_SOCKET_FAMILY_IPV4 = _Anonymous_77.G_SOCKET_FAMILY_IPV4;
    enum G_SOCKET_FAMILY_IPV6 = _Anonymous_77.G_SOCKET_FAMILY_IPV6;
    alias GSocketType = _Anonymous_78;
    enum _Anonymous_78
    {
        G_SOCKET_TYPE_INVALID = 0,
        G_SOCKET_TYPE_STREAM = 1,
        G_SOCKET_TYPE_DATAGRAM = 2,
        G_SOCKET_TYPE_SEQPACKET = 3,
    }
    enum G_SOCKET_TYPE_INVALID = _Anonymous_78.G_SOCKET_TYPE_INVALID;
    enum G_SOCKET_TYPE_STREAM = _Anonymous_78.G_SOCKET_TYPE_STREAM;
    enum G_SOCKET_TYPE_DATAGRAM = _Anonymous_78.G_SOCKET_TYPE_DATAGRAM;
    enum G_SOCKET_TYPE_SEQPACKET = _Anonymous_78.G_SOCKET_TYPE_SEQPACKET;
    alias GSocketMsgFlags = _Anonymous_79;
    enum _Anonymous_79
    {
        G_SOCKET_MSG_NONE = 0,
        G_SOCKET_MSG_OOB = 1,
        G_SOCKET_MSG_PEEK = 2,
        G_SOCKET_MSG_DONTROUTE = 4,
    }
    enum G_SOCKET_MSG_NONE = _Anonymous_79.G_SOCKET_MSG_NONE;
    enum G_SOCKET_MSG_OOB = _Anonymous_79.G_SOCKET_MSG_OOB;
    enum G_SOCKET_MSG_PEEK = _Anonymous_79.G_SOCKET_MSG_PEEK;
    enum G_SOCKET_MSG_DONTROUTE = _Anonymous_79.G_SOCKET_MSG_DONTROUTE;
    alias GSocketProtocol = _Anonymous_80;
    enum _Anonymous_80
    {
        G_SOCKET_PROTOCOL_UNKNOWN = -1,
        G_SOCKET_PROTOCOL_DEFAULT = 0,
        G_SOCKET_PROTOCOL_TCP = 6,
        G_SOCKET_PROTOCOL_UDP = 17,
        G_SOCKET_PROTOCOL_SCTP = 132,
    }
    enum G_SOCKET_PROTOCOL_UNKNOWN = _Anonymous_80.G_SOCKET_PROTOCOL_UNKNOWN;
    enum G_SOCKET_PROTOCOL_DEFAULT = _Anonymous_80.G_SOCKET_PROTOCOL_DEFAULT;
    enum G_SOCKET_PROTOCOL_TCP = _Anonymous_80.G_SOCKET_PROTOCOL_TCP;
    enum G_SOCKET_PROTOCOL_UDP = _Anonymous_80.G_SOCKET_PROTOCOL_UDP;
    enum G_SOCKET_PROTOCOL_SCTP = _Anonymous_80.G_SOCKET_PROTOCOL_SCTP;
    alias GZlibCompressorFormat = _Anonymous_81;
    enum _Anonymous_81
    {
        G_ZLIB_COMPRESSOR_FORMAT_ZLIB = 0,
        G_ZLIB_COMPRESSOR_FORMAT_GZIP = 1,
        G_ZLIB_COMPRESSOR_FORMAT_RAW = 2,
    }
    enum G_ZLIB_COMPRESSOR_FORMAT_ZLIB = _Anonymous_81.G_ZLIB_COMPRESSOR_FORMAT_ZLIB;
    enum G_ZLIB_COMPRESSOR_FORMAT_GZIP = _Anonymous_81.G_ZLIB_COMPRESSOR_FORMAT_GZIP;
    enum G_ZLIB_COMPRESSOR_FORMAT_RAW = _Anonymous_81.G_ZLIB_COMPRESSOR_FORMAT_RAW;
    alias GUnixSocketAddressType = _Anonymous_82;
    enum _Anonymous_82
    {
        G_UNIX_SOCKET_ADDRESS_INVALID = 0,
        G_UNIX_SOCKET_ADDRESS_ANONYMOUS = 1,
        G_UNIX_SOCKET_ADDRESS_PATH = 2,
        G_UNIX_SOCKET_ADDRESS_ABSTRACT = 3,
        G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4,
    }
    enum G_UNIX_SOCKET_ADDRESS_INVALID = _Anonymous_82.G_UNIX_SOCKET_ADDRESS_INVALID;
    enum G_UNIX_SOCKET_ADDRESS_ANONYMOUS = _Anonymous_82.G_UNIX_SOCKET_ADDRESS_ANONYMOUS;
    enum G_UNIX_SOCKET_ADDRESS_PATH = _Anonymous_82.G_UNIX_SOCKET_ADDRESS_PATH;
    enum G_UNIX_SOCKET_ADDRESS_ABSTRACT = _Anonymous_82.G_UNIX_SOCKET_ADDRESS_ABSTRACT;
    enum G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = _Anonymous_82.G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED;
    alias GBusType = _Anonymous_83;
    enum _Anonymous_83
    {
        G_BUS_TYPE_STARTER = -1,
        G_BUS_TYPE_NONE = 0,
        G_BUS_TYPE_SYSTEM = 1,
        G_BUS_TYPE_SESSION = 2,
    }
    enum G_BUS_TYPE_STARTER = _Anonymous_83.G_BUS_TYPE_STARTER;
    enum G_BUS_TYPE_NONE = _Anonymous_83.G_BUS_TYPE_NONE;
    enum G_BUS_TYPE_SYSTEM = _Anonymous_83.G_BUS_TYPE_SYSTEM;
    enum G_BUS_TYPE_SESSION = _Anonymous_83.G_BUS_TYPE_SESSION;
    alias GBusNameOwnerFlags = _Anonymous_84;
    enum _Anonymous_84
    {
        G_BUS_NAME_OWNER_FLAGS_NONE = 0,
        G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1,
        G_BUS_NAME_OWNER_FLAGS_REPLACE = 2,
        G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE = 4,
    }
    enum G_BUS_NAME_OWNER_FLAGS_NONE = _Anonymous_84.G_BUS_NAME_OWNER_FLAGS_NONE;
    enum G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = _Anonymous_84.G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT;
    enum G_BUS_NAME_OWNER_FLAGS_REPLACE = _Anonymous_84.G_BUS_NAME_OWNER_FLAGS_REPLACE;
    enum G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE = _Anonymous_84.G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE;
    alias GBusNameWatcherFlags = _Anonymous_85;
    enum _Anonymous_85
    {
        G_BUS_NAME_WATCHER_FLAGS_NONE = 0,
        G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1,
    }
    enum G_BUS_NAME_WATCHER_FLAGS_NONE = _Anonymous_85.G_BUS_NAME_WATCHER_FLAGS_NONE;
    enum G_BUS_NAME_WATCHER_FLAGS_AUTO_START = _Anonymous_85.G_BUS_NAME_WATCHER_FLAGS_AUTO_START;
    alias GDBusProxyFlags = _Anonymous_86;
    enum _Anonymous_86
    {
        G_DBUS_PROXY_FLAGS_NONE = 0,
        G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1,
        G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 2,
        G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 4,
        G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = 8,
        G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = 16,
    }
    enum G_DBUS_PROXY_FLAGS_NONE = _Anonymous_86.G_DBUS_PROXY_FLAGS_NONE;
    enum G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = _Anonymous_86.G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES;
    enum G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = _Anonymous_86.G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS;
    enum G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = _Anonymous_86.G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START;
    enum G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = _Anonymous_86.G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES;
    enum G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = _Anonymous_86.G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION;
    alias GDBusError = _Anonymous_87;
    enum _Anonymous_87
    {
        G_DBUS_ERROR_FAILED = 0,
        G_DBUS_ERROR_NO_MEMORY = 1,
        G_DBUS_ERROR_SERVICE_UNKNOWN = 2,
        G_DBUS_ERROR_NAME_HAS_NO_OWNER = 3,
        G_DBUS_ERROR_NO_REPLY = 4,
        G_DBUS_ERROR_IO_ERROR = 5,
        G_DBUS_ERROR_BAD_ADDRESS = 6,
        G_DBUS_ERROR_NOT_SUPPORTED = 7,
        G_DBUS_ERROR_LIMITS_EXCEEDED = 8,
        G_DBUS_ERROR_ACCESS_DENIED = 9,
        G_DBUS_ERROR_AUTH_FAILED = 10,
        G_DBUS_ERROR_NO_SERVER = 11,
        G_DBUS_ERROR_TIMEOUT = 12,
        G_DBUS_ERROR_NO_NETWORK = 13,
        G_DBUS_ERROR_ADDRESS_IN_USE = 14,
        G_DBUS_ERROR_DISCONNECTED = 15,
        G_DBUS_ERROR_INVALID_ARGS = 16,
        G_DBUS_ERROR_FILE_NOT_FOUND = 17,
        G_DBUS_ERROR_FILE_EXISTS = 18,
        G_DBUS_ERROR_UNKNOWN_METHOD = 19,
        G_DBUS_ERROR_TIMED_OUT = 20,
        G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = 21,
        G_DBUS_ERROR_MATCH_RULE_INVALID = 22,
        G_DBUS_ERROR_SPAWN_EXEC_FAILED = 23,
        G_DBUS_ERROR_SPAWN_FORK_FAILED = 24,
        G_DBUS_ERROR_SPAWN_CHILD_EXITED = 25,
        G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = 26,
        G_DBUS_ERROR_SPAWN_FAILED = 27,
        G_DBUS_ERROR_SPAWN_SETUP_FAILED = 28,
        G_DBUS_ERROR_SPAWN_CONFIG_INVALID = 29,
        G_DBUS_ERROR_SPAWN_SERVICE_INVALID = 30,
        G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = 31,
        G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = 32,
        G_DBUS_ERROR_SPAWN_FILE_INVALID = 33,
        G_DBUS_ERROR_SPAWN_NO_MEMORY = 34,
        G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = 35,
        G_DBUS_ERROR_INVALID_SIGNATURE = 36,
        G_DBUS_ERROR_INVALID_FILE_CONTENT = 37,
        G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38,
        G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = 39,
        G_DBUS_ERROR_OBJECT_PATH_IN_USE = 40,
        G_DBUS_ERROR_UNKNOWN_OBJECT = 41,
        G_DBUS_ERROR_UNKNOWN_INTERFACE = 42,
        G_DBUS_ERROR_UNKNOWN_PROPERTY = 43,
        G_DBUS_ERROR_PROPERTY_READ_ONLY = 44,
    }
    enum G_DBUS_ERROR_FAILED = _Anonymous_87.G_DBUS_ERROR_FAILED;
    enum G_DBUS_ERROR_NO_MEMORY = _Anonymous_87.G_DBUS_ERROR_NO_MEMORY;
    enum G_DBUS_ERROR_SERVICE_UNKNOWN = _Anonymous_87.G_DBUS_ERROR_SERVICE_UNKNOWN;
    enum G_DBUS_ERROR_NAME_HAS_NO_OWNER = _Anonymous_87.G_DBUS_ERROR_NAME_HAS_NO_OWNER;
    enum G_DBUS_ERROR_NO_REPLY = _Anonymous_87.G_DBUS_ERROR_NO_REPLY;
    enum G_DBUS_ERROR_IO_ERROR = _Anonymous_87.G_DBUS_ERROR_IO_ERROR;
    enum G_DBUS_ERROR_BAD_ADDRESS = _Anonymous_87.G_DBUS_ERROR_BAD_ADDRESS;
    enum G_DBUS_ERROR_NOT_SUPPORTED = _Anonymous_87.G_DBUS_ERROR_NOT_SUPPORTED;
    enum G_DBUS_ERROR_LIMITS_EXCEEDED = _Anonymous_87.G_DBUS_ERROR_LIMITS_EXCEEDED;
    enum G_DBUS_ERROR_ACCESS_DENIED = _Anonymous_87.G_DBUS_ERROR_ACCESS_DENIED;
    enum G_DBUS_ERROR_AUTH_FAILED = _Anonymous_87.G_DBUS_ERROR_AUTH_FAILED;
    enum G_DBUS_ERROR_NO_SERVER = _Anonymous_87.G_DBUS_ERROR_NO_SERVER;
    enum G_DBUS_ERROR_TIMEOUT = _Anonymous_87.G_DBUS_ERROR_TIMEOUT;
    enum G_DBUS_ERROR_NO_NETWORK = _Anonymous_87.G_DBUS_ERROR_NO_NETWORK;
    enum G_DBUS_ERROR_ADDRESS_IN_USE = _Anonymous_87.G_DBUS_ERROR_ADDRESS_IN_USE;
    enum G_DBUS_ERROR_DISCONNECTED = _Anonymous_87.G_DBUS_ERROR_DISCONNECTED;
    enum G_DBUS_ERROR_INVALID_ARGS = _Anonymous_87.G_DBUS_ERROR_INVALID_ARGS;
    enum G_DBUS_ERROR_FILE_NOT_FOUND = _Anonymous_87.G_DBUS_ERROR_FILE_NOT_FOUND;
    enum G_DBUS_ERROR_FILE_EXISTS = _Anonymous_87.G_DBUS_ERROR_FILE_EXISTS;
    enum G_DBUS_ERROR_UNKNOWN_METHOD = _Anonymous_87.G_DBUS_ERROR_UNKNOWN_METHOD;
    enum G_DBUS_ERROR_TIMED_OUT = _Anonymous_87.G_DBUS_ERROR_TIMED_OUT;
    enum G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = _Anonymous_87.G_DBUS_ERROR_MATCH_RULE_NOT_FOUND;
    enum G_DBUS_ERROR_MATCH_RULE_INVALID = _Anonymous_87.G_DBUS_ERROR_MATCH_RULE_INVALID;
    enum G_DBUS_ERROR_SPAWN_EXEC_FAILED = _Anonymous_87.G_DBUS_ERROR_SPAWN_EXEC_FAILED;
    enum G_DBUS_ERROR_SPAWN_FORK_FAILED = _Anonymous_87.G_DBUS_ERROR_SPAWN_FORK_FAILED;
    enum G_DBUS_ERROR_SPAWN_CHILD_EXITED = _Anonymous_87.G_DBUS_ERROR_SPAWN_CHILD_EXITED;
    enum G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = _Anonymous_87.G_DBUS_ERROR_SPAWN_CHILD_SIGNALED;
    enum G_DBUS_ERROR_SPAWN_FAILED = _Anonymous_87.G_DBUS_ERROR_SPAWN_FAILED;
    enum G_DBUS_ERROR_SPAWN_SETUP_FAILED = _Anonymous_87.G_DBUS_ERROR_SPAWN_SETUP_FAILED;
    enum G_DBUS_ERROR_SPAWN_CONFIG_INVALID = _Anonymous_87.G_DBUS_ERROR_SPAWN_CONFIG_INVALID;
    enum G_DBUS_ERROR_SPAWN_SERVICE_INVALID = _Anonymous_87.G_DBUS_ERROR_SPAWN_SERVICE_INVALID;
    enum G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = _Anonymous_87.G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND;
    enum G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = _Anonymous_87.G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID;
    enum G_DBUS_ERROR_SPAWN_FILE_INVALID = _Anonymous_87.G_DBUS_ERROR_SPAWN_FILE_INVALID;
    enum G_DBUS_ERROR_SPAWN_NO_MEMORY = _Anonymous_87.G_DBUS_ERROR_SPAWN_NO_MEMORY;
    enum G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = _Anonymous_87.G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN;
    enum G_DBUS_ERROR_INVALID_SIGNATURE = _Anonymous_87.G_DBUS_ERROR_INVALID_SIGNATURE;
    enum G_DBUS_ERROR_INVALID_FILE_CONTENT = _Anonymous_87.G_DBUS_ERROR_INVALID_FILE_CONTENT;
    enum G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = _Anonymous_87.G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN;
    enum G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = _Anonymous_87.G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN;
    enum G_DBUS_ERROR_OBJECT_PATH_IN_USE = _Anonymous_87.G_DBUS_ERROR_OBJECT_PATH_IN_USE;
    enum G_DBUS_ERROR_UNKNOWN_OBJECT = _Anonymous_87.G_DBUS_ERROR_UNKNOWN_OBJECT;
    enum G_DBUS_ERROR_UNKNOWN_INTERFACE = _Anonymous_87.G_DBUS_ERROR_UNKNOWN_INTERFACE;
    enum G_DBUS_ERROR_UNKNOWN_PROPERTY = _Anonymous_87.G_DBUS_ERROR_UNKNOWN_PROPERTY;
    enum G_DBUS_ERROR_PROPERTY_READ_ONLY = _Anonymous_87.G_DBUS_ERROR_PROPERTY_READ_ONLY;
    alias GDBusConnectionFlags = _Anonymous_88;
    enum _Anonymous_88
    {
        G_DBUS_CONNECTION_FLAGS_NONE = 0,
        G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1,
        G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 2,
        G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 4,
        G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 8,
        G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 16,
    }
    enum G_DBUS_CONNECTION_FLAGS_NONE = _Anonymous_88.G_DBUS_CONNECTION_FLAGS_NONE;
    enum G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = _Anonymous_88.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT;
    enum G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = _Anonymous_88.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER;
    enum G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = _Anonymous_88.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS;
    enum G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = _Anonymous_88.G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION;
    enum G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = _Anonymous_88.G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING;
    alias GDBusCapabilityFlags = _Anonymous_89;
    enum _Anonymous_89
    {
        G_DBUS_CAPABILITY_FLAGS_NONE = 0,
        G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1,
    }
    enum G_DBUS_CAPABILITY_FLAGS_NONE = _Anonymous_89.G_DBUS_CAPABILITY_FLAGS_NONE;
    enum G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = _Anonymous_89.G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING;
    alias GDBusCallFlags = _Anonymous_90;
    enum _Anonymous_90
    {
        G_DBUS_CALL_FLAGS_NONE = 0,
        G_DBUS_CALL_FLAGS_NO_AUTO_START = 1,
        G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 2,
    }
    enum G_DBUS_CALL_FLAGS_NONE = _Anonymous_90.G_DBUS_CALL_FLAGS_NONE;
    enum G_DBUS_CALL_FLAGS_NO_AUTO_START = _Anonymous_90.G_DBUS_CALL_FLAGS_NO_AUTO_START;
    enum G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = _Anonymous_90.G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION;
    alias GDBusMessageType = _Anonymous_91;
    enum _Anonymous_91
    {
        G_DBUS_MESSAGE_TYPE_INVALID = 0,
        G_DBUS_MESSAGE_TYPE_METHOD_CALL = 1,
        G_DBUS_MESSAGE_TYPE_METHOD_RETURN = 2,
        G_DBUS_MESSAGE_TYPE_ERROR = 3,
        G_DBUS_MESSAGE_TYPE_SIGNAL = 4,
    }
    enum G_DBUS_MESSAGE_TYPE_INVALID = _Anonymous_91.G_DBUS_MESSAGE_TYPE_INVALID;
    enum G_DBUS_MESSAGE_TYPE_METHOD_CALL = _Anonymous_91.G_DBUS_MESSAGE_TYPE_METHOD_CALL;
    enum G_DBUS_MESSAGE_TYPE_METHOD_RETURN = _Anonymous_91.G_DBUS_MESSAGE_TYPE_METHOD_RETURN;
    enum G_DBUS_MESSAGE_TYPE_ERROR = _Anonymous_91.G_DBUS_MESSAGE_TYPE_ERROR;
    enum G_DBUS_MESSAGE_TYPE_SIGNAL = _Anonymous_91.G_DBUS_MESSAGE_TYPE_SIGNAL;
    alias GDBusMessageFlags = _Anonymous_92;
    enum _Anonymous_92
    {
        G_DBUS_MESSAGE_FLAGS_NONE = 0,
        G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1,
        G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 2,
        G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 4,
    }
    enum G_DBUS_MESSAGE_FLAGS_NONE = _Anonymous_92.G_DBUS_MESSAGE_FLAGS_NONE;
    enum G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = _Anonymous_92.G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED;
    enum G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = _Anonymous_92.G_DBUS_MESSAGE_FLAGS_NO_AUTO_START;
    enum G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = _Anonymous_92.G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION;
    alias GDBusMessageHeaderField = _Anonymous_93;
    enum _Anonymous_93
    {
        G_DBUS_MESSAGE_HEADER_FIELD_INVALID = 0,
        G_DBUS_MESSAGE_HEADER_FIELD_PATH = 1,
        G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = 2,
        G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = 3,
        G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = 4,
        G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5,
        G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = 6,
        G_DBUS_MESSAGE_HEADER_FIELD_SENDER = 7,
        G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = 8,
        G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9,
    }
    enum G_DBUS_MESSAGE_HEADER_FIELD_INVALID = _Anonymous_93.G_DBUS_MESSAGE_HEADER_FIELD_INVALID;
    enum G_DBUS_MESSAGE_HEADER_FIELD_PATH = _Anonymous_93.G_DBUS_MESSAGE_HEADER_FIELD_PATH;
    enum G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = _Anonymous_93.G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE;
    enum G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = _Anonymous_93.G_DBUS_MESSAGE_HEADER_FIELD_MEMBER;
    enum G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = _Anonymous_93.G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME;
    enum G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = _Anonymous_93.G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL;
    enum G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = _Anonymous_93.G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION;
    enum G_DBUS_MESSAGE_HEADER_FIELD_SENDER = _Anonymous_93.G_DBUS_MESSAGE_HEADER_FIELD_SENDER;
    enum G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = _Anonymous_93.G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE;
    enum G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = _Anonymous_93.G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS;
    alias GDBusPropertyInfoFlags = _Anonymous_94;
    enum _Anonymous_94
    {
        G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0,
        G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1,
        G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2,
    }
    enum G_DBUS_PROPERTY_INFO_FLAGS_NONE = _Anonymous_94.G_DBUS_PROPERTY_INFO_FLAGS_NONE;
    enum G_DBUS_PROPERTY_INFO_FLAGS_READABLE = _Anonymous_94.G_DBUS_PROPERTY_INFO_FLAGS_READABLE;
    enum G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = _Anonymous_94.G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE;
    alias GDBusSubtreeFlags = _Anonymous_95;
    enum _Anonymous_95
    {
        G_DBUS_SUBTREE_FLAGS_NONE = 0,
        G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1,
    }
    enum G_DBUS_SUBTREE_FLAGS_NONE = _Anonymous_95.G_DBUS_SUBTREE_FLAGS_NONE;
    enum G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = _Anonymous_95.G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES;
    alias GDBusServerFlags = _Anonymous_96;
    enum _Anonymous_96
    {
        G_DBUS_SERVER_FLAGS_NONE = 0,
        G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1,
        G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 2,
    }
    enum G_DBUS_SERVER_FLAGS_NONE = _Anonymous_96.G_DBUS_SERVER_FLAGS_NONE;
    enum G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = _Anonymous_96.G_DBUS_SERVER_FLAGS_RUN_IN_THREAD;
    enum G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = _Anonymous_96.G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS;
    alias GDBusSignalFlags = _Anonymous_97;
    enum _Anonymous_97
    {
        G_DBUS_SIGNAL_FLAGS_NONE = 0,
        G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = 1,
        G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = 2,
        G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = 4,
    }
    enum G_DBUS_SIGNAL_FLAGS_NONE = _Anonymous_97.G_DBUS_SIGNAL_FLAGS_NONE;
    enum G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = _Anonymous_97.G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE;
    enum G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = _Anonymous_97.G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE;
    enum G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = _Anonymous_97.G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH;
    alias GDBusSendMessageFlags = _Anonymous_98;
    enum _Anonymous_98
    {
        G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0,
        G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1,
    }
    enum G_DBUS_SEND_MESSAGE_FLAGS_NONE = _Anonymous_98.G_DBUS_SEND_MESSAGE_FLAGS_NONE;
    enum G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = _Anonymous_98.G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL;
    alias GCredentialsType = _Anonymous_99;
    enum _Anonymous_99
    {
        G_CREDENTIALS_TYPE_INVALID = 0,
        G_CREDENTIALS_TYPE_LINUX_UCRED = 1,
        G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = 2,
        G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = 3,
        G_CREDENTIALS_TYPE_SOLARIS_UCRED = 4,
        G_CREDENTIALS_TYPE_NETBSD_UNPCBID = 5,
    }
    enum G_CREDENTIALS_TYPE_INVALID = _Anonymous_99.G_CREDENTIALS_TYPE_INVALID;
    enum G_CREDENTIALS_TYPE_LINUX_UCRED = _Anonymous_99.G_CREDENTIALS_TYPE_LINUX_UCRED;
    enum G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = _Anonymous_99.G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED;
    enum G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = _Anonymous_99.G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED;
    enum G_CREDENTIALS_TYPE_SOLARIS_UCRED = _Anonymous_99.G_CREDENTIALS_TYPE_SOLARIS_UCRED;
    enum G_CREDENTIALS_TYPE_NETBSD_UNPCBID = _Anonymous_99.G_CREDENTIALS_TYPE_NETBSD_UNPCBID;
    alias GDBusMessageByteOrder = _Anonymous_100;
    enum _Anonymous_100
    {
        G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 66,
        G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 108,
    }
    enum G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = _Anonymous_100.G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN;
    enum G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = _Anonymous_100.G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN;
    alias GApplicationFlags = _Anonymous_101;
    enum _Anonymous_101
    {
        G_APPLICATION_FLAGS_NONE = 0,
        G_APPLICATION_IS_SERVICE = 1,
        G_APPLICATION_IS_LAUNCHER = 2,
        G_APPLICATION_HANDLES_OPEN = 4,
        G_APPLICATION_HANDLES_COMMAND_LINE = 8,
        G_APPLICATION_SEND_ENVIRONMENT = 16,
        G_APPLICATION_NON_UNIQUE = 32,
        G_APPLICATION_CAN_OVERRIDE_APP_ID = 64,
    }
    enum G_APPLICATION_FLAGS_NONE = _Anonymous_101.G_APPLICATION_FLAGS_NONE;
    enum G_APPLICATION_IS_SERVICE = _Anonymous_101.G_APPLICATION_IS_SERVICE;
    enum G_APPLICATION_IS_LAUNCHER = _Anonymous_101.G_APPLICATION_IS_LAUNCHER;
    enum G_APPLICATION_HANDLES_OPEN = _Anonymous_101.G_APPLICATION_HANDLES_OPEN;
    enum G_APPLICATION_HANDLES_COMMAND_LINE = _Anonymous_101.G_APPLICATION_HANDLES_COMMAND_LINE;
    enum G_APPLICATION_SEND_ENVIRONMENT = _Anonymous_101.G_APPLICATION_SEND_ENVIRONMENT;
    enum G_APPLICATION_NON_UNIQUE = _Anonymous_101.G_APPLICATION_NON_UNIQUE;
    enum G_APPLICATION_CAN_OVERRIDE_APP_ID = _Anonymous_101.G_APPLICATION_CAN_OVERRIDE_APP_ID;
    alias GTlsError = _Anonymous_102;
    enum _Anonymous_102
    {
        G_TLS_ERROR_UNAVAILABLE = 0,
        G_TLS_ERROR_MISC = 1,
        G_TLS_ERROR_BAD_CERTIFICATE = 2,
        G_TLS_ERROR_NOT_TLS = 3,
        G_TLS_ERROR_HANDSHAKE = 4,
        G_TLS_ERROR_CERTIFICATE_REQUIRED = 5,
        G_TLS_ERROR_EOF = 6,
    }
    enum G_TLS_ERROR_UNAVAILABLE = _Anonymous_102.G_TLS_ERROR_UNAVAILABLE;
    enum G_TLS_ERROR_MISC = _Anonymous_102.G_TLS_ERROR_MISC;
    enum G_TLS_ERROR_BAD_CERTIFICATE = _Anonymous_102.G_TLS_ERROR_BAD_CERTIFICATE;
    enum G_TLS_ERROR_NOT_TLS = _Anonymous_102.G_TLS_ERROR_NOT_TLS;
    enum G_TLS_ERROR_HANDSHAKE = _Anonymous_102.G_TLS_ERROR_HANDSHAKE;
    enum G_TLS_ERROR_CERTIFICATE_REQUIRED = _Anonymous_102.G_TLS_ERROR_CERTIFICATE_REQUIRED;
    enum G_TLS_ERROR_EOF = _Anonymous_102.G_TLS_ERROR_EOF;
    alias GTlsCertificateFlags = _Anonymous_103;
    enum _Anonymous_103
    {
        G_TLS_CERTIFICATE_UNKNOWN_CA = 1,
        G_TLS_CERTIFICATE_BAD_IDENTITY = 2,
        G_TLS_CERTIFICATE_NOT_ACTIVATED = 4,
        G_TLS_CERTIFICATE_EXPIRED = 8,
        G_TLS_CERTIFICATE_REVOKED = 16,
        G_TLS_CERTIFICATE_INSECURE = 32,
        G_TLS_CERTIFICATE_GENERIC_ERROR = 64,
        G_TLS_CERTIFICATE_VALIDATE_ALL = 127,
    }
    enum G_TLS_CERTIFICATE_UNKNOWN_CA = _Anonymous_103.G_TLS_CERTIFICATE_UNKNOWN_CA;
    enum G_TLS_CERTIFICATE_BAD_IDENTITY = _Anonymous_103.G_TLS_CERTIFICATE_BAD_IDENTITY;
    enum G_TLS_CERTIFICATE_NOT_ACTIVATED = _Anonymous_103.G_TLS_CERTIFICATE_NOT_ACTIVATED;
    enum G_TLS_CERTIFICATE_EXPIRED = _Anonymous_103.G_TLS_CERTIFICATE_EXPIRED;
    enum G_TLS_CERTIFICATE_REVOKED = _Anonymous_103.G_TLS_CERTIFICATE_REVOKED;
    enum G_TLS_CERTIFICATE_INSECURE = _Anonymous_103.G_TLS_CERTIFICATE_INSECURE;
    enum G_TLS_CERTIFICATE_GENERIC_ERROR = _Anonymous_103.G_TLS_CERTIFICATE_GENERIC_ERROR;
    enum G_TLS_CERTIFICATE_VALIDATE_ALL = _Anonymous_103.G_TLS_CERTIFICATE_VALIDATE_ALL;
    alias GTlsAuthenticationMode = _Anonymous_104;
    enum _Anonymous_104
    {
        G_TLS_AUTHENTICATION_NONE = 0,
        G_TLS_AUTHENTICATION_REQUESTED = 1,
        G_TLS_AUTHENTICATION_REQUIRED = 2,
    }
    enum G_TLS_AUTHENTICATION_NONE = _Anonymous_104.G_TLS_AUTHENTICATION_NONE;
    enum G_TLS_AUTHENTICATION_REQUESTED = _Anonymous_104.G_TLS_AUTHENTICATION_REQUESTED;
    enum G_TLS_AUTHENTICATION_REQUIRED = _Anonymous_104.G_TLS_AUTHENTICATION_REQUIRED;
    alias GTlsRehandshakeMode = _Anonymous_105;
    enum _Anonymous_105
    {
        G_TLS_REHANDSHAKE_NEVER = 0,
        G_TLS_REHANDSHAKE_SAFELY = 1,
        G_TLS_REHANDSHAKE_UNSAFELY = 2,
    }
    enum G_TLS_REHANDSHAKE_NEVER = _Anonymous_105.G_TLS_REHANDSHAKE_NEVER;
    enum G_TLS_REHANDSHAKE_SAFELY = _Anonymous_105.G_TLS_REHANDSHAKE_SAFELY;
    enum G_TLS_REHANDSHAKE_UNSAFELY = _Anonymous_105.G_TLS_REHANDSHAKE_UNSAFELY;
    alias GTlsPasswordFlags = _GTlsPasswordFlags;
    enum _GTlsPasswordFlags
    {
        G_TLS_PASSWORD_NONE = 0,
        G_TLS_PASSWORD_RETRY = 2,
        G_TLS_PASSWORD_MANY_TRIES = 4,
        G_TLS_PASSWORD_FINAL_TRY = 8,
    }
    enum G_TLS_PASSWORD_NONE = _GTlsPasswordFlags.G_TLS_PASSWORD_NONE;
    enum G_TLS_PASSWORD_RETRY = _GTlsPasswordFlags.G_TLS_PASSWORD_RETRY;
    enum G_TLS_PASSWORD_MANY_TRIES = _GTlsPasswordFlags.G_TLS_PASSWORD_MANY_TRIES;
    enum G_TLS_PASSWORD_FINAL_TRY = _GTlsPasswordFlags.G_TLS_PASSWORD_FINAL_TRY;
    alias GTlsInteractionResult = _Anonymous_106;
    enum _Anonymous_106
    {
        G_TLS_INTERACTION_UNHANDLED = 0,
        G_TLS_INTERACTION_HANDLED = 1,
        G_TLS_INTERACTION_FAILED = 2,
    }
    enum G_TLS_INTERACTION_UNHANDLED = _Anonymous_106.G_TLS_INTERACTION_UNHANDLED;
    enum G_TLS_INTERACTION_HANDLED = _Anonymous_106.G_TLS_INTERACTION_HANDLED;
    enum G_TLS_INTERACTION_FAILED = _Anonymous_106.G_TLS_INTERACTION_FAILED;
    alias GDBusInterfaceSkeletonFlags = _Anonymous_107;
    enum _Anonymous_107
    {
        G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0,
        G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1,
    }
    enum G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = _Anonymous_107.G_DBUS_INTERFACE_SKELETON_FLAGS_NONE;
    enum G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = _Anonymous_107.G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD;
    alias GDBusObjectManagerClientFlags = _Anonymous_108;
    enum _Anonymous_108
    {
        G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0,
        G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1,
    }
    enum G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = _Anonymous_108.G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE;
    enum G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = _Anonymous_108.G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START;
    alias GTlsDatabaseVerifyFlags = _Anonymous_109;
    enum _Anonymous_109
    {
        G_TLS_DATABASE_VERIFY_NONE = 0,
    }
    enum G_TLS_DATABASE_VERIFY_NONE = _Anonymous_109.G_TLS_DATABASE_VERIFY_NONE;
    alias GTlsDatabaseLookupFlags = _Anonymous_110;
    enum _Anonymous_110
    {
        G_TLS_DATABASE_LOOKUP_NONE = 0,
        G_TLS_DATABASE_LOOKUP_KEYPAIR = 1,
    }
    enum G_TLS_DATABASE_LOOKUP_NONE = _Anonymous_110.G_TLS_DATABASE_LOOKUP_NONE;
    enum G_TLS_DATABASE_LOOKUP_KEYPAIR = _Anonymous_110.G_TLS_DATABASE_LOOKUP_KEYPAIR;
    alias GTlsCertificateRequestFlags = _Anonymous_111;
    enum _Anonymous_111
    {
        G_TLS_CERTIFICATE_REQUEST_NONE = 0,
    }
    enum G_TLS_CERTIFICATE_REQUEST_NONE = _Anonymous_111.G_TLS_CERTIFICATE_REQUEST_NONE;
    alias GIOModuleScopeFlags = _Anonymous_112;
    enum _Anonymous_112
    {
        G_IO_MODULE_SCOPE_NONE = 0,
        G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = 1,
    }
    enum G_IO_MODULE_SCOPE_NONE = _Anonymous_112.G_IO_MODULE_SCOPE_NONE;
    enum G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = _Anonymous_112.G_IO_MODULE_SCOPE_BLOCK_DUPLICATES;
    alias GSocketClientEvent = _Anonymous_113;
    enum _Anonymous_113
    {
        G_SOCKET_CLIENT_RESOLVING = 0,
        G_SOCKET_CLIENT_RESOLVED = 1,
        G_SOCKET_CLIENT_CONNECTING = 2,
        G_SOCKET_CLIENT_CONNECTED = 3,
        G_SOCKET_CLIENT_PROXY_NEGOTIATING = 4,
        G_SOCKET_CLIENT_PROXY_NEGOTIATED = 5,
        G_SOCKET_CLIENT_TLS_HANDSHAKING = 6,
        G_SOCKET_CLIENT_TLS_HANDSHAKED = 7,
        G_SOCKET_CLIENT_COMPLETE = 8,
    }
    enum G_SOCKET_CLIENT_RESOLVING = _Anonymous_113.G_SOCKET_CLIENT_RESOLVING;
    enum G_SOCKET_CLIENT_RESOLVED = _Anonymous_113.G_SOCKET_CLIENT_RESOLVED;
    enum G_SOCKET_CLIENT_CONNECTING = _Anonymous_113.G_SOCKET_CLIENT_CONNECTING;
    enum G_SOCKET_CLIENT_CONNECTED = _Anonymous_113.G_SOCKET_CLIENT_CONNECTED;
    enum G_SOCKET_CLIENT_PROXY_NEGOTIATING = _Anonymous_113.G_SOCKET_CLIENT_PROXY_NEGOTIATING;
    enum G_SOCKET_CLIENT_PROXY_NEGOTIATED = _Anonymous_113.G_SOCKET_CLIENT_PROXY_NEGOTIATED;
    enum G_SOCKET_CLIENT_TLS_HANDSHAKING = _Anonymous_113.G_SOCKET_CLIENT_TLS_HANDSHAKING;
    enum G_SOCKET_CLIENT_TLS_HANDSHAKED = _Anonymous_113.G_SOCKET_CLIENT_TLS_HANDSHAKED;
    enum G_SOCKET_CLIENT_COMPLETE = _Anonymous_113.G_SOCKET_CLIENT_COMPLETE;
    alias GSocketListenerEvent = _Anonymous_114;
    enum _Anonymous_114
    {
        G_SOCKET_LISTENER_BINDING = 0,
        G_SOCKET_LISTENER_BOUND = 1,
        G_SOCKET_LISTENER_LISTENING = 2,
        G_SOCKET_LISTENER_LISTENED = 3,
    }
    enum G_SOCKET_LISTENER_BINDING = _Anonymous_114.G_SOCKET_LISTENER_BINDING;
    enum G_SOCKET_LISTENER_BOUND = _Anonymous_114.G_SOCKET_LISTENER_BOUND;
    enum G_SOCKET_LISTENER_LISTENING = _Anonymous_114.G_SOCKET_LISTENER_LISTENING;
    enum G_SOCKET_LISTENER_LISTENED = _Anonymous_114.G_SOCKET_LISTENER_LISTENED;
    alias GTestDBusFlags = _Anonymous_115;
    enum _Anonymous_115
    {
        G_TEST_DBUS_NONE = 0,
    }
    enum G_TEST_DBUS_NONE = _Anonymous_115.G_TEST_DBUS_NONE;
    alias GSubprocessFlags = _Anonymous_116;
    enum _Anonymous_116
    {
        G_SUBPROCESS_FLAGS_NONE = 0,
        G_SUBPROCESS_FLAGS_STDIN_PIPE = 1,
        G_SUBPROCESS_FLAGS_STDIN_INHERIT = 2,
        G_SUBPROCESS_FLAGS_STDOUT_PIPE = 4,
        G_SUBPROCESS_FLAGS_STDOUT_SILENCE = 8,
        G_SUBPROCESS_FLAGS_STDERR_PIPE = 16,
        G_SUBPROCESS_FLAGS_STDERR_SILENCE = 32,
        G_SUBPROCESS_FLAGS_STDERR_MERGE = 64,
        G_SUBPROCESS_FLAGS_INHERIT_FDS = 128,
    }
    enum G_SUBPROCESS_FLAGS_NONE = _Anonymous_116.G_SUBPROCESS_FLAGS_NONE;
    enum G_SUBPROCESS_FLAGS_STDIN_PIPE = _Anonymous_116.G_SUBPROCESS_FLAGS_STDIN_PIPE;
    enum G_SUBPROCESS_FLAGS_STDIN_INHERIT = _Anonymous_116.G_SUBPROCESS_FLAGS_STDIN_INHERIT;
    enum G_SUBPROCESS_FLAGS_STDOUT_PIPE = _Anonymous_116.G_SUBPROCESS_FLAGS_STDOUT_PIPE;
    enum G_SUBPROCESS_FLAGS_STDOUT_SILENCE = _Anonymous_116.G_SUBPROCESS_FLAGS_STDOUT_SILENCE;
    enum G_SUBPROCESS_FLAGS_STDERR_PIPE = _Anonymous_116.G_SUBPROCESS_FLAGS_STDERR_PIPE;
    enum G_SUBPROCESS_FLAGS_STDERR_SILENCE = _Anonymous_116.G_SUBPROCESS_FLAGS_STDERR_SILENCE;
    enum G_SUBPROCESS_FLAGS_STDERR_MERGE = _Anonymous_116.G_SUBPROCESS_FLAGS_STDERR_MERGE;
    enum G_SUBPROCESS_FLAGS_INHERIT_FDS = _Anonymous_116.G_SUBPROCESS_FLAGS_INHERIT_FDS;
    alias GNotificationPriority = _Anonymous_117;
    enum _Anonymous_117
    {
        G_NOTIFICATION_PRIORITY_NORMAL = 0,
        G_NOTIFICATION_PRIORITY_LOW = 1,
        G_NOTIFICATION_PRIORITY_HIGH = 2,
        G_NOTIFICATION_PRIORITY_URGENT = 3,
    }
    enum G_NOTIFICATION_PRIORITY_NORMAL = _Anonymous_117.G_NOTIFICATION_PRIORITY_NORMAL;
    enum G_NOTIFICATION_PRIORITY_LOW = _Anonymous_117.G_NOTIFICATION_PRIORITY_LOW;
    enum G_NOTIFICATION_PRIORITY_HIGH = _Anonymous_117.G_NOTIFICATION_PRIORITY_HIGH;
    enum G_NOTIFICATION_PRIORITY_URGENT = _Anonymous_117.G_NOTIFICATION_PRIORITY_URGENT;
    alias GNetworkConnectivity = _Anonymous_118;
    enum _Anonymous_118
    {
        G_NETWORK_CONNECTIVITY_LOCAL = 1,
        G_NETWORK_CONNECTIVITY_LIMITED = 2,
        G_NETWORK_CONNECTIVITY_PORTAL = 3,
        G_NETWORK_CONNECTIVITY_FULL = 4,
    }
    enum G_NETWORK_CONNECTIVITY_LOCAL = _Anonymous_118.G_NETWORK_CONNECTIVITY_LOCAL;
    enum G_NETWORK_CONNECTIVITY_LIMITED = _Anonymous_118.G_NETWORK_CONNECTIVITY_LIMITED;
    enum G_NETWORK_CONNECTIVITY_PORTAL = _Anonymous_118.G_NETWORK_CONNECTIVITY_PORTAL;
    enum G_NETWORK_CONNECTIVITY_FULL = _Anonymous_118.G_NETWORK_CONNECTIVITY_FULL;
    c_ulong g_app_info_create_flags_get_type() @nogc nothrow;
    c_ulong g_converter_flags_get_type() @nogc nothrow;
    c_ulong g_converter_result_get_type() @nogc nothrow;
    c_ulong g_data_stream_byte_order_get_type() @nogc nothrow;
    c_ulong g_data_stream_newline_type_get_type() @nogc nothrow;
    c_ulong g_file_attribute_type_get_type() @nogc nothrow;
    c_ulong g_file_attribute_info_flags_get_type() @nogc nothrow;
    c_ulong g_file_attribute_status_get_type() @nogc nothrow;
    c_ulong g_file_query_info_flags_get_type() @nogc nothrow;
    c_ulong g_file_create_flags_get_type() @nogc nothrow;
    c_ulong g_file_measure_flags_get_type() @nogc nothrow;
    c_ulong g_mount_mount_flags_get_type() @nogc nothrow;
    c_ulong g_mount_unmount_flags_get_type() @nogc nothrow;
    c_ulong g_drive_start_flags_get_type() @nogc nothrow;
    c_ulong g_drive_start_stop_type_get_type() @nogc nothrow;
    c_ulong g_file_copy_flags_get_type() @nogc nothrow;
    c_ulong g_file_monitor_flags_get_type() @nogc nothrow;
    int timespec_get(timespec*, int) @nogc nothrow;
    c_ulong g_file_type_get_type() @nogc nothrow;
    c_ulong g_filesystem_preview_type_get_type() @nogc nothrow;
    c_ulong g_file_monitor_event_get_type() @nogc nothrow;
    int timer_getoverrun(void*) @nogc nothrow;
    c_ulong g_io_error_enum_get_type() @nogc nothrow;
    c_ulong g_ask_password_flags_get_type() @nogc nothrow;
    int timer_gettime(void*, itimerspec*) @nogc nothrow;
    c_ulong g_password_save_get_type() @nogc nothrow;
    c_ulong g_mount_operation_result_get_type() @nogc nothrow;
    int timer_settime(void*, int, const(itimerspec)*, itimerspec*) @nogc nothrow;
    c_ulong g_output_stream_splice_flags_get_type() @nogc nothrow;
    c_ulong g_io_stream_splice_flags_get_type() @nogc nothrow;
    int timer_delete(void*) @nogc nothrow;
    c_ulong g_emblem_origin_get_type() @nogc nothrow;
    c_ulong g_resolver_error_get_type() @nogc nothrow;
    int timer_create(int, sigevent*, void**) @nogc nothrow;
    c_ulong g_resolver_record_type_get_type() @nogc nothrow;
    c_ulong g_resource_error_get_type() @nogc nothrow;
    int clock_getcpuclockid(int, int*) @nogc nothrow;
    c_ulong g_resource_flags_get_type() @nogc nothrow;
    int clock_nanosleep(int, int, const(timespec)*, timespec*) @nogc nothrow;
    c_ulong g_resource_lookup_flags_get_type() @nogc nothrow;
    c_ulong g_socket_family_get_type() @nogc nothrow;
    c_ulong g_socket_type_get_type() @nogc nothrow;
    int clock_settime(int, const(timespec)*) @nogc nothrow;
    c_ulong g_socket_msg_flags_get_type() @nogc nothrow;
    c_ulong g_socket_protocol_get_type() @nogc nothrow;
    int clock_gettime(int, timespec*) @nogc nothrow;
    c_ulong g_zlib_compressor_format_get_type() @nogc nothrow;
    c_ulong g_unix_socket_address_type_get_type() @nogc nothrow;
    int clock_getres(int, timespec*) @nogc nothrow;
    c_ulong g_bus_type_get_type() @nogc nothrow;
    int nanosleep(const(timespec)*, timespec*) @nogc nothrow;
    c_ulong g_bus_name_owner_flags_get_type() @nogc nothrow;
    c_ulong g_bus_name_watcher_flags_get_type() @nogc nothrow;
    c_ulong g_dbus_proxy_flags_get_type() @nogc nothrow;
    int dysize(int) @nogc nothrow;
    c_ulong g_dbus_error_get_type() @nogc nothrow;
    c_ulong g_dbus_connection_flags_get_type() @nogc nothrow;
    c_long timelocal(tm*) @nogc nothrow;
    c_ulong g_dbus_capability_flags_get_type() @nogc nothrow;
    c_ulong g_dbus_call_flags_get_type() @nogc nothrow;
    c_long timegm(tm*) @nogc nothrow;
    c_ulong g_dbus_message_type_get_type() @nogc nothrow;
    c_ulong g_dbus_message_flags_get_type() @nogc nothrow;
    c_ulong g_dbus_message_header_field_get_type() @nogc nothrow;
    int stime(const(c_long)*) @nogc nothrow;
    c_ulong g_dbus_property_info_flags_get_type() @nogc nothrow;
    c_ulong g_dbus_subtree_flags_get_type() @nogc nothrow;
    extern __gshared c_long timezone;
    c_ulong g_dbus_server_flags_get_type() @nogc nothrow;
    extern __gshared int daylight;
    c_ulong g_dbus_signal_flags_get_type() @nogc nothrow;
    c_ulong g_dbus_send_message_flags_get_type() @nogc nothrow;
    c_ulong g_credentials_type_get_type() @nogc nothrow;
    void tzset() @nogc nothrow;
    c_ulong g_dbus_message_byte_order_get_type() @nogc nothrow;
    extern __gshared char*[2] tzname;
    c_ulong g_application_flags_get_type() @nogc nothrow;
    c_ulong g_tls_error_get_type() @nogc nothrow;
    extern __gshared c_long __timezone;
    c_ulong g_tls_certificate_flags_get_type() @nogc nothrow;
    extern __gshared int __daylight;
    c_ulong g_tls_authentication_mode_get_type() @nogc nothrow;
    extern __gshared char*[2] __tzname;
    c_ulong g_tls_rehandshake_mode_get_type() @nogc nothrow;
    c_ulong g_tls_password_flags_get_type() @nogc nothrow;
    char* ctime_r(const(c_long)*, char*) @nogc nothrow;
    c_ulong g_tls_interaction_result_get_type() @nogc nothrow;
    c_ulong g_dbus_interface_skeleton_flags_get_type() @nogc nothrow;
    char* asctime_r(const(tm)*, char*) @nogc nothrow;
    c_ulong g_dbus_object_manager_client_flags_get_type() @nogc nothrow;
    c_ulong g_tls_database_verify_flags_get_type() @nogc nothrow;
    c_ulong g_tls_database_lookup_flags_get_type() @nogc nothrow;
    char* ctime(const(c_long)*) @nogc nothrow;
    c_ulong g_tls_certificate_request_flags_get_type() @nogc nothrow;
    c_ulong g_io_module_scope_flags_get_type() @nogc nothrow;
    char* asctime(const(tm)*) @nogc nothrow;
    c_ulong g_socket_client_event_get_type() @nogc nothrow;
    c_ulong g_socket_listener_event_get_type() @nogc nothrow;
    tm* localtime_r(const(c_long)*, tm*) @nogc nothrow;
    c_ulong g_test_dbus_flags_get_type() @nogc nothrow;
    c_ulong g_subprocess_flags_get_type() @nogc nothrow;
    tm* gmtime_r(const(c_long)*, tm*) @nogc nothrow;
    c_ulong g_notification_priority_get_type() @nogc nothrow;
    c_ulong g_network_connectivity_get_type() @nogc nothrow;
    c_ulong g_settings_bind_flags_get_type() @nogc nothrow;
    tm* localtime(const(c_long)*) @nogc nothrow;
    tm* gmtime(const(c_long)*) @nogc nothrow;
    uint g_io_error_quark() @nogc nothrow;
    GIOErrorEnum g_io_error_from_errno(int) @nogc nothrow;
    alias GIOModuleScope = _GIOModuleScope;
    struct _GIOModuleScope{};
    _GIOModuleScope* g_io_module_scope_new(GIOModuleScopeFlags) @nogc nothrow;
    void g_io_module_scope_free(_GIOModuleScope*) @nogc nothrow;
    void g_io_module_scope_block(_GIOModuleScope*, const(char)*) @nogc nothrow;
    c_ulong strftime_l(char*, c_ulong, const(char)*, const(tm)*, __locale_struct*) @nogc nothrow;
    c_ulong strftime(char*, c_ulong, const(char)*, const(tm)*) @nogc nothrow;
    c_long mktime(tm*) @nogc nothrow;
    alias GIOModuleClass = _GIOModuleClass;
    struct _GIOModuleClass{};
    c_ulong g_io_module_get_type() @nogc nothrow;
    _GIOModule* g_io_module_new(const(char)*) @nogc nothrow;
    void g_io_modules_scan_all_in_directory(const(char)*) @nogc nothrow;
    _GList* g_io_modules_load_all_in_directory(const(char)*) @nogc nothrow;
    void g_io_modules_scan_all_in_directory_with_scope(const(char)*, _GIOModuleScope*) @nogc nothrow;
    _GList* g_io_modules_load_all_in_directory_with_scope(const(char)*, _GIOModuleScope*) @nogc nothrow;
    _GIOExtensionPoint* g_io_extension_point_register(const(char)*) @nogc nothrow;
    _GIOExtensionPoint* g_io_extension_point_lookup(const(char)*) @nogc nothrow;
    void g_io_extension_point_set_required_type(_GIOExtensionPoint*, c_ulong) @nogc nothrow;
    c_ulong g_io_extension_point_get_required_type(_GIOExtensionPoint*) @nogc nothrow;
    _GList* g_io_extension_point_get_extensions(_GIOExtensionPoint*) @nogc nothrow;
    _GIOExtension* g_io_extension_point_get_extension_by_name(_GIOExtensionPoint*, const(char)*) @nogc nothrow;
    _GIOExtension* g_io_extension_point_implement(const(char)*, c_ulong, const(char)*, int) @nogc nothrow;
    c_ulong g_io_extension_get_type(_GIOExtension*) @nogc nothrow;
    const(char)* g_io_extension_get_name(_GIOExtension*) @nogc nothrow;
    int g_io_extension_get_priority(_GIOExtension*) @nogc nothrow;
    _GTypeClass* g_io_extension_ref_class(_GIOExtension*) @nogc nothrow;
    void g_io_module_load(_GIOModule*) @nogc nothrow;
    void g_io_module_unload(_GIOModule*) @nogc nothrow;
    char** g_io_module_query() @nogc nothrow;
    void g_io_scheduler_push_job(int function(_GIOSchedulerJob*, _GCancellable*, void*), void*, void function(void*), int, _GCancellable*) @nogc nothrow;
    void g_io_scheduler_cancel_all_jobs() @nogc nothrow;
    int g_io_scheduler_job_send_to_mainloop(_GIOSchedulerJob*, int function(void*), void*, void function(void*)) @nogc nothrow;
    void g_io_scheduler_job_send_to_mainloop_async(_GIOSchedulerJob*, int function(void*), void*, void function(void*)) @nogc nothrow;
    double difftime(c_long, c_long) @nogc nothrow;
    c_long time(c_long*) @nogc nothrow;
    c_long clock() @nogc nothrow;
    alias GIOStreamPrivate = _GIOStreamPrivate;
    struct _GIOStreamPrivate{};
    alias GIOStreamClass = _GIOStreamClass;
    struct _GIOStreamClass
    {
        _GObjectClass parent_class;
        _GInputStream* function(_GIOStream*) get_input_stream;
        _GOutputStream* function(_GIOStream*) get_output_stream;
        int function(_GIOStream*, _GCancellable*, _GError**) close_fn;
        void function(_GIOStream*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) close_async;
        int function(_GIOStream*, _GAsyncResult*, _GError**) close_finish;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
        void function() _g_reserved7;
        void function() _g_reserved8;
        void function() _g_reserved9;
        void function() _g_reserved10;
    }
    c_ulong g_io_stream_get_type() @nogc nothrow;
    _GInputStream* g_io_stream_get_input_stream(_GIOStream*) @nogc nothrow;
    _GOutputStream* g_io_stream_get_output_stream(_GIOStream*) @nogc nothrow;
    void g_io_stream_splice_async(_GIOStream*, _GIOStream*, GIOStreamSpliceFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_io_stream_splice_finish(_GAsyncResult*, _GError**) @nogc nothrow;
    int g_io_stream_close(_GIOStream*, _GCancellable*, _GError**) @nogc nothrow;
    void g_io_stream_close_async(_GIOStream*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_io_stream_close_finish(_GIOStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_io_stream_is_closed(_GIOStream*) @nogc nothrow;
    int g_io_stream_has_pending(_GIOStream*) @nogc nothrow;
    int g_io_stream_set_pending(_GIOStream*, _GError**) @nogc nothrow;
    void g_io_stream_clear_pending(_GIOStream*) @nogc nothrow;
    alias GAppLaunchContext = _GAppLaunchContext;
    struct _GAppLaunchContext
    {
        _GObject parent_instance;
        _GAppLaunchContextPrivate* priv;
    }
    alias GAppInfo = _GAppInfo;
    struct _GAppInfo{};
    alias GAsyncResult = _GAsyncResult;
    struct _GAsyncResult{};
    alias GAsyncInitable = _GAsyncInitable;
    struct _GAsyncInitable{};
    alias GBufferedInputStream = _GBufferedInputStream;
    struct _GBufferedInputStream
    {
        _GFilterInputStream parent_instance;
        _GBufferedInputStreamPrivate* priv;
    }
    alias GBufferedOutputStream = _GBufferedOutputStream;
    struct _GBufferedOutputStream
    {
        _GFilterOutputStream parent_instance;
        _GBufferedOutputStreamPrivate* priv;
    }
    alias GCancellable = _GCancellable;
    struct _GCancellable
    {
        _GObject parent_instance;
        _GCancellablePrivate* priv;
    }
    alias GCharsetConverter = _GCharsetConverter;
    struct _GCharsetConverter{};
    alias GConverter = _GConverter;
    struct _GConverter{};
    alias GConverterInputStream = _GConverterInputStream;
    struct _GConverterInputStream
    {
        _GFilterInputStream parent_instance;
        _GConverterInputStreamPrivate* priv;
    }
    alias GConverterOutputStream = _GConverterOutputStream;
    struct _GConverterOutputStream
    {
        _GFilterOutputStream parent_instance;
        _GConverterOutputStreamPrivate* priv;
    }
    alias GDatagramBased = _GDatagramBased;
    struct _GDatagramBased{};
    alias GDataInputStream = _GDataInputStream;
    struct _GDataInputStream
    {
        _GBufferedInputStream parent_instance;
        _GDataInputStreamPrivate* priv;
    }
    alias GSimplePermission = _GSimplePermission;
    struct _GSimplePermission{};
    alias GZlibCompressor = _GZlibCompressor;
    struct _GZlibCompressor{};
    alias GZlibDecompressor = _GZlibDecompressor;
    struct _GZlibDecompressor{};
    alias GSimpleActionGroup = _GSimpleActionGroup;
    struct _GSimpleActionGroup
    {
        _GObject parent_instance;
        _GSimpleActionGroupPrivate* priv;
    }
    alias GRemoteActionGroup = _GRemoteActionGroup;
    struct _GRemoteActionGroup{};
    alias GDBusActionGroup = _GDBusActionGroup;
    struct _GDBusActionGroup{};
    alias GActionMap = _GActionMap;
    struct _GActionMap{};
    alias GActionGroup = _GActionGroup;
    struct _GActionGroup{};
    alias GPropertyAction = _GPropertyAction;
    struct _GPropertyAction{};
    alias GSimpleAction = _GSimpleAction;
    struct _GSimpleAction{};
    alias GAction = _GAction;
    struct _GAction{};
    alias GApplication = _GApplication;
    struct _GApplication
    {
        _GObject parent_instance;
        _GApplicationPrivate* priv;
    }
    alias GApplicationCommandLine = _GApplicationCommandLine;
    struct _GApplicationCommandLine
    {
        _GObject parent_instance;
        _GApplicationCommandLinePrivate* priv;
    }
    alias GSettingsBackend = _GSettingsBackend;
    struct _GSettingsBackend{};
    alias GSettings = _GSettings;
    struct _GSettings
    {
        _GObject parent_instance;
        _GSettingsPrivate* priv;
    }
    alias GPermission = _GPermission;
    struct _GPermission
    {
        _GObject parent_instance;
        _GPermissionPrivate* priv;
    }
    alias GMenuModel = _GMenuModel;
    struct _GMenuModel
    {
        _GObject parent_instance;
        _GMenuModelPrivate* priv;
    }
    alias GNotification = _GNotification;
    struct _GNotification{};
    alias GDrive = _GDrive;
    struct _GDrive{};
    alias GFileEnumerator = _GFileEnumerator;
    struct _GFileEnumerator
    {
        _GObject parent_instance;
        _GFileEnumeratorPrivate* priv;
    }
    alias GFileMonitor = _GFileMonitor;
    struct _GFileMonitor
    {
        _GObject parent_instance;
        _GFileMonitorPrivate* priv;
    }
    alias GFilterInputStream = _GFilterInputStream;
    struct _GFilterInputStream
    {
        _GInputStream parent_instance;
        _GInputStream* base_stream;
    }
    alias GFilterOutputStream = _GFilterOutputStream;
    struct _GFilterOutputStream
    {
        _GOutputStream parent_instance;
        _GOutputStream* base_stream;
    }
    alias GFile = _GFile;
    struct _GFile{};
    alias GFileInfo = _GFileInfo;
    struct _GFileInfo{};
    alias GFileAttributeMatcher = _GFileAttributeMatcher;
    struct _GFileAttributeMatcher{};
    alias GFileAttributeInfo = _GFileAttributeInfo;
    struct _GFileAttributeInfo
    {
        char* name;
        GFileAttributeType type;
        GFileAttributeInfoFlags flags;
    }
    alias GFileAttributeInfoList = _GFileAttributeInfoList;
    struct _GFileAttributeInfoList
    {
        _GFileAttributeInfo* infos;
        int n_infos;
    }
    alias GFileDescriptorBased = _GFileDescriptorBased;
    struct _GFileDescriptorBased{};
    alias GFileInputStream = _GFileInputStream;
    struct _GFileInputStream
    {
        _GInputStream parent_instance;
        _GFileInputStreamPrivate* priv;
    }
    alias GFileOutputStream = _GFileOutputStream;
    struct _GFileOutputStream
    {
        _GOutputStream parent_instance;
        _GFileOutputStreamPrivate* priv;
    }
    alias GFileIOStream = _GFileIOStream;
    struct _GFileIOStream
    {
        _GIOStream parent_instance;
        _GFileIOStreamPrivate* priv;
    }
    alias GFileIcon = _GFileIcon;
    struct _GFileIcon{};
    alias GFilenameCompleter = _GFilenameCompleter;
    struct _GFilenameCompleter{};
    alias GIcon = _GIcon;
    struct _GIcon{};
    alias GInetAddress = _GInetAddress;
    struct _GInetAddress
    {
        _GObject parent_instance;
        _GInetAddressPrivate* priv;
    }
    alias GInetAddressMask = _GInetAddressMask;
    struct _GInetAddressMask
    {
        _GObject parent_instance;
        _GInetAddressMaskPrivate* priv;
    }
    alias GInetSocketAddress = _GInetSocketAddress;
    struct _GInetSocketAddress
    {
        _GSocketAddress parent_instance;
        _GInetSocketAddressPrivate* priv;
    }
    alias GNativeSocketAddress = _GNativeSocketAddress;
    struct _GNativeSocketAddress{};
    alias GInputStream = _GInputStream;
    struct _GInputStream
    {
        _GObject parent_instance;
        _GInputStreamPrivate* priv;
    }
    alias GInitable = _GInitable;
    struct _GInitable{};
    alias GIOModule = _GIOModule;
    struct _GIOModule{};
    alias GIOExtensionPoint = _GIOExtensionPoint;
    struct _GIOExtensionPoint{};
    alias GIOExtension = _GIOExtension;
    struct _GIOExtension{};
    alias GIOSchedulerJob = _GIOSchedulerJob;
    struct _GIOSchedulerJob{};
    alias GIOStreamAdapter = _GIOStreamAdapter;
    struct _GIOStreamAdapter{};
    alias GLoadableIcon = _GLoadableIcon;
    struct _GLoadableIcon{};
    alias GBytesIcon = _GBytesIcon;
    struct _GBytesIcon{};
    alias GMemoryInputStream = _GMemoryInputStream;
    struct _GMemoryInputStream
    {
        _GInputStream parent_instance;
        _GMemoryInputStreamPrivate* priv;
    }
    alias GMemoryOutputStream = _GMemoryOutputStream;
    struct _GMemoryOutputStream
    {
        _GOutputStream parent_instance;
        _GMemoryOutputStreamPrivate* priv;
    }
    alias GMount = _GMount;
    struct _GMount{};
    alias GMountOperation = _GMountOperation;
    struct _GMountOperation
    {
        _GObject parent_instance;
        _GMountOperationPrivate* priv;
    }
    alias GNetworkAddress = _GNetworkAddress;
    struct _GNetworkAddress
    {
        _GObject parent_instance;
        _GNetworkAddressPrivate* priv;
    }
    alias GNetworkMonitor = _GNetworkMonitor;
    struct _GNetworkMonitor{};
    alias GNetworkService = _GNetworkService;
    struct _GNetworkService
    {
        _GObject parent_instance;
        _GNetworkServicePrivate* priv;
    }
    alias GOutputStream = _GOutputStream;
    struct _GOutputStream
    {
        _GObject parent_instance;
        _GOutputStreamPrivate* priv;
    }
    alias GIOStream = _GIOStream;
    struct _GIOStream
    {
        _GObject parent_instance;
        _GIOStreamPrivate* priv;
    }
    alias GSimpleIOStream = _GSimpleIOStream;
    struct _GSimpleIOStream{};
    alias GPollableInputStream = _GPollableInputStream;
    struct _GPollableInputStream{};
    alias GPollableOutputStream = _GPollableOutputStream;
    struct _GPollableOutputStream{};
    alias GResolver = _GResolver;
    struct _GResolver
    {
        _GObject parent_instance;
        _GResolverPrivate* priv;
    }
    alias GResource = _GResource;
    struct _GResource{};
    alias GSeekable = _GSeekable;
    struct _GSeekable{};
    alias GSimpleAsyncResult = _GSimpleAsyncResult;
    struct _GSimpleAsyncResult{};
    alias GSocket = _GSocket;
    struct _GSocket
    {
        _GObject parent_instance;
        _GSocketPrivate* priv;
    }
    alias GSocketControlMessage = _GSocketControlMessage;
    struct _GSocketControlMessage
    {
        _GObject parent_instance;
        _GSocketControlMessagePrivate* priv;
    }
    alias GSocketClient = _GSocketClient;
    struct _GSocketClient
    {
        _GObject parent_instance;
        _GSocketClientPrivate* priv;
    }
    alias GSocketConnection = _GSocketConnection;
    struct _GSocketConnection
    {
        _GIOStream parent_instance;
        _GSocketConnectionPrivate* priv;
    }
    alias GSocketListener = _GSocketListener;
    struct _GSocketListener
    {
        _GObject parent_instance;
        _GSocketListenerPrivate* priv;
    }
    alias GSocketService = _GSocketService;
    struct _GSocketService
    {
        _GSocketListener parent_instance;
        _GSocketServicePrivate* priv;
    }
    alias GSocketAddress = _GSocketAddress;
    struct _GSocketAddress
    {
        _GObject parent_instance;
    }
    alias GSocketAddressEnumerator = _GSocketAddressEnumerator;
    struct _GSocketAddressEnumerator
    {
        _GObject parent_instance;
    }
    alias GSocketConnectable = _GSocketConnectable;
    struct _GSocketConnectable{};
    alias GSrvTarget = _GSrvTarget;
    struct _GSrvTarget{};
    alias GTask = _GTask;
    struct _GTask{};
    alias GTcpConnection = _GTcpConnection;
    struct _GTcpConnection
    {
        _GSocketConnection parent_instance;
        _GTcpConnectionPrivate* priv;
    }
    alias GTcpWrapperConnection = _GTcpWrapperConnection;
    struct _GTcpWrapperConnection
    {
        _GTcpConnection parent_instance;
        _GTcpWrapperConnectionPrivate* priv;
    }
    alias GThreadedSocketService = _GThreadedSocketService;
    struct _GThreadedSocketService
    {
        _GSocketService parent_instance;
        _GThreadedSocketServicePrivate* priv;
    }
    alias GDtlsConnection = _GDtlsConnection;
    struct _GDtlsConnection{};
    alias GDtlsClientConnection = _GDtlsClientConnection;
    struct _GDtlsClientConnection{};
    alias GDtlsServerConnection = _GDtlsServerConnection;
    struct _GDtlsServerConnection{};
    alias GThemedIcon = _GThemedIcon;
    struct _GThemedIcon{};
    alias GTlsCertificate = _GTlsCertificate;
    struct _GTlsCertificate
    {
        _GObject parent_instance;
        _GTlsCertificatePrivate* priv;
    }
    alias GTlsClientConnection = _GTlsClientConnection;
    struct _GTlsClientConnection{};
    alias GTlsConnection = _GTlsConnection;
    struct _GTlsConnection
    {
        _GIOStream parent_instance;
        _GTlsConnectionPrivate* priv;
    }
    alias GTlsDatabase = _GTlsDatabase;
    struct _GTlsDatabase
    {
        _GObject parent_instance;
        _GTlsDatabasePrivate* priv;
    }
    alias GTlsFileDatabase = _GTlsFileDatabase;
    struct _GTlsFileDatabase{};
    alias GTlsInteraction = _GTlsInteraction;
    struct _GTlsInteraction
    {
        _GObject parent_instance;
        _GTlsInteractionPrivate* priv;
    }
    alias GTlsPassword = _GTlsPassword;
    struct _GTlsPassword
    {
        _GObject parent_instance;
        _GTlsPasswordPrivate* priv;
    }
    alias GTlsServerConnection = _GTlsServerConnection;
    struct _GTlsServerConnection{};
    alias GVfs = _GVfs;
    struct _GVfs
    {
        _GObject parent_instance;
    }
    alias GProxyResolver = _GProxyResolver;
    struct _GProxyResolver{};
    alias GProxy = _GProxy;
    struct _GProxy{};
    alias GProxyAddress = _GProxyAddress;
    struct _GProxyAddress
    {
        _GInetSocketAddress parent_instance;
        _GProxyAddressPrivate* priv;
    }
    alias GProxyAddressEnumerator = _GProxyAddressEnumerator;
    struct _GProxyAddressEnumerator
    {
        _GSocketAddressEnumerator parent_instance;
        _GProxyAddressEnumeratorPrivate* priv;
    }
    alias GVolume = _GVolume;
    struct _GVolume{};
    alias GVolumeMonitor = _GVolumeMonitor;
    struct _GVolumeMonitor
    {
        _GObject parent_instance;
        void* priv;
    }
    alias GAsyncReadyCallback = void function(_GObject*, _GAsyncResult*, void*);
    alias GFileProgressCallback = void function(c_long, c_long, void*);
    alias GFileReadMoreCallback = int function(const(char)*, c_long, void*);
    alias GFileMeasureProgressCallback = void function(int, c_ulong, c_ulong, c_ulong, void*);
    alias GIOSchedulerJobFunc = int function(_GIOSchedulerJob*, _GCancellable*, void*);
    alias GSimpleAsyncThreadFunc = void function(_GSimpleAsyncResult*, _GObject*, _GCancellable*);
    alias GSocketSourceFunc = int function(_GSocket*, GIOCondition, void*);
    alias GDatagramBasedSourceFunc = int function(_GDatagramBased*, GIOCondition, void*);
    alias GInputVector = _GInputVector;
    struct _GInputVector
    {
        void* buffer;
        c_ulong size;
    }
    alias GInputMessage = _GInputMessage;
    struct _GInputMessage
    {
        _GSocketAddress** address;
        _GInputVector* vectors;
        uint num_vectors;
        c_ulong bytes_received;
        int flags;
        _GSocketControlMessage*** control_messages;
        uint* num_control_messages;
    }
    alias GOutputVector = _GOutputVector;
    struct _GOutputVector
    {
        const(void)* buffer;
        c_ulong size;
    }
    alias GOutputMessage = _GOutputMessage;
    struct _GOutputMessage
    {
        _GSocketAddress* address;
        _GOutputVector* vectors;
        uint num_vectors;
        uint bytes_sent;
        _GSocketControlMessage** control_messages;
        uint num_control_messages;
    }
    alias GCredentials = _GCredentials;
    struct _GCredentials{};
    alias GUnixCredentialsMessage = _GUnixCredentialsMessage;
    struct _GUnixCredentialsMessage{};
    alias GUnixFDList = _GUnixFDList;
    struct _GUnixFDList{};
    alias GDBusMessage = _GDBusMessage;
    struct _GDBusMessage{};
    alias GDBusConnection = _GDBusConnection;
    struct _GDBusConnection{};
    alias GDBusProxy = _GDBusProxy;
    struct _GDBusProxy
    {
        _GObject parent_instance;
        _GDBusProxyPrivate* priv;
    }
    alias GDBusMethodInvocation = _GDBusMethodInvocation;
    struct _GDBusMethodInvocation{};
    alias GDBusServer = _GDBusServer;
    struct _GDBusServer{};
    alias GDBusAuthObserver = _GDBusAuthObserver;
    struct _GDBusAuthObserver{};
    alias GDBusErrorEntry = _GDBusErrorEntry;
    struct _GDBusErrorEntry
    {
        int error_code;
        const(char)* dbus_error_name;
    }
    alias GDBusInterfaceVTable = _GDBusInterfaceVTable;
    struct _GDBusInterfaceVTable
    {
        void function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, _GDBusMethodInvocation*, void*) method_call;
        _GVariant* function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GError**, void*) get_property;
        int function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, _GVariant*, _GError**, void*) set_property;
        void*[8] padding;
    }
    alias GDBusSubtreeVTable = _GDBusSubtreeVTable;
    struct _GDBusSubtreeVTable
    {
        char** function(_GDBusConnection*, const(char)*, const(char)*, void*) enumerate;
        _GDBusInterfaceInfo** function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, void*) introspect;
        const(_GDBusInterfaceVTable)* function(_GDBusConnection*, const(char)*, const(char)*, const(char)*, const(char)*, void**, void*) dispatch;
        void*[8] padding;
    }
    alias GDBusAnnotationInfo = _GDBusAnnotationInfo;
    struct _GDBusAnnotationInfo
    {
        int ref_count;
        char* key;
        char* value;
        _GDBusAnnotationInfo** annotations;
    }
    alias GDBusArgInfo = _GDBusArgInfo;
    struct _GDBusArgInfo
    {
        int ref_count;
        char* name;
        char* signature;
        _GDBusAnnotationInfo** annotations;
    }
    alias GDBusMethodInfo = _GDBusMethodInfo;
    struct _GDBusMethodInfo
    {
        int ref_count;
        char* name;
        _GDBusArgInfo** in_args;
        _GDBusArgInfo** out_args;
        _GDBusAnnotationInfo** annotations;
    }
    alias GDBusSignalInfo = _GDBusSignalInfo;
    struct _GDBusSignalInfo
    {
        int ref_count;
        char* name;
        _GDBusArgInfo** args;
        _GDBusAnnotationInfo** annotations;
    }
    alias GDBusPropertyInfo = _GDBusPropertyInfo;
    struct _GDBusPropertyInfo
    {
        int ref_count;
        char* name;
        char* signature;
        GDBusPropertyInfoFlags flags;
        _GDBusAnnotationInfo** annotations;
    }
    alias GDBusInterfaceInfo = _GDBusInterfaceInfo;
    struct _GDBusInterfaceInfo
    {
        int ref_count;
        char* name;
        _GDBusMethodInfo** methods;
        _GDBusSignalInfo** signals;
        _GDBusPropertyInfo** properties;
        _GDBusAnnotationInfo** annotations;
    }
    alias GDBusNodeInfo = _GDBusNodeInfo;
    struct _GDBusNodeInfo
    {
        int ref_count;
        char* path;
        _GDBusInterfaceInfo** interfaces;
        _GDBusNodeInfo** nodes;
        _GDBusAnnotationInfo** annotations;
    }
    alias GCancellableSourceFunc = int function(_GCancellable*, void*);
    alias GPollableSourceFunc = int function(_GObject*, void*);
    alias GDBusInterface = _GDBusInterface;
    struct _GDBusInterface{};
    alias GDBusInterfaceSkeleton = _GDBusInterfaceSkeleton;
    struct _GDBusInterfaceSkeleton
    {
        _GObject parent_instance;
        _GDBusInterfaceSkeletonPrivate* priv;
    }
    alias GDBusObject = _GDBusObject;
    struct _GDBusObject{};
    alias GDBusObjectSkeleton = _GDBusObjectSkeleton;
    struct _GDBusObjectSkeleton
    {
        _GObject parent_instance;
        _GDBusObjectSkeletonPrivate* priv;
    }
    alias GDBusObjectProxy = _GDBusObjectProxy;
    struct _GDBusObjectProxy
    {
        _GObject parent_instance;
        _GDBusObjectProxyPrivate* priv;
    }
    alias GDBusObjectManager = _GDBusObjectManager;
    struct _GDBusObjectManager{};
    alias GDBusObjectManagerClient = _GDBusObjectManagerClient;
    struct _GDBusObjectManagerClient
    {
        _GObject parent_instance;
        _GDBusObjectManagerClientPrivate* priv;
    }
    alias GDBusObjectManagerServer = _GDBusObjectManagerServer;
    struct _GDBusObjectManagerServer
    {
        _GObject parent_instance;
        _GDBusObjectManagerServerPrivate* priv;
    }
    alias GDBusProxyTypeFunc = c_ulong function(_GDBusObjectManagerClient*, const(char)*, const(char)*, void*);
    alias GTestDBus = _GTestDBus;
    struct _GTestDBus{};
    alias GSubprocess = _GSubprocess;
    struct _GSubprocess{};
    alias GSubprocessLauncher = _GSubprocessLauncher;
    struct _GSubprocessLauncher{};
    alias pid_t = int;
    c_ulong g_list_model_get_type() @nogc nothrow;
    alias GListModel_autoptr = _GListModel*;
    struct _GListModelInterface
    {
        _GTypeInterface g_iface;
        c_ulong function(_GListModel*) get_item_type;
        uint function(_GListModel*) get_n_items;
        void* function(_GListModel*, uint) get_item;
    }
    static _GListModelInterface* G_LIST_MODEL_GET_IFACE(void*) @nogc nothrow;
    static int G_IS_LIST_MODEL(void*) @nogc nothrow;
    static _GListModel* G_LIST_MODEL(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GListModel(_GListModel**) @nogc nothrow;
    alias GListModelInterface = _GListModelInterface;
    alias GListModel = _GListModel;
    struct _GListModel{};
    c_ulong g_list_model_get_item_type(_GListModel*) @nogc nothrow;
    uint g_list_model_get_n_items(_GListModel*) @nogc nothrow;
    void* g_list_model_get_item(_GListModel*, uint) @nogc nothrow;
    _GObject* g_list_model_get_object(_GListModel*, uint) @nogc nothrow;
    void g_list_model_items_changed(_GListModel*, uint, uint, uint) @nogc nothrow;
    struct sigevent
    {
        sigval sigev_value;
        int sigev_signo;
        int sigev_notify;
        static union _Anonymous_119
        {
            int[12] _pad;
            int _tid;
            static struct _Anonymous_120
            {
                void function(sigval) _function;
                pthread_attr_t* _attribute;
            }
            _Anonymous_120 _sigev_thread;
        }
        _Anonymous_119 _sigev_un;
    }
    c_ulong g_list_store_get_type() @nogc nothrow;
    static int G_IS_LIST_STORE(void*) @nogc nothrow;
    struct _GListStore{};
    alias GListStore = _GListStore;
    struct GListStoreClass
    {
        _GObjectClass parent_class;
    }
    alias GListStore_autoptr = _GListStore*;
    static _GListStore* G_LIST_STORE(void*) @nogc nothrow;
    static void glib_autoptr_cleanup_GListStore(_GListStore**) @nogc nothrow;
    _GListStore* g_list_store_new(c_ulong) @nogc nothrow;
    void g_list_store_insert(_GListStore*, uint, void*) @nogc nothrow;
    uint g_list_store_insert_sorted(_GListStore*, void*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void g_list_store_sort(_GListStore*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void g_list_store_append(_GListStore*, void*) @nogc nothrow;
    void g_list_store_remove(_GListStore*, uint) @nogc nothrow;
    void g_list_store_remove_all(_GListStore*) @nogc nothrow;
    void g_list_store_splice(_GListStore*, uint, uint, void**, uint) @nogc nothrow;
    alias GLoadableIconIface = _GLoadableIconIface;
    struct _GLoadableIconIface
    {
        _GTypeInterface g_iface;
        _GInputStream* function(_GLoadableIcon*, int, char**, _GCancellable*, _GError**) load;
        void function(_GLoadableIcon*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) load_async;
        _GInputStream* function(_GLoadableIcon*, _GAsyncResult*, char**, _GError**) load_finish;
    }
    c_ulong g_loadable_icon_get_type() @nogc nothrow;
    _GInputStream* g_loadable_icon_load(_GLoadableIcon*, int, char**, _GCancellable*, _GError**) @nogc nothrow;
    void g_loadable_icon_load_async(_GLoadableIcon*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GInputStream* g_loadable_icon_load_finish(_GLoadableIcon*, _GAsyncResult*, char**, _GError**) @nogc nothrow;
    alias GMemoryInputStreamClass = _GMemoryInputStreamClass;
    struct _GMemoryInputStreamClass
    {
        _GInputStreamClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GMemoryInputStreamPrivate = _GMemoryInputStreamPrivate;
    struct _GMemoryInputStreamPrivate{};
    c_ulong g_memory_input_stream_get_type() @nogc nothrow;
    _GInputStream* g_memory_input_stream_new() @nogc nothrow;
    _GInputStream* g_memory_input_stream_new_from_data(const(void)*, c_long, void function(void*)) @nogc nothrow;
    _GInputStream* g_memory_input_stream_new_from_bytes(_GBytes*) @nogc nothrow;
    void g_memory_input_stream_add_data(_GMemoryInputStream*, const(void)*, c_long, void function(void*)) @nogc nothrow;
    void g_memory_input_stream_add_bytes(_GMemoryInputStream*, _GBytes*) @nogc nothrow;
    alias GMemoryOutputStreamClass = _GMemoryOutputStreamClass;
    struct _GMemoryOutputStreamClass
    {
        _GOutputStreamClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    alias GMemoryOutputStreamPrivate = _GMemoryOutputStreamPrivate;
    struct _GMemoryOutputStreamPrivate{};
    alias GReallocFunc = void* function(void*, c_ulong);
    c_ulong g_memory_output_stream_get_type() @nogc nothrow;
    _GOutputStream* g_memory_output_stream_new(void*, c_ulong, void* function(void*, c_ulong), void function(void*)) @nogc nothrow;
    _GOutputStream* g_memory_output_stream_new_resizable() @nogc nothrow;
    void* g_memory_output_stream_get_data(_GMemoryOutputStream*) @nogc nothrow;
    c_ulong g_memory_output_stream_get_size(_GMemoryOutputStream*) @nogc nothrow;
    c_ulong g_memory_output_stream_get_data_size(_GMemoryOutputStream*) @nogc nothrow;
    void* g_memory_output_stream_steal_data(_GMemoryOutputStream*) @nogc nothrow;
    _GBytes* g_memory_output_stream_steal_as_bytes(_GMemoryOutputStream*) @nogc nothrow;
    int strncasecmp_l(const(char)*, const(char)*, c_ulong, __locale_struct*) @nogc nothrow;
    int strcasecmp_l(const(char)*, const(char)*, __locale_struct*) @nogc nothrow;
    alias GMenuItem = _GMenuItem;
    struct _GMenuItem{};
    alias GMenu = _GMenu;
    struct _GMenu{};
    c_ulong g_menu_get_type() @nogc nothrow;
    _GMenu* g_menu_new() @nogc nothrow;
    void g_menu_freeze(_GMenu*) @nogc nothrow;
    void g_menu_insert_item(_GMenu*, int, _GMenuItem*) @nogc nothrow;
    void g_menu_prepend_item(_GMenu*, _GMenuItem*) @nogc nothrow;
    void g_menu_append_item(_GMenu*, _GMenuItem*) @nogc nothrow;
    void g_menu_remove(_GMenu*, int) @nogc nothrow;
    void g_menu_remove_all(_GMenu*) @nogc nothrow;
    void g_menu_insert(_GMenu*, int, const(char)*, const(char)*) @nogc nothrow;
    void g_menu_prepend(_GMenu*, const(char)*, const(char)*) @nogc nothrow;
    void g_menu_append(_GMenu*, const(char)*, const(char)*) @nogc nothrow;
    void g_menu_insert_section(_GMenu*, int, const(char)*, _GMenuModel*) @nogc nothrow;
    void g_menu_prepend_section(_GMenu*, const(char)*, _GMenuModel*) @nogc nothrow;
    void g_menu_append_section(_GMenu*, const(char)*, _GMenuModel*) @nogc nothrow;
    void g_menu_insert_submenu(_GMenu*, int, const(char)*, _GMenuModel*) @nogc nothrow;
    void g_menu_prepend_submenu(_GMenu*, const(char)*, _GMenuModel*) @nogc nothrow;
    void g_menu_append_submenu(_GMenu*, const(char)*, _GMenuModel*) @nogc nothrow;
    c_ulong g_menu_item_get_type() @nogc nothrow;
    _GMenuItem* g_menu_item_new(const(char)*, const(char)*) @nogc nothrow;
    _GMenuItem* g_menu_item_new_from_model(_GMenuModel*, int) @nogc nothrow;
    _GMenuItem* g_menu_item_new_submenu(const(char)*, _GMenuModel*) @nogc nothrow;
    _GMenuItem* g_menu_item_new_section(const(char)*, _GMenuModel*) @nogc nothrow;
    _GVariant* g_menu_item_get_attribute_value(_GMenuItem*, const(char)*, const(_GVariantType)*) @nogc nothrow;
    int g_menu_item_get_attribute(_GMenuItem*, const(char)*, const(char)*, ...) @nogc nothrow;
    _GMenuModel* g_menu_item_get_link(_GMenuItem*, const(char)*) @nogc nothrow;
    void g_menu_item_set_attribute_value(_GMenuItem*, const(char)*, _GVariant*) @nogc nothrow;
    void g_menu_item_set_attribute(_GMenuItem*, const(char)*, const(char)*, ...) @nogc nothrow;
    void g_menu_item_set_link(_GMenuItem*, const(char)*, _GMenuModel*) @nogc nothrow;
    void g_menu_item_set_label(_GMenuItem*, const(char)*) @nogc nothrow;
    void g_menu_item_set_submenu(_GMenuItem*, _GMenuModel*) @nogc nothrow;
    void g_menu_item_set_section(_GMenuItem*, _GMenuModel*) @nogc nothrow;
    void g_menu_item_set_action_and_target_value(_GMenuItem*, const(char)*, _GVariant*) @nogc nothrow;
    void g_menu_item_set_action_and_target(_GMenuItem*, const(char)*, const(char)*, ...) @nogc nothrow;
    void g_menu_item_set_detailed_action(_GMenuItem*, const(char)*) @nogc nothrow;
    void g_menu_item_set_icon(_GMenuItem*, _GIcon*) @nogc nothrow;
    uint g_dbus_connection_export_menu_model(_GDBusConnection*, const(char)*, _GMenuModel*, _GError**) @nogc nothrow;
    void g_dbus_connection_unexport_menu_model(_GDBusConnection*, uint) @nogc nothrow;
    int strncasecmp(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    int strcasecmp(const(char)*, const(char)*) @nogc nothrow;
    int ffsll(long) @nogc nothrow;
    int ffsl(c_long) @nogc nothrow;
    alias GMenuModelPrivate = _GMenuModelPrivate;
    struct _GMenuModelPrivate{};
    alias GMenuModelClass = _GMenuModelClass;
    struct _GMenuModelClass
    {
        _GObjectClass parent_class;
        int function(_GMenuModel*) is_mutable;
        int function(_GMenuModel*) get_n_items;
        void function(_GMenuModel*, int, _GHashTable**) get_item_attributes;
        _GMenuAttributeIter* function(_GMenuModel*, int) iterate_item_attributes;
        _GVariant* function(_GMenuModel*, int, const(char)*, const(_GVariantType)*) get_item_attribute_value;
        void function(_GMenuModel*, int, _GHashTable**) get_item_links;
        _GMenuLinkIter* function(_GMenuModel*, int) iterate_item_links;
        _GMenuModel* function(_GMenuModel*, int, const(char)*) get_item_link;
    }
    alias GMenuAttributeIterPrivate = _GMenuAttributeIterPrivate;
    struct _GMenuAttributeIterPrivate{};
    alias GMenuAttributeIterClass = _GMenuAttributeIterClass;
    struct _GMenuAttributeIterClass
    {
        _GObjectClass parent_class;
        int function(_GMenuAttributeIter*, const(char)**, _GVariant**) get_next;
    }
    alias GMenuAttributeIter = _GMenuAttributeIter;
    struct _GMenuAttributeIter
    {
        _GObject parent_instance;
        _GMenuAttributeIterPrivate* priv;
    }
    alias GMenuLinkIterPrivate = _GMenuLinkIterPrivate;
    struct _GMenuLinkIterPrivate{};
    alias GMenuLinkIterClass = _GMenuLinkIterClass;
    struct _GMenuLinkIterClass
    {
        _GObjectClass parent_class;
        int function(_GMenuLinkIter*, const(char)**, _GMenuModel**) get_next;
    }
    alias GMenuLinkIter = _GMenuLinkIter;
    struct _GMenuLinkIter
    {
        _GObject parent_instance;
        _GMenuLinkIterPrivate* priv;
    }
    c_ulong g_menu_model_get_type() @nogc nothrow;
    int g_menu_model_is_mutable(_GMenuModel*) @nogc nothrow;
    int g_menu_model_get_n_items(_GMenuModel*) @nogc nothrow;
    _GMenuAttributeIter* g_menu_model_iterate_item_attributes(_GMenuModel*, int) @nogc nothrow;
    _GVariant* g_menu_model_get_item_attribute_value(_GMenuModel*, int, const(char)*, const(_GVariantType)*) @nogc nothrow;
    int g_menu_model_get_item_attribute(_GMenuModel*, int, const(char)*, const(char)*, ...) @nogc nothrow;
    _GMenuLinkIter* g_menu_model_iterate_item_links(_GMenuModel*, int) @nogc nothrow;
    _GMenuModel* g_menu_model_get_item_link(_GMenuModel*, int, const(char)*) @nogc nothrow;
    void g_menu_model_items_changed(_GMenuModel*, int, int, int) @nogc nothrow;
    int ffs(int) @nogc nothrow;
    c_ulong g_menu_attribute_iter_get_type() @nogc nothrow;
    int g_menu_attribute_iter_get_next(_GMenuAttributeIter*, const(char)**, _GVariant**) @nogc nothrow;
    int g_menu_attribute_iter_next(_GMenuAttributeIter*) @nogc nothrow;
    const(char)* g_menu_attribute_iter_get_name(_GMenuAttributeIter*) @nogc nothrow;
    _GVariant* g_menu_attribute_iter_get_value(_GMenuAttributeIter*) @nogc nothrow;
    char* rindex(const(char)*, int) @nogc nothrow;
    c_ulong g_menu_link_iter_get_type() @nogc nothrow;
    int g_menu_link_iter_get_next(_GMenuLinkIter*, const(char)**, _GMenuModel**) @nogc nothrow;
    int g_menu_link_iter_next(_GMenuLinkIter*) @nogc nothrow;
    const(char)* g_menu_link_iter_get_name(_GMenuLinkIter*) @nogc nothrow;
    _GMenuModel* g_menu_link_iter_get_value(_GMenuLinkIter*) @nogc nothrow;
    char* index(const(char)*, int) @nogc nothrow;
    void bzero(void*, c_ulong) @nogc nothrow;
    alias GMountIface = _GMountIface;
    struct _GMountIface
    {
        _GTypeInterface g_iface;
        void function(_GMount*) changed;
        void function(_GMount*) unmounted;
        _GFile* function(_GMount*) get_root;
        char* function(_GMount*) get_name;
        _GIcon* function(_GMount*) get_icon;
        char* function(_GMount*) get_uuid;
        _GVolume* function(_GMount*) get_volume;
        _GDrive* function(_GMount*) get_drive;
        int function(_GMount*) can_unmount;
        int function(_GMount*) can_eject;
        void function(_GMount*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) unmount;
        int function(_GMount*, _GAsyncResult*, _GError**) unmount_finish;
        void function(_GMount*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) eject;
        int function(_GMount*, _GAsyncResult*, _GError**) eject_finish;
        void function(_GMount*, GMountMountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) remount;
        int function(_GMount*, _GAsyncResult*, _GError**) remount_finish;
        void function(_GMount*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) guess_content_type;
        char** function(_GMount*, _GAsyncResult*, _GError**) guess_content_type_finish;
        char** function(_GMount*, int, _GCancellable*, _GError**) guess_content_type_sync;
        void function(_GMount*) pre_unmount;
        void function(_GMount*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) unmount_with_operation;
        int function(_GMount*, _GAsyncResult*, _GError**) unmount_with_operation_finish;
        void function(_GMount*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) eject_with_operation;
        int function(_GMount*, _GAsyncResult*, _GError**) eject_with_operation_finish;
        _GFile* function(_GMount*) get_default_location;
        const(char)* function(_GMount*) get_sort_key;
        _GIcon* function(_GMount*) get_symbolic_icon;
    }
    c_ulong g_mount_get_type() @nogc nothrow;
    _GFile* g_mount_get_root(_GMount*) @nogc nothrow;
    _GFile* g_mount_get_default_location(_GMount*) @nogc nothrow;
    char* g_mount_get_name(_GMount*) @nogc nothrow;
    _GIcon* g_mount_get_icon(_GMount*) @nogc nothrow;
    _GIcon* g_mount_get_symbolic_icon(_GMount*) @nogc nothrow;
    char* g_mount_get_uuid(_GMount*) @nogc nothrow;
    _GVolume* g_mount_get_volume(_GMount*) @nogc nothrow;
    _GDrive* g_mount_get_drive(_GMount*) @nogc nothrow;
    int g_mount_can_unmount(_GMount*) @nogc nothrow;
    int g_mount_can_eject(_GMount*) @nogc nothrow;
    void g_mount_unmount(_GMount*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_mount_unmount_finish(_GMount*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_mount_eject(_GMount*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_mount_eject_finish(_GMount*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_mount_remount(_GMount*, GMountMountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_mount_remount_finish(_GMount*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_mount_guess_content_type(_GMount*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    char** g_mount_guess_content_type_finish(_GMount*, _GAsyncResult*, _GError**) @nogc nothrow;
    char** g_mount_guess_content_type_sync(_GMount*, int, _GCancellable*, _GError**) @nogc nothrow;
    int g_mount_is_shadowed(_GMount*) @nogc nothrow;
    void g_mount_shadow(_GMount*) @nogc nothrow;
    void g_mount_unshadow(_GMount*) @nogc nothrow;
    void g_mount_unmount_with_operation(_GMount*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_mount_unmount_with_operation_finish(_GMount*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_mount_eject_with_operation(_GMount*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_mount_eject_with_operation_finish(_GMount*, _GAsyncResult*, _GError**) @nogc nothrow;
    const(char)* g_mount_get_sort_key(_GMount*) @nogc nothrow;
    void bcopy(const(void)*, void*, c_ulong) @nogc nothrow;
    int bcmp(const(void)*, const(void)*, c_ulong) @nogc nothrow;
    alias GMountOperationClass = _GMountOperationClass;
    struct _GMountOperationClass
    {
        _GObjectClass parent_class;
        void function(_GMountOperation*, const(char)*, const(char)*, const(char)*, GAskPasswordFlags) ask_password;
        void function(_GMountOperation*, const(char)*, const(char)*[0]) ask_question;
        void function(_GMountOperation*, GMountOperationResult) reply;
        void function(_GMountOperation*) aborted;
        void function(_GMountOperation*, const(char)*, _GArray*, const(char)*[0]) show_processes;
        void function(_GMountOperation*, const(char)*, c_long, c_long) show_unmount_progress;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
        void function() _g_reserved7;
        void function() _g_reserved8;
        void function() _g_reserved9;
    }
    alias GMountOperationPrivate = _GMountOperationPrivate;
    struct _GMountOperationPrivate{};
    c_ulong g_mount_operation_get_type() @nogc nothrow;
    _GMountOperation* g_mount_operation_new() @nogc nothrow;
    const(char)* g_mount_operation_get_username(_GMountOperation*) @nogc nothrow;
    void g_mount_operation_set_username(_GMountOperation*, const(char)*) @nogc nothrow;
    const(char)* g_mount_operation_get_password(_GMountOperation*) @nogc nothrow;
    void g_mount_operation_set_password(_GMountOperation*, const(char)*) @nogc nothrow;
    int g_mount_operation_get_anonymous(_GMountOperation*) @nogc nothrow;
    void g_mount_operation_set_anonymous(_GMountOperation*, int) @nogc nothrow;
    const(char)* g_mount_operation_get_domain(_GMountOperation*) @nogc nothrow;
    void g_mount_operation_set_domain(_GMountOperation*, const(char)*) @nogc nothrow;
    GPasswordSave g_mount_operation_get_password_save(_GMountOperation*) @nogc nothrow;
    void g_mount_operation_set_password_save(_GMountOperation*, GPasswordSave) @nogc nothrow;
    int g_mount_operation_get_choice(_GMountOperation*) @nogc nothrow;
    void g_mount_operation_set_choice(_GMountOperation*, int) @nogc nothrow;
    void g_mount_operation_reply(_GMountOperation*, GMountOperationResult) @nogc nothrow;
    alias GNativeVolumeMonitor = _GNativeVolumeMonitor;
    struct _GNativeVolumeMonitor
    {
        _GVolumeMonitor parent_instance;
    }
    alias GNativeVolumeMonitorClass = _GNativeVolumeMonitorClass;
    struct _GNativeVolumeMonitorClass
    {
        _GVolumeMonitorClass parent_class;
        _GMount* function(const(char)*, _GCancellable*) get_mount_for_mount_path;
    }
    c_ulong g_native_volume_monitor_get_type() @nogc nothrow;
    char* stpncpy(char*, const(char)*, c_ulong) @nogc nothrow;
    alias GNetworkAddressClass = _GNetworkAddressClass;
    struct _GNetworkAddressClass
    {
        _GObjectClass parent_class;
    }
    alias GNetworkAddressPrivate = _GNetworkAddressPrivate;
    struct _GNetworkAddressPrivate{};
    c_ulong g_network_address_get_type() @nogc nothrow;
    _GSocketConnectable* g_network_address_new(const(char)*, ushort) @nogc nothrow;
    _GSocketConnectable* g_network_address_new_loopback(ushort) @nogc nothrow;
    _GSocketConnectable* g_network_address_parse(const(char)*, ushort, _GError**) @nogc nothrow;
    _GSocketConnectable* g_network_address_parse_uri(const(char)*, ushort, _GError**) @nogc nothrow;
    const(char)* g_network_address_get_hostname(_GNetworkAddress*) @nogc nothrow;
    ushort g_network_address_get_port(_GNetworkAddress*) @nogc nothrow;
    const(char)* g_network_address_get_scheme(_GNetworkAddress*) @nogc nothrow;
    char* __stpncpy(char*, const(char)*, c_ulong) @nogc nothrow;
    char* stpcpy(char*, const(char)*) @nogc nothrow;
    alias GNetworkMonitorInterface = _GNetworkMonitorInterface;
    struct _GNetworkMonitorInterface
    {
        _GTypeInterface g_iface;
        void function(_GNetworkMonitor*, int) network_changed;
        int function(_GNetworkMonitor*, _GSocketConnectable*, _GCancellable*, _GError**) can_reach;
        void function(_GNetworkMonitor*, _GSocketConnectable*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) can_reach_async;
        int function(_GNetworkMonitor*, _GAsyncResult*, _GError**) can_reach_finish;
    }
    c_ulong g_network_monitor_get_type() @nogc nothrow;
    _GNetworkMonitor* g_network_monitor_get_default() @nogc nothrow;
    int g_network_monitor_get_network_available(_GNetworkMonitor*) @nogc nothrow;
    int g_network_monitor_get_network_metered(_GNetworkMonitor*) @nogc nothrow;
    GNetworkConnectivity g_network_monitor_get_connectivity(_GNetworkMonitor*) @nogc nothrow;
    int g_network_monitor_can_reach(_GNetworkMonitor*, _GSocketConnectable*, _GCancellable*, _GError**) @nogc nothrow;
    void g_network_monitor_can_reach_async(_GNetworkMonitor*, _GSocketConnectable*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_network_monitor_can_reach_finish(_GNetworkMonitor*, _GAsyncResult*, _GError**) @nogc nothrow;
    char* __stpcpy(char*, const(char)*) @nogc nothrow;
    char* strsignal(int) @nogc nothrow;
    alias GNetworkServiceClass = _GNetworkServiceClass;
    struct _GNetworkServiceClass
    {
        _GObjectClass parent_class;
    }
    alias GNetworkServicePrivate = _GNetworkServicePrivate;
    struct _GNetworkServicePrivate{};
    c_ulong g_network_service_get_type() @nogc nothrow;
    _GSocketConnectable* g_network_service_new(const(char)*, const(char)*, const(char)*) @nogc nothrow;
    const(char)* g_network_service_get_service(_GNetworkService*) @nogc nothrow;
    const(char)* g_network_service_get_protocol(_GNetworkService*) @nogc nothrow;
    const(char)* g_network_service_get_domain(_GNetworkService*) @nogc nothrow;
    const(char)* g_network_service_get_scheme(_GNetworkService*) @nogc nothrow;
    void g_network_service_set_scheme(_GNetworkService*, const(char)*) @nogc nothrow;
    char* strsep(char**, const(char)*) @nogc nothrow;
    void explicit_bzero(void*, c_ulong) @nogc nothrow;
    c_ulong g_notification_get_type() @nogc nothrow;
    _GNotification* g_notification_new(const(char)*) @nogc nothrow;
    void g_notification_set_title(_GNotification*, const(char)*) @nogc nothrow;
    void g_notification_set_body(_GNotification*, const(char)*) @nogc nothrow;
    void g_notification_set_icon(_GNotification*, _GIcon*) @nogc nothrow;
    void g_notification_set_urgent(_GNotification*, int) @nogc nothrow;
    void g_notification_set_priority(_GNotification*, GNotificationPriority) @nogc nothrow;
    void g_notification_add_button(_GNotification*, const(char)*, const(char)*) @nogc nothrow;
    void g_notification_add_button_with_target(_GNotification*, const(char)*, const(char)*, const(char)*, ...) @nogc nothrow;
    void g_notification_add_button_with_target_value(_GNotification*, const(char)*, const(char)*, _GVariant*) @nogc nothrow;
    void g_notification_set_default_action(_GNotification*, const(char)*) @nogc nothrow;
    void g_notification_set_default_action_and_target(_GNotification*, const(char)*, const(char)*, ...) @nogc nothrow;
    void g_notification_set_default_action_and_target_value(_GNotification*, const(char)*, _GVariant*) @nogc nothrow;
    char* strerror_l(int, __locale_struct*) @nogc nothrow;
    alias GOutputStreamClass = _GOutputStreamClass;
    struct _GOutputStreamClass
    {
        _GObjectClass parent_class;
        c_long function(_GOutputStream*, const(void)*, c_ulong, _GCancellable*, _GError**) write_fn;
        c_long function(_GOutputStream*, _GInputStream*, GOutputStreamSpliceFlags, _GCancellable*, _GError**) splice;
        int function(_GOutputStream*, _GCancellable*, _GError**) flush;
        int function(_GOutputStream*, _GCancellable*, _GError**) close_fn;
        void function(_GOutputStream*, const(void)*, c_ulong, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) write_async;
        c_long function(_GOutputStream*, _GAsyncResult*, _GError**) write_finish;
        void function(_GOutputStream*, _GInputStream*, GOutputStreamSpliceFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) splice_async;
        c_long function(_GOutputStream*, _GAsyncResult*, _GError**) splice_finish;
        void function(_GOutputStream*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) flush_async;
        int function(_GOutputStream*, _GAsyncResult*, _GError**) flush_finish;
        void function(_GOutputStream*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) close_async;
        int function(_GOutputStream*, _GAsyncResult*, _GError**) close_finish;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
        void function() _g_reserved7;
        void function() _g_reserved8;
    }
    alias GOutputStreamPrivate = _GOutputStreamPrivate;
    struct _GOutputStreamPrivate{};
    c_ulong g_output_stream_get_type() @nogc nothrow;
    c_long g_output_stream_write(_GOutputStream*, const(void)*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    int g_output_stream_write_all(_GOutputStream*, const(void)*, c_ulong, c_ulong*, _GCancellable*, _GError**) @nogc nothrow;
    int g_output_stream_printf(_GOutputStream*, c_ulong*, _GCancellable*, _GError**, const(char)*, ...) @nogc nothrow;
    int g_output_stream_vprintf(_GOutputStream*, c_ulong*, _GCancellable*, _GError**, const(char)*, va_list*) @nogc nothrow;
    c_long g_output_stream_write_bytes(_GOutputStream*, _GBytes*, _GCancellable*, _GError**) @nogc nothrow;
    c_long g_output_stream_splice(_GOutputStream*, _GInputStream*, GOutputStreamSpliceFlags, _GCancellable*, _GError**) @nogc nothrow;
    int g_output_stream_flush(_GOutputStream*, _GCancellable*, _GError**) @nogc nothrow;
    int g_output_stream_close(_GOutputStream*, _GCancellable*, _GError**) @nogc nothrow;
    void g_output_stream_write_async(_GOutputStream*, const(void)*, c_ulong, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    c_long g_output_stream_write_finish(_GOutputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_output_stream_write_all_async(_GOutputStream*, const(void)*, c_ulong, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_output_stream_write_all_finish(_GOutputStream*, _GAsyncResult*, c_ulong*, _GError**) @nogc nothrow;
    void g_output_stream_write_bytes_async(_GOutputStream*, _GBytes*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    c_long g_output_stream_write_bytes_finish(_GOutputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_output_stream_splice_async(_GOutputStream*, _GInputStream*, GOutputStreamSpliceFlags, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    c_long g_output_stream_splice_finish(_GOutputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_output_stream_flush_async(_GOutputStream*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_output_stream_flush_finish(_GOutputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_output_stream_close_async(_GOutputStream*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_output_stream_close_finish(_GOutputStream*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_output_stream_is_closed(_GOutputStream*) @nogc nothrow;
    int g_output_stream_is_closing(_GOutputStream*) @nogc nothrow;
    int g_output_stream_has_pending(_GOutputStream*) @nogc nothrow;
    int g_output_stream_set_pending(_GOutputStream*, _GError**) @nogc nothrow;
    void g_output_stream_clear_pending(_GOutputStream*) @nogc nothrow;
    int strerror_r(int, char*, c_ulong) @nogc nothrow;
    char* strerror(int) @nogc nothrow;
    alias GPermissionPrivate = _GPermissionPrivate;
    struct _GPermissionPrivate{};
    alias GPermissionClass = _GPermissionClass;
    struct _GPermissionClass
    {
        _GObjectClass parent_class;
        int function(_GPermission*, _GCancellable*, _GError**) acquire;
        void function(_GPermission*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) acquire_async;
        int function(_GPermission*, _GAsyncResult*, _GError**) acquire_finish;
        int function(_GPermission*, _GCancellable*, _GError**) release;
        void function(_GPermission*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) release_async;
        int function(_GPermission*, _GAsyncResult*, _GError**) release_finish;
        void*[16] reserved;
    }
    c_ulong g_permission_get_type() @nogc nothrow;
    int g_permission_acquire(_GPermission*, _GCancellable*, _GError**) @nogc nothrow;
    void g_permission_acquire_async(_GPermission*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_permission_acquire_finish(_GPermission*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_permission_release(_GPermission*, _GCancellable*, _GError**) @nogc nothrow;
    void g_permission_release_async(_GPermission*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_permission_release_finish(_GPermission*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_permission_get_allowed(_GPermission*) @nogc nothrow;
    int g_permission_get_can_acquire(_GPermission*) @nogc nothrow;
    int g_permission_get_can_release(_GPermission*) @nogc nothrow;
    void g_permission_impl_update(_GPermission*, int, int, int) @nogc nothrow;
    c_ulong strnlen(const(char)*, c_ulong) @nogc nothrow;
    alias GPollableInputStreamInterface = _GPollableInputStreamInterface;
    struct _GPollableInputStreamInterface
    {
        _GTypeInterface g_iface;
        int function(_GPollableInputStream*) can_poll;
        int function(_GPollableInputStream*) is_readable;
        _GSource* function(_GPollableInputStream*, _GCancellable*) create_source;
        c_long function(_GPollableInputStream*, void*, c_ulong, _GError**) read_nonblocking;
    }
    c_ulong g_pollable_input_stream_get_type() @nogc nothrow;
    int g_pollable_input_stream_can_poll(_GPollableInputStream*) @nogc nothrow;
    int g_pollable_input_stream_is_readable(_GPollableInputStream*) @nogc nothrow;
    _GSource* g_pollable_input_stream_create_source(_GPollableInputStream*, _GCancellable*) @nogc nothrow;
    c_long g_pollable_input_stream_read_nonblocking(_GPollableInputStream*, void*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    c_ulong strlen(const(char)*) @nogc nothrow;
    alias GPollableOutputStreamInterface = _GPollableOutputStreamInterface;
    struct _GPollableOutputStreamInterface
    {
        _GTypeInterface g_iface;
        int function(_GPollableOutputStream*) can_poll;
        int function(_GPollableOutputStream*) is_writable;
        _GSource* function(_GPollableOutputStream*, _GCancellable*) create_source;
        c_long function(_GPollableOutputStream*, const(void)*, c_ulong, _GError**) write_nonblocking;
    }
    c_ulong g_pollable_output_stream_get_type() @nogc nothrow;
    int g_pollable_output_stream_can_poll(_GPollableOutputStream*) @nogc nothrow;
    int g_pollable_output_stream_is_writable(_GPollableOutputStream*) @nogc nothrow;
    _GSource* g_pollable_output_stream_create_source(_GPollableOutputStream*, _GCancellable*) @nogc nothrow;
    c_long g_pollable_output_stream_write_nonblocking(_GPollableOutputStream*, const(void)*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    char* strtok_r(char*, const(char)*, char**) @nogc nothrow;
    _GSource* g_pollable_source_new(_GObject*) @nogc nothrow;
    _GSource* g_pollable_source_new_full(void*, _GSource*, _GCancellable*) @nogc nothrow;
    c_long g_pollable_stream_read(_GInputStream*, void*, c_ulong, int, _GCancellable*, _GError**) @nogc nothrow;
    c_long g_pollable_stream_write(_GOutputStream*, const(void)*, c_ulong, int, _GCancellable*, _GError**) @nogc nothrow;
    int g_pollable_stream_write_all(_GOutputStream*, const(void)*, c_ulong, int, c_ulong*, _GCancellable*, _GError**) @nogc nothrow;
    char* __strtok_r(char*, const(char)*, char**) @nogc nothrow;
    c_ulong g_property_action_get_type() @nogc nothrow;
    _GPropertyAction* g_property_action_new(const(char)*, void*, const(char)*) @nogc nothrow;
    char* strtok(char*, const(char)*) @nogc nothrow;
    alias GProxyInterface = _GProxyInterface;
    struct _GProxyInterface
    {
        _GTypeInterface g_iface;
        _GIOStream* function(_GProxy*, _GIOStream*, _GProxyAddress*, _GCancellable*, _GError**) connect;
        void function(_GProxy*, _GIOStream*, _GProxyAddress*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) connect_async;
        _GIOStream* function(_GProxy*, _GAsyncResult*, _GError**) connect_finish;
        int function(_GProxy*) supports_hostname;
    }
    c_ulong g_proxy_get_type() @nogc nothrow;
    _GProxy* g_proxy_get_default_for_protocol(const(char)*) @nogc nothrow;
    _GIOStream* g_proxy_connect(_GProxy*, _GIOStream*, _GProxyAddress*, _GCancellable*, _GError**) @nogc nothrow;
    void g_proxy_connect_async(_GProxy*, _GIOStream*, _GProxyAddress*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GIOStream* g_proxy_connect_finish(_GProxy*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_proxy_supports_hostname(_GProxy*) @nogc nothrow;
    char* strstr(const(char)*, const(char)*) @nogc nothrow;
    char* strpbrk(const(char)*, const(char)*) @nogc nothrow;
    alias GProxyAddressClass = _GProxyAddressClass;
    struct _GProxyAddressClass
    {
        _GInetSocketAddressClass parent_class;
    }
    alias GProxyAddressPrivate = _GProxyAddressPrivate;
    struct _GProxyAddressPrivate{};
    c_ulong g_proxy_address_get_type() @nogc nothrow;
    _GSocketAddress* g_proxy_address_new(_GInetAddress*, ushort, const(char)*, const(char)*, ushort, const(char)*, const(char)*) @nogc nothrow;
    const(char)* g_proxy_address_get_protocol(_GProxyAddress*) @nogc nothrow;
    const(char)* g_proxy_address_get_destination_protocol(_GProxyAddress*) @nogc nothrow;
    const(char)* g_proxy_address_get_destination_hostname(_GProxyAddress*) @nogc nothrow;
    ushort g_proxy_address_get_destination_port(_GProxyAddress*) @nogc nothrow;
    const(char)* g_proxy_address_get_username(_GProxyAddress*) @nogc nothrow;
    const(char)* g_proxy_address_get_password(_GProxyAddress*) @nogc nothrow;
    const(char)* g_proxy_address_get_uri(_GProxyAddress*) @nogc nothrow;
    c_ulong strspn(const(char)*, const(char)*) @nogc nothrow;
    c_ulong strcspn(const(char)*, const(char)*) @nogc nothrow;
    alias GProxyAddressEnumeratorClass = _GProxyAddressEnumeratorClass;
    struct _GProxyAddressEnumeratorClass
    {
        _GSocketAddressEnumeratorClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
        void function() _g_reserved7;
    }
    alias GProxyAddressEnumeratorPrivate = _GProxyAddressEnumeratorPrivate;
    struct _GProxyAddressEnumeratorPrivate{};
    c_ulong g_proxy_address_enumerator_get_type() @nogc nothrow;
    char* strrchr(const(char)*, int) @nogc nothrow;
    alias GProxyResolverInterface = _GProxyResolverInterface;
    struct _GProxyResolverInterface
    {
        _GTypeInterface g_iface;
        int function(_GProxyResolver*) is_supported;
        char** function(_GProxyResolver*, const(char)*, _GCancellable*, _GError**) lookup;
        void function(_GProxyResolver*, const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) lookup_async;
        char** function(_GProxyResolver*, _GAsyncResult*, _GError**) lookup_finish;
    }
    c_ulong g_proxy_resolver_get_type() @nogc nothrow;
    _GProxyResolver* g_proxy_resolver_get_default() @nogc nothrow;
    int g_proxy_resolver_is_supported(_GProxyResolver*) @nogc nothrow;
    char** g_proxy_resolver_lookup(_GProxyResolver*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    void g_proxy_resolver_lookup_async(_GProxyResolver*, const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    char** g_proxy_resolver_lookup_finish(_GProxyResolver*, _GAsyncResult*, _GError**) @nogc nothrow;
    char* strchr(const(char)*, int) @nogc nothrow;
    alias GRemoteActionGroupInterface = _GRemoteActionGroupInterface;
    struct _GRemoteActionGroupInterface
    {
        _GTypeInterface g_iface;
        void function(_GRemoteActionGroup*, const(char)*, _GVariant*, _GVariant*) activate_action_full;
        void function(_GRemoteActionGroup*, const(char)*, _GVariant*, _GVariant*) change_action_state_full;
    }
    c_ulong g_remote_action_group_get_type() @nogc nothrow;
    void g_remote_action_group_activate_action_full(_GRemoteActionGroup*, const(char)*, _GVariant*, _GVariant*) @nogc nothrow;
    void g_remote_action_group_change_action_state_full(_GRemoteActionGroup*, const(char)*, _GVariant*, _GVariant*) @nogc nothrow;
    char* strndup(const(char)*, c_ulong) @nogc nothrow;
    char* strdup(const(char)*) @nogc nothrow;
    alias GResolverPrivate = _GResolverPrivate;
    struct _GResolverPrivate{};
    alias GResolverClass = _GResolverClass;
    struct _GResolverClass
    {
        _GObjectClass parent_class;
        void function(_GResolver*) reload;
        _GList* function(_GResolver*, const(char)*, _GCancellable*, _GError**) lookup_by_name;
        void function(_GResolver*, const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) lookup_by_name_async;
        _GList* function(_GResolver*, _GAsyncResult*, _GError**) lookup_by_name_finish;
        char* function(_GResolver*, _GInetAddress*, _GCancellable*, _GError**) lookup_by_address;
        void function(_GResolver*, _GInetAddress*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) lookup_by_address_async;
        char* function(_GResolver*, _GAsyncResult*, _GError**) lookup_by_address_finish;
        _GList* function(_GResolver*, const(char)*, _GCancellable*, _GError**) lookup_service;
        void function(_GResolver*, const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) lookup_service_async;
        _GList* function(_GResolver*, _GAsyncResult*, _GError**) lookup_service_finish;
        _GList* function(_GResolver*, const(char)*, GResolverRecordType, _GCancellable*, _GError**) lookup_records;
        void function(_GResolver*, const(char)*, GResolverRecordType, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) lookup_records_async;
        _GList* function(_GResolver*, _GAsyncResult*, _GError**) lookup_records_finish;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
    }
    c_ulong g_resolver_get_type() @nogc nothrow;
    _GResolver* g_resolver_get_default() @nogc nothrow;
    void g_resolver_set_default(_GResolver*) @nogc nothrow;
    _GList* g_resolver_lookup_by_name(_GResolver*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    void g_resolver_lookup_by_name_async(_GResolver*, const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GList* g_resolver_lookup_by_name_finish(_GResolver*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_resolver_free_addresses(_GList*) @nogc nothrow;
    char* g_resolver_lookup_by_address(_GResolver*, _GInetAddress*, _GCancellable*, _GError**) @nogc nothrow;
    void g_resolver_lookup_by_address_async(_GResolver*, _GInetAddress*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    char* g_resolver_lookup_by_address_finish(_GResolver*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GList* g_resolver_lookup_service(_GResolver*, const(char)*, const(char)*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    void g_resolver_lookup_service_async(_GResolver*, const(char)*, const(char)*, const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GList* g_resolver_lookup_service_finish(_GResolver*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GList* g_resolver_lookup_records(_GResolver*, const(char)*, GResolverRecordType, _GCancellable*, _GError**) @nogc nothrow;
    void g_resolver_lookup_records_async(_GResolver*, const(char)*, GResolverRecordType, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GList* g_resolver_lookup_records_finish(_GResolver*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_resolver_free_targets(_GList*) @nogc nothrow;
    uint g_resolver_error_quark() @nogc nothrow;
    uint g_resource_error_quark() @nogc nothrow;
    alias GStaticResource = _GStaticResource;
    struct _GStaticResource
    {
        const(ubyte)* data;
        c_ulong data_len;
        _GResource* resource;
        _GStaticResource* next;
        void* padding;
    }
    c_ulong g_resource_get_type() @nogc nothrow;
    _GResource* g_resource_new_from_data(_GBytes*, _GError**) @nogc nothrow;
    _GResource* g_resource_ref(_GResource*) @nogc nothrow;
    void g_resource_unref(_GResource*) @nogc nothrow;
    _GResource* g_resource_load(const(char)*, _GError**) @nogc nothrow;
    _GInputStream* g_resource_open_stream(_GResource*, const(char)*, GResourceLookupFlags, _GError**) @nogc nothrow;
    _GBytes* g_resource_lookup_data(_GResource*, const(char)*, GResourceLookupFlags, _GError**) @nogc nothrow;
    char** g_resource_enumerate_children(_GResource*, const(char)*, GResourceLookupFlags, _GError**) @nogc nothrow;
    int g_resource_get_info(_GResource*, const(char)*, GResourceLookupFlags, c_ulong*, uint*, _GError**) @nogc nothrow;
    void g_resources_register(_GResource*) @nogc nothrow;
    void g_resources_unregister(_GResource*) @nogc nothrow;
    _GInputStream* g_resources_open_stream(const(char)*, GResourceLookupFlags, _GError**) @nogc nothrow;
    _GBytes* g_resources_lookup_data(const(char)*, GResourceLookupFlags, _GError**) @nogc nothrow;
    char** g_resources_enumerate_children(const(char)*, GResourceLookupFlags, _GError**) @nogc nothrow;
    int g_resources_get_info(const(char)*, GResourceLookupFlags, c_ulong*, uint*, _GError**) @nogc nothrow;
    void g_static_resource_init(_GStaticResource*) @nogc nothrow;
    void g_static_resource_fini(_GStaticResource*) @nogc nothrow;
    _GResource* g_static_resource_get_resource(_GStaticResource*) @nogc nothrow;
    c_ulong strxfrm_l(char*, const(char)*, c_ulong, __locale_struct*) @nogc nothrow;
    int strcoll_l(const(char)*, const(char)*, __locale_struct*) @nogc nothrow;
    alias GSeekableIface = _GSeekableIface;
    struct _GSeekableIface
    {
        _GTypeInterface g_iface;
        c_long function(_GSeekable*) tell;
        int function(_GSeekable*) can_seek;
        int function(_GSeekable*, c_long, GSeekType, _GCancellable*, _GError**) seek;
        int function(_GSeekable*) can_truncate;
        int function(_GSeekable*, c_long, _GCancellable*, _GError**) truncate_fn;
    }
    c_ulong g_seekable_get_type() @nogc nothrow;
    c_long g_seekable_tell(_GSeekable*) @nogc nothrow;
    int g_seekable_can_seek(_GSeekable*) @nogc nothrow;
    int g_seekable_seek(_GSeekable*, c_long, GSeekType, _GCancellable*, _GError**) @nogc nothrow;
    int g_seekable_can_truncate(_GSeekable*) @nogc nothrow;
    int g_seekable_truncate(_GSeekable*, c_long, _GCancellable*, _GError**) @nogc nothrow;
    c_ulong strxfrm(char*, const(char)*, c_ulong) @nogc nothrow;
    alias GSettingsPrivate = _GSettingsPrivate;
    struct _GSettingsPrivate{};
    alias GSettingsClass = _GSettingsClass;
    struct _GSettingsClass
    {
        _GObjectClass parent_class;
        void function(_GSettings*, const(char)*) writable_changed;
        void function(_GSettings*, const(char)*) changed;
        int function(_GSettings*, uint) writable_change_event;
        int function(_GSettings*, const(uint)*, int) change_event;
        void*[20] padding;
    }
    c_ulong g_settings_get_type() @nogc nothrow;
    const(const(char)*)* g_settings_list_schemas() @nogc nothrow;
    const(const(char)*)* g_settings_list_relocatable_schemas() @nogc nothrow;
    _GSettings* g_settings_new(const(char)*) @nogc nothrow;
    _GSettings* g_settings_new_with_path(const(char)*, const(char)*) @nogc nothrow;
    _GSettings* g_settings_new_with_backend(const(char)*, _GSettingsBackend*) @nogc nothrow;
    _GSettings* g_settings_new_with_backend_and_path(const(char)*, _GSettingsBackend*, const(char)*) @nogc nothrow;
    _GSettings* g_settings_new_full(_GSettingsSchema*, _GSettingsBackend*, const(char)*) @nogc nothrow;
    char** g_settings_list_children(_GSettings*) @nogc nothrow;
    char** g_settings_list_keys(_GSettings*) @nogc nothrow;
    _GVariant* g_settings_get_range(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_range_check(_GSettings*, const(char)*, _GVariant*) @nogc nothrow;
    int g_settings_set_value(_GSettings*, const(char)*, _GVariant*) @nogc nothrow;
    _GVariant* g_settings_get_value(_GSettings*, const(char)*) @nogc nothrow;
    _GVariant* g_settings_get_user_value(_GSettings*, const(char)*) @nogc nothrow;
    _GVariant* g_settings_get_default_value(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set(_GSettings*, const(char)*, const(char)*, ...) @nogc nothrow;
    void g_settings_get(_GSettings*, const(char)*, const(char)*, ...) @nogc nothrow;
    void g_settings_reset(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_get_int(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set_int(_GSettings*, const(char)*, int) @nogc nothrow;
    c_long g_settings_get_int64(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set_int64(_GSettings*, const(char)*, c_long) @nogc nothrow;
    uint g_settings_get_uint(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set_uint(_GSettings*, const(char)*, uint) @nogc nothrow;
    c_ulong g_settings_get_uint64(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set_uint64(_GSettings*, const(char)*, c_ulong) @nogc nothrow;
    char* g_settings_get_string(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set_string(_GSettings*, const(char)*, const(char)*) @nogc nothrow;
    int g_settings_get_boolean(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set_boolean(_GSettings*, const(char)*, int) @nogc nothrow;
    double g_settings_get_double(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set_double(_GSettings*, const(char)*, double) @nogc nothrow;
    char** g_settings_get_strv(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set_strv(_GSettings*, const(char)*, const(const(char)*)*) @nogc nothrow;
    int g_settings_get_enum(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set_enum(_GSettings*, const(char)*, int) @nogc nothrow;
    uint g_settings_get_flags(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_set_flags(_GSettings*, const(char)*, uint) @nogc nothrow;
    _GSettings* g_settings_get_child(_GSettings*, const(char)*) @nogc nothrow;
    int g_settings_is_writable(_GSettings*, const(char)*) @nogc nothrow;
    void g_settings_delay(_GSettings*) @nogc nothrow;
    void g_settings_apply(_GSettings*) @nogc nothrow;
    void g_settings_revert(_GSettings*) @nogc nothrow;
    int g_settings_get_has_unapplied(_GSettings*) @nogc nothrow;
    void g_settings_sync() @nogc nothrow;
    alias GSettingsBindSetMapping = _GVariant* function(const(_GValue)*, const(_GVariantType)*, void*);
    alias GSettingsBindGetMapping = int function(_GValue*, _GVariant*, void*);
    alias GSettingsGetMapping = int function(_GVariant*, void**, void*);
    alias GSettingsBindFlags = _Anonymous_121;
    enum _Anonymous_121
    {
        G_SETTINGS_BIND_DEFAULT = 0,
        G_SETTINGS_BIND_GET = 1,
        G_SETTINGS_BIND_SET = 2,
        G_SETTINGS_BIND_NO_SENSITIVITY = 4,
        G_SETTINGS_BIND_GET_NO_CHANGES = 8,
        G_SETTINGS_BIND_INVERT_BOOLEAN = 16,
    }
    enum G_SETTINGS_BIND_DEFAULT = _Anonymous_121.G_SETTINGS_BIND_DEFAULT;
    enum G_SETTINGS_BIND_GET = _Anonymous_121.G_SETTINGS_BIND_GET;
    enum G_SETTINGS_BIND_SET = _Anonymous_121.G_SETTINGS_BIND_SET;
    enum G_SETTINGS_BIND_NO_SENSITIVITY = _Anonymous_121.G_SETTINGS_BIND_NO_SENSITIVITY;
    enum G_SETTINGS_BIND_GET_NO_CHANGES = _Anonymous_121.G_SETTINGS_BIND_GET_NO_CHANGES;
    enum G_SETTINGS_BIND_INVERT_BOOLEAN = _Anonymous_121.G_SETTINGS_BIND_INVERT_BOOLEAN;
    void g_settings_bind(_GSettings*, const(char)*, void*, const(char)*, GSettingsBindFlags) @nogc nothrow;
    void g_settings_bind_with_mapping(_GSettings*, const(char)*, void*, const(char)*, GSettingsBindFlags, int function(_GValue*, _GVariant*, void*), _GVariant* function(const(_GValue)*, const(_GVariantType)*, void*), void*, void function(void*)) @nogc nothrow;
    void g_settings_bind_writable(_GSettings*, const(char)*, void*, const(char)*, int) @nogc nothrow;
    void g_settings_unbind(void*, const(char)*) @nogc nothrow;
    _GAction* g_settings_create_action(_GSettings*, const(char)*) @nogc nothrow;
    void* g_settings_get_mapped(_GSettings*, const(char)*, int function(_GVariant*, void**, void*), void*) @nogc nothrow;
    alias GSettingsSchemaSource = _GSettingsSchemaSource;
    struct _GSettingsSchemaSource{};
    alias GSettingsSchema = _GSettingsSchema;
    struct _GSettingsSchema{};
    alias GSettingsSchemaKey = _GSettingsSchemaKey;
    struct _GSettingsSchemaKey{};
    int strcoll(const(char)*, const(char)*) @nogc nothrow;
    c_ulong g_settings_schema_source_get_type() @nogc nothrow;
    _GSettingsSchemaSource* g_settings_schema_source_get_default() @nogc nothrow;
    _GSettingsSchemaSource* g_settings_schema_source_ref(_GSettingsSchemaSource*) @nogc nothrow;
    void g_settings_schema_source_unref(_GSettingsSchemaSource*) @nogc nothrow;
    _GSettingsSchemaSource* g_settings_schema_source_new_from_directory(const(char)*, _GSettingsSchemaSource*, int, _GError**) @nogc nothrow;
    _GSettingsSchema* g_settings_schema_source_lookup(_GSettingsSchemaSource*, const(char)*, int) @nogc nothrow;
    void g_settings_schema_source_list_schemas(_GSettingsSchemaSource*, int, char***, char***) @nogc nothrow;
    c_ulong g_settings_schema_get_type() @nogc nothrow;
    _GSettingsSchema* g_settings_schema_ref(_GSettingsSchema*) @nogc nothrow;
    void g_settings_schema_unref(_GSettingsSchema*) @nogc nothrow;
    const(char)* g_settings_schema_get_id(_GSettingsSchema*) @nogc nothrow;
    const(char)* g_settings_schema_get_path(_GSettingsSchema*) @nogc nothrow;
    _GSettingsSchemaKey* g_settings_schema_get_key(_GSettingsSchema*, const(char)*) @nogc nothrow;
    int g_settings_schema_has_key(_GSettingsSchema*, const(char)*) @nogc nothrow;
    char** g_settings_schema_list_keys(_GSettingsSchema*) @nogc nothrow;
    char** g_settings_schema_list_children(_GSettingsSchema*) @nogc nothrow;
    c_ulong g_settings_schema_key_get_type() @nogc nothrow;
    _GSettingsSchemaKey* g_settings_schema_key_ref(_GSettingsSchemaKey*) @nogc nothrow;
    void g_settings_schema_key_unref(_GSettingsSchemaKey*) @nogc nothrow;
    const(_GVariantType)* g_settings_schema_key_get_value_type(_GSettingsSchemaKey*) @nogc nothrow;
    _GVariant* g_settings_schema_key_get_default_value(_GSettingsSchemaKey*) @nogc nothrow;
    _GVariant* g_settings_schema_key_get_range(_GSettingsSchemaKey*) @nogc nothrow;
    int g_settings_schema_key_range_check(_GSettingsSchemaKey*, _GVariant*) @nogc nothrow;
    const(char)* g_settings_schema_key_get_name(_GSettingsSchemaKey*) @nogc nothrow;
    const(char)* g_settings_schema_key_get_summary(_GSettingsSchemaKey*) @nogc nothrow;
    const(char)* g_settings_schema_key_get_description(_GSettingsSchemaKey*) @nogc nothrow;
    int strncmp(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    c_ulong g_simple_action_get_type() @nogc nothrow;
    _GSimpleAction* g_simple_action_new(const(char)*, const(_GVariantType)*) @nogc nothrow;
    _GSimpleAction* g_simple_action_new_stateful(const(char)*, const(_GVariantType)*, _GVariant*) @nogc nothrow;
    void g_simple_action_set_enabled(_GSimpleAction*, int) @nogc nothrow;
    void g_simple_action_set_state(_GSimpleAction*, _GVariant*) @nogc nothrow;
    void g_simple_action_set_state_hint(_GSimpleAction*, _GVariant*) @nogc nothrow;
    int strcmp(const(char)*, const(char)*) @nogc nothrow;
    char* strncat(char*, const(char)*, c_ulong) @nogc nothrow;
    alias GSimpleActionGroupPrivate = _GSimpleActionGroupPrivate;
    struct _GSimpleActionGroupPrivate{};
    alias GSimpleActionGroupClass = _GSimpleActionGroupClass;
    struct _GSimpleActionGroupClass
    {
        _GObjectClass parent_class;
        void*[12] padding;
    }
    c_ulong g_simple_action_group_get_type() @nogc nothrow;
    _GSimpleActionGroup* g_simple_action_group_new() @nogc nothrow;
    _GAction* g_simple_action_group_lookup(_GSimpleActionGroup*, const(char)*) @nogc nothrow;
    void g_simple_action_group_insert(_GSimpleActionGroup*, _GAction*) @nogc nothrow;
    void g_simple_action_group_remove(_GSimpleActionGroup*, const(char)*) @nogc nothrow;
    void g_simple_action_group_add_entries(_GSimpleActionGroup*, const(_GActionEntry)*, int, void*) @nogc nothrow;
    char* strcat(char*, const(char)*) @nogc nothrow;
    char* strncpy(char*, const(char)*, c_ulong) @nogc nothrow;
    char* strcpy(char*, const(char)*) @nogc nothrow;
    alias GSimpleAsyncResultClass = _GSimpleAsyncResultClass;
    struct _GSimpleAsyncResultClass{};
    c_ulong g_simple_async_result_get_type() @nogc nothrow;
    _GSimpleAsyncResult* g_simple_async_result_new(_GObject*, void function(_GObject*, _GAsyncResult*, void*), void*, void*) @nogc nothrow;
    _GSimpleAsyncResult* g_simple_async_result_new_error(_GObject*, void function(_GObject*, _GAsyncResult*, void*), void*, uint, int, const(char)*, ...) @nogc nothrow;
    _GSimpleAsyncResult* g_simple_async_result_new_from_error(_GObject*, void function(_GObject*, _GAsyncResult*, void*), void*, const(_GError)*) @nogc nothrow;
    _GSimpleAsyncResult* g_simple_async_result_new_take_error(_GObject*, void function(_GObject*, _GAsyncResult*, void*), void*, _GError*) @nogc nothrow;
    void g_simple_async_result_set_op_res_gpointer(_GSimpleAsyncResult*, void*, void function(void*)) @nogc nothrow;
    void* g_simple_async_result_get_op_res_gpointer(_GSimpleAsyncResult*) @nogc nothrow;
    void g_simple_async_result_set_op_res_gssize(_GSimpleAsyncResult*, c_long) @nogc nothrow;
    c_long g_simple_async_result_get_op_res_gssize(_GSimpleAsyncResult*) @nogc nothrow;
    void g_simple_async_result_set_op_res_gboolean(_GSimpleAsyncResult*, int) @nogc nothrow;
    int g_simple_async_result_get_op_res_gboolean(_GSimpleAsyncResult*) @nogc nothrow;
    void g_simple_async_result_set_check_cancellable(_GSimpleAsyncResult*, _GCancellable*) @nogc nothrow;
    void* g_simple_async_result_get_source_tag(_GSimpleAsyncResult*) @nogc nothrow;
    void g_simple_async_result_set_handle_cancellation(_GSimpleAsyncResult*, int) @nogc nothrow;
    void g_simple_async_result_complete(_GSimpleAsyncResult*) @nogc nothrow;
    void g_simple_async_result_complete_in_idle(_GSimpleAsyncResult*) @nogc nothrow;
    void g_simple_async_result_run_in_thread(_GSimpleAsyncResult*, void function(_GSimpleAsyncResult*, _GObject*, _GCancellable*), int, _GCancellable*) @nogc nothrow;
    void g_simple_async_result_set_from_error(_GSimpleAsyncResult*, const(_GError)*) @nogc nothrow;
    void g_simple_async_result_take_error(_GSimpleAsyncResult*, _GError*) @nogc nothrow;
    int g_simple_async_result_propagate_error(_GSimpleAsyncResult*, _GError**) @nogc nothrow;
    void g_simple_async_result_set_error(_GSimpleAsyncResult*, uint, int, const(char)*, ...) @nogc nothrow;
    void g_simple_async_result_set_error_va(_GSimpleAsyncResult*, uint, int, const(char)*, va_list*) @nogc nothrow;
    int g_simple_async_result_is_valid(_GAsyncResult*, _GObject*, void*) @nogc nothrow;
    void g_simple_async_report_error_in_idle(_GObject*, void function(_GObject*, _GAsyncResult*, void*), void*, uint, int, const(char)*, ...) @nogc nothrow;
    void g_simple_async_report_gerror_in_idle(_GObject*, void function(_GObject*, _GAsyncResult*, void*), void*, const(_GError)*) @nogc nothrow;
    void g_simple_async_report_take_gerror_in_idle(_GObject*, void function(_GObject*, _GAsyncResult*, void*), void*, _GError*) @nogc nothrow;
    void* memchr(const(void)*, int, c_ulong) @nogc nothrow;
    c_ulong g_simple_io_stream_get_type() @nogc nothrow;
    _GIOStream* g_simple_io_stream_new(_GInputStream*, _GOutputStream*) @nogc nothrow;
    int memcmp(const(void)*, const(void)*, c_ulong) @nogc nothrow;
    c_ulong g_simple_permission_get_type() @nogc nothrow;
    _GPermission* g_simple_permission_new(int) @nogc nothrow;
    void* memset(void*, int, c_ulong) @nogc nothrow;
    void* memccpy(void*, const(void)*, int, c_ulong) @nogc nothrow;
    alias GSimpleProxyResolver = _GSimpleProxyResolver;
    struct _GSimpleProxyResolver
    {
        _GObject parent_instance;
        _GSimpleProxyResolverPrivate* priv;
    }
    alias GSimpleProxyResolverPrivate = _GSimpleProxyResolverPrivate;
    struct _GSimpleProxyResolverPrivate{};
    alias GSimpleProxyResolverClass = _GSimpleProxyResolverClass;
    struct _GSimpleProxyResolverClass
    {
        _GObjectClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    c_ulong g_simple_proxy_resolver_get_type() @nogc nothrow;
    _GProxyResolver* g_simple_proxy_resolver_new(const(char)*, char**) @nogc nothrow;
    void g_simple_proxy_resolver_set_default_proxy(_GSimpleProxyResolver*, const(char)*) @nogc nothrow;
    void g_simple_proxy_resolver_set_ignore_hosts(_GSimpleProxyResolver*, char**) @nogc nothrow;
    void g_simple_proxy_resolver_set_uri_proxy(_GSimpleProxyResolver*, const(char)*, const(char)*) @nogc nothrow;
    void* memmove(void*, const(void)*, c_ulong) @nogc nothrow;
    void* memcpy(void*, const(void)*, c_ulong) @nogc nothrow;
    alias GSocketPrivate = _GSocketPrivate;
    struct _GSocketPrivate{};
    alias GSocketClass = _GSocketClass;
    struct _GSocketClass
    {
        _GObjectClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
        void function() _g_reserved7;
        void function() _g_reserved8;
        void function() _g_reserved9;
        void function() _g_reserved10;
    }
    c_ulong g_socket_get_type() @nogc nothrow;
    _GSocket* g_socket_new(GSocketFamily, GSocketType, GSocketProtocol, _GError**) @nogc nothrow;
    _GSocket* g_socket_new_from_fd(int, _GError**) @nogc nothrow;
    int g_socket_get_fd(_GSocket*) @nogc nothrow;
    GSocketFamily g_socket_get_family(_GSocket*) @nogc nothrow;
    GSocketType g_socket_get_socket_type(_GSocket*) @nogc nothrow;
    GSocketProtocol g_socket_get_protocol(_GSocket*) @nogc nothrow;
    _GSocketAddress* g_socket_get_local_address(_GSocket*, _GError**) @nogc nothrow;
    _GSocketAddress* g_socket_get_remote_address(_GSocket*, _GError**) @nogc nothrow;
    void g_socket_set_blocking(_GSocket*, int) @nogc nothrow;
    int g_socket_get_blocking(_GSocket*) @nogc nothrow;
    void g_socket_set_keepalive(_GSocket*, int) @nogc nothrow;
    int g_socket_get_keepalive(_GSocket*) @nogc nothrow;
    int g_socket_get_listen_backlog(_GSocket*) @nogc nothrow;
    void g_socket_set_listen_backlog(_GSocket*, int) @nogc nothrow;
    uint g_socket_get_timeout(_GSocket*) @nogc nothrow;
    void g_socket_set_timeout(_GSocket*, uint) @nogc nothrow;
    uint g_socket_get_ttl(_GSocket*) @nogc nothrow;
    void g_socket_set_ttl(_GSocket*, uint) @nogc nothrow;
    int g_socket_get_broadcast(_GSocket*) @nogc nothrow;
    void g_socket_set_broadcast(_GSocket*, int) @nogc nothrow;
    int g_socket_get_multicast_loopback(_GSocket*) @nogc nothrow;
    void g_socket_set_multicast_loopback(_GSocket*, int) @nogc nothrow;
    uint g_socket_get_multicast_ttl(_GSocket*) @nogc nothrow;
    void g_socket_set_multicast_ttl(_GSocket*, uint) @nogc nothrow;
    int g_socket_is_connected(_GSocket*) @nogc nothrow;
    int g_socket_bind(_GSocket*, _GSocketAddress*, int, _GError**) @nogc nothrow;
    int g_socket_join_multicast_group(_GSocket*, _GInetAddress*, int, const(char)*, _GError**) @nogc nothrow;
    int g_socket_leave_multicast_group(_GSocket*, _GInetAddress*, int, const(char)*, _GError**) @nogc nothrow;
    int g_socket_join_multicast_group_ssm(_GSocket*, _GInetAddress*, _GInetAddress*, const(char)*, _GError**) @nogc nothrow;
    int g_socket_leave_multicast_group_ssm(_GSocket*, _GInetAddress*, _GInetAddress*, const(char)*, _GError**) @nogc nothrow;
    int g_socket_connect(_GSocket*, _GSocketAddress*, _GCancellable*, _GError**) @nogc nothrow;
    int g_socket_check_connect_result(_GSocket*, _GError**) @nogc nothrow;
    c_long g_socket_get_available_bytes(_GSocket*) @nogc nothrow;
    GIOCondition g_socket_condition_check(_GSocket*, GIOCondition) @nogc nothrow;
    int g_socket_condition_wait(_GSocket*, GIOCondition, _GCancellable*, _GError**) @nogc nothrow;
    int g_socket_condition_timed_wait(_GSocket*, GIOCondition, c_long, _GCancellable*, _GError**) @nogc nothrow;
    _GSocket* g_socket_accept(_GSocket*, _GCancellable*, _GError**) @nogc nothrow;
    int g_socket_listen(_GSocket*, _GError**) @nogc nothrow;
    c_long g_socket_receive(_GSocket*, char*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    c_long g_socket_receive_from(_GSocket*, _GSocketAddress**, char*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    c_long g_socket_send(_GSocket*, const(char)*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    c_long g_socket_send_to(_GSocket*, _GSocketAddress*, const(char)*, c_ulong, _GCancellable*, _GError**) @nogc nothrow;
    c_long g_socket_receive_message(_GSocket*, _GSocketAddress**, _GInputVector*, int, _GSocketControlMessage***, int*, int*, _GCancellable*, _GError**) @nogc nothrow;
    c_long g_socket_send_message(_GSocket*, _GSocketAddress*, _GOutputVector*, int, _GSocketControlMessage**, int, int, _GCancellable*, _GError**) @nogc nothrow;
    int g_socket_receive_messages(_GSocket*, _GInputMessage*, uint, int, _GCancellable*, _GError**) @nogc nothrow;
    int g_socket_send_messages(_GSocket*, _GOutputMessage*, uint, int, _GCancellable*, _GError**) @nogc nothrow;
    int g_socket_close(_GSocket*, _GError**) @nogc nothrow;
    int g_socket_shutdown(_GSocket*, int, int, _GError**) @nogc nothrow;
    int g_socket_is_closed(_GSocket*) @nogc nothrow;
    _GSource* g_socket_create_source(_GSocket*, GIOCondition, _GCancellable*) @nogc nothrow;
    int g_socket_speaks_ipv4(_GSocket*) @nogc nothrow;
    _GCredentials* g_socket_get_credentials(_GSocket*, _GError**) @nogc nothrow;
    c_long g_socket_receive_with_blocking(_GSocket*, char*, c_ulong, int, _GCancellable*, _GError**) @nogc nothrow;
    c_long g_socket_send_with_blocking(_GSocket*, const(char)*, c_ulong, int, _GCancellable*, _GError**) @nogc nothrow;
    int g_socket_get_option(_GSocket*, int, int, int*, _GError**) @nogc nothrow;
    int g_socket_set_option(_GSocket*, int, int, int, _GError**) @nogc nothrow;
    alias GSocketAddressClass = _GSocketAddressClass;
    struct _GSocketAddressClass
    {
        _GObjectClass parent_class;
        GSocketFamily function(_GSocketAddress*) get_family;
        c_long function(_GSocketAddress*) get_native_size;
        int function(_GSocketAddress*, void*, c_ulong, _GError**) to_native;
    }
    c_ulong g_socket_address_get_type() @nogc nothrow;
    GSocketFamily g_socket_address_get_family(_GSocketAddress*) @nogc nothrow;
    _GSocketAddress* g_socket_address_new_from_native(void*, c_ulong) @nogc nothrow;
    int g_socket_address_to_native(_GSocketAddress*, void*, c_ulong, _GError**) @nogc nothrow;
    c_long g_socket_address_get_native_size(_GSocketAddress*) @nogc nothrow;
    int getloadavg(double*, int) @nogc nothrow;
    alias GSocketAddressEnumeratorClass = _GSocketAddressEnumeratorClass;
    struct _GSocketAddressEnumeratorClass
    {
        _GObjectClass parent_class;
        _GSocketAddress* function(_GSocketAddressEnumerator*, _GCancellable*, _GError**) next;
        void function(_GSocketAddressEnumerator*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) next_async;
        _GSocketAddress* function(_GSocketAddressEnumerator*, _GAsyncResult*, _GError**) next_finish;
    }
    c_ulong g_socket_address_enumerator_get_type() @nogc nothrow;
    _GSocketAddress* g_socket_address_enumerator_next(_GSocketAddressEnumerator*, _GCancellable*, _GError**) @nogc nothrow;
    void g_socket_address_enumerator_next_async(_GSocketAddressEnumerator*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GSocketAddress* g_socket_address_enumerator_next_finish(_GSocketAddressEnumerator*, _GAsyncResult*, _GError**) @nogc nothrow;
    int getsubopt(char**, char**, char**) @nogc nothrow;
    int rpmatch(const(char)*) @nogc nothrow;
    alias GSocketClientPrivate = _GSocketClientPrivate;
    struct _GSocketClientPrivate{};
    alias GSocketClientClass = _GSocketClientClass;
    struct _GSocketClientClass
    {
        _GObjectClass parent_class;
        void function(_GSocketClient*, GSocketClientEvent, _GSocketConnectable*, _GIOStream*) event;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
    }
    c_ulong g_socket_client_get_type() @nogc nothrow;
    _GSocketClient* g_socket_client_new() @nogc nothrow;
    GSocketFamily g_socket_client_get_family(_GSocketClient*) @nogc nothrow;
    void g_socket_client_set_family(_GSocketClient*, GSocketFamily) @nogc nothrow;
    GSocketType g_socket_client_get_socket_type(_GSocketClient*) @nogc nothrow;
    void g_socket_client_set_socket_type(_GSocketClient*, GSocketType) @nogc nothrow;
    GSocketProtocol g_socket_client_get_protocol(_GSocketClient*) @nogc nothrow;
    void g_socket_client_set_protocol(_GSocketClient*, GSocketProtocol) @nogc nothrow;
    _GSocketAddress* g_socket_client_get_local_address(_GSocketClient*) @nogc nothrow;
    void g_socket_client_set_local_address(_GSocketClient*, _GSocketAddress*) @nogc nothrow;
    uint g_socket_client_get_timeout(_GSocketClient*) @nogc nothrow;
    void g_socket_client_set_timeout(_GSocketClient*, uint) @nogc nothrow;
    int g_socket_client_get_enable_proxy(_GSocketClient*) @nogc nothrow;
    void g_socket_client_set_enable_proxy(_GSocketClient*, int) @nogc nothrow;
    int g_socket_client_get_tls(_GSocketClient*) @nogc nothrow;
    void g_socket_client_set_tls(_GSocketClient*, int) @nogc nothrow;
    GTlsCertificateFlags g_socket_client_get_tls_validation_flags(_GSocketClient*) @nogc nothrow;
    void g_socket_client_set_tls_validation_flags(_GSocketClient*, GTlsCertificateFlags) @nogc nothrow;
    _GProxyResolver* g_socket_client_get_proxy_resolver(_GSocketClient*) @nogc nothrow;
    void g_socket_client_set_proxy_resolver(_GSocketClient*, _GProxyResolver*) @nogc nothrow;
    _GSocketConnection* g_socket_client_connect(_GSocketClient*, _GSocketConnectable*, _GCancellable*, _GError**) @nogc nothrow;
    _GSocketConnection* g_socket_client_connect_to_host(_GSocketClient*, const(char)*, ushort, _GCancellable*, _GError**) @nogc nothrow;
    _GSocketConnection* g_socket_client_connect_to_service(_GSocketClient*, const(char)*, const(char)*, _GCancellable*, _GError**) @nogc nothrow;
    _GSocketConnection* g_socket_client_connect_to_uri(_GSocketClient*, const(char)*, ushort, _GCancellable*, _GError**) @nogc nothrow;
    void g_socket_client_connect_async(_GSocketClient*, _GSocketConnectable*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GSocketConnection* g_socket_client_connect_finish(_GSocketClient*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_socket_client_connect_to_host_async(_GSocketClient*, const(char)*, ushort, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GSocketConnection* g_socket_client_connect_to_host_finish(_GSocketClient*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_socket_client_connect_to_service_async(_GSocketClient*, const(char)*, const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GSocketConnection* g_socket_client_connect_to_service_finish(_GSocketClient*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_socket_client_connect_to_uri_async(_GSocketClient*, const(char)*, ushort, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GSocketConnection* g_socket_client_connect_to_uri_finish(_GSocketClient*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_socket_client_add_application_proxy(_GSocketClient*, const(char)*) @nogc nothrow;
    c_ulong wcstombs(char*, const(int)*, c_ulong) @nogc nothrow;
    c_ulong mbstowcs(int*, const(char)*, c_ulong) @nogc nothrow;
    alias GSocketConnectableIface = _GSocketConnectableIface;
    struct _GSocketConnectableIface
    {
        _GTypeInterface g_iface;
        _GSocketAddressEnumerator* function(_GSocketConnectable*) enumerate;
        _GSocketAddressEnumerator* function(_GSocketConnectable*) proxy_enumerate;
        char* function(_GSocketConnectable*) to_string;
    }
    c_ulong g_socket_connectable_get_type() @nogc nothrow;
    _GSocketAddressEnumerator* g_socket_connectable_enumerate(_GSocketConnectable*) @nogc nothrow;
    _GSocketAddressEnumerator* g_socket_connectable_proxy_enumerate(_GSocketConnectable*) @nogc nothrow;
    char* g_socket_connectable_to_string(_GSocketConnectable*) @nogc nothrow;
    int wctomb(char*, int) @nogc nothrow;
    int mbtowc(int*, const(char)*, c_ulong) @nogc nothrow;
    int mblen(const(char)*, c_ulong) @nogc nothrow;
    alias GSocketConnectionPrivate = _GSocketConnectionPrivate;
    struct _GSocketConnectionPrivate{};
    alias GSocketConnectionClass = _GSocketConnectionClass;
    struct _GSocketConnectionClass
    {
        _GIOStreamClass parent_class;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
    }
    c_ulong g_socket_connection_get_type() @nogc nothrow;
    int g_socket_connection_is_connected(_GSocketConnection*) @nogc nothrow;
    int g_socket_connection_connect(_GSocketConnection*, _GSocketAddress*, _GCancellable*, _GError**) @nogc nothrow;
    void g_socket_connection_connect_async(_GSocketConnection*, _GSocketAddress*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_socket_connection_connect_finish(_GSocketConnection*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GSocket* g_socket_connection_get_socket(_GSocketConnection*) @nogc nothrow;
    _GSocketAddress* g_socket_connection_get_local_address(_GSocketConnection*, _GError**) @nogc nothrow;
    _GSocketAddress* g_socket_connection_get_remote_address(_GSocketConnection*, _GError**) @nogc nothrow;
    void g_socket_connection_factory_register_type(c_ulong, GSocketFamily, GSocketType, int) @nogc nothrow;
    c_ulong g_socket_connection_factory_lookup_type(GSocketFamily, GSocketType, int) @nogc nothrow;
    _GSocketConnection* g_socket_connection_factory_create_connection(_GSocket*) @nogc nothrow;
    int qfcvt_r(real, int, int*, int*, char*, c_ulong) @nogc nothrow;
    int qecvt_r(real, int, int*, int*, char*, c_ulong) @nogc nothrow;
    alias GSocketControlMessagePrivate = _GSocketControlMessagePrivate;
    struct _GSocketControlMessagePrivate{};
    alias GSocketControlMessageClass = _GSocketControlMessageClass;
    struct _GSocketControlMessageClass
    {
        _GObjectClass parent_class;
        c_ulong function(_GSocketControlMessage*) get_size;
        int function(_GSocketControlMessage*) get_level;
        int function(_GSocketControlMessage*) get_type;
        void function(_GSocketControlMessage*, void*) serialize;
        _GSocketControlMessage* function(int, int, c_ulong, void*) deserialize;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    c_ulong g_socket_control_message_get_type() @nogc nothrow;
    c_ulong g_socket_control_message_get_size(_GSocketControlMessage*) @nogc nothrow;
    int g_socket_control_message_get_level(_GSocketControlMessage*) @nogc nothrow;
    int g_socket_control_message_get_msg_type(_GSocketControlMessage*) @nogc nothrow;
    void g_socket_control_message_serialize(_GSocketControlMessage*, void*) @nogc nothrow;
    _GSocketControlMessage* g_socket_control_message_deserialize(int, int, c_ulong, void*) @nogc nothrow;
    int fcvt_r(double, int, int*, int*, char*, c_ulong) @nogc nothrow;
    int ecvt_r(double, int, int*, int*, char*, c_ulong) @nogc nothrow;
    alias GSocketListenerPrivate = _GSocketListenerPrivate;
    struct _GSocketListenerPrivate{};
    alias GSocketListenerClass = _GSocketListenerClass;
    struct _GSocketListenerClass
    {
        _GObjectClass parent_class;
        void function(_GSocketListener*) changed;
        void function(_GSocketListener*, GSocketListenerEvent, _GSocket*) event;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
    }
    c_ulong g_socket_listener_get_type() @nogc nothrow;
    _GSocketListener* g_socket_listener_new() @nogc nothrow;
    void g_socket_listener_set_backlog(_GSocketListener*, int) @nogc nothrow;
    int g_socket_listener_add_socket(_GSocketListener*, _GSocket*, _GObject*, _GError**) @nogc nothrow;
    int g_socket_listener_add_address(_GSocketListener*, _GSocketAddress*, GSocketType, GSocketProtocol, _GObject*, _GSocketAddress**, _GError**) @nogc nothrow;
    int g_socket_listener_add_inet_port(_GSocketListener*, ushort, _GObject*, _GError**) @nogc nothrow;
    ushort g_socket_listener_add_any_inet_port(_GSocketListener*, _GObject*, _GError**) @nogc nothrow;
    _GSocket* g_socket_listener_accept_socket(_GSocketListener*, _GObject**, _GCancellable*, _GError**) @nogc nothrow;
    void g_socket_listener_accept_socket_async(_GSocketListener*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GSocket* g_socket_listener_accept_socket_finish(_GSocketListener*, _GAsyncResult*, _GObject**, _GError**) @nogc nothrow;
    _GSocketConnection* g_socket_listener_accept(_GSocketListener*, _GObject**, _GCancellable*, _GError**) @nogc nothrow;
    void g_socket_listener_accept_async(_GSocketListener*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GSocketConnection* g_socket_listener_accept_finish(_GSocketListener*, _GAsyncResult*, _GObject**, _GError**) @nogc nothrow;
    void g_socket_listener_close(_GSocketListener*) @nogc nothrow;
    char* qgcvt(real, int, char*) @nogc nothrow;
    char* qfcvt(real, int, int*, int*) @nogc nothrow;
    alias GSocketServicePrivate = _GSocketServicePrivate;
    struct _GSocketServicePrivate{};
    alias GSocketServiceClass = _GSocketServiceClass;
    struct _GSocketServiceClass
    {
        _GSocketListenerClass parent_class;
        int function(_GSocketService*, _GSocketConnection*, _GObject*) incoming;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
    }
    c_ulong g_socket_service_get_type() @nogc nothrow;
    _GSocketService* g_socket_service_new() @nogc nothrow;
    void g_socket_service_start(_GSocketService*) @nogc nothrow;
    void g_socket_service_stop(_GSocketService*) @nogc nothrow;
    int g_socket_service_is_active(_GSocketService*) @nogc nothrow;
    c_ulong g_srv_target_get_type() @nogc nothrow;
    char* qecvt(real, int, int*, int*) @nogc nothrow;
    _GSrvTarget* g_srv_target_new(const(char)*, ushort, ushort, ushort) @nogc nothrow;
    _GSrvTarget* g_srv_target_copy(_GSrvTarget*) @nogc nothrow;
    void g_srv_target_free(_GSrvTarget*) @nogc nothrow;
    const(char)* g_srv_target_get_hostname(_GSrvTarget*) @nogc nothrow;
    ushort g_srv_target_get_port(_GSrvTarget*) @nogc nothrow;
    ushort g_srv_target_get_priority(_GSrvTarget*) @nogc nothrow;
    ushort g_srv_target_get_weight(_GSrvTarget*) @nogc nothrow;
    _GList* g_srv_target_list_sort(_GList*) @nogc nothrow;
    c_ulong g_subprocess_get_type() @nogc nothrow;
    _GSubprocess* g_subprocess_new(GSubprocessFlags, _GError**, const(char)*, ...) @nogc nothrow;
    _GSubprocess* g_subprocess_newv(const(const(char)*)*, GSubprocessFlags, _GError**) @nogc nothrow;
    _GOutputStream* g_subprocess_get_stdin_pipe(_GSubprocess*) @nogc nothrow;
    _GInputStream* g_subprocess_get_stdout_pipe(_GSubprocess*) @nogc nothrow;
    _GInputStream* g_subprocess_get_stderr_pipe(_GSubprocess*) @nogc nothrow;
    const(char)* g_subprocess_get_identifier(_GSubprocess*) @nogc nothrow;
    void g_subprocess_send_signal(_GSubprocess*, int) @nogc nothrow;
    void g_subprocess_force_exit(_GSubprocess*) @nogc nothrow;
    int g_subprocess_wait(_GSubprocess*, _GCancellable*, _GError**) @nogc nothrow;
    void g_subprocess_wait_async(_GSubprocess*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_subprocess_wait_finish(_GSubprocess*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_subprocess_wait_check(_GSubprocess*, _GCancellable*, _GError**) @nogc nothrow;
    void g_subprocess_wait_check_async(_GSubprocess*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_subprocess_wait_check_finish(_GSubprocess*, _GAsyncResult*, _GError**) @nogc nothrow;
    int g_subprocess_get_status(_GSubprocess*) @nogc nothrow;
    int g_subprocess_get_successful(_GSubprocess*) @nogc nothrow;
    int g_subprocess_get_if_exited(_GSubprocess*) @nogc nothrow;
    int g_subprocess_get_exit_status(_GSubprocess*) @nogc nothrow;
    int g_subprocess_get_if_signaled(_GSubprocess*) @nogc nothrow;
    int g_subprocess_get_term_sig(_GSubprocess*) @nogc nothrow;
    int g_subprocess_communicate(_GSubprocess*, _GBytes*, _GCancellable*, _GBytes**, _GBytes**, _GError**) @nogc nothrow;
    void g_subprocess_communicate_async(_GSubprocess*, _GBytes*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_subprocess_communicate_finish(_GSubprocess*, _GAsyncResult*, _GBytes**, _GBytes**, _GError**) @nogc nothrow;
    int g_subprocess_communicate_utf8(_GSubprocess*, const(char)*, _GCancellable*, char**, char**, _GError**) @nogc nothrow;
    void g_subprocess_communicate_utf8_async(_GSubprocess*, const(char)*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_subprocess_communicate_utf8_finish(_GSubprocess*, _GAsyncResult*, char**, char**, _GError**) @nogc nothrow;
    char* gcvt(double, int, char*) @nogc nothrow;
    c_ulong g_subprocess_launcher_get_type() @nogc nothrow;
    _GSubprocessLauncher* g_subprocess_launcher_new(GSubprocessFlags) @nogc nothrow;
    _GSubprocess* g_subprocess_launcher_spawn(_GSubprocessLauncher*, _GError**, const(char)*, ...) @nogc nothrow;
    _GSubprocess* g_subprocess_launcher_spawnv(_GSubprocessLauncher*, const(const(char)*)*, _GError**) @nogc nothrow;
    void g_subprocess_launcher_set_environ(_GSubprocessLauncher*, char**) @nogc nothrow;
    void g_subprocess_launcher_setenv(_GSubprocessLauncher*, const(char)*, const(char)*, int) @nogc nothrow;
    void g_subprocess_launcher_unsetenv(_GSubprocessLauncher*, const(char)*) @nogc nothrow;
    const(char)* g_subprocess_launcher_getenv(_GSubprocessLauncher*, const(char)*) @nogc nothrow;
    void g_subprocess_launcher_set_cwd(_GSubprocessLauncher*, const(char)*) @nogc nothrow;
    void g_subprocess_launcher_set_flags(_GSubprocessLauncher*, GSubprocessFlags) @nogc nothrow;
    void g_subprocess_launcher_set_stdin_file_path(_GSubprocessLauncher*, const(char)*) @nogc nothrow;
    void g_subprocess_launcher_take_stdin_fd(_GSubprocessLauncher*, int) @nogc nothrow;
    void g_subprocess_launcher_set_stdout_file_path(_GSubprocessLauncher*, const(char)*) @nogc nothrow;
    void g_subprocess_launcher_take_stdout_fd(_GSubprocessLauncher*, int) @nogc nothrow;
    void g_subprocess_launcher_set_stderr_file_path(_GSubprocessLauncher*, const(char)*) @nogc nothrow;
    void g_subprocess_launcher_take_stderr_fd(_GSubprocessLauncher*, int) @nogc nothrow;
    void g_subprocess_launcher_take_fd(_GSubprocessLauncher*, int, int) @nogc nothrow;
    void g_subprocess_launcher_set_child_setup(_GSubprocessLauncher*, void function(void*), void*, void function(void*)) @nogc nothrow;
    char* fcvt(double, int, int*, int*) @nogc nothrow;
    char* ecvt(double, int, int*, int*) @nogc nothrow;
    alias GTaskClass = _GTaskClass;
    struct _GTaskClass{};
    c_ulong g_task_get_type() @nogc nothrow;
    _GTask* g_task_new(void*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    void g_task_report_error(void*, void function(_GObject*, _GAsyncResult*, void*), void*, void*, _GError*) @nogc nothrow;
    void g_task_report_new_error(void*, void function(_GObject*, _GAsyncResult*, void*), void*, void*, uint, int, const(char)*, ...) @nogc nothrow;
    void g_task_set_task_data(_GTask*, void*, void function(void*)) @nogc nothrow;
    void g_task_set_priority(_GTask*, int) @nogc nothrow;
    void g_task_set_check_cancellable(_GTask*, int) @nogc nothrow;
    void g_task_set_source_tag(_GTask*, void*) @nogc nothrow;
    void* g_task_get_source_object(_GTask*) @nogc nothrow;
    void* g_task_get_task_data(_GTask*) @nogc nothrow;
    int g_task_get_priority(_GTask*) @nogc nothrow;
    _GMainContext* g_task_get_context(_GTask*) @nogc nothrow;
    _GCancellable* g_task_get_cancellable(_GTask*) @nogc nothrow;
    int g_task_get_check_cancellable(_GTask*) @nogc nothrow;
    void* g_task_get_source_tag(_GTask*) @nogc nothrow;
    int g_task_is_valid(void*, void*) @nogc nothrow;
    alias GTaskThreadFunc = void function(_GTask*, void*, void*, _GCancellable*);
    void g_task_run_in_thread(_GTask*, void function(_GTask*, void*, void*, _GCancellable*)) @nogc nothrow;
    void g_task_run_in_thread_sync(_GTask*, void function(_GTask*, void*, void*, _GCancellable*)) @nogc nothrow;
    int g_task_set_return_on_cancel(_GTask*, int) @nogc nothrow;
    int g_task_get_return_on_cancel(_GTask*) @nogc nothrow;
    void g_task_attach_source(_GTask*, _GSource*, int function(void*)) @nogc nothrow;
    void g_task_return_pointer(_GTask*, void*, void function(void*)) @nogc nothrow;
    void g_task_return_boolean(_GTask*, int) @nogc nothrow;
    void g_task_return_int(_GTask*, c_long) @nogc nothrow;
    void g_task_return_error(_GTask*, _GError*) @nogc nothrow;
    void g_task_return_new_error(_GTask*, uint, int, const(char)*, ...) @nogc nothrow;
    int g_task_return_error_if_cancelled(_GTask*) @nogc nothrow;
    void* g_task_propagate_pointer(_GTask*, _GError**) @nogc nothrow;
    int g_task_propagate_boolean(_GTask*, _GError**) @nogc nothrow;
    c_long g_task_propagate_int(_GTask*, _GError**) @nogc nothrow;
    int g_task_had_error(_GTask*) @nogc nothrow;
    int g_task_get_completed(_GTask*) @nogc nothrow;
    lldiv_t lldiv(long, long) @nogc nothrow;
    ldiv_t ldiv(c_long, c_long) @nogc nothrow;
    alias GTcpConnectionPrivate = _GTcpConnectionPrivate;
    struct _GTcpConnectionPrivate{};
    alias GTcpConnectionClass = _GTcpConnectionClass;
    struct _GTcpConnectionClass
    {
        _GSocketConnectionClass parent_class;
    }
    c_ulong g_tcp_connection_get_type() @nogc nothrow;
    void g_tcp_connection_set_graceful_disconnect(_GTcpConnection*, int) @nogc nothrow;
    int g_tcp_connection_get_graceful_disconnect(_GTcpConnection*) @nogc nothrow;
    div_t div(int, int) @nogc nothrow;
    long llabs(long) @nogc nothrow;
    alias GTcpWrapperConnectionPrivate = _GTcpWrapperConnectionPrivate;
    struct _GTcpWrapperConnectionPrivate{};
    alias GTcpWrapperConnectionClass = _GTcpWrapperConnectionClass;
    struct _GTcpWrapperConnectionClass
    {
        _GTcpConnectionClass parent_class;
    }
    c_ulong g_tcp_wrapper_connection_get_type() @nogc nothrow;
    _GSocketConnection* g_tcp_wrapper_connection_new(_GIOStream*, _GSocket*) @nogc nothrow;
    _GIOStream* g_tcp_wrapper_connection_get_base_io_stream(_GTcpWrapperConnection*) @nogc nothrow;
    c_long labs(c_long) @nogc nothrow;
    c_ulong g_test_dbus_get_type() @nogc nothrow;
    _GTestDBus* g_test_dbus_new(GTestDBusFlags) @nogc nothrow;
    GTestDBusFlags g_test_dbus_get_flags(_GTestDBus*) @nogc nothrow;
    const(char)* g_test_dbus_get_bus_address(_GTestDBus*) @nogc nothrow;
    void g_test_dbus_add_service_dir(_GTestDBus*, const(char)*) @nogc nothrow;
    void g_test_dbus_up(_GTestDBus*) @nogc nothrow;
    void g_test_dbus_stop(_GTestDBus*) @nogc nothrow;
    void g_test_dbus_down(_GTestDBus*) @nogc nothrow;
    void g_test_dbus_unset() @nogc nothrow;
    int abs(int) @nogc nothrow;
    void qsort(void*, c_ulong, c_ulong, int function(const(void)*, const(void)*)) @nogc nothrow;
    void* bsearch(const(void)*, const(void)*, c_ulong, c_ulong, int function(const(void)*, const(void)*)) @nogc nothrow;
    alias GThemedIconClass = _GThemedIconClass;
    struct _GThemedIconClass{};
    c_ulong g_themed_icon_get_type() @nogc nothrow;
    _GIcon* g_themed_icon_new(const(char)*) @nogc nothrow;
    _GIcon* g_themed_icon_new_with_default_fallbacks(const(char)*) @nogc nothrow;
    _GIcon* g_themed_icon_new_from_names(char**, int) @nogc nothrow;
    void g_themed_icon_prepend_name(_GThemedIcon*, const(char)*) @nogc nothrow;
    void g_themed_icon_append_name(_GThemedIcon*, const(char)*) @nogc nothrow;
    const(const(char)*)* g_themed_icon_get_names(_GThemedIcon*) @nogc nothrow;
    alias __compar_fn_t = int function(const(void)*, const(void)*);
    char* realpath(const(char)*, char*) @nogc nothrow;
    int system(const(char)*) @nogc nothrow;
    alias GThreadedSocketServicePrivate = _GThreadedSocketServicePrivate;
    struct _GThreadedSocketServicePrivate{};
    alias GThreadedSocketServiceClass = _GThreadedSocketServiceClass;
    struct _GThreadedSocketServiceClass
    {
        _GSocketServiceClass parent_class;
        int function(_GThreadedSocketService*, _GSocketConnection*, _GObject*) run;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
    }
    c_ulong g_threaded_socket_service_get_type() @nogc nothrow;
    _GSocketService* g_threaded_socket_service_new(int) @nogc nothrow;
    char* mkdtemp(char*) @nogc nothrow;
    alias GTlsBackend = _GTlsBackend;
    struct _GTlsBackend{};
    alias GTlsBackendInterface = _GTlsBackendInterface;
    struct _GTlsBackendInterface
    {
        _GTypeInterface g_iface;
        int function(_GTlsBackend*) supports_tls;
        c_ulong function() get_certificate_type;
        c_ulong function() get_client_connection_type;
        c_ulong function() get_server_connection_type;
        c_ulong function() get_file_database_type;
        _GTlsDatabase* function(_GTlsBackend*) get_default_database;
        int function(_GTlsBackend*) supports_dtls;
        c_ulong function() get_dtls_client_connection_type;
        c_ulong function() get_dtls_server_connection_type;
    }
    c_ulong g_tls_backend_get_type() @nogc nothrow;
    _GTlsBackend* g_tls_backend_get_default() @nogc nothrow;
    _GTlsDatabase* g_tls_backend_get_default_database(_GTlsBackend*) @nogc nothrow;
    int g_tls_backend_supports_tls(_GTlsBackend*) @nogc nothrow;
    int g_tls_backend_supports_dtls(_GTlsBackend*) @nogc nothrow;
    c_ulong g_tls_backend_get_certificate_type(_GTlsBackend*) @nogc nothrow;
    c_ulong g_tls_backend_get_client_connection_type(_GTlsBackend*) @nogc nothrow;
    c_ulong g_tls_backend_get_server_connection_type(_GTlsBackend*) @nogc nothrow;
    c_ulong g_tls_backend_get_file_database_type(_GTlsBackend*) @nogc nothrow;
    c_ulong g_tls_backend_get_dtls_client_connection_type(_GTlsBackend*) @nogc nothrow;
    c_ulong g_tls_backend_get_dtls_server_connection_type(_GTlsBackend*) @nogc nothrow;
    int mkstemps(char*, int) @nogc nothrow;
    int mkstemp(char*) @nogc nothrow;
    alias GTlsCertificateClass = _GTlsCertificateClass;
    struct _GTlsCertificateClass
    {
        _GObjectClass parent_class;
        GTlsCertificateFlags function(_GTlsCertificate*, _GSocketConnectable*, _GTlsCertificate*) verify;
        void*[8] padding;
    }
    alias GTlsCertificatePrivate = _GTlsCertificatePrivate;
    struct _GTlsCertificatePrivate{};
    c_ulong g_tls_certificate_get_type() @nogc nothrow;
    _GTlsCertificate* g_tls_certificate_new_from_pem(const(char)*, c_long, _GError**) @nogc nothrow;
    _GTlsCertificate* g_tls_certificate_new_from_file(const(char)*, _GError**) @nogc nothrow;
    _GTlsCertificate* g_tls_certificate_new_from_files(const(char)*, const(char)*, _GError**) @nogc nothrow;
    _GList* g_tls_certificate_list_new_from_file(const(char)*, _GError**) @nogc nothrow;
    _GTlsCertificate* g_tls_certificate_get_issuer(_GTlsCertificate*) @nogc nothrow;
    GTlsCertificateFlags g_tls_certificate_verify(_GTlsCertificate*, _GSocketConnectable*, _GTlsCertificate*) @nogc nothrow;
    int g_tls_certificate_is_same(_GTlsCertificate*, _GTlsCertificate*) @nogc nothrow;
    char* mktemp(char*) @nogc nothrow;
    alias GTlsClientConnectionInterface = _GTlsClientConnectionInterface;
    struct _GTlsClientConnectionInterface
    {
        _GTypeInterface g_iface;
        void function(_GTlsClientConnection*, _GTlsClientConnection*) copy_session_state;
    }
    c_ulong g_tls_client_connection_get_type() @nogc nothrow;
    _GIOStream* g_tls_client_connection_new(_GIOStream*, _GSocketConnectable*, _GError**) @nogc nothrow;
    GTlsCertificateFlags g_tls_client_connection_get_validation_flags(_GTlsClientConnection*) @nogc nothrow;
    void g_tls_client_connection_set_validation_flags(_GTlsClientConnection*, GTlsCertificateFlags) @nogc nothrow;
    _GSocketConnectable* g_tls_client_connection_get_server_identity(_GTlsClientConnection*) @nogc nothrow;
    void g_tls_client_connection_set_server_identity(_GTlsClientConnection*, _GSocketConnectable*) @nogc nothrow;
    int g_tls_client_connection_get_use_ssl3(_GTlsClientConnection*) @nogc nothrow;
    void g_tls_client_connection_set_use_ssl3(_GTlsClientConnection*, int) @nogc nothrow;
    _GList* g_tls_client_connection_get_accepted_cas(_GTlsClientConnection*) @nogc nothrow;
    void g_tls_client_connection_copy_session_state(_GTlsClientConnection*, _GTlsClientConnection*) @nogc nothrow;
    int clearenv() @nogc nothrow;
    int unsetenv(const(char)*) @nogc nothrow;
    alias GTlsConnectionClass = _GTlsConnectionClass;
    struct _GTlsConnectionClass
    {
        _GIOStreamClass parent_class;
        int function(_GTlsConnection*, _GTlsCertificate*, GTlsCertificateFlags) accept_certificate;
        int function(_GTlsConnection*, _GCancellable*, _GError**) handshake;
        void function(_GTlsConnection*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) handshake_async;
        int function(_GTlsConnection*, _GAsyncResult*, _GError**) handshake_finish;
        void*[8] padding;
    }
    alias GTlsConnectionPrivate = _GTlsConnectionPrivate;
    struct _GTlsConnectionPrivate{};
    c_ulong g_tls_connection_get_type() @nogc nothrow;
    void g_tls_connection_set_use_system_certdb(_GTlsConnection*, int) @nogc nothrow;
    int g_tls_connection_get_use_system_certdb(_GTlsConnection*) @nogc nothrow;
    void g_tls_connection_set_database(_GTlsConnection*, _GTlsDatabase*) @nogc nothrow;
    _GTlsDatabase* g_tls_connection_get_database(_GTlsConnection*) @nogc nothrow;
    void g_tls_connection_set_certificate(_GTlsConnection*, _GTlsCertificate*) @nogc nothrow;
    _GTlsCertificate* g_tls_connection_get_certificate(_GTlsConnection*) @nogc nothrow;
    void g_tls_connection_set_interaction(_GTlsConnection*, _GTlsInteraction*) @nogc nothrow;
    _GTlsInteraction* g_tls_connection_get_interaction(_GTlsConnection*) @nogc nothrow;
    _GTlsCertificate* g_tls_connection_get_peer_certificate(_GTlsConnection*) @nogc nothrow;
    GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors(_GTlsConnection*) @nogc nothrow;
    void g_tls_connection_set_require_close_notify(_GTlsConnection*, int) @nogc nothrow;
    int g_tls_connection_get_require_close_notify(_GTlsConnection*) @nogc nothrow;
    void g_tls_connection_set_rehandshake_mode(_GTlsConnection*, GTlsRehandshakeMode) @nogc nothrow;
    GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode(_GTlsConnection*) @nogc nothrow;
    int g_tls_connection_handshake(_GTlsConnection*, _GCancellable*, _GError**) @nogc nothrow;
    void g_tls_connection_handshake_async(_GTlsConnection*, int, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_tls_connection_handshake_finish(_GTlsConnection*, _GAsyncResult*, _GError**) @nogc nothrow;
    uint g_tls_error_quark() @nogc nothrow;
    int g_tls_connection_emit_accept_certificate(_GTlsConnection*, _GTlsCertificate*, GTlsCertificateFlags) @nogc nothrow;
    int setenv(const(char)*, const(char)*, int) @nogc nothrow;
    int putenv(char*) @nogc nothrow;
    alias GTlsDatabaseClass = _GTlsDatabaseClass;
    struct _GTlsDatabaseClass
    {
        _GObjectClass parent_class;
        GTlsCertificateFlags function(_GTlsDatabase*, _GTlsCertificate*, const(char)*, _GSocketConnectable*, _GTlsInteraction*, GTlsDatabaseVerifyFlags, _GCancellable*, _GError**) verify_chain;
        void function(_GTlsDatabase*, _GTlsCertificate*, const(char)*, _GSocketConnectable*, _GTlsInteraction*, GTlsDatabaseVerifyFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) verify_chain_async;
        GTlsCertificateFlags function(_GTlsDatabase*, _GAsyncResult*, _GError**) verify_chain_finish;
        char* function(_GTlsDatabase*, _GTlsCertificate*) create_certificate_handle;
        _GTlsCertificate* function(_GTlsDatabase*, const(char)*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, _GError**) lookup_certificate_for_handle;
        void function(_GTlsDatabase*, const(char)*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) lookup_certificate_for_handle_async;
        _GTlsCertificate* function(_GTlsDatabase*, _GAsyncResult*, _GError**) lookup_certificate_for_handle_finish;
        _GTlsCertificate* function(_GTlsDatabase*, _GTlsCertificate*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, _GError**) lookup_certificate_issuer;
        void function(_GTlsDatabase*, _GTlsCertificate*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) lookup_certificate_issuer_async;
        _GTlsCertificate* function(_GTlsDatabase*, _GAsyncResult*, _GError**) lookup_certificate_issuer_finish;
        _GList* function(_GTlsDatabase*, _GByteArray*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, _GError**) lookup_certificates_issued_by;
        void function(_GTlsDatabase*, _GByteArray*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) lookup_certificates_issued_by_async;
        _GList* function(_GTlsDatabase*, _GAsyncResult*, _GError**) lookup_certificates_issued_by_finish;
        void*[16] padding;
    }
    alias GTlsDatabasePrivate = _GTlsDatabasePrivate;
    struct _GTlsDatabasePrivate{};
    c_ulong g_tls_database_get_type() @nogc nothrow;
    GTlsCertificateFlags g_tls_database_verify_chain(_GTlsDatabase*, _GTlsCertificate*, const(char)*, _GSocketConnectable*, _GTlsInteraction*, GTlsDatabaseVerifyFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_tls_database_verify_chain_async(_GTlsDatabase*, _GTlsCertificate*, const(char)*, _GSocketConnectable*, _GTlsInteraction*, GTlsDatabaseVerifyFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    GTlsCertificateFlags g_tls_database_verify_chain_finish(_GTlsDatabase*, _GAsyncResult*, _GError**) @nogc nothrow;
    char* g_tls_database_create_certificate_handle(_GTlsDatabase*, _GTlsCertificate*) @nogc nothrow;
    _GTlsCertificate* g_tls_database_lookup_certificate_for_handle(_GTlsDatabase*, const(char)*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_tls_database_lookup_certificate_for_handle_async(_GTlsDatabase*, const(char)*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GTlsCertificate* g_tls_database_lookup_certificate_for_handle_finish(_GTlsDatabase*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GTlsCertificate* g_tls_database_lookup_certificate_issuer(_GTlsDatabase*, _GTlsCertificate*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_tls_database_lookup_certificate_issuer_async(_GTlsDatabase*, _GTlsCertificate*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GTlsCertificate* g_tls_database_lookup_certificate_issuer_finish(_GTlsDatabase*, _GAsyncResult*, _GError**) @nogc nothrow;
    _GList* g_tls_database_lookup_certificates_issued_by(_GTlsDatabase*, _GByteArray*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_tls_database_lookup_certificates_issued_by_async(_GTlsDatabase*, _GByteArray*, _GTlsInteraction*, GTlsDatabaseLookupFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    _GList* g_tls_database_lookup_certificates_issued_by_finish(_GTlsDatabase*, _GAsyncResult*, _GError**) @nogc nothrow;
    char* getenv(const(char)*) @nogc nothrow;
    void _Exit(int) @nogc nothrow;
    alias GTlsFileDatabaseInterface = _GTlsFileDatabaseInterface;
    struct _GTlsFileDatabaseInterface
    {
        _GTypeInterface g_iface;
        void*[8] padding;
    }
    c_ulong g_tls_file_database_get_type() @nogc nothrow;
    _GTlsDatabase* g_tls_file_database_new(const(char)*, _GError**) @nogc nothrow;
    void quick_exit(int) @nogc nothrow;
    void exit(int) @nogc nothrow;
    int on_exit(void function(int, void*), void*) @nogc nothrow;
    alias GTlsInteractionClass = _GTlsInteractionClass;
    struct _GTlsInteractionClass
    {
        _GObjectClass parent_class;
        GTlsInteractionResult function(_GTlsInteraction*, _GTlsPassword*, _GCancellable*, _GError**) ask_password;
        void function(_GTlsInteraction*, _GTlsPassword*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) ask_password_async;
        GTlsInteractionResult function(_GTlsInteraction*, _GAsyncResult*, _GError**) ask_password_finish;
        GTlsInteractionResult function(_GTlsInteraction*, _GTlsConnection*, GTlsCertificateRequestFlags, _GCancellable*, _GError**) request_certificate;
        void function(_GTlsInteraction*, _GTlsConnection*, GTlsCertificateRequestFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) request_certificate_async;
        GTlsInteractionResult function(_GTlsInteraction*, _GAsyncResult*, _GError**) request_certificate_finish;
        void*[21] padding;
    }
    alias GTlsInteractionPrivate = _GTlsInteractionPrivate;
    struct _GTlsInteractionPrivate{};
    c_ulong g_tls_interaction_get_type() @nogc nothrow;
    GTlsInteractionResult g_tls_interaction_invoke_ask_password(_GTlsInteraction*, _GTlsPassword*, _GCancellable*, _GError**) @nogc nothrow;
    GTlsInteractionResult g_tls_interaction_ask_password(_GTlsInteraction*, _GTlsPassword*, _GCancellable*, _GError**) @nogc nothrow;
    void g_tls_interaction_ask_password_async(_GTlsInteraction*, _GTlsPassword*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    GTlsInteractionResult g_tls_interaction_ask_password_finish(_GTlsInteraction*, _GAsyncResult*, _GError**) @nogc nothrow;
    GTlsInteractionResult g_tls_interaction_invoke_request_certificate(_GTlsInteraction*, _GTlsConnection*, GTlsCertificateRequestFlags, _GCancellable*, _GError**) @nogc nothrow;
    GTlsInteractionResult g_tls_interaction_request_certificate(_GTlsInteraction*, _GTlsConnection*, GTlsCertificateRequestFlags, _GCancellable*, _GError**) @nogc nothrow;
    void g_tls_interaction_request_certificate_async(_GTlsInteraction*, _GTlsConnection*, GTlsCertificateRequestFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    GTlsInteractionResult g_tls_interaction_request_certificate_finish(_GTlsInteraction*, _GAsyncResult*, _GError**) @nogc nothrow;
    int at_quick_exit(void function()) @nogc nothrow;
    alias GTlsPasswordClass = _GTlsPasswordClass;
    struct _GTlsPasswordClass
    {
        _GObjectClass parent_class;
        const(ubyte)* function(_GTlsPassword*, c_ulong*) get_value;
        void function(_GTlsPassword*, ubyte*, c_long, void function(void*)) set_value;
        const(char)* function(_GTlsPassword*) get_default_warning;
        void*[4] padding;
    }
    alias GTlsPasswordPrivate = _GTlsPasswordPrivate;
    struct _GTlsPasswordPrivate{};
    c_ulong g_tls_password_get_type() @nogc nothrow;
    _GTlsPassword* g_tls_password_new(_GTlsPasswordFlags, const(char)*) @nogc nothrow;
    const(ubyte)* g_tls_password_get_value(_GTlsPassword*, c_ulong*) @nogc nothrow;
    void g_tls_password_set_value(_GTlsPassword*, const(ubyte)*, c_long) @nogc nothrow;
    void g_tls_password_set_value_full(_GTlsPassword*, ubyte*, c_long, void function(void*)) @nogc nothrow;
    _GTlsPasswordFlags g_tls_password_get_flags(_GTlsPassword*) @nogc nothrow;
    void g_tls_password_set_flags(_GTlsPassword*, _GTlsPasswordFlags) @nogc nothrow;
    const(char)* g_tls_password_get_description(_GTlsPassword*) @nogc nothrow;
    void g_tls_password_set_description(_GTlsPassword*, const(char)*) @nogc nothrow;
    const(char)* g_tls_password_get_warning(_GTlsPassword*) @nogc nothrow;
    void g_tls_password_set_warning(_GTlsPassword*, const(char)*) @nogc nothrow;
    int atexit(void function()) @nogc nothrow;
    void abort() @nogc nothrow;
    alias GTlsServerConnectionInterface = _GTlsServerConnectionInterface;
    struct _GTlsServerConnectionInterface
    {
        _GTypeInterface g_iface;
    }
    c_ulong g_tls_server_connection_get_type() @nogc nothrow;
    _GIOStream* g_tls_server_connection_new(_GIOStream*, _GTlsCertificate*, _GError**) @nogc nothrow;
    void* aligned_alloc(c_ulong, c_ulong) @nogc nothrow;
    alias GVfsFileLookupFunc = _GFile* function(_GVfs*, const(char)*, void*);
    int posix_memalign(void**, c_ulong, c_ulong) @nogc nothrow;
    alias GVfsClass = _GVfsClass;
    struct _GVfsClass
    {
        _GObjectClass parent_class;
        int function(_GVfs*) is_active;
        _GFile* function(_GVfs*, const(char)*) get_file_for_path;
        _GFile* function(_GVfs*, const(char)*) get_file_for_uri;
        const(const(char)*)* function(_GVfs*) get_supported_uri_schemes;
        _GFile* function(_GVfs*, const(char)*) parse_name;
        void function(_GVfs*, const(char)*, c_ulong, _GFileAttributeMatcher*, _GFileInfo*, _GCancellable*, void**, void function(void*)*) local_file_add_info;
        void function(_GVfs*, _GFileAttributeInfoList*) add_writable_namespaces;
        int function(_GVfs*, const(char)*, _GFileInfo*, GFileQueryInfoFlags, _GCancellable*, _GError**) local_file_set_attributes;
        void function(_GVfs*, const(char)*) local_file_removed;
        void function(_GVfs*, const(char)*, const(char)*) local_file_moved;
        _GIcon* function(_GVfs*, _GVariant*) deserialize_icon;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
    }
    c_ulong g_vfs_get_type() @nogc nothrow;
    int g_vfs_is_active(_GVfs*) @nogc nothrow;
    _GFile* g_vfs_get_file_for_path(_GVfs*, const(char)*) @nogc nothrow;
    _GFile* g_vfs_get_file_for_uri(_GVfs*, const(char)*) @nogc nothrow;
    const(const(char)*)* g_vfs_get_supported_uri_schemes(_GVfs*) @nogc nothrow;
    _GFile* g_vfs_parse_name(_GVfs*, const(char)*) @nogc nothrow;
    _GVfs* g_vfs_get_default() @nogc nothrow;
    _GVfs* g_vfs_get_local() @nogc nothrow;
    int g_vfs_register_uri_scheme(_GVfs*, const(char)*, _GFile* function(_GVfs*, const(char)*, void*), void*, void function(void*), _GFile* function(_GVfs*, const(char)*, void*), void*, void function(void*)) @nogc nothrow;
    int g_vfs_unregister_uri_scheme(_GVfs*, const(char)*) @nogc nothrow;
    void* valloc(c_ulong) @nogc nothrow;
    void free(void*) @nogc nothrow;
    alias GVolumeIface = _GVolumeIface;
    struct _GVolumeIface
    {
        _GTypeInterface g_iface;
        void function(_GVolume*) changed;
        void function(_GVolume*) removed;
        char* function(_GVolume*) get_name;
        _GIcon* function(_GVolume*) get_icon;
        char* function(_GVolume*) get_uuid;
        _GDrive* function(_GVolume*) get_drive;
        _GMount* function(_GVolume*) get_mount;
        int function(_GVolume*) can_mount;
        int function(_GVolume*) can_eject;
        void function(_GVolume*, GMountMountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) mount_fn;
        int function(_GVolume*, _GAsyncResult*, _GError**) mount_finish;
        void function(_GVolume*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) eject;
        int function(_GVolume*, _GAsyncResult*, _GError**) eject_finish;
        char* function(_GVolume*, const(char)*) get_identifier;
        char** function(_GVolume*) enumerate_identifiers;
        int function(_GVolume*) should_automount;
        _GFile* function(_GVolume*) get_activation_root;
        void function(_GVolume*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) eject_with_operation;
        int function(_GVolume*, _GAsyncResult*, _GError**) eject_with_operation_finish;
        const(char)* function(_GVolume*) get_sort_key;
        _GIcon* function(_GVolume*) get_symbolic_icon;
    }
    c_ulong g_volume_get_type() @nogc nothrow;
    char* g_volume_get_name(_GVolume*) @nogc nothrow;
    _GIcon* g_volume_get_icon(_GVolume*) @nogc nothrow;
    _GIcon* g_volume_get_symbolic_icon(_GVolume*) @nogc nothrow;
    char* g_volume_get_uuid(_GVolume*) @nogc nothrow;
    _GDrive* g_volume_get_drive(_GVolume*) @nogc nothrow;
    _GMount* g_volume_get_mount(_GVolume*) @nogc nothrow;
    int g_volume_can_mount(_GVolume*) @nogc nothrow;
    int g_volume_can_eject(_GVolume*) @nogc nothrow;
    int g_volume_should_automount(_GVolume*) @nogc nothrow;
    void g_volume_mount(_GVolume*, GMountMountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_volume_mount_finish(_GVolume*, _GAsyncResult*, _GError**) @nogc nothrow;
    void g_volume_eject(_GVolume*, GMountUnmountFlags, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_volume_eject_finish(_GVolume*, _GAsyncResult*, _GError**) @nogc nothrow;
    char* g_volume_get_identifier(_GVolume*, const(char)*) @nogc nothrow;
    char** g_volume_enumerate_identifiers(_GVolume*) @nogc nothrow;
    _GFile* g_volume_get_activation_root(_GVolume*) @nogc nothrow;
    void g_volume_eject_with_operation(_GVolume*, GMountUnmountFlags, _GMountOperation*, _GCancellable*, void function(_GObject*, _GAsyncResult*, void*), void*) @nogc nothrow;
    int g_volume_eject_with_operation_finish(_GVolume*, _GAsyncResult*, _GError**) @nogc nothrow;
    const(char)* g_volume_get_sort_key(_GVolume*) @nogc nothrow;
    void* realloc(void*, c_ulong) @nogc nothrow;
    void* calloc(c_ulong, c_ulong) @nogc nothrow;
    alias GVolumeMonitorClass = _GVolumeMonitorClass;
    struct _GVolumeMonitorClass
    {
        _GObjectClass parent_class;
        void function(_GVolumeMonitor*, _GVolume*) volume_added;
        void function(_GVolumeMonitor*, _GVolume*) volume_removed;
        void function(_GVolumeMonitor*, _GVolume*) volume_changed;
        void function(_GVolumeMonitor*, _GMount*) mount_added;
        void function(_GVolumeMonitor*, _GMount*) mount_removed;
        void function(_GVolumeMonitor*, _GMount*) mount_pre_unmount;
        void function(_GVolumeMonitor*, _GMount*) mount_changed;
        void function(_GVolumeMonitor*, _GDrive*) drive_connected;
        void function(_GVolumeMonitor*, _GDrive*) drive_disconnected;
        void function(_GVolumeMonitor*, _GDrive*) drive_changed;
        int function() is_supported;
        _GList* function(_GVolumeMonitor*) get_connected_drives;
        _GList* function(_GVolumeMonitor*) get_volumes;
        _GList* function(_GVolumeMonitor*) get_mounts;
        _GVolume* function(_GVolumeMonitor*, const(char)*) get_volume_for_uuid;
        _GMount* function(_GVolumeMonitor*, const(char)*) get_mount_for_uuid;
        _GVolume* function(_GMount*, _GVolumeMonitor*) adopt_orphan_mount;
        void function(_GVolumeMonitor*, _GDrive*) drive_eject_button;
        void function(_GVolumeMonitor*, _GDrive*) drive_stop_button;
        void function() _g_reserved1;
        void function() _g_reserved2;
        void function() _g_reserved3;
        void function() _g_reserved4;
        void function() _g_reserved5;
        void function() _g_reserved6;
    }
    c_ulong g_volume_monitor_get_type() @nogc nothrow;
    _GVolumeMonitor* g_volume_monitor_get() @nogc nothrow;
    _GList* g_volume_monitor_get_connected_drives(_GVolumeMonitor*) @nogc nothrow;
    _GList* g_volume_monitor_get_volumes(_GVolumeMonitor*) @nogc nothrow;
    _GList* g_volume_monitor_get_mounts(_GVolumeMonitor*) @nogc nothrow;
    _GVolume* g_volume_monitor_get_volume_for_uuid(_GVolumeMonitor*, const(char)*) @nogc nothrow;
    _GMount* g_volume_monitor_get_mount_for_uuid(_GVolumeMonitor*, const(char)*) @nogc nothrow;
    _GVolume* g_volume_monitor_adopt_orphan_mount(_GMount*) @nogc nothrow;
    void* malloc(c_ulong) @nogc nothrow;
    int lcong48_r(ushort*, drand48_data*) @nogc nothrow;
    alias GZlibCompressorClass = _GZlibCompressorClass;
    struct _GZlibCompressorClass
    {
        _GObjectClass parent_class;
    }
    c_ulong g_zlib_compressor_get_type() @nogc nothrow;
    _GZlibCompressor* g_zlib_compressor_new(GZlibCompressorFormat, int) @nogc nothrow;
    _GFileInfo* g_zlib_compressor_get_file_info(_GZlibCompressor*) @nogc nothrow;
    void g_zlib_compressor_set_file_info(_GZlibCompressor*, _GFileInfo*) @nogc nothrow;
    int seed48_r(ushort*, drand48_data*) @nogc nothrow;
    int srand48_r(c_long, drand48_data*) @nogc nothrow;
    alias GZlibDecompressorClass = _GZlibDecompressorClass;
    struct _GZlibDecompressorClass
    {
        _GObjectClass parent_class;
    }
    c_ulong g_zlib_decompressor_get_type() @nogc nothrow;
    _GZlibDecompressor* g_zlib_decompressor_new(GZlibCompressorFormat) @nogc nothrow;
    _GFileInfo* g_zlib_decompressor_get_file_info(_GZlibDecompressor*) @nogc nothrow;
    int jrand48_r(ushort*, drand48_data*, c_long*) @nogc nothrow;
    int mrand48_r(drand48_data*, c_long*) @nogc nothrow;
    alias GAllocator = _GAllocator;
    struct _GAllocator{};
    alias GMemChunk = _GMemChunk;
    struct _GMemChunk{};
    int nrand48_r(ushort*, drand48_data*, c_long*) @nogc nothrow;
    int lrand48_r(drand48_data*, c_long*) @nogc nothrow;
    int erand48_r(ushort*, drand48_data*, double*) @nogc nothrow;
    _GMemChunk* g_mem_chunk_new(const(char)*, int, c_ulong, int) @nogc nothrow;
    void g_mem_chunk_destroy(_GMemChunk*) @nogc nothrow;
    void* g_mem_chunk_alloc(_GMemChunk*) @nogc nothrow;
    void* g_mem_chunk_alloc0(_GMemChunk*) @nogc nothrow;
    void g_mem_chunk_free(_GMemChunk*, void*) @nogc nothrow;
    void g_mem_chunk_clean(_GMemChunk*) @nogc nothrow;
    void g_mem_chunk_reset(_GMemChunk*) @nogc nothrow;
    void g_mem_chunk_print(_GMemChunk*) @nogc nothrow;
    void g_mem_chunk_info() @nogc nothrow;
    void g_blow_chunks() @nogc nothrow;
    _GAllocator* g_allocator_new(const(char)*, uint) @nogc nothrow;
    void g_allocator_free(_GAllocator*) @nogc nothrow;
    void g_list_push_allocator(_GAllocator*) @nogc nothrow;
    void g_list_pop_allocator() @nogc nothrow;
    void g_slist_push_allocator(_GAllocator*) @nogc nothrow;
    void g_slist_pop_allocator() @nogc nothrow;
    void g_node_push_allocator(_GAllocator*) @nogc nothrow;
    void g_node_pop_allocator() @nogc nothrow;
    alias GCache = _GCache;
    struct _GCache{};
    alias GCacheNewFunc = void* function(void*);
    alias GCacheDupFunc = void* function(void*);
    alias GCacheDestroyFunc = void function(void*);
    _GCache* g_cache_new(void* function(void*), void function(void*), void* function(void*), void function(void*), uint function(const(void)*), uint function(const(void)*), int function(const(void)*, const(void)*)) @nogc nothrow;
    void g_cache_destroy(_GCache*) @nogc nothrow;
    void* g_cache_insert(_GCache*, void*) @nogc nothrow;
    void g_cache_remove(_GCache*, const(void)*) @nogc nothrow;
    void g_cache_key_foreach(_GCache*, void function(void*, void*, void*), void*) @nogc nothrow;
    void g_cache_value_foreach(_GCache*, void function(void*, void*, void*), void*) @nogc nothrow;
    int drand48_r(drand48_data*, double*) @nogc nothrow;
    alias GCompletion = _GCompletion;
    struct _GCompletion
    {
        _GList* items;
        char* function(void*) func;
        char* prefix;
        _GList* cache;
        int function(const(char)*, const(char)*, c_ulong) strncmp_func;
    }
    alias GCompletionFunc = char* function(void*);
    alias GCompletionStrncmpFunc = int function(const(char)*, const(char)*, c_ulong);
    _GCompletion* g_completion_new(char* function(void*)) @nogc nothrow;
    void g_completion_add_items(_GCompletion*, _GList*) @nogc nothrow;
    void g_completion_remove_items(_GCompletion*, _GList*) @nogc nothrow;
    void g_completion_clear_items(_GCompletion*) @nogc nothrow;
    _GList* g_completion_complete(_GCompletion*, const(char)*, char**) @nogc nothrow;
    _GList* g_completion_complete_utf8(_GCompletion*, const(char)*, char**) @nogc nothrow;
    void g_completion_set_compare(_GCompletion*, int function(const(char)*, const(char)*, c_ulong)) @nogc nothrow;
    void g_completion_free(_GCompletion*) @nogc nothrow;
    struct drand48_data
    {
        ushort[3] __x;
        ushort[3] __old_x;
        ushort __c;
        ushort __init;
        ulong __a;
    }
    void lcong48(ushort*) @nogc nothrow;
    ushort* seed48(ushort*) @nogc nothrow;
    void srand48(c_long) @nogc nothrow;
    alias GRelation = _GRelation;
    struct _GRelation{};
    alias GTuples = _GTuples;
    struct _GTuples
    {
        uint len;
    }
    _GRelation* g_relation_new(int) @nogc nothrow;
    void g_relation_destroy(_GRelation*) @nogc nothrow;
    void g_relation_index(_GRelation*, int, uint function(const(void)*), int function(const(void)*, const(void)*)) @nogc nothrow;
    void g_relation_insert(_GRelation*, ...) @nogc nothrow;
    int g_relation_delete(_GRelation*, const(void)*, int) @nogc nothrow;
    _GTuples* g_relation_select(_GRelation*, const(void)*, int) @nogc nothrow;
    int g_relation_count(_GRelation*, const(void)*, int) @nogc nothrow;
    int g_relation_exists(_GRelation*, ...) @nogc nothrow;
    void g_relation_print(_GRelation*) @nogc nothrow;
    void g_tuples_destroy(_GTuples*) @nogc nothrow;
    void* g_tuples_index(_GTuples*, int, int) @nogc nothrow;
    alias GThreadPriority = _Anonymous_122;
    enum _Anonymous_122
    {
        G_THREAD_PRIORITY_LOW = 0,
        G_THREAD_PRIORITY_NORMAL = 1,
        G_THREAD_PRIORITY_HIGH = 2,
        G_THREAD_PRIORITY_URGENT = 3,
    }
    enum G_THREAD_PRIORITY_LOW = _Anonymous_122.G_THREAD_PRIORITY_LOW;
    enum G_THREAD_PRIORITY_NORMAL = _Anonymous_122.G_THREAD_PRIORITY_NORMAL;
    enum G_THREAD_PRIORITY_HIGH = _Anonymous_122.G_THREAD_PRIORITY_HIGH;
    enum G_THREAD_PRIORITY_URGENT = _Anonymous_122.G_THREAD_PRIORITY_URGENT;
    alias GThreadFunctions = _GThreadFunctions;
    struct _GThreadFunctions
    {
        _GMutex* function() mutex_new;
        void function(_GMutex*) mutex_lock;
        int function(_GMutex*) mutex_trylock;
        void function(_GMutex*) mutex_unlock;
        void function(_GMutex*) mutex_free;
        _GCond* function() cond_new;
        void function(_GCond*) cond_signal;
        void function(_GCond*) cond_broadcast;
        void function(_GCond*, _GMutex*) cond_wait;
        int function(_GCond*, _GMutex*, _GTimeVal*) cond_timed_wait;
        void function(_GCond*) cond_free;
        _GPrivate* function(void function(void*)) private_new;
        void* function(_GPrivate*) private_get;
        void function(_GPrivate*, void*) private_set;
        void function(void* function(void*), void*, c_ulong, int, int, GThreadPriority, void*, _GError**) thread_create;
        void function() thread_yield;
        void function(void*) thread_join;
        void function() thread_exit;
        void function(void*, GThreadPriority) thread_set_priority;
        void function(void*) thread_self;
        int function(void*, void*) thread_equal;
    }
    extern __gshared _GThreadFunctions g_thread_functions_for_glib_use;
    extern __gshared int g_thread_use_default_impl;
    extern __gshared c_ulong function() g_thread_gettime;
    _GThread* g_thread_create(void* function(void*), void*, int, _GError**) @nogc nothrow;
    _GThread* g_thread_create_full(void* function(void*), void*, c_ulong, int, int, GThreadPriority, _GError**) @nogc nothrow;
    void g_thread_set_priority(_GThread*, GThreadPriority) @nogc nothrow;
    void g_thread_foreach(void function(void*, void*), void*) @nogc nothrow;
    c_long jrand48(ushort*) @nogc nothrow;
    struct GStaticMutex
    {
        _GMutex* mutex;
        pthread_mutex_t unused;
    }
    c_long mrand48() @nogc nothrow;
    void g_static_mutex_init(GStaticMutex*) @nogc nothrow;
    void g_static_mutex_free(GStaticMutex*) @nogc nothrow;
    _GMutex* g_static_mutex_get_mutex_impl(GStaticMutex*) @nogc nothrow;
    alias GStaticRecMutex = _GStaticRecMutex;
    struct _GStaticRecMutex
    {
        GStaticMutex mutex;
        uint depth;
        static union _Anonymous_123
        {
            c_ulong owner;
            double dummy;
        }
        _Anonymous_123 unused;
    }
    void g_static_rec_mutex_init(_GStaticRecMutex*) @nogc nothrow;
    void g_static_rec_mutex_lock(_GStaticRecMutex*) @nogc nothrow;
    int g_static_rec_mutex_trylock(_GStaticRecMutex*) @nogc nothrow;
    void g_static_rec_mutex_unlock(_GStaticRecMutex*) @nogc nothrow;
    void g_static_rec_mutex_lock_full(_GStaticRecMutex*, uint) @nogc nothrow;
    uint g_static_rec_mutex_unlock_full(_GStaticRecMutex*) @nogc nothrow;
    void g_static_rec_mutex_free(_GStaticRecMutex*) @nogc nothrow;
    alias GStaticRWLock = _GStaticRWLock;
    struct _GStaticRWLock
    {
        GStaticMutex mutex;
        _GCond* read_cond;
        _GCond* write_cond;
        uint read_counter;
        int have_writer;
        uint want_to_read;
        uint want_to_write;
    }
    c_long nrand48(ushort*) @nogc nothrow;
    void g_static_rw_lock_init(_GStaticRWLock*) @nogc nothrow;
    void g_static_rw_lock_reader_lock(_GStaticRWLock*) @nogc nothrow;
    int g_static_rw_lock_reader_trylock(_GStaticRWLock*) @nogc nothrow;
    void g_static_rw_lock_reader_unlock(_GStaticRWLock*) @nogc nothrow;
    void g_static_rw_lock_writer_lock(_GStaticRWLock*) @nogc nothrow;
    int g_static_rw_lock_writer_trylock(_GStaticRWLock*) @nogc nothrow;
    void g_static_rw_lock_writer_unlock(_GStaticRWLock*) @nogc nothrow;
    void g_static_rw_lock_free(_GStaticRWLock*) @nogc nothrow;
    _GPrivate* g_private_new(void function(void*)) @nogc nothrow;
    alias GStaticPrivate = _GStaticPrivate;
    struct _GStaticPrivate
    {
        uint index;
    }
    void g_static_private_init(_GStaticPrivate*) @nogc nothrow;
    void* g_static_private_get(_GStaticPrivate*) @nogc nothrow;
    void g_static_private_set(_GStaticPrivate*, void*, void function(void*)) @nogc nothrow;
    void g_static_private_free(_GStaticPrivate*) @nogc nothrow;
    int g_once_init_enter_impl(c_ulong*) @nogc nothrow;
    void g_thread_init(void*) @nogc nothrow;
    void g_thread_init_with_errorcheck_mutexes(void*) @nogc nothrow;
    int g_thread_get_initialized() @nogc nothrow;
    extern __gshared int g_threads_got_initialized;
    c_long lrand48() @nogc nothrow;
    _GMutex* g_mutex_new() @nogc nothrow;
    void g_mutex_free(_GMutex*) @nogc nothrow;
    _GCond* g_cond_new() @nogc nothrow;
    void g_cond_free(_GCond*) @nogc nothrow;
    int g_cond_timed_wait(_GCond*, _GMutex*, _GTimeVal*) @nogc nothrow;
    double erand48(ushort*) @nogc nothrow;
    double drand48() @nogc nothrow;
    alias GBytes = _GBytes;
    struct _GBytes{};
    alias GArray = _GArray;
    struct _GArray
    {
        char* data;
        uint len;
    }
    alias GByteArray = _GByteArray;
    struct _GByteArray
    {
        ubyte* data;
        uint len;
    }
    alias GPtrArray = _GPtrArray;
    struct _GPtrArray
    {
        void** pdata;
        uint len;
    }
    int rand_r(uint*) @nogc nothrow;
    _GArray* g_array_new(int, int, uint) @nogc nothrow;
    _GArray* g_array_sized_new(int, int, uint, uint) @nogc nothrow;
    char* g_array_free(_GArray*, int) @nogc nothrow;
    _GArray* g_array_ref(_GArray*) @nogc nothrow;
    void g_array_unref(_GArray*) @nogc nothrow;
    uint g_array_get_element_size(_GArray*) @nogc nothrow;
    _GArray* g_array_append_vals(_GArray*, const(void)*, uint) @nogc nothrow;
    _GArray* g_array_prepend_vals(_GArray*, const(void)*, uint) @nogc nothrow;
    _GArray* g_array_insert_vals(_GArray*, uint, const(void)*, uint) @nogc nothrow;
    _GArray* g_array_set_size(_GArray*, uint) @nogc nothrow;
    _GArray* g_array_remove_index(_GArray*, uint) @nogc nothrow;
    _GArray* g_array_remove_index_fast(_GArray*, uint) @nogc nothrow;
    _GArray* g_array_remove_range(_GArray*, uint, uint) @nogc nothrow;
    void g_array_sort(_GArray*, int function(const(void)*, const(void)*)) @nogc nothrow;
    void g_array_sort_with_data(_GArray*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void g_array_set_clear_func(_GArray*, void function(void*)) @nogc nothrow;
    _GPtrArray* g_ptr_array_new() @nogc nothrow;
    _GPtrArray* g_ptr_array_new_with_free_func(void function(void*)) @nogc nothrow;
    _GPtrArray* g_ptr_array_sized_new(uint) @nogc nothrow;
    _GPtrArray* g_ptr_array_new_full(uint, void function(void*)) @nogc nothrow;
    void** g_ptr_array_free(_GPtrArray*, int) @nogc nothrow;
    _GPtrArray* g_ptr_array_ref(_GPtrArray*) @nogc nothrow;
    void g_ptr_array_unref(_GPtrArray*) @nogc nothrow;
    void g_ptr_array_set_free_func(_GPtrArray*, void function(void*)) @nogc nothrow;
    void g_ptr_array_set_size(_GPtrArray*, int) @nogc nothrow;
    void* g_ptr_array_remove_index(_GPtrArray*, uint) @nogc nothrow;
    void* g_ptr_array_remove_index_fast(_GPtrArray*, uint) @nogc nothrow;
    int g_ptr_array_remove(_GPtrArray*, void*) @nogc nothrow;
    int g_ptr_array_remove_fast(_GPtrArray*, void*) @nogc nothrow;
    _GPtrArray* g_ptr_array_remove_range(_GPtrArray*, uint, uint) @nogc nothrow;
    void g_ptr_array_add(_GPtrArray*, void*) @nogc nothrow;
    void g_ptr_array_insert(_GPtrArray*, int, void*) @nogc nothrow;
    void g_ptr_array_sort(_GPtrArray*, int function(const(void)*, const(void)*)) @nogc nothrow;
    void g_ptr_array_sort_with_data(_GPtrArray*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void g_ptr_array_foreach(_GPtrArray*, void function(void*, void*), void*) @nogc nothrow;
    int g_ptr_array_find(_GPtrArray*, const(void)*, uint*) @nogc nothrow;
    int g_ptr_array_find_with_equal_func(_GPtrArray*, const(void)*, int function(const(void)*, const(void)*), uint*) @nogc nothrow;
    _GByteArray* g_byte_array_new() @nogc nothrow;
    _GByteArray* g_byte_array_new_take(ubyte*, c_ulong) @nogc nothrow;
    _GByteArray* g_byte_array_sized_new(uint) @nogc nothrow;
    ubyte* g_byte_array_free(_GByteArray*, int) @nogc nothrow;
    _GBytes* g_byte_array_free_to_bytes(_GByteArray*) @nogc nothrow;
    _GByteArray* g_byte_array_ref(_GByteArray*) @nogc nothrow;
    void g_byte_array_unref(_GByteArray*) @nogc nothrow;
    _GByteArray* g_byte_array_append(_GByteArray*, const(ubyte)*, uint) @nogc nothrow;
    _GByteArray* g_byte_array_prepend(_GByteArray*, const(ubyte)*, uint) @nogc nothrow;
    _GByteArray* g_byte_array_set_size(_GByteArray*, uint) @nogc nothrow;
    _GByteArray* g_byte_array_remove_index(_GByteArray*, uint) @nogc nothrow;
    _GByteArray* g_byte_array_remove_index_fast(_GByteArray*, uint) @nogc nothrow;
    _GByteArray* g_byte_array_remove_range(_GByteArray*, uint, uint) @nogc nothrow;
    void g_byte_array_sort(_GByteArray*, int function(const(void)*, const(void)*)) @nogc nothrow;
    void g_byte_array_sort_with_data(_GByteArray*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void srand(uint) @nogc nothrow;
    alias GAsyncQueue = _GAsyncQueue;
    struct _GAsyncQueue{};
    _GAsyncQueue* g_async_queue_new() @nogc nothrow;
    _GAsyncQueue* g_async_queue_new_full(void function(void*)) @nogc nothrow;
    void g_async_queue_lock(_GAsyncQueue*) @nogc nothrow;
    void g_async_queue_unlock(_GAsyncQueue*) @nogc nothrow;
    _GAsyncQueue* g_async_queue_ref(_GAsyncQueue*) @nogc nothrow;
    void g_async_queue_unref(_GAsyncQueue*) @nogc nothrow;
    void g_async_queue_ref_unlocked(_GAsyncQueue*) @nogc nothrow;
    void g_async_queue_unref_and_unlock(_GAsyncQueue*) @nogc nothrow;
    void g_async_queue_push(_GAsyncQueue*, void*) @nogc nothrow;
    void g_async_queue_push_unlocked(_GAsyncQueue*, void*) @nogc nothrow;
    void g_async_queue_push_sorted(_GAsyncQueue*, void*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void g_async_queue_push_sorted_unlocked(_GAsyncQueue*, void*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void* g_async_queue_pop(_GAsyncQueue*) @nogc nothrow;
    void* g_async_queue_pop_unlocked(_GAsyncQueue*) @nogc nothrow;
    void* g_async_queue_try_pop(_GAsyncQueue*) @nogc nothrow;
    void* g_async_queue_try_pop_unlocked(_GAsyncQueue*) @nogc nothrow;
    void* g_async_queue_timeout_pop(_GAsyncQueue*, c_ulong) @nogc nothrow;
    void* g_async_queue_timeout_pop_unlocked(_GAsyncQueue*, c_ulong) @nogc nothrow;
    int g_async_queue_length(_GAsyncQueue*) @nogc nothrow;
    int g_async_queue_length_unlocked(_GAsyncQueue*) @nogc nothrow;
    void g_async_queue_sort(_GAsyncQueue*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void g_async_queue_sort_unlocked(_GAsyncQueue*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    int g_async_queue_remove(_GAsyncQueue*, void*) @nogc nothrow;
    int g_async_queue_remove_unlocked(_GAsyncQueue*, void*) @nogc nothrow;
    void g_async_queue_push_front(_GAsyncQueue*, void*) @nogc nothrow;
    void g_async_queue_push_front_unlocked(_GAsyncQueue*, void*) @nogc nothrow;
    void* g_async_queue_timed_pop(_GAsyncQueue*, _GTimeVal*) @nogc nothrow;
    void* g_async_queue_timed_pop_unlocked(_GAsyncQueue*, _GTimeVal*) @nogc nothrow;
    pragma(mangle, "g_atomic_int_get") int g_atomic_int_get_(const(int)*) @nogc nothrow;
    pragma(mangle, "g_atomic_int_set") void g_atomic_int_set_(int*, int) @nogc nothrow;
    pragma(mangle, "g_atomic_int_inc") void g_atomic_int_inc_(int*) @nogc nothrow;
    pragma(mangle, "g_atomic_int_dec_and_test") int g_atomic_int_dec_and_test_(int*) @nogc nothrow;
    pragma(mangle, "g_atomic_int_compare_and_exchange") int g_atomic_int_compare_and_exchange_(int*, int, int) @nogc nothrow;
    pragma(mangle, "g_atomic_int_add") int g_atomic_int_add_(int*, int) @nogc nothrow;
    pragma(mangle, "g_atomic_int_and") uint g_atomic_int_and_(uint*, uint) @nogc nothrow;
    pragma(mangle, "g_atomic_int_or") uint g_atomic_int_or_(uint*, uint) @nogc nothrow;
    pragma(mangle, "g_atomic_int_xor") uint g_atomic_int_xor_(uint*, uint) @nogc nothrow;
    pragma(mangle, "g_atomic_pointer_get") void* g_atomic_pointer_get_(const(void)*) @nogc nothrow;
    pragma(mangle, "g_atomic_pointer_set") void g_atomic_pointer_set_(void*, void*) @nogc nothrow;
    pragma(mangle, "g_atomic_pointer_compare_and_exchange") int g_atomic_pointer_compare_and_exchange_(void*, void*, void*) @nogc nothrow;
    pragma(mangle, "g_atomic_pointer_add") c_long g_atomic_pointer_add_(void*, c_long) @nogc nothrow;
    pragma(mangle, "g_atomic_pointer_and") c_ulong g_atomic_pointer_and_(void*, c_ulong) @nogc nothrow;
    pragma(mangle, "g_atomic_pointer_or") c_ulong g_atomic_pointer_or_(void*, c_ulong) @nogc nothrow;
    pragma(mangle, "g_atomic_pointer_xor") c_ulong g_atomic_pointer_xor_(void*, c_ulong) @nogc nothrow;
    int g_atomic_int_exchange_and_add(int*, int) @nogc nothrow;
    int rand() @nogc nothrow;
    int setstate_r(char*, random_data*) @nogc nothrow;
    int initstate_r(uint, char*, c_ulong, random_data*) @nogc nothrow;
    int srandom_r(uint, random_data*) @nogc nothrow;
    int random_r(random_data*, int*) @nogc nothrow;
    struct random_data
    {
        int* fptr;
        int* rptr;
        int* state;
        int rand_type;
        int rand_deg;
        int rand_sep;
        int* end_ptr;
    }
    void g_on_error_query(const(char)*) @nogc nothrow;
    void g_on_error_stack_trace(const(char)*) @nogc nothrow;
    char* setstate(char*) @nogc nothrow;
    c_ulong g_base64_encode_step(const(ubyte)*, c_ulong, int, char*, int*, int*) @nogc nothrow;
    c_ulong g_base64_encode_close(int, char*, int*, int*) @nogc nothrow;
    char* g_base64_encode(const(ubyte)*, c_ulong) @nogc nothrow;
    c_ulong g_base64_decode_step(const(char)*, c_ulong, ubyte*, int*, uint*) @nogc nothrow;
    ubyte* g_base64_decode(const(char)*, c_ulong*) @nogc nothrow;
    ubyte* g_base64_decode_inplace(char*, c_ulong*) @nogc nothrow;
    void g_bit_lock(int*, int) @nogc nothrow;
    int g_bit_trylock(int*, int) @nogc nothrow;
    void g_bit_unlock(int*, int) @nogc nothrow;
    pragma(mangle, "g_pointer_bit_lock") void g_pointer_bit_lock_(void*, int) @nogc nothrow;
    pragma(mangle, "g_pointer_bit_trylock") int g_pointer_bit_trylock_(void*, int) @nogc nothrow;
    pragma(mangle, "g_pointer_bit_unlock") void g_pointer_bit_unlock_(void*, int) @nogc nothrow;
    char* initstate(uint, char*, c_ulong) @nogc nothrow;
    void srandom(uint) @nogc nothrow;
    c_long random() @nogc nothrow;
    alias GBookmarkFileError = _Anonymous_124;
    enum _Anonymous_124
    {
        G_BOOKMARK_FILE_ERROR_INVALID_URI = 0,
        G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1,
        G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2,
        G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3,
        G_BOOKMARK_FILE_ERROR_READ = 4,
        G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5,
        G_BOOKMARK_FILE_ERROR_WRITE = 6,
        G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7,
    }
    enum G_BOOKMARK_FILE_ERROR_INVALID_URI = _Anonymous_124.G_BOOKMARK_FILE_ERROR_INVALID_URI;
    enum G_BOOKMARK_FILE_ERROR_INVALID_VALUE = _Anonymous_124.G_BOOKMARK_FILE_ERROR_INVALID_VALUE;
    enum G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = _Anonymous_124.G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED;
    enum G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = _Anonymous_124.G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND;
    enum G_BOOKMARK_FILE_ERROR_READ = _Anonymous_124.G_BOOKMARK_FILE_ERROR_READ;
    enum G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = _Anonymous_124.G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING;
    enum G_BOOKMARK_FILE_ERROR_WRITE = _Anonymous_124.G_BOOKMARK_FILE_ERROR_WRITE;
    enum G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = _Anonymous_124.G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND;
    uint g_bookmark_file_error_quark() @nogc nothrow;
    alias GBookmarkFile = _GBookmarkFile;
    struct _GBookmarkFile{};
    _GBookmarkFile* g_bookmark_file_new() @nogc nothrow;
    void g_bookmark_file_free(_GBookmarkFile*) @nogc nothrow;
    int g_bookmark_file_load_from_file(_GBookmarkFile*, const(char)*, _GError**) @nogc nothrow;
    int g_bookmark_file_load_from_data(_GBookmarkFile*, const(char)*, c_ulong, _GError**) @nogc nothrow;
    int g_bookmark_file_load_from_data_dirs(_GBookmarkFile*, const(char)*, char**, _GError**) @nogc nothrow;
    char* g_bookmark_file_to_data(_GBookmarkFile*, c_ulong*, _GError**) @nogc nothrow;
    int g_bookmark_file_to_file(_GBookmarkFile*, const(char)*, _GError**) @nogc nothrow;
    void g_bookmark_file_set_title(_GBookmarkFile*, const(char)*, const(char)*) @nogc nothrow;
    char* g_bookmark_file_get_title(_GBookmarkFile*, const(char)*, _GError**) @nogc nothrow;
    void g_bookmark_file_set_description(_GBookmarkFile*, const(char)*, const(char)*) @nogc nothrow;
    char* g_bookmark_file_get_description(_GBookmarkFile*, const(char)*, _GError**) @nogc nothrow;
    void g_bookmark_file_set_mime_type(_GBookmarkFile*, const(char)*, const(char)*) @nogc nothrow;
    char* g_bookmark_file_get_mime_type(_GBookmarkFile*, const(char)*, _GError**) @nogc nothrow;
    void g_bookmark_file_set_groups(_GBookmarkFile*, const(char)*, const(char)**, c_ulong) @nogc nothrow;
    void g_bookmark_file_add_group(_GBookmarkFile*, const(char)*, const(char)*) @nogc nothrow;
    int g_bookmark_file_has_group(_GBookmarkFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    char** g_bookmark_file_get_groups(_GBookmarkFile*, const(char)*, c_ulong*, _GError**) @nogc nothrow;
    void g_bookmark_file_add_application(_GBookmarkFile*, const(char)*, const(char)*, const(char)*) @nogc nothrow;
    int g_bookmark_file_has_application(_GBookmarkFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    char** g_bookmark_file_get_applications(_GBookmarkFile*, const(char)*, c_ulong*, _GError**) @nogc nothrow;
    int g_bookmark_file_set_app_info(_GBookmarkFile*, const(char)*, const(char)*, const(char)*, int, c_long, _GError**) @nogc nothrow;
    int g_bookmark_file_get_app_info(_GBookmarkFile*, const(char)*, const(char)*, char**, uint*, c_long*, _GError**) @nogc nothrow;
    void g_bookmark_file_set_is_private(_GBookmarkFile*, const(char)*, int) @nogc nothrow;
    int g_bookmark_file_get_is_private(_GBookmarkFile*, const(char)*, _GError**) @nogc nothrow;
    void g_bookmark_file_set_icon(_GBookmarkFile*, const(char)*, const(char)*, const(char)*) @nogc nothrow;
    int g_bookmark_file_get_icon(_GBookmarkFile*, const(char)*, char**, char**, _GError**) @nogc nothrow;
    void g_bookmark_file_set_added(_GBookmarkFile*, const(char)*, c_long) @nogc nothrow;
    c_long g_bookmark_file_get_added(_GBookmarkFile*, const(char)*, _GError**) @nogc nothrow;
    void g_bookmark_file_set_modified(_GBookmarkFile*, const(char)*, c_long) @nogc nothrow;
    c_long g_bookmark_file_get_modified(_GBookmarkFile*, const(char)*, _GError**) @nogc nothrow;
    void g_bookmark_file_set_visited(_GBookmarkFile*, const(char)*, c_long) @nogc nothrow;
    c_long g_bookmark_file_get_visited(_GBookmarkFile*, const(char)*, _GError**) @nogc nothrow;
    int g_bookmark_file_has_item(_GBookmarkFile*, const(char)*) @nogc nothrow;
    int g_bookmark_file_get_size(_GBookmarkFile*) @nogc nothrow;
    char** g_bookmark_file_get_uris(_GBookmarkFile*, c_ulong*) @nogc nothrow;
    int g_bookmark_file_remove_group(_GBookmarkFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    int g_bookmark_file_remove_application(_GBookmarkFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    int g_bookmark_file_remove_item(_GBookmarkFile*, const(char)*, _GError**) @nogc nothrow;
    int g_bookmark_file_move_item(_GBookmarkFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    _GBytes* g_bytes_new(const(void)*, c_ulong) @nogc nothrow;
    _GBytes* g_bytes_new_take(void*, c_ulong) @nogc nothrow;
    _GBytes* g_bytes_new_static(const(void)*, c_ulong) @nogc nothrow;
    _GBytes* g_bytes_new_with_free_func(const(void)*, c_ulong, void function(void*), void*) @nogc nothrow;
    _GBytes* g_bytes_new_from_bytes(_GBytes*, c_ulong, c_ulong) @nogc nothrow;
    const(void)* g_bytes_get_data(_GBytes*, c_ulong*) @nogc nothrow;
    c_ulong g_bytes_get_size(_GBytes*) @nogc nothrow;
    _GBytes* g_bytes_ref(_GBytes*) @nogc nothrow;
    void g_bytes_unref(_GBytes*) @nogc nothrow;
    void* g_bytes_unref_to_data(_GBytes*, c_ulong*) @nogc nothrow;
    _GByteArray* g_bytes_unref_to_array(_GBytes*) @nogc nothrow;
    uint g_bytes_hash(const(void)*) @nogc nothrow;
    int g_bytes_equal(const(void)*, const(void)*) @nogc nothrow;
    int g_bytes_compare(const(void)*, const(void)*) @nogc nothrow;
    int g_get_charset(const(char)**) @nogc nothrow;
    char* g_get_codeset() @nogc nothrow;
    const(const(char)*)* g_get_language_names() @nogc nothrow;
    char** g_get_locale_variants(const(char)*) @nogc nothrow;
    alias GChecksumType = _Anonymous_125;
    enum _Anonymous_125
    {
        G_CHECKSUM_MD5 = 0,
        G_CHECKSUM_SHA1 = 1,
        G_CHECKSUM_SHA256 = 2,
        G_CHECKSUM_SHA512 = 3,
        G_CHECKSUM_SHA384 = 4,
    }
    enum G_CHECKSUM_MD5 = _Anonymous_125.G_CHECKSUM_MD5;
    enum G_CHECKSUM_SHA1 = _Anonymous_125.G_CHECKSUM_SHA1;
    enum G_CHECKSUM_SHA256 = _Anonymous_125.G_CHECKSUM_SHA256;
    enum G_CHECKSUM_SHA512 = _Anonymous_125.G_CHECKSUM_SHA512;
    enum G_CHECKSUM_SHA384 = _Anonymous_125.G_CHECKSUM_SHA384;
    alias GChecksum = _GChecksum;
    struct _GChecksum{};
    c_long g_checksum_type_get_length(GChecksumType) @nogc nothrow;
    _GChecksum* g_checksum_new(GChecksumType) @nogc nothrow;
    void g_checksum_reset(_GChecksum*) @nogc nothrow;
    _GChecksum* g_checksum_copy(const(_GChecksum)*) @nogc nothrow;
    void g_checksum_free(_GChecksum*) @nogc nothrow;
    void g_checksum_update(_GChecksum*, const(ubyte)*, c_long) @nogc nothrow;
    const(char)* g_checksum_get_string(_GChecksum*) @nogc nothrow;
    void g_checksum_get_digest(_GChecksum*, ubyte*, c_ulong*) @nogc nothrow;
    char* g_compute_checksum_for_data(GChecksumType, const(ubyte)*, c_ulong) @nogc nothrow;
    char* g_compute_checksum_for_string(GChecksumType, const(char)*, c_long) @nogc nothrow;
    char* g_compute_checksum_for_bytes(GChecksumType, _GBytes*) @nogc nothrow;
    alias GConvertError = _Anonymous_126;
    enum _Anonymous_126
    {
        G_CONVERT_ERROR_NO_CONVERSION = 0,
        G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1,
        G_CONVERT_ERROR_FAILED = 2,
        G_CONVERT_ERROR_PARTIAL_INPUT = 3,
        G_CONVERT_ERROR_BAD_URI = 4,
        G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5,
        G_CONVERT_ERROR_NO_MEMORY = 6,
        G_CONVERT_ERROR_EMBEDDED_NUL = 7,
    }
    enum G_CONVERT_ERROR_NO_CONVERSION = _Anonymous_126.G_CONVERT_ERROR_NO_CONVERSION;
    enum G_CONVERT_ERROR_ILLEGAL_SEQUENCE = _Anonymous_126.G_CONVERT_ERROR_ILLEGAL_SEQUENCE;
    enum G_CONVERT_ERROR_FAILED = _Anonymous_126.G_CONVERT_ERROR_FAILED;
    enum G_CONVERT_ERROR_PARTIAL_INPUT = _Anonymous_126.G_CONVERT_ERROR_PARTIAL_INPUT;
    enum G_CONVERT_ERROR_BAD_URI = _Anonymous_126.G_CONVERT_ERROR_BAD_URI;
    enum G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = _Anonymous_126.G_CONVERT_ERROR_NOT_ABSOLUTE_PATH;
    enum G_CONVERT_ERROR_NO_MEMORY = _Anonymous_126.G_CONVERT_ERROR_NO_MEMORY;
    enum G_CONVERT_ERROR_EMBEDDED_NUL = _Anonymous_126.G_CONVERT_ERROR_EMBEDDED_NUL;
    uint g_convert_error_quark() @nogc nothrow;
    alias GIConv = _GIConv*;
    struct _GIConv{};
    _GIConv* g_iconv_open(const(char)*, const(char)*) @nogc nothrow;
    c_ulong g_iconv(_GIConv*, char**, c_ulong*, char**, c_ulong*) @nogc nothrow;
    int g_iconv_close(_GIConv*) @nogc nothrow;
    char* g_convert(const(char)*, c_long, const(char)*, const(char)*, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    char* g_convert_with_iconv(const(char)*, c_long, _GIConv*, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    char* g_convert_with_fallback(const(char)*, c_long, const(char)*, const(char)*, const(char)*, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    char* g_locale_to_utf8(const(char)*, c_long, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    char* g_locale_from_utf8(const(char)*, c_long, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    char* g_filename_to_utf8(const(char)*, c_long, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    char* g_filename_from_utf8(const(char)*, c_long, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    char* g_filename_from_uri(const(char)*, char**, _GError**) @nogc nothrow;
    char* g_filename_to_uri(const(char)*, const(char)*, _GError**) @nogc nothrow;
    char* g_filename_display_name(const(char)*) @nogc nothrow;
    int g_get_filename_charsets(const(char)***) @nogc nothrow;
    char* g_filename_display_basename(const(char)*) @nogc nothrow;
    char** g_uri_list_extract_uris(const(char)*) @nogc nothrow;
    alias GData = _GData;
    struct _GData{};
    alias GDataForeachFunc = void function(uint, void*, void*);
    void g_datalist_init(_GData**) @nogc nothrow;
    void g_datalist_clear(_GData**) @nogc nothrow;
    void* g_datalist_id_get_data(_GData**, uint) @nogc nothrow;
    void g_datalist_id_set_data_full(_GData**, uint, void*, void function(void*)) @nogc nothrow;
    alias GDuplicateFunc = void* function(void*, void*);
    void* g_datalist_id_dup_data(_GData**, uint, void* function(void*, void*), void*) @nogc nothrow;
    int g_datalist_id_replace_data(_GData**, uint, void*, void*, void function(void*), void function(void*)*) @nogc nothrow;
    void* g_datalist_id_remove_no_notify(_GData**, uint) @nogc nothrow;
    void g_datalist_foreach(_GData**, void function(uint, void*, void*), void*) @nogc nothrow;
    c_long a64l(const(char)*) @nogc nothrow;
    void g_datalist_set_flags(_GData**, uint) @nogc nothrow;
    void g_datalist_unset_flags(_GData**, uint) @nogc nothrow;
    uint g_datalist_get_flags(_GData**) @nogc nothrow;
    char* l64a(c_long) @nogc nothrow;
    void g_dataset_destroy(const(void)*) @nogc nothrow;
    void* g_dataset_id_get_data(const(void)*, uint) @nogc nothrow;
    void* g_datalist_get_data(_GData**, const(char)*) @nogc nothrow;
    void g_dataset_id_set_data_full(const(void)*, uint, void*, void function(void*)) @nogc nothrow;
    void* g_dataset_id_remove_no_notify(const(void)*, uint) @nogc nothrow;
    void g_dataset_foreach(const(void)*, void function(uint, void*, void*), void*) @nogc nothrow;
    alias GTime = int;
    alias GDateYear = ushort;
    alias GDateDay = ubyte;
    alias GDate = _GDate;
    struct _GDate
    {
        import std.bitmanip: bitfields;

        align(4):
        mixin(bitfields!(
            uint, "julian_days", 32,
            uint, "julian", 1,
            uint, "dmy", 1,
            uint, "day", 6,
            uint, "month", 4,
            uint, "year", 16,
            uint, "_padding_0", 4
        ));
    }
    alias GDateDMY = _Anonymous_127;
    enum _Anonymous_127
    {
        G_DATE_DAY = 0,
        G_DATE_MONTH = 1,
        G_DATE_YEAR = 2,
    }
    enum G_DATE_DAY = _Anonymous_127.G_DATE_DAY;
    enum G_DATE_MONTH = _Anonymous_127.G_DATE_MONTH;
    enum G_DATE_YEAR = _Anonymous_127.G_DATE_YEAR;
    alias GDateWeekday = _Anonymous_128;
    enum _Anonymous_128
    {
        G_DATE_BAD_WEEKDAY = 0,
        G_DATE_MONDAY = 1,
        G_DATE_TUESDAY = 2,
        G_DATE_WEDNESDAY = 3,
        G_DATE_THURSDAY = 4,
        G_DATE_FRIDAY = 5,
        G_DATE_SATURDAY = 6,
        G_DATE_SUNDAY = 7,
    }
    enum G_DATE_BAD_WEEKDAY = _Anonymous_128.G_DATE_BAD_WEEKDAY;
    enum G_DATE_MONDAY = _Anonymous_128.G_DATE_MONDAY;
    enum G_DATE_TUESDAY = _Anonymous_128.G_DATE_TUESDAY;
    enum G_DATE_WEDNESDAY = _Anonymous_128.G_DATE_WEDNESDAY;
    enum G_DATE_THURSDAY = _Anonymous_128.G_DATE_THURSDAY;
    enum G_DATE_FRIDAY = _Anonymous_128.G_DATE_FRIDAY;
    enum G_DATE_SATURDAY = _Anonymous_128.G_DATE_SATURDAY;
    enum G_DATE_SUNDAY = _Anonymous_128.G_DATE_SUNDAY;
    alias GDateMonth = _Anonymous_129;
    enum _Anonymous_129
    {
        G_DATE_BAD_MONTH = 0,
        G_DATE_JANUARY = 1,
        G_DATE_FEBRUARY = 2,
        G_DATE_MARCH = 3,
        G_DATE_APRIL = 4,
        G_DATE_MAY = 5,
        G_DATE_JUNE = 6,
        G_DATE_JULY = 7,
        G_DATE_AUGUST = 8,
        G_DATE_SEPTEMBER = 9,
        G_DATE_OCTOBER = 10,
        G_DATE_NOVEMBER = 11,
        G_DATE_DECEMBER = 12,
    }
    enum G_DATE_BAD_MONTH = _Anonymous_129.G_DATE_BAD_MONTH;
    enum G_DATE_JANUARY = _Anonymous_129.G_DATE_JANUARY;
    enum G_DATE_FEBRUARY = _Anonymous_129.G_DATE_FEBRUARY;
    enum G_DATE_MARCH = _Anonymous_129.G_DATE_MARCH;
    enum G_DATE_APRIL = _Anonymous_129.G_DATE_APRIL;
    enum G_DATE_MAY = _Anonymous_129.G_DATE_MAY;
    enum G_DATE_JUNE = _Anonymous_129.G_DATE_JUNE;
    enum G_DATE_JULY = _Anonymous_129.G_DATE_JULY;
    enum G_DATE_AUGUST = _Anonymous_129.G_DATE_AUGUST;
    enum G_DATE_SEPTEMBER = _Anonymous_129.G_DATE_SEPTEMBER;
    enum G_DATE_OCTOBER = _Anonymous_129.G_DATE_OCTOBER;
    enum G_DATE_NOVEMBER = _Anonymous_129.G_DATE_NOVEMBER;
    enum G_DATE_DECEMBER = _Anonymous_129.G_DATE_DECEMBER;
    _GDate* g_date_new() @nogc nothrow;
    _GDate* g_date_new_dmy(ubyte, GDateMonth, ushort) @nogc nothrow;
    _GDate* g_date_new_julian(uint) @nogc nothrow;
    void g_date_free(_GDate*) @nogc nothrow;
    _GDate* g_date_copy(const(_GDate)*) @nogc nothrow;
    int g_date_valid(const(_GDate)*) @nogc nothrow;
    int g_date_valid_day(ubyte) @nogc nothrow;
    int g_date_valid_month(GDateMonth) @nogc nothrow;
    int g_date_valid_year(ushort) @nogc nothrow;
    int g_date_valid_weekday(GDateWeekday) @nogc nothrow;
    int g_date_valid_julian(uint) @nogc nothrow;
    int g_date_valid_dmy(ubyte, GDateMonth, ushort) @nogc nothrow;
    GDateWeekday g_date_get_weekday(const(_GDate)*) @nogc nothrow;
    GDateMonth g_date_get_month(const(_GDate)*) @nogc nothrow;
    ushort g_date_get_year(const(_GDate)*) @nogc nothrow;
    ubyte g_date_get_day(const(_GDate)*) @nogc nothrow;
    uint g_date_get_julian(const(_GDate)*) @nogc nothrow;
    uint g_date_get_day_of_year(const(_GDate)*) @nogc nothrow;
    uint g_date_get_monday_week_of_year(const(_GDate)*) @nogc nothrow;
    uint g_date_get_sunday_week_of_year(const(_GDate)*) @nogc nothrow;
    uint g_date_get_iso8601_week_of_year(const(_GDate)*) @nogc nothrow;
    void g_date_clear(_GDate*, uint) @nogc nothrow;
    void g_date_set_parse(_GDate*, const(char)*) @nogc nothrow;
    void g_date_set_time_t(_GDate*, c_long) @nogc nothrow;
    void g_date_set_time_val(_GDate*, _GTimeVal*) @nogc nothrow;
    void g_date_set_time(_GDate*, int) @nogc nothrow;
    void g_date_set_month(_GDate*, GDateMonth) @nogc nothrow;
    void g_date_set_day(_GDate*, ubyte) @nogc nothrow;
    void g_date_set_year(_GDate*, ushort) @nogc nothrow;
    void g_date_set_dmy(_GDate*, ubyte, GDateMonth, ushort) @nogc nothrow;
    void g_date_set_julian(_GDate*, uint) @nogc nothrow;
    int g_date_is_first_of_month(const(_GDate)*) @nogc nothrow;
    int g_date_is_last_of_month(const(_GDate)*) @nogc nothrow;
    void g_date_add_days(_GDate*, uint) @nogc nothrow;
    void g_date_subtract_days(_GDate*, uint) @nogc nothrow;
    void g_date_add_months(_GDate*, uint) @nogc nothrow;
    void g_date_subtract_months(_GDate*, uint) @nogc nothrow;
    void g_date_add_years(_GDate*, uint) @nogc nothrow;
    void g_date_subtract_years(_GDate*, uint) @nogc nothrow;
    int g_date_is_leap_year(ushort) @nogc nothrow;
    ubyte g_date_get_days_in_month(GDateMonth, ushort) @nogc nothrow;
    ubyte g_date_get_monday_weeks_in_year(ushort) @nogc nothrow;
    ubyte g_date_get_sunday_weeks_in_year(ushort) @nogc nothrow;
    int g_date_days_between(const(_GDate)*, const(_GDate)*) @nogc nothrow;
    int g_date_compare(const(_GDate)*, const(_GDate)*) @nogc nothrow;
    void g_date_to_struct_tm(const(_GDate)*, tm*) @nogc nothrow;
    void g_date_clamp(_GDate*, const(_GDate)*, const(_GDate)*) @nogc nothrow;
    void g_date_order(_GDate*, _GDate*) @nogc nothrow;
    c_ulong g_date_strftime(char*, c_ulong, const(char)*, const(_GDate)*) @nogc nothrow;
    ulong strtoull(const(char)*, char**, int) @nogc nothrow;
    long strtoll(const(char)*, char**, int) @nogc nothrow;
    ulong strtouq(const(char)*, char**, int) @nogc nothrow;
    long strtoq(const(char)*, char**, int) @nogc nothrow;
    alias GTimeSpan = c_long;
    alias GDateTime = _GDateTime;
    struct _GDateTime{};
    void g_date_time_unref(_GDateTime*) @nogc nothrow;
    _GDateTime* g_date_time_ref(_GDateTime*) @nogc nothrow;
    _GDateTime* g_date_time_new_now(_GTimeZone*) @nogc nothrow;
    _GDateTime* g_date_time_new_now_local() @nogc nothrow;
    _GDateTime* g_date_time_new_now_utc() @nogc nothrow;
    _GDateTime* g_date_time_new_from_unix_local(c_long) @nogc nothrow;
    _GDateTime* g_date_time_new_from_unix_utc(c_long) @nogc nothrow;
    _GDateTime* g_date_time_new_from_timeval_local(const(_GTimeVal)*) @nogc nothrow;
    _GDateTime* g_date_time_new_from_timeval_utc(const(_GTimeVal)*) @nogc nothrow;
    _GDateTime* g_date_time_new_from_iso8601(const(char)*, _GTimeZone*) @nogc nothrow;
    _GDateTime* g_date_time_new(_GTimeZone*, int, int, int, int, int, double) @nogc nothrow;
    _GDateTime* g_date_time_new_local(int, int, int, int, int, double) @nogc nothrow;
    _GDateTime* g_date_time_new_utc(int, int, int, int, int, double) @nogc nothrow;
    _GDateTime* g_date_time_add(_GDateTime*, c_long) @nogc nothrow;
    _GDateTime* g_date_time_add_years(_GDateTime*, int) @nogc nothrow;
    _GDateTime* g_date_time_add_months(_GDateTime*, int) @nogc nothrow;
    _GDateTime* g_date_time_add_weeks(_GDateTime*, int) @nogc nothrow;
    _GDateTime* g_date_time_add_days(_GDateTime*, int) @nogc nothrow;
    _GDateTime* g_date_time_add_hours(_GDateTime*, int) @nogc nothrow;
    _GDateTime* g_date_time_add_minutes(_GDateTime*, int) @nogc nothrow;
    _GDateTime* g_date_time_add_seconds(_GDateTime*, double) @nogc nothrow;
    _GDateTime* g_date_time_add_full(_GDateTime*, int, int, int, int, int, double) @nogc nothrow;
    int g_date_time_compare(const(void)*, const(void)*) @nogc nothrow;
    c_long g_date_time_difference(_GDateTime*, _GDateTime*) @nogc nothrow;
    uint g_date_time_hash(const(void)*) @nogc nothrow;
    int g_date_time_equal(const(void)*, const(void)*) @nogc nothrow;
    void g_date_time_get_ymd(_GDateTime*, int*, int*, int*) @nogc nothrow;
    int g_date_time_get_year(_GDateTime*) @nogc nothrow;
    int g_date_time_get_month(_GDateTime*) @nogc nothrow;
    int g_date_time_get_day_of_month(_GDateTime*) @nogc nothrow;
    int g_date_time_get_week_numbering_year(_GDateTime*) @nogc nothrow;
    int g_date_time_get_week_of_year(_GDateTime*) @nogc nothrow;
    int g_date_time_get_day_of_week(_GDateTime*) @nogc nothrow;
    int g_date_time_get_day_of_year(_GDateTime*) @nogc nothrow;
    int g_date_time_get_hour(_GDateTime*) @nogc nothrow;
    int g_date_time_get_minute(_GDateTime*) @nogc nothrow;
    int g_date_time_get_second(_GDateTime*) @nogc nothrow;
    int g_date_time_get_microsecond(_GDateTime*) @nogc nothrow;
    double g_date_time_get_seconds(_GDateTime*) @nogc nothrow;
    c_long g_date_time_to_unix(_GDateTime*) @nogc nothrow;
    int g_date_time_to_timeval(_GDateTime*, _GTimeVal*) @nogc nothrow;
    c_long g_date_time_get_utc_offset(_GDateTime*) @nogc nothrow;
    const(char)* g_date_time_get_timezone_abbreviation(_GDateTime*) @nogc nothrow;
    int g_date_time_is_daylight_savings(_GDateTime*) @nogc nothrow;
    _GDateTime* g_date_time_to_timezone(_GDateTime*, _GTimeZone*) @nogc nothrow;
    _GDateTime* g_date_time_to_local(_GDateTime*) @nogc nothrow;
    _GDateTime* g_date_time_to_utc(_GDateTime*) @nogc nothrow;
    char* g_date_time_format(_GDateTime*, const(char)*) @nogc nothrow;
    alias GDir = _GDir;
    struct _GDir{};
    _GDir* g_dir_open(const(char)*, uint, _GError**) @nogc nothrow;
    const(char)* g_dir_read_name(_GDir*) @nogc nothrow;
    void g_dir_rewind(_GDir*) @nogc nothrow;
    void g_dir_close(_GDir*) @nogc nothrow;
    c_ulong strtoul(const(char)*, char**, int) @nogc nothrow;
    const(char)* g_getenv(const(char)*) @nogc nothrow;
    int g_setenv(const(char)*, const(char)*, int) @nogc nothrow;
    void g_unsetenv(const(char)*) @nogc nothrow;
    char** g_listenv() @nogc nothrow;
    char** g_get_environ() @nogc nothrow;
    const(char)* g_environ_getenv(char**, const(char)*) @nogc nothrow;
    char** g_environ_setenv(char**, const(char)*, const(char)*, int) @nogc nothrow;
    char** g_environ_unsetenv(char**, const(char)*) @nogc nothrow;
    alias GError = _GError;
    struct _GError
    {
        uint domain;
        int code;
        char* message;
    }
    _GError* g_error_new(uint, int, const(char)*, ...) @nogc nothrow;
    _GError* g_error_new_literal(uint, int, const(char)*) @nogc nothrow;
    _GError* g_error_new_valist(uint, int, const(char)*, va_list*) @nogc nothrow;
    void g_error_free(_GError*) @nogc nothrow;
    _GError* g_error_copy(const(_GError)*) @nogc nothrow;
    int g_error_matches(const(_GError)*, uint, int) @nogc nothrow;
    void g_set_error(_GError**, uint, int, const(char)*, ...) @nogc nothrow;
    void g_set_error_literal(_GError**, uint, int, const(char)*) @nogc nothrow;
    void g_propagate_error(_GError**, _GError*) @nogc nothrow;
    void g_clear_error(_GError**) @nogc nothrow;
    void g_prefix_error(_GError**, const(char)*, ...) @nogc nothrow;
    void g_propagate_prefixed_error(_GError**, _GError*, const(char)*, ...) @nogc nothrow;
    c_long strtol(const(char)*, char**, int) @nogc nothrow;
    alias GFileError = _Anonymous_130;
    enum _Anonymous_130
    {
        G_FILE_ERROR_EXIST = 0,
        G_FILE_ERROR_ISDIR = 1,
        G_FILE_ERROR_ACCES = 2,
        G_FILE_ERROR_NAMETOOLONG = 3,
        G_FILE_ERROR_NOENT = 4,
        G_FILE_ERROR_NOTDIR = 5,
        G_FILE_ERROR_NXIO = 6,
        G_FILE_ERROR_NODEV = 7,
        G_FILE_ERROR_ROFS = 8,
        G_FILE_ERROR_TXTBSY = 9,
        G_FILE_ERROR_FAULT = 10,
        G_FILE_ERROR_LOOP = 11,
        G_FILE_ERROR_NOSPC = 12,
        G_FILE_ERROR_NOMEM = 13,
        G_FILE_ERROR_MFILE = 14,
        G_FILE_ERROR_NFILE = 15,
        G_FILE_ERROR_BADF = 16,
        G_FILE_ERROR_INVAL = 17,
        G_FILE_ERROR_PIPE = 18,
        G_FILE_ERROR_AGAIN = 19,
        G_FILE_ERROR_INTR = 20,
        G_FILE_ERROR_IO = 21,
        G_FILE_ERROR_PERM = 22,
        G_FILE_ERROR_NOSYS = 23,
        G_FILE_ERROR_FAILED = 24,
    }
    enum G_FILE_ERROR_EXIST = _Anonymous_130.G_FILE_ERROR_EXIST;
    enum G_FILE_ERROR_ISDIR = _Anonymous_130.G_FILE_ERROR_ISDIR;
    enum G_FILE_ERROR_ACCES = _Anonymous_130.G_FILE_ERROR_ACCES;
    enum G_FILE_ERROR_NAMETOOLONG = _Anonymous_130.G_FILE_ERROR_NAMETOOLONG;
    enum G_FILE_ERROR_NOENT = _Anonymous_130.G_FILE_ERROR_NOENT;
    enum G_FILE_ERROR_NOTDIR = _Anonymous_130.G_FILE_ERROR_NOTDIR;
    enum G_FILE_ERROR_NXIO = _Anonymous_130.G_FILE_ERROR_NXIO;
    enum G_FILE_ERROR_NODEV = _Anonymous_130.G_FILE_ERROR_NODEV;
    enum G_FILE_ERROR_ROFS = _Anonymous_130.G_FILE_ERROR_ROFS;
    enum G_FILE_ERROR_TXTBSY = _Anonymous_130.G_FILE_ERROR_TXTBSY;
    enum G_FILE_ERROR_FAULT = _Anonymous_130.G_FILE_ERROR_FAULT;
    enum G_FILE_ERROR_LOOP = _Anonymous_130.G_FILE_ERROR_LOOP;
    enum G_FILE_ERROR_NOSPC = _Anonymous_130.G_FILE_ERROR_NOSPC;
    enum G_FILE_ERROR_NOMEM = _Anonymous_130.G_FILE_ERROR_NOMEM;
    enum G_FILE_ERROR_MFILE = _Anonymous_130.G_FILE_ERROR_MFILE;
    enum G_FILE_ERROR_NFILE = _Anonymous_130.G_FILE_ERROR_NFILE;
    enum G_FILE_ERROR_BADF = _Anonymous_130.G_FILE_ERROR_BADF;
    enum G_FILE_ERROR_INVAL = _Anonymous_130.G_FILE_ERROR_INVAL;
    enum G_FILE_ERROR_PIPE = _Anonymous_130.G_FILE_ERROR_PIPE;
    enum G_FILE_ERROR_AGAIN = _Anonymous_130.G_FILE_ERROR_AGAIN;
    enum G_FILE_ERROR_INTR = _Anonymous_130.G_FILE_ERROR_INTR;
    enum G_FILE_ERROR_IO = _Anonymous_130.G_FILE_ERROR_IO;
    enum G_FILE_ERROR_PERM = _Anonymous_130.G_FILE_ERROR_PERM;
    enum G_FILE_ERROR_NOSYS = _Anonymous_130.G_FILE_ERROR_NOSYS;
    enum G_FILE_ERROR_FAILED = _Anonymous_130.G_FILE_ERROR_FAILED;
    alias GFileTest = _Anonymous_131;
    enum _Anonymous_131
    {
        G_FILE_TEST_IS_REGULAR = 1,
        G_FILE_TEST_IS_SYMLINK = 2,
        G_FILE_TEST_IS_DIR = 4,
        G_FILE_TEST_IS_EXECUTABLE = 8,
        G_FILE_TEST_EXISTS = 16,
    }
    enum G_FILE_TEST_IS_REGULAR = _Anonymous_131.G_FILE_TEST_IS_REGULAR;
    enum G_FILE_TEST_IS_SYMLINK = _Anonymous_131.G_FILE_TEST_IS_SYMLINK;
    enum G_FILE_TEST_IS_DIR = _Anonymous_131.G_FILE_TEST_IS_DIR;
    enum G_FILE_TEST_IS_EXECUTABLE = _Anonymous_131.G_FILE_TEST_IS_EXECUTABLE;
    enum G_FILE_TEST_EXISTS = _Anonymous_131.G_FILE_TEST_EXISTS;
    uint g_file_error_quark() @nogc nothrow;
    GFileError g_file_error_from_errno(int) @nogc nothrow;
    int g_file_test(const(char)*, GFileTest) @nogc nothrow;
    int g_file_get_contents(const(char)*, char**, c_ulong*, _GError**) @nogc nothrow;
    int g_file_set_contents(const(char)*, const(char)*, c_long, _GError**) @nogc nothrow;
    char* g_file_read_link(const(char)*, _GError**) @nogc nothrow;
    char* g_mkdtemp(char*) @nogc nothrow;
    char* g_mkdtemp_full(char*, int) @nogc nothrow;
    int g_mkstemp(char*) @nogc nothrow;
    int g_mkstemp_full(char*, int, int) @nogc nothrow;
    int g_file_open_tmp(const(char)*, char**, _GError**) @nogc nothrow;
    char* g_dir_make_tmp(const(char)*, _GError**) @nogc nothrow;
    char* g_build_path(const(char)*, const(char)*, ...) @nogc nothrow;
    char* g_build_pathv(const(char)*, char**) @nogc nothrow;
    char* g_build_filename(const(char)*, ...) @nogc nothrow;
    char* g_build_filenamev(char**) @nogc nothrow;
    char* g_build_filename_valist(const(char)*, va_list**) @nogc nothrow;
    int g_mkdir_with_parents(const(char)*, int) @nogc nothrow;
    int g_path_is_absolute(const(char)*) @nogc nothrow;
    const(char)* g_path_skip_root(const(char)*) @nogc nothrow;
    const(char)* g_basename(const(char)*) @nogc nothrow;
    char* g_get_current_dir() @nogc nothrow;
    char* g_path_get_basename(const(char)*) @nogc nothrow;
    char* g_path_get_dirname(const(char)*) @nogc nothrow;
    const(char)* g_strip_context(const(char)*, const(char)*) @nogc nothrow;
    const(char)* g_dgettext(const(char)*, const(char)*) @nogc nothrow;
    const(char)* g_dcgettext(const(char)*, const(char)*, int) @nogc nothrow;
    const(char)* g_dngettext(const(char)*, const(char)*, const(char)*, c_ulong) @nogc nothrow;
    const(char)* g_dpgettext(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    const(char)* g_dpgettext2(const(char)*, const(char)*, const(char)*) @nogc nothrow;
    alias GHashTable = _GHashTable;
    struct _GHashTable{};
    alias GHRFunc = int function(void*, void*, void*);
    alias GHashTableIter = _GHashTableIter;
    struct _GHashTableIter
    {
        void* dummy1;
        void* dummy2;
        void* dummy3;
        int dummy4;
        int dummy5;
        void* dummy6;
    }
    _GHashTable* g_hash_table_new(uint function(const(void)*), int function(const(void)*, const(void)*)) @nogc nothrow;
    _GHashTable* g_hash_table_new_full(uint function(const(void)*), int function(const(void)*, const(void)*), void function(void*), void function(void*)) @nogc nothrow;
    void g_hash_table_destroy(_GHashTable*) @nogc nothrow;
    int g_hash_table_insert(_GHashTable*, void*, void*) @nogc nothrow;
    int g_hash_table_replace(_GHashTable*, void*, void*) @nogc nothrow;
    int g_hash_table_add(_GHashTable*, void*) @nogc nothrow;
    int g_hash_table_remove(_GHashTable*, const(void)*) @nogc nothrow;
    void g_hash_table_remove_all(_GHashTable*) @nogc nothrow;
    int g_hash_table_steal(_GHashTable*, const(void)*) @nogc nothrow;
    void g_hash_table_steal_all(_GHashTable*) @nogc nothrow;
    void* g_hash_table_lookup(_GHashTable*, const(void)*) @nogc nothrow;
    int g_hash_table_contains(_GHashTable*, const(void)*) @nogc nothrow;
    int g_hash_table_lookup_extended(_GHashTable*, const(void)*, void**, void**) @nogc nothrow;
    void g_hash_table_foreach(_GHashTable*, void function(void*, void*, void*), void*) @nogc nothrow;
    void* g_hash_table_find(_GHashTable*, int function(void*, void*, void*), void*) @nogc nothrow;
    uint g_hash_table_foreach_remove(_GHashTable*, int function(void*, void*, void*), void*) @nogc nothrow;
    uint g_hash_table_foreach_steal(_GHashTable*, int function(void*, void*, void*), void*) @nogc nothrow;
    uint g_hash_table_size(_GHashTable*) @nogc nothrow;
    _GList* g_hash_table_get_keys(_GHashTable*) @nogc nothrow;
    _GList* g_hash_table_get_values(_GHashTable*) @nogc nothrow;
    void** g_hash_table_get_keys_as_array(_GHashTable*, uint*) @nogc nothrow;
    void g_hash_table_iter_init(_GHashTableIter*, _GHashTable*) @nogc nothrow;
    int g_hash_table_iter_next(_GHashTableIter*, void**, void**) @nogc nothrow;
    _GHashTable* g_hash_table_iter_get_hash_table(_GHashTableIter*) @nogc nothrow;
    void g_hash_table_iter_remove(_GHashTableIter*) @nogc nothrow;
    void g_hash_table_iter_replace(_GHashTableIter*, void*) @nogc nothrow;
    void g_hash_table_iter_steal(_GHashTableIter*) @nogc nothrow;
    _GHashTable* g_hash_table_ref(_GHashTable*) @nogc nothrow;
    void g_hash_table_unref(_GHashTable*) @nogc nothrow;
    int g_str_equal(const(void)*, const(void)*) @nogc nothrow;
    uint g_str_hash(const(void)*) @nogc nothrow;
    int g_int_equal(const(void)*, const(void)*) @nogc nothrow;
    uint g_int_hash(const(void)*) @nogc nothrow;
    int g_int64_equal(const(void)*, const(void)*) @nogc nothrow;
    uint g_int64_hash(const(void)*) @nogc nothrow;
    int g_double_equal(const(void)*, const(void)*) @nogc nothrow;
    uint g_double_hash(const(void)*) @nogc nothrow;
    uint g_direct_hash(const(void)*) @nogc nothrow;
    int g_direct_equal(const(void)*, const(void)*) @nogc nothrow;
    alias GHmac = _GHmac;
    struct _GHmac{};
    _GHmac* g_hmac_new(GChecksumType, const(ubyte)*, c_ulong) @nogc nothrow;
    _GHmac* g_hmac_copy(const(_GHmac)*) @nogc nothrow;
    _GHmac* g_hmac_ref(_GHmac*) @nogc nothrow;
    void g_hmac_unref(_GHmac*) @nogc nothrow;
    void g_hmac_update(_GHmac*, const(ubyte)*, c_long) @nogc nothrow;
    const(char)* g_hmac_get_string(_GHmac*) @nogc nothrow;
    void g_hmac_get_digest(_GHmac*, ubyte*, c_ulong*) @nogc nothrow;
    char* g_compute_hmac_for_data(GChecksumType, const(ubyte)*, c_ulong, const(ubyte)*, c_ulong) @nogc nothrow;
    char* g_compute_hmac_for_string(GChecksumType, const(ubyte)*, c_ulong, const(char)*, c_long) @nogc nothrow;
    char* g_compute_hmac_for_bytes(GChecksumType, _GBytes*, _GBytes*) @nogc nothrow;
    alias GHook = _GHook;
    struct _GHook
    {
        void* data;
        _GHook* next;
        _GHook* prev;
        uint ref_count;
        c_ulong hook_id;
        uint flags;
        void* func;
        void function(void*) destroy;
    }
    alias GHookList = _GHookList;
    struct _GHookList
    {
        import std.bitmanip: bitfields;

        align(4):
        c_ulong seq_id;
        mixin(bitfields!(
            uint, "hook_size", 16,
            uint, "is_setup", 1,
            uint, "_padding_0", 15
        ));
        _GHook* hooks;
        void* dummy3;
        void function(_GHookList*, _GHook*) finalize_hook;
        void*[2] dummy;
    }
    alias GHookCompareFunc = int function(_GHook*, _GHook*);
    alias GHookFindFunc = int function(_GHook*, void*);
    alias GHookMarshaller = void function(_GHook*, void*);
    alias GHookCheckMarshaller = int function(_GHook*, void*);
    alias GHookFunc = void function(void*);
    alias GHookCheckFunc = int function(void*);
    alias GHookFinalizeFunc = void function(_GHookList*, _GHook*);
    alias GHookFlagMask = _Anonymous_132;
    enum _Anonymous_132
    {
        G_HOOK_FLAG_ACTIVE = 1,
        G_HOOK_FLAG_IN_CALL = 2,
        G_HOOK_FLAG_MASK = 15,
    }
    enum G_HOOK_FLAG_ACTIVE = _Anonymous_132.G_HOOK_FLAG_ACTIVE;
    enum G_HOOK_FLAG_IN_CALL = _Anonymous_132.G_HOOK_FLAG_IN_CALL;
    enum G_HOOK_FLAG_MASK = _Anonymous_132.G_HOOK_FLAG_MASK;
    void g_hook_list_init(_GHookList*, uint) @nogc nothrow;
    void g_hook_list_clear(_GHookList*) @nogc nothrow;
    _GHook* g_hook_alloc(_GHookList*) @nogc nothrow;
    void g_hook_free(_GHookList*, _GHook*) @nogc nothrow;
    _GHook* g_hook_ref(_GHookList*, _GHook*) @nogc nothrow;
    void g_hook_unref(_GHookList*, _GHook*) @nogc nothrow;
    int g_hook_destroy(_GHookList*, c_ulong) @nogc nothrow;
    void g_hook_destroy_link(_GHookList*, _GHook*) @nogc nothrow;
    void g_hook_prepend(_GHookList*, _GHook*) @nogc nothrow;
    void g_hook_insert_before(_GHookList*, _GHook*, _GHook*) @nogc nothrow;
    void g_hook_insert_sorted(_GHookList*, _GHook*, int function(_GHook*, _GHook*)) @nogc nothrow;
    _GHook* g_hook_get(_GHookList*, c_ulong) @nogc nothrow;
    _GHook* g_hook_find(_GHookList*, int, int function(_GHook*, void*), void*) @nogc nothrow;
    _GHook* g_hook_find_data(_GHookList*, int, void*) @nogc nothrow;
    _GHook* g_hook_find_func(_GHookList*, int, void*) @nogc nothrow;
    _GHook* g_hook_find_func_data(_GHookList*, int, void*, void*) @nogc nothrow;
    _GHook* g_hook_first_valid(_GHookList*, int) @nogc nothrow;
    _GHook* g_hook_next_valid(_GHookList*, _GHook*, int) @nogc nothrow;
    int g_hook_compare_ids(_GHook*, _GHook*) @nogc nothrow;
    void g_hook_list_invoke(_GHookList*, int) @nogc nothrow;
    void g_hook_list_invoke_check(_GHookList*, int) @nogc nothrow;
    void g_hook_list_marshal(_GHookList*, int, void function(_GHook*, void*), void*) @nogc nothrow;
    void g_hook_list_marshal_check(_GHookList*, int, int function(_GHook*, void*), void*) @nogc nothrow;
    real strtold(const(char)*, char**) @nogc nothrow;
    int g_hostname_is_non_ascii(const(char)*) @nogc nothrow;
    int g_hostname_is_ascii_encoded(const(char)*) @nogc nothrow;
    int g_hostname_is_ip_address(const(char)*) @nogc nothrow;
    char* g_hostname_to_ascii(const(char)*) @nogc nothrow;
    char* g_hostname_to_unicode(const(char)*) @nogc nothrow;
    alias GIOChannel = _GIOChannel;
    struct _GIOChannel
    {
        import std.bitmanip: bitfields;

        align(4):
        int ref_count;
        _GIOFuncs* funcs;
        char* encoding;
        _GIConv* read_cd;
        _GIConv* write_cd;
        char* line_term;
        uint line_term_len;
        c_ulong buf_size;
        _GString* read_buf;
        _GString* encoded_read_buf;
        _GString* write_buf;
        char[6] partial_write_buf;
        mixin(bitfields!(
            uint, "use_buffer", 1,
            uint, "do_encode", 1,
            uint, "close_on_unref", 1,
            uint, "is_readable", 1,
            uint, "is_writeable", 1,
            uint, "is_seekable", 1,
            uint, "_padding_0", 2
        ));
        void* reserved1;
        void* reserved2;
    }
    alias GIOFuncs = _GIOFuncs;
    struct _GIOFuncs
    {
        GIOStatus function(_GIOChannel*, char*, c_ulong, c_ulong*, _GError**) io_read;
        GIOStatus function(_GIOChannel*, const(char)*, c_ulong, c_ulong*, _GError**) io_write;
        GIOStatus function(_GIOChannel*, c_long, GSeekType, _GError**) io_seek;
        GIOStatus function(_GIOChannel*, _GError**) io_close;
        _GSource* function(_GIOChannel*, GIOCondition) io_create_watch;
        void function(_GIOChannel*) io_free;
        GIOStatus function(_GIOChannel*, GIOFlags, _GError**) io_set_flags;
        GIOFlags function(_GIOChannel*) io_get_flags;
    }
    alias GIOError = _Anonymous_133;
    enum _Anonymous_133
    {
        G_IO_ERROR_NONE = 0,
        G_IO_ERROR_AGAIN = 1,
        G_IO_ERROR_INVAL = 2,
        G_IO_ERROR_UNKNOWN = 3,
    }
    enum G_IO_ERROR_NONE = _Anonymous_133.G_IO_ERROR_NONE;
    enum G_IO_ERROR_AGAIN = _Anonymous_133.G_IO_ERROR_AGAIN;
    enum G_IO_ERROR_INVAL = _Anonymous_133.G_IO_ERROR_INVAL;
    enum G_IO_ERROR_UNKNOWN = _Anonymous_133.G_IO_ERROR_UNKNOWN;
    alias GIOChannelError = _Anonymous_134;
    enum _Anonymous_134
    {
        G_IO_CHANNEL_ERROR_FBIG = 0,
        G_IO_CHANNEL_ERROR_INVAL = 1,
        G_IO_CHANNEL_ERROR_IO = 2,
        G_IO_CHANNEL_ERROR_ISDIR = 3,
        G_IO_CHANNEL_ERROR_NOSPC = 4,
        G_IO_CHANNEL_ERROR_NXIO = 5,
        G_IO_CHANNEL_ERROR_OVERFLOW = 6,
        G_IO_CHANNEL_ERROR_PIPE = 7,
        G_IO_CHANNEL_ERROR_FAILED = 8,
    }
    enum G_IO_CHANNEL_ERROR_FBIG = _Anonymous_134.G_IO_CHANNEL_ERROR_FBIG;
    enum G_IO_CHANNEL_ERROR_INVAL = _Anonymous_134.G_IO_CHANNEL_ERROR_INVAL;
    enum G_IO_CHANNEL_ERROR_IO = _Anonymous_134.G_IO_CHANNEL_ERROR_IO;
    enum G_IO_CHANNEL_ERROR_ISDIR = _Anonymous_134.G_IO_CHANNEL_ERROR_ISDIR;
    enum G_IO_CHANNEL_ERROR_NOSPC = _Anonymous_134.G_IO_CHANNEL_ERROR_NOSPC;
    enum G_IO_CHANNEL_ERROR_NXIO = _Anonymous_134.G_IO_CHANNEL_ERROR_NXIO;
    enum G_IO_CHANNEL_ERROR_OVERFLOW = _Anonymous_134.G_IO_CHANNEL_ERROR_OVERFLOW;
    enum G_IO_CHANNEL_ERROR_PIPE = _Anonymous_134.G_IO_CHANNEL_ERROR_PIPE;
    enum G_IO_CHANNEL_ERROR_FAILED = _Anonymous_134.G_IO_CHANNEL_ERROR_FAILED;
    alias GIOStatus = _Anonymous_135;
    enum _Anonymous_135
    {
        G_IO_STATUS_ERROR = 0,
        G_IO_STATUS_NORMAL = 1,
        G_IO_STATUS_EOF = 2,
        G_IO_STATUS_AGAIN = 3,
    }
    enum G_IO_STATUS_ERROR = _Anonymous_135.G_IO_STATUS_ERROR;
    enum G_IO_STATUS_NORMAL = _Anonymous_135.G_IO_STATUS_NORMAL;
    enum G_IO_STATUS_EOF = _Anonymous_135.G_IO_STATUS_EOF;
    enum G_IO_STATUS_AGAIN = _Anonymous_135.G_IO_STATUS_AGAIN;
    alias GSeekType = _Anonymous_136;
    enum _Anonymous_136
    {
        G_SEEK_CUR = 0,
        G_SEEK_SET = 1,
        G_SEEK_END = 2,
    }
    enum G_SEEK_CUR = _Anonymous_136.G_SEEK_CUR;
    enum G_SEEK_SET = _Anonymous_136.G_SEEK_SET;
    enum G_SEEK_END = _Anonymous_136.G_SEEK_END;
    alias GIOFlags = _Anonymous_137;
    enum _Anonymous_137
    {
        G_IO_FLAG_APPEND = 1,
        G_IO_FLAG_NONBLOCK = 2,
        G_IO_FLAG_IS_READABLE = 4,
        G_IO_FLAG_IS_WRITABLE = 8,
        G_IO_FLAG_IS_WRITEABLE = 8,
        G_IO_FLAG_IS_SEEKABLE = 16,
        G_IO_FLAG_MASK = 31,
        G_IO_FLAG_GET_MASK = 31,
        G_IO_FLAG_SET_MASK = 3,
    }
    enum G_IO_FLAG_APPEND = _Anonymous_137.G_IO_FLAG_APPEND;
    enum G_IO_FLAG_NONBLOCK = _Anonymous_137.G_IO_FLAG_NONBLOCK;
    enum G_IO_FLAG_IS_READABLE = _Anonymous_137.G_IO_FLAG_IS_READABLE;
    enum G_IO_FLAG_IS_WRITABLE = _Anonymous_137.G_IO_FLAG_IS_WRITABLE;
    enum G_IO_FLAG_IS_WRITEABLE = _Anonymous_137.G_IO_FLAG_IS_WRITEABLE;
    enum G_IO_FLAG_IS_SEEKABLE = _Anonymous_137.G_IO_FLAG_IS_SEEKABLE;
    enum G_IO_FLAG_MASK = _Anonymous_137.G_IO_FLAG_MASK;
    enum G_IO_FLAG_GET_MASK = _Anonymous_137.G_IO_FLAG_GET_MASK;
    enum G_IO_FLAG_SET_MASK = _Anonymous_137.G_IO_FLAG_SET_MASK;
    alias GIOFunc = int function(_GIOChannel*, GIOCondition, void*);
    void g_io_channel_init(_GIOChannel*) @nogc nothrow;
    _GIOChannel* g_io_channel_ref(_GIOChannel*) @nogc nothrow;
    void g_io_channel_unref(_GIOChannel*) @nogc nothrow;
    GIOError g_io_channel_read(_GIOChannel*, char*, c_ulong, c_ulong*) @nogc nothrow;
    GIOError g_io_channel_write(_GIOChannel*, const(char)*, c_ulong, c_ulong*) @nogc nothrow;
    GIOError g_io_channel_seek(_GIOChannel*, c_long, GSeekType) @nogc nothrow;
    void g_io_channel_close(_GIOChannel*) @nogc nothrow;
    GIOStatus g_io_channel_shutdown(_GIOChannel*, int, _GError**) @nogc nothrow;
    uint g_io_add_watch_full(_GIOChannel*, int, GIOCondition, int function(_GIOChannel*, GIOCondition, void*), void*, void function(void*)) @nogc nothrow;
    _GSource* g_io_create_watch(_GIOChannel*, GIOCondition) @nogc nothrow;
    uint g_io_add_watch(_GIOChannel*, GIOCondition, int function(_GIOChannel*, GIOCondition, void*), void*) @nogc nothrow;
    void g_io_channel_set_buffer_size(_GIOChannel*, c_ulong) @nogc nothrow;
    c_ulong g_io_channel_get_buffer_size(_GIOChannel*) @nogc nothrow;
    GIOCondition g_io_channel_get_buffer_condition(_GIOChannel*) @nogc nothrow;
    GIOStatus g_io_channel_set_flags(_GIOChannel*, GIOFlags, _GError**) @nogc nothrow;
    GIOFlags g_io_channel_get_flags(_GIOChannel*) @nogc nothrow;
    void g_io_channel_set_line_term(_GIOChannel*, const(char)*, int) @nogc nothrow;
    const(char)* g_io_channel_get_line_term(_GIOChannel*, int*) @nogc nothrow;
    void g_io_channel_set_buffered(_GIOChannel*, int) @nogc nothrow;
    int g_io_channel_get_buffered(_GIOChannel*) @nogc nothrow;
    GIOStatus g_io_channel_set_encoding(_GIOChannel*, const(char)*, _GError**) @nogc nothrow;
    const(char)* g_io_channel_get_encoding(_GIOChannel*) @nogc nothrow;
    void g_io_channel_set_close_on_unref(_GIOChannel*, int) @nogc nothrow;
    int g_io_channel_get_close_on_unref(_GIOChannel*) @nogc nothrow;
    GIOStatus g_io_channel_flush(_GIOChannel*, _GError**) @nogc nothrow;
    GIOStatus g_io_channel_read_line(_GIOChannel*, char**, c_ulong*, c_ulong*, _GError**) @nogc nothrow;
    GIOStatus g_io_channel_read_line_string(_GIOChannel*, _GString*, c_ulong*, _GError**) @nogc nothrow;
    GIOStatus g_io_channel_read_to_end(_GIOChannel*, char**, c_ulong*, _GError**) @nogc nothrow;
    GIOStatus g_io_channel_read_chars(_GIOChannel*, char*, c_ulong, c_ulong*, _GError**) @nogc nothrow;
    GIOStatus g_io_channel_read_unichar(_GIOChannel*, uint*, _GError**) @nogc nothrow;
    GIOStatus g_io_channel_write_chars(_GIOChannel*, const(char)*, c_long, c_ulong*, _GError**) @nogc nothrow;
    GIOStatus g_io_channel_write_unichar(_GIOChannel*, uint, _GError**) @nogc nothrow;
    GIOStatus g_io_channel_seek_position(_GIOChannel*, c_long, GSeekType, _GError**) @nogc nothrow;
    _GIOChannel* g_io_channel_new_file(const(char)*, const(char)*, _GError**) @nogc nothrow;
    uint g_io_channel_error_quark() @nogc nothrow;
    GIOChannelError g_io_channel_error_from_errno(int) @nogc nothrow;
    _GIOChannel* g_io_channel_unix_new(int) @nogc nothrow;
    int g_io_channel_unix_get_fd(_GIOChannel*) @nogc nothrow;
    extern __gshared _GSourceFuncs g_io_watch_funcs;
    float strtof(const(char)*, char**) @nogc nothrow;
    alias GKeyFileError = _Anonymous_138;
    enum _Anonymous_138
    {
        G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0,
        G_KEY_FILE_ERROR_PARSE = 1,
        G_KEY_FILE_ERROR_NOT_FOUND = 2,
        G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3,
        G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4,
        G_KEY_FILE_ERROR_INVALID_VALUE = 5,
    }
    enum G_KEY_FILE_ERROR_UNKNOWN_ENCODING = _Anonymous_138.G_KEY_FILE_ERROR_UNKNOWN_ENCODING;
    enum G_KEY_FILE_ERROR_PARSE = _Anonymous_138.G_KEY_FILE_ERROR_PARSE;
    enum G_KEY_FILE_ERROR_NOT_FOUND = _Anonymous_138.G_KEY_FILE_ERROR_NOT_FOUND;
    enum G_KEY_FILE_ERROR_KEY_NOT_FOUND = _Anonymous_138.G_KEY_FILE_ERROR_KEY_NOT_FOUND;
    enum G_KEY_FILE_ERROR_GROUP_NOT_FOUND = _Anonymous_138.G_KEY_FILE_ERROR_GROUP_NOT_FOUND;
    enum G_KEY_FILE_ERROR_INVALID_VALUE = _Anonymous_138.G_KEY_FILE_ERROR_INVALID_VALUE;
    uint g_key_file_error_quark() @nogc nothrow;
    alias GKeyFile = _GKeyFile;
    struct _GKeyFile{};
    alias GKeyFileFlags = _Anonymous_139;
    enum _Anonymous_139
    {
        G_KEY_FILE_NONE = 0,
        G_KEY_FILE_KEEP_COMMENTS = 1,
        G_KEY_FILE_KEEP_TRANSLATIONS = 2,
    }
    enum G_KEY_FILE_NONE = _Anonymous_139.G_KEY_FILE_NONE;
    enum G_KEY_FILE_KEEP_COMMENTS = _Anonymous_139.G_KEY_FILE_KEEP_COMMENTS;
    enum G_KEY_FILE_KEEP_TRANSLATIONS = _Anonymous_139.G_KEY_FILE_KEEP_TRANSLATIONS;
    _GKeyFile* g_key_file_new() @nogc nothrow;
    _GKeyFile* g_key_file_ref(_GKeyFile*) @nogc nothrow;
    void g_key_file_unref(_GKeyFile*) @nogc nothrow;
    void g_key_file_free(_GKeyFile*) @nogc nothrow;
    void g_key_file_set_list_separator(_GKeyFile*, char) @nogc nothrow;
    int g_key_file_load_from_file(_GKeyFile*, const(char)*, GKeyFileFlags, _GError**) @nogc nothrow;
    int g_key_file_load_from_data(_GKeyFile*, const(char)*, c_ulong, GKeyFileFlags, _GError**) @nogc nothrow;
    int g_key_file_load_from_bytes(_GKeyFile*, _GBytes*, GKeyFileFlags, _GError**) @nogc nothrow;
    int g_key_file_load_from_dirs(_GKeyFile*, const(char)*, const(char)**, char**, GKeyFileFlags, _GError**) @nogc nothrow;
    int g_key_file_load_from_data_dirs(_GKeyFile*, const(char)*, char**, GKeyFileFlags, _GError**) @nogc nothrow;
    char* g_key_file_to_data(_GKeyFile*, c_ulong*, _GError**) @nogc nothrow;
    int g_key_file_save_to_file(_GKeyFile*, const(char)*, _GError**) @nogc nothrow;
    char* g_key_file_get_start_group(_GKeyFile*) @nogc nothrow;
    char** g_key_file_get_groups(_GKeyFile*, c_ulong*) @nogc nothrow;
    char** g_key_file_get_keys(_GKeyFile*, const(char)*, c_ulong*, _GError**) @nogc nothrow;
    int g_key_file_has_group(_GKeyFile*, const(char)*) @nogc nothrow;
    int g_key_file_has_key(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    char* g_key_file_get_value(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    void g_key_file_set_value(_GKeyFile*, const(char)*, const(char)*, const(char)*) @nogc nothrow;
    char* g_key_file_get_string(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    void g_key_file_set_string(_GKeyFile*, const(char)*, const(char)*, const(char)*) @nogc nothrow;
    char* g_key_file_get_locale_string(_GKeyFile*, const(char)*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    char* g_key_file_get_locale_for_key(_GKeyFile*, const(char)*, const(char)*, const(char)*) @nogc nothrow;
    void g_key_file_set_locale_string(_GKeyFile*, const(char)*, const(char)*, const(char)*, const(char)*) @nogc nothrow;
    int g_key_file_get_boolean(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    void g_key_file_set_boolean(_GKeyFile*, const(char)*, const(char)*, int) @nogc nothrow;
    int g_key_file_get_integer(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    void g_key_file_set_integer(_GKeyFile*, const(char)*, const(char)*, int) @nogc nothrow;
    c_long g_key_file_get_int64(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    void g_key_file_set_int64(_GKeyFile*, const(char)*, const(char)*, c_long) @nogc nothrow;
    c_ulong g_key_file_get_uint64(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    void g_key_file_set_uint64(_GKeyFile*, const(char)*, const(char)*, c_ulong) @nogc nothrow;
    double g_key_file_get_double(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    void g_key_file_set_double(_GKeyFile*, const(char)*, const(char)*, double) @nogc nothrow;
    char** g_key_file_get_string_list(_GKeyFile*, const(char)*, const(char)*, c_ulong*, _GError**) @nogc nothrow;
    void g_key_file_set_string_list(_GKeyFile*, const(char)*, const(char)*, const(const(char)*)*, c_ulong) @nogc nothrow;
    char** g_key_file_get_locale_string_list(_GKeyFile*, const(char)*, const(char)*, const(char)*, c_ulong*, _GError**) @nogc nothrow;
    void g_key_file_set_locale_string_list(_GKeyFile*, const(char)*, const(char)*, const(char)*, const(const(char)*)*, c_ulong) @nogc nothrow;
    int* g_key_file_get_boolean_list(_GKeyFile*, const(char)*, const(char)*, c_ulong*, _GError**) @nogc nothrow;
    void g_key_file_set_boolean_list(_GKeyFile*, const(char)*, const(char)*, int*, c_ulong) @nogc nothrow;
    int* g_key_file_get_integer_list(_GKeyFile*, const(char)*, const(char)*, c_ulong*, _GError**) @nogc nothrow;
    void g_key_file_set_double_list(_GKeyFile*, const(char)*, const(char)*, double*, c_ulong) @nogc nothrow;
    double* g_key_file_get_double_list(_GKeyFile*, const(char)*, const(char)*, c_ulong*, _GError**) @nogc nothrow;
    void g_key_file_set_integer_list(_GKeyFile*, const(char)*, const(char)*, int*, c_ulong) @nogc nothrow;
    int g_key_file_set_comment(_GKeyFile*, const(char)*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    char* g_key_file_get_comment(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    int g_key_file_remove_comment(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    int g_key_file_remove_key(_GKeyFile*, const(char)*, const(char)*, _GError**) @nogc nothrow;
    int g_key_file_remove_group(_GKeyFile*, const(char)*, _GError**) @nogc nothrow;
    double strtod(const(char)*, char**) @nogc nothrow;
    long atoll(const(char)*) @nogc nothrow;
    c_long atol(const(char)*) @nogc nothrow;
    int atoi(const(char)*) @nogc nothrow;
    double atof(const(char)*) @nogc nothrow;
    c_ulong __ctype_get_mb_cur_max() @nogc nothrow;
    struct lldiv_t
    {
        long quot;
        long rem;
    }
    static void g_autoptr_cleanup_generic_gfree(void*) @nogc nothrow;
    static void g_autoptr_cleanup_gstring_free(_GString*) @nogc nothrow;
    alias GAsyncQueue_autoptr = _GAsyncQueue*;
    alias GAsyncQueue_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GAsyncQueue(_GAsyncQueue**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GAsyncQueue(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GAsyncQueue(_GSList**) @nogc nothrow;
    alias GAsyncQueue_listautoptr = _GList*;
    alias GBookmarkFile_autoptr = _GBookmarkFile*;
    alias GBookmarkFile_listautoptr = _GList*;
    alias GBookmarkFile_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GBookmarkFile(_GBookmarkFile**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GBookmarkFile(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GBookmarkFile(_GSList**) @nogc nothrow;
    alias GBytes_listautoptr = _GList*;
    alias GBytes_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GBytes(_GBytes**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GBytes(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GBytes(_GSList**) @nogc nothrow;
    alias GBytes_autoptr = _GBytes*;
    alias GChecksum_autoptr = _GChecksum*;
    alias GChecksum_listautoptr = _GList*;
    alias GChecksum_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GChecksum(_GChecksum**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GChecksum(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GChecksum(_GList**) @nogc nothrow;
    alias GDateTime_autoptr = _GDateTime*;
    alias GDateTime_listautoptr = _GList*;
    alias GDateTime_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDateTime(_GDateTime**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDateTime(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDateTime(_GSList**) @nogc nothrow;
    alias GDir_autoptr = _GDir*;
    alias GDir_listautoptr = _GList*;
    alias GDir_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GDir(_GDir**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GDir(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GDir(_GSList**) @nogc nothrow;
    alias GError_autoptr = _GError*;
    alias GError_listautoptr = _GList*;
    alias GError_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GError(_GError**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GError(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GError(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GHashTable(_GHashTable**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GHashTable(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GHashTable(_GList**) @nogc nothrow;
    alias GHashTable_slistautoptr = _GSList*;
    alias GHashTable_autoptr = _GHashTable*;
    alias GHashTable_listautoptr = _GList*;
    alias GHmac_slistautoptr = _GSList*;
    alias GHmac_listautoptr = _GList*;
    alias GHmac_autoptr = _GHmac*;
    static void glib_listautoptr_cleanup_GHmac(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GHmac(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GHmac(_GHmac**) @nogc nothrow;
    alias GIOChannel_autoptr = _GIOChannel*;
    alias GIOChannel_listautoptr = _GList*;
    alias GIOChannel_slistautoptr = _GSList*;
    static void glib_listautoptr_cleanup_GIOChannel(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GIOChannel(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GIOChannel(_GIOChannel**) @nogc nothrow;
    alias GKeyFile_autoptr = _GKeyFile*;
    alias GKeyFile_listautoptr = _GList*;
    alias GKeyFile_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GKeyFile(_GKeyFile**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GKeyFile(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GKeyFile(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GList(_GList**) @nogc nothrow;
    alias GList_autoptr = _GList*;
    alias GList_listautoptr = _GList*;
    alias GList_slistautoptr = _GSList*;
    static void glib_listautoptr_cleanup_GList(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GList(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GArray(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GArray(_GArray**) @nogc nothrow;
    alias GArray_slistautoptr = _GSList*;
    alias GArray_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GArray(_GSList**) @nogc nothrow;
    alias GArray_autoptr = _GArray*;
    alias GPtrArray_autoptr = _GPtrArray*;
    alias GPtrArray_listautoptr = _GList*;
    alias GPtrArray_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GPtrArray(_GPtrArray**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GPtrArray(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GPtrArray(_GList**) @nogc nothrow;
    alias GByteArray_slistautoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GByteArray(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GByteArray(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GByteArray(_GByteArray**) @nogc nothrow;
    alias GByteArray_autoptr = _GByteArray*;
    alias GByteArray_listautoptr = _GList*;
    alias GMainContext_autoptr = _GMainContext*;
    alias GMainContext_listautoptr = _GList*;
    alias GMainContext_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GMainContext(_GMainContext**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GMainContext(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMainContext(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMainLoop(_GSList**) @nogc nothrow;
    alias GMainLoop_autoptr = _GMainLoop*;
    alias GMainLoop_slistautoptr = _GSList*;
    alias GMainLoop_listautoptr = _GList*;
    static void glib_listautoptr_cleanup_GMainLoop(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GMainLoop(_GMainLoop**) @nogc nothrow;
    alias GSource_listautoptr = _GList*;
    alias GSource_autoptr = _GSource*;
    alias GSource_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSource(_GSource**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSource(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSource(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMappedFile(_GSList**) @nogc nothrow;
    alias GMappedFile_autoptr = _GMappedFile*;
    static void glib_listautoptr_cleanup_GMappedFile(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GMappedFile(_GMappedFile**) @nogc nothrow;
    alias GMappedFile_slistautoptr = _GSList*;
    alias GMappedFile_listautoptr = _GList*;
    alias GMarkupParseContext_listautoptr = _GList*;
    alias GMarkupParseContext_autoptr = _GMarkupParseContext*;
    static void glib_slistautoptr_cleanup_GMarkupParseContext(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GMarkupParseContext(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GMarkupParseContext(_GMarkupParseContext**) @nogc nothrow;
    alias GMarkupParseContext_slistautoptr = _GSList*;
    alias GNode_autoptr = _GNode*;
    alias GNode_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GNode(_GNode**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GNode(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GNode(_GList**) @nogc nothrow;
    alias GNode_listautoptr = _GList*;
    alias GOptionContext_autoptr = _GOptionContext*;
    alias GOptionContext_listautoptr = _GList*;
    alias GOptionContext_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GOptionContext(_GOptionContext**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GOptionContext(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GOptionContext(_GSList**) @nogc nothrow;
    alias GOptionGroup_autoptr = _GOptionGroup*;
    alias GOptionGroup_listautoptr = _GList*;
    static void glib_listautoptr_cleanup_GOptionGroup(_GList**) @nogc nothrow;
    alias GOptionGroup_slistautoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GOptionGroup(_GSList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GOptionGroup(_GOptionGroup**) @nogc nothrow;
    alias GPatternSpec_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GPatternSpec(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GPatternSpec(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GPatternSpec(_GPatternSpec**) @nogc nothrow;
    alias GPatternSpec_slistautoptr = _GSList*;
    alias GPatternSpec_autoptr = _GPatternSpec*;
    static void glib_slistautoptr_cleanup_GQueue(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GQueue(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GQueue(_GQueue**) @nogc nothrow;
    alias GQueue_slistautoptr = _GSList*;
    alias GQueue_listautoptr = _GList*;
    alias GQueue_autoptr = _GQueue*;
    static void glib_auto_cleanup_GQueue(_GQueue*) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GRand(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GRand(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GRand(_GRand**) @nogc nothrow;
    alias GRand_slistautoptr = _GSList*;
    alias GRand_listautoptr = _GList*;
    alias GRand_autoptr = _GRand*;
    static void glib_autoptr_cleanup_GRegex(_GRegex**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GRegex(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GRegex(_GSList**) @nogc nothrow;
    alias GRegex_autoptr = _GRegex*;
    alias GRegex_listautoptr = _GList*;
    alias GRegex_slistautoptr = _GSList*;
    alias GMatchInfo_listautoptr = _GList*;
    alias GMatchInfo_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GMatchInfo(_GMatchInfo**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GMatchInfo(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GMatchInfo(_GSList**) @nogc nothrow;
    alias GMatchInfo_autoptr = _GMatchInfo*;
    alias GScanner_autoptr = _GScanner*;
    alias GScanner_listautoptr = _GList*;
    alias GScanner_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GScanner(_GScanner**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GScanner(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GScanner(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GSequence(_GSList**) @nogc nothrow;
    alias GSequence_autoptr = _GSequence*;
    alias GSequence_listautoptr = _GList*;
    alias GSequence_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSequence(_GSequence**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSequence(_GList**) @nogc nothrow;
    alias GSList_autoptr = _GSList*;
    static void glib_slistautoptr_cleanup_GSList(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GSList(_GList**) @nogc nothrow;
    alias GSList_listautoptr = _GList*;
    alias GSList_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GSList(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GString(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GString(_GString**) @nogc nothrow;
    alias GString_slistautoptr = _GSList*;
    alias GString_listautoptr = _GList*;
    alias GString_autoptr = _GString*;
    static void glib_slistautoptr_cleanup_GString(_GSList**) @nogc nothrow;
    alias GStringChunk_autoptr = _GStringChunk*;
    alias GStringChunk_listautoptr = _GList*;
    alias GStringChunk_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GStringChunk(_GStringChunk**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GStringChunk(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GStringChunk(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GThread(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GThread(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GThread(_GThread**) @nogc nothrow;
    alias GThread_slistautoptr = _GSList*;
    alias GThread_listautoptr = _GList*;
    alias GThread_autoptr = _GThread*;
    static void glib_auto_cleanup_GMutex(_GMutex*) @nogc nothrow;
    alias GMutexLocker_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GMutexLocker(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GMutexLocker(_GList**) @nogc nothrow;
    alias GMutexLocker_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GMutexLocker(void**) @nogc nothrow;
    alias GMutexLocker_autoptr = void*;
    static void glib_auto_cleanup_GCond(_GCond*) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTimer(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GTimer(_GTimer**) @nogc nothrow;
    alias GTimer_slistautoptr = _GSList*;
    alias GTimer_listautoptr = _GList*;
    alias GTimer_autoptr = _GTimer*;
    static void glib_slistautoptr_cleanup_GTimer(_GSList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GTimeZone(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTimeZone(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GTimeZone(_GTimeZone**) @nogc nothrow;
    alias GTimeZone_slistautoptr = _GSList*;
    alias GTimeZone_listautoptr = _GList*;
    alias GTimeZone_autoptr = _GTimeZone*;
    static void glib_autoptr_cleanup_GTree(_GTree**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GTree(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTree(_GList**) @nogc nothrow;
    alias GTree_slistautoptr = _GSList*;
    alias GTree_listautoptr = _GList*;
    alias GTree_autoptr = _GTree*;
    alias GVariant_listautoptr = _GList*;
    alias GVariant_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GVariant(_GVariant**) @nogc nothrow;
    alias GVariant_autoptr = _GVariant*;
    static void glib_slistautoptr_cleanup_GVariant(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GVariant(_GList**) @nogc nothrow;
    alias GVariantBuilder_listautoptr = _GList*;
    alias GVariantBuilder_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GVariantBuilder(_GVariantBuilder**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GVariantBuilder(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GVariantBuilder(_GSList**) @nogc nothrow;
    alias GVariantBuilder_autoptr = _GVariantBuilder*;
    static void glib_auto_cleanup_GVariantBuilder(_GVariantBuilder*) @nogc nothrow;
    alias GVariantIter_autoptr = _GVariantIter*;
    alias GVariantIter_listautoptr = _GList*;
    alias GVariantIter_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GVariantIter(_GVariantIter**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GVariantIter(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GVariantIter(_GSList**) @nogc nothrow;
    alias GVariantDict_autoptr = _GVariantDict*;
    alias GVariantDict_listautoptr = _GList*;
    static void glib_slistautoptr_cleanup_GVariantDict(_GSList**) @nogc nothrow;
    alias GVariantDict_slistautoptr = _GSList*;
    static void glib_listautoptr_cleanup_GVariantDict(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GVariantDict(_GVariantDict**) @nogc nothrow;
    static void glib_auto_cleanup_GVariantDict(_GVariantDict*) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GVariantType(_GSList**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GVariantType(_GList**) @nogc nothrow;
    static void glib_autoptr_cleanup_GVariantType(_GVariantType**) @nogc nothrow;
    alias GVariantType_slistautoptr = _GSList*;
    alias GVariantType_listautoptr = _GList*;
    alias GVariantType_autoptr = _GVariantType*;
    static void glib_auto_cleanup_GStrv(char***) @nogc nothrow;
    alias GList = _GList;
    struct _GList
    {
        void* data;
        _GList* next;
        _GList* prev;
    }
    _GList* g_list_alloc() @nogc nothrow;
    void g_list_free(_GList*) @nogc nothrow;
    void g_list_free_1(_GList*) @nogc nothrow;
    void g_list_free_full(_GList*, void function(void*)) @nogc nothrow;
    _GList* g_list_append(_GList*, void*) @nogc nothrow;
    _GList* g_list_prepend(_GList*, void*) @nogc nothrow;
    _GList* g_list_insert(_GList*, void*, int) @nogc nothrow;
    _GList* g_list_insert_sorted(_GList*, void*, int function(const(void)*, const(void)*)) @nogc nothrow;
    _GList* g_list_insert_sorted_with_data(_GList*, void*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    _GList* g_list_insert_before(_GList*, _GList*, void*) @nogc nothrow;
    _GList* g_list_concat(_GList*, _GList*) @nogc nothrow;
    _GList* g_list_remove(_GList*, const(void)*) @nogc nothrow;
    _GList* g_list_remove_all(_GList*, const(void)*) @nogc nothrow;
    _GList* g_list_remove_link(_GList*, _GList*) @nogc nothrow;
    _GList* g_list_delete_link(_GList*, _GList*) @nogc nothrow;
    _GList* g_list_reverse(_GList*) @nogc nothrow;
    _GList* g_list_copy(_GList*) @nogc nothrow;
    _GList* g_list_copy_deep(_GList*, void* function(const(void)*, void*), void*) @nogc nothrow;
    _GList* g_list_nth(_GList*, uint) @nogc nothrow;
    _GList* g_list_nth_prev(_GList*, uint) @nogc nothrow;
    _GList* g_list_find(_GList*, const(void)*) @nogc nothrow;
    _GList* g_list_find_custom(_GList*, const(void)*, int function(const(void)*, const(void)*)) @nogc nothrow;
    int g_list_position(_GList*, _GList*) @nogc nothrow;
    int g_list_index(_GList*, const(void)*) @nogc nothrow;
    _GList* g_list_last(_GList*) @nogc nothrow;
    _GList* g_list_first(_GList*) @nogc nothrow;
    uint g_list_length(_GList*) @nogc nothrow;
    void g_list_foreach(_GList*, void function(void*, void*), void*) @nogc nothrow;
    _GList* g_list_sort(_GList*, int function(const(void)*, const(void)*)) @nogc nothrow;
    _GList* g_list_sort_with_data(_GList*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void* g_list_nth_data(_GList*, uint) @nogc nothrow;
    struct ldiv_t
    {
        c_long quot;
        c_long rem;
    }
    struct div_t
    {
        int quot;
        int rem;
    }
    int __libc_current_sigrtmax() @nogc nothrow;
    int __libc_current_sigrtmin() @nogc nothrow;
    pragma(mangle, "sigstack") int sigstack_(sigstack*, sigstack*) @nogc nothrow;
    int sigaltstack(const(stack_t)*, stack_t*) @nogc nothrow;
    int siginterrupt(int, int) @nogc nothrow;
    int sigreturn(sigcontext*) @nogc nothrow;
    extern __gshared const(const(char)*)[65] sys_siglist;
    extern __gshared const(const(char)*)[65] _sys_siglist;
    int sigqueue(int, int, const(sigval)) @nogc nothrow;
    int sigtimedwait(const(__sigset_t)*, siginfo_t*, const(timespec)*) @nogc nothrow;
    int sigwaitinfo(const(__sigset_t)*, siginfo_t*) @nogc nothrow;
    int sigwait(const(__sigset_t)*, int*) @nogc nothrow;
    int sigpending(__sigset_t*) @nogc nothrow;
    pragma(mangle, "sigaction") int sigaction_(int, const(sigaction)*, sigaction*) @nogc nothrow;
    int sigsuspend(const(__sigset_t)*) @nogc nothrow;
    int sigprocmask(int, const(__sigset_t)*, __sigset_t*) @nogc nothrow;
    int sigismember(const(__sigset_t)*, int) @nogc nothrow;
    int sigdelset(__sigset_t*, int) @nogc nothrow;
    int sigaddset(__sigset_t*, int) @nogc nothrow;
    int sigfillset(__sigset_t*) @nogc nothrow;
    alias GIOCondition = _Anonymous_140;
    enum _Anonymous_140
    {
        G_IO_IN = 1,
        G_IO_OUT = 4,
        G_IO_PRI = 2,
        G_IO_ERR = 8,
        G_IO_HUP = 16,
        G_IO_NVAL = 32,
    }
    enum G_IO_IN = _Anonymous_140.G_IO_IN;
    enum G_IO_OUT = _Anonymous_140.G_IO_OUT;
    enum G_IO_PRI = _Anonymous_140.G_IO_PRI;
    enum G_IO_ERR = _Anonymous_140.G_IO_ERR;
    enum G_IO_HUP = _Anonymous_140.G_IO_HUP;
    enum G_IO_NVAL = _Anonymous_140.G_IO_NVAL;
    alias GMainContext = _GMainContext;
    struct _GMainContext{};
    alias GMainLoop = _GMainLoop;
    struct _GMainLoop{};
    alias GSource = _GSource;
    struct _GSource
    {
        void* callback_data;
        _GSourceCallbackFuncs* callback_funcs;
        const(_GSourceFuncs)* source_funcs;
        uint ref_count;
        _GMainContext* context;
        int priority;
        uint flags;
        uint source_id;
        _GSList* poll_fds;
        _GSource* prev;
        _GSource* next;
        char* name;
        _GSourcePrivate* priv;
    }
    alias GSourcePrivate = _GSourcePrivate;
    struct _GSourcePrivate{};
    alias GSourceCallbackFuncs = _GSourceCallbackFuncs;
    struct _GSourceCallbackFuncs
    {
        void function(void*) ref_;
        void function(void*) unref;
        void function(void*, _GSource*, int function(void*)*, void**) get;
    }
    alias GSourceFuncs = _GSourceFuncs;
    struct _GSourceFuncs
    {
        int function(_GSource*, int*) prepare;
        int function(_GSource*) check;
        int function(_GSource*, int function(void*), void*) dispatch;
        void function(_GSource*) finalize;
        int function(void*) closure_callback;
        void function() closure_marshal;
    }
    alias GSourceFunc = int function(void*);
    alias GChildWatchFunc = void function(int, int, void*);
    alias GSourceDummyMarshal = void function();
    int sigemptyset(__sigset_t*) @nogc nothrow;
    alias sig_t = void function(int);
    _GMainContext* g_main_context_new() @nogc nothrow;
    _GMainContext* g_main_context_ref(_GMainContext*) @nogc nothrow;
    void g_main_context_unref(_GMainContext*) @nogc nothrow;
    _GMainContext* g_main_context_default() @nogc nothrow;
    int g_main_context_iteration(_GMainContext*, int) @nogc nothrow;
    int g_main_context_pending(_GMainContext*) @nogc nothrow;
    _GSource* g_main_context_find_source_by_id(_GMainContext*, uint) @nogc nothrow;
    _GSource* g_main_context_find_source_by_user_data(_GMainContext*, void*) @nogc nothrow;
    _GSource* g_main_context_find_source_by_funcs_user_data(_GMainContext*, _GSourceFuncs*, void*) @nogc nothrow;
    void g_main_context_wakeup(_GMainContext*) @nogc nothrow;
    int g_main_context_acquire(_GMainContext*) @nogc nothrow;
    void g_main_context_release(_GMainContext*) @nogc nothrow;
    int g_main_context_is_owner(_GMainContext*) @nogc nothrow;
    int g_main_context_wait(_GMainContext*, _GCond*, _GMutex*) @nogc nothrow;
    int g_main_context_prepare(_GMainContext*, int*) @nogc nothrow;
    int g_main_context_query(_GMainContext*, int, int*, _GPollFD*, int) @nogc nothrow;
    int g_main_context_check(_GMainContext*, int, _GPollFD*, int) @nogc nothrow;
    void g_main_context_dispatch(_GMainContext*) @nogc nothrow;
    void g_main_context_set_poll_func(_GMainContext*, int function(_GPollFD*, uint, int)) @nogc nothrow;
    int function(_GPollFD*, uint, int) g_main_context_get_poll_func(_GMainContext*) @nogc nothrow;
    void g_main_context_add_poll(_GMainContext*, _GPollFD*, int) @nogc nothrow;
    void g_main_context_remove_poll(_GMainContext*, _GPollFD*) @nogc nothrow;
    int g_main_depth() @nogc nothrow;
    _GSource* g_main_current_source() @nogc nothrow;
    void g_main_context_push_thread_default(_GMainContext*) @nogc nothrow;
    void g_main_context_pop_thread_default(_GMainContext*) @nogc nothrow;
    _GMainContext* g_main_context_get_thread_default() @nogc nothrow;
    _GMainContext* g_main_context_ref_thread_default() @nogc nothrow;
    _GMainLoop* g_main_loop_new(_GMainContext*, int) @nogc nothrow;
    void g_main_loop_run(_GMainLoop*) @nogc nothrow;
    void g_main_loop_quit(_GMainLoop*) @nogc nothrow;
    _GMainLoop* g_main_loop_ref(_GMainLoop*) @nogc nothrow;
    void g_main_loop_unref(_GMainLoop*) @nogc nothrow;
    int g_main_loop_is_running(_GMainLoop*) @nogc nothrow;
    _GMainContext* g_main_loop_get_context(_GMainLoop*) @nogc nothrow;
    _GSource* g_source_new(_GSourceFuncs*, uint) @nogc nothrow;
    _GSource* g_source_ref(_GSource*) @nogc nothrow;
    void g_source_unref(_GSource*) @nogc nothrow;
    uint g_source_attach(_GSource*, _GMainContext*) @nogc nothrow;
    void g_source_destroy(_GSource*) @nogc nothrow;
    void g_source_set_priority(_GSource*, int) @nogc nothrow;
    int g_source_get_priority(_GSource*) @nogc nothrow;
    void g_source_set_can_recurse(_GSource*, int) @nogc nothrow;
    int g_source_get_can_recurse(_GSource*) @nogc nothrow;
    uint g_source_get_id(_GSource*) @nogc nothrow;
    _GMainContext* g_source_get_context(_GSource*) @nogc nothrow;
    void g_source_set_callback(_GSource*, int function(void*), void*, void function(void*)) @nogc nothrow;
    void g_source_set_funcs(_GSource*, _GSourceFuncs*) @nogc nothrow;
    int g_source_is_destroyed(_GSource*) @nogc nothrow;
    void g_source_set_name(_GSource*, const(char)*) @nogc nothrow;
    const(char)* g_source_get_name(_GSource*) @nogc nothrow;
    void g_source_set_name_by_id(uint, const(char)*) @nogc nothrow;
    void g_source_set_ready_time(_GSource*, c_long) @nogc nothrow;
    c_long g_source_get_ready_time(_GSource*) @nogc nothrow;
    void* g_source_add_unix_fd(_GSource*, int, GIOCondition) @nogc nothrow;
    void g_source_modify_unix_fd(_GSource*, void*, GIOCondition) @nogc nothrow;
    void g_source_remove_unix_fd(_GSource*, void*) @nogc nothrow;
    GIOCondition g_source_query_unix_fd(_GSource*, void*) @nogc nothrow;
    void g_source_set_callback_indirect(_GSource*, void*, _GSourceCallbackFuncs*) @nogc nothrow;
    void g_source_add_poll(_GSource*, _GPollFD*) @nogc nothrow;
    void g_source_remove_poll(_GSource*, _GPollFD*) @nogc nothrow;
    void g_source_add_child_source(_GSource*, _GSource*) @nogc nothrow;
    void g_source_remove_child_source(_GSource*, _GSource*) @nogc nothrow;
    void g_source_get_current_time(_GSource*, _GTimeVal*) @nogc nothrow;
    c_long g_source_get_time(_GSource*) @nogc nothrow;
    _GSource* g_idle_source_new() @nogc nothrow;
    _GSource* g_child_watch_source_new(int) @nogc nothrow;
    _GSource* g_timeout_source_new(uint) @nogc nothrow;
    _GSource* g_timeout_source_new_seconds(uint) @nogc nothrow;
    void g_get_current_time(_GTimeVal*) @nogc nothrow;
    c_long g_get_monotonic_time() @nogc nothrow;
    c_long g_get_real_time() @nogc nothrow;
    int g_source_remove(uint) @nogc nothrow;
    int g_source_remove_by_user_data(void*) @nogc nothrow;
    int g_source_remove_by_funcs_user_data(_GSourceFuncs*, void*) @nogc nothrow;
    alias GClearHandleFunc = void function(uint);
    pragma(mangle, "g_clear_handle_id") void g_clear_handle_id_(uint*, void function(uint)) @nogc nothrow;
    int siggetmask() @nogc nothrow;
    uint g_timeout_add_full(int, uint, int function(void*), void*, void function(void*)) @nogc nothrow;
    uint g_timeout_add(uint, int function(void*), void*) @nogc nothrow;
    uint g_timeout_add_seconds_full(int, uint, int function(void*), void*, void function(void*)) @nogc nothrow;
    uint g_timeout_add_seconds(uint, int function(void*), void*) @nogc nothrow;
    uint g_child_watch_add_full(int, int, void function(int, int, void*), void*, void function(void*)) @nogc nothrow;
    uint g_child_watch_add(int, void function(int, int, void*), void*) @nogc nothrow;
    uint g_idle_add(int function(void*), void*) @nogc nothrow;
    uint g_idle_add_full(int, int function(void*), void*, void function(void*)) @nogc nothrow;
    int g_idle_remove_by_data(void*) @nogc nothrow;
    void g_main_context_invoke_full(_GMainContext*, int, int function(void*), void*, void function(void*)) @nogc nothrow;
    void g_main_context_invoke(_GMainContext*, int function(void*), void*) @nogc nothrow;
    extern __gshared _GSourceFuncs g_timeout_funcs;
    extern __gshared _GSourceFuncs g_child_watch_funcs;
    extern __gshared _GSourceFuncs g_idle_funcs;
    extern __gshared _GSourceFuncs g_unix_signal_funcs;
    extern __gshared _GSourceFuncs g_unix_fd_source_funcs;
    alias GMappedFile = _GMappedFile;
    struct _GMappedFile{};
    _GMappedFile* g_mapped_file_new(const(char)*, int, _GError**) @nogc nothrow;
    _GMappedFile* g_mapped_file_new_from_fd(int, int, _GError**) @nogc nothrow;
    c_ulong g_mapped_file_get_length(_GMappedFile*) @nogc nothrow;
    char* g_mapped_file_get_contents(_GMappedFile*) @nogc nothrow;
    _GBytes* g_mapped_file_get_bytes(_GMappedFile*) @nogc nothrow;
    _GMappedFile* g_mapped_file_ref(_GMappedFile*) @nogc nothrow;
    void g_mapped_file_unref(_GMappedFile*) @nogc nothrow;
    void g_mapped_file_free(_GMappedFile*) @nogc nothrow;
    alias GMarkupError = _Anonymous_141;
    enum _Anonymous_141
    {
        G_MARKUP_ERROR_BAD_UTF8 = 0,
        G_MARKUP_ERROR_EMPTY = 1,
        G_MARKUP_ERROR_PARSE = 2,
        G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3,
        G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4,
        G_MARKUP_ERROR_INVALID_CONTENT = 5,
        G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6,
    }
    enum G_MARKUP_ERROR_BAD_UTF8 = _Anonymous_141.G_MARKUP_ERROR_BAD_UTF8;
    enum G_MARKUP_ERROR_EMPTY = _Anonymous_141.G_MARKUP_ERROR_EMPTY;
    enum G_MARKUP_ERROR_PARSE = _Anonymous_141.G_MARKUP_ERROR_PARSE;
    enum G_MARKUP_ERROR_UNKNOWN_ELEMENT = _Anonymous_141.G_MARKUP_ERROR_UNKNOWN_ELEMENT;
    enum G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = _Anonymous_141.G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE;
    enum G_MARKUP_ERROR_INVALID_CONTENT = _Anonymous_141.G_MARKUP_ERROR_INVALID_CONTENT;
    enum G_MARKUP_ERROR_MISSING_ATTRIBUTE = _Anonymous_141.G_MARKUP_ERROR_MISSING_ATTRIBUTE;
    int sigsetmask(int) @nogc nothrow;
    uint g_markup_error_quark() @nogc nothrow;
    alias GMarkupParseFlags = _Anonymous_142;
    enum _Anonymous_142
    {
        G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1,
        G_MARKUP_TREAT_CDATA_AS_TEXT = 2,
        G_MARKUP_PREFIX_ERROR_POSITION = 4,
        G_MARKUP_IGNORE_QUALIFIED = 8,
    }
    enum G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = _Anonymous_142.G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG;
    enum G_MARKUP_TREAT_CDATA_AS_TEXT = _Anonymous_142.G_MARKUP_TREAT_CDATA_AS_TEXT;
    enum G_MARKUP_PREFIX_ERROR_POSITION = _Anonymous_142.G_MARKUP_PREFIX_ERROR_POSITION;
    enum G_MARKUP_IGNORE_QUALIFIED = _Anonymous_142.G_MARKUP_IGNORE_QUALIFIED;
    alias GMarkupParseContext = _GMarkupParseContext;
    struct _GMarkupParseContext{};
    alias GMarkupParser = _GMarkupParser;
    struct _GMarkupParser
    {
        void function(_GMarkupParseContext*, const(char)*, const(char)**, const(char)**, void*, _GError**) start_element;
        void function(_GMarkupParseContext*, const(char)*, void*, _GError**) end_element;
        void function(_GMarkupParseContext*, const(char)*, c_ulong, void*, _GError**) text;
        void function(_GMarkupParseContext*, const(char)*, c_ulong, void*, _GError**) passthrough;
        void function(_GMarkupParseContext*, _GError*, void*) error;
    }
    _GMarkupParseContext* g_markup_parse_context_new(const(_GMarkupParser)*, GMarkupParseFlags, void*, void function(void*)) @nogc nothrow;
    _GMarkupParseContext* g_markup_parse_context_ref(_GMarkupParseContext*) @nogc nothrow;
    void g_markup_parse_context_unref(_GMarkupParseContext*) @nogc nothrow;
    void g_markup_parse_context_free(_GMarkupParseContext*) @nogc nothrow;
    int g_markup_parse_context_parse(_GMarkupParseContext*, const(char)*, c_long, _GError**) @nogc nothrow;
    void g_markup_parse_context_push(_GMarkupParseContext*, const(_GMarkupParser)*, void*) @nogc nothrow;
    void* g_markup_parse_context_pop(_GMarkupParseContext*) @nogc nothrow;
    int g_markup_parse_context_end_parse(_GMarkupParseContext*, _GError**) @nogc nothrow;
    const(char)* g_markup_parse_context_get_element(_GMarkupParseContext*) @nogc nothrow;
    const(_GSList)* g_markup_parse_context_get_element_stack(_GMarkupParseContext*) @nogc nothrow;
    void g_markup_parse_context_get_position(_GMarkupParseContext*, int*, int*) @nogc nothrow;
    void* g_markup_parse_context_get_user_data(_GMarkupParseContext*) @nogc nothrow;
    char* g_markup_escape_text(const(char)*, c_long) @nogc nothrow;
    char* g_markup_printf_escaped(const(char)*, ...) @nogc nothrow;
    char* g_markup_vprintf_escaped(const(char)*, va_list*) @nogc nothrow;
    alias GMarkupCollectType = _Anonymous_143;
    enum _Anonymous_143
    {
        G_MARKUP_COLLECT_INVALID = 0,
        G_MARKUP_COLLECT_STRING = 1,
        G_MARKUP_COLLECT_STRDUP = 2,
        G_MARKUP_COLLECT_BOOLEAN = 3,
        G_MARKUP_COLLECT_TRISTATE = 4,
        G_MARKUP_COLLECT_OPTIONAL = 65536,
    }
    enum G_MARKUP_COLLECT_INVALID = _Anonymous_143.G_MARKUP_COLLECT_INVALID;
    enum G_MARKUP_COLLECT_STRING = _Anonymous_143.G_MARKUP_COLLECT_STRING;
    enum G_MARKUP_COLLECT_STRDUP = _Anonymous_143.G_MARKUP_COLLECT_STRDUP;
    enum G_MARKUP_COLLECT_BOOLEAN = _Anonymous_143.G_MARKUP_COLLECT_BOOLEAN;
    enum G_MARKUP_COLLECT_TRISTATE = _Anonymous_143.G_MARKUP_COLLECT_TRISTATE;
    enum G_MARKUP_COLLECT_OPTIONAL = _Anonymous_143.G_MARKUP_COLLECT_OPTIONAL;
    int g_markup_collect_attributes(const(char)*, const(char)**, const(char)**, _GError**, GMarkupCollectType, const(char)*, ...) @nogc nothrow;
    alias GMemVTable = _GMemVTable;
    struct _GMemVTable
    {
        void* function(c_ulong) malloc;
        void* function(void*, c_ulong) realloc;
        void function(void*) free;
        void* function(c_ulong, c_ulong) calloc;
        void* function(c_ulong) try_malloc;
        void* function(void*, c_ulong) try_realloc;
    }
    void g_free(void*) @nogc nothrow;
    pragma(mangle, "g_clear_pointer") void g_clear_pointer_(void**, void function(void*)) @nogc nothrow;
    void* g_malloc(c_ulong) @nogc nothrow;
    void* g_malloc0(c_ulong) @nogc nothrow;
    void* g_realloc(void*, c_ulong) @nogc nothrow;
    void* g_try_malloc(c_ulong) @nogc nothrow;
    void* g_try_malloc0(c_ulong) @nogc nothrow;
    void* g_try_realloc(void*, c_ulong) @nogc nothrow;
    void* g_malloc_n(c_ulong, c_ulong) @nogc nothrow;
    void* g_malloc0_n(c_ulong, c_ulong) @nogc nothrow;
    void* g_realloc_n(void*, c_ulong, c_ulong) @nogc nothrow;
    void* g_try_malloc_n(c_ulong, c_ulong) @nogc nothrow;
    void* g_try_malloc0_n(c_ulong, c_ulong) @nogc nothrow;
    void* g_try_realloc_n(void*, c_ulong, c_ulong) @nogc nothrow;
    int sigblock(int) @nogc nothrow;
    pragma(mangle, "g_steal_pointer") static void* g_steal_pointer_(void*) @nogc nothrow;
    void psiginfo(const(siginfo_t)*, const(char)*) @nogc nothrow;
    void psignal(int, const(char)*) @nogc nothrow;
    int gsignal(int) @nogc nothrow;
    void function(int) ssignal(int, void function(int)) @nogc nothrow;
    void g_mem_set_vtable(_GMemVTable*) @nogc nothrow;
    int g_mem_is_system_malloc() @nogc nothrow;
    extern __gshared int g_mem_gc_friendly;
    extern __gshared _GMemVTable* glib_mem_profiler_table;
    void g_mem_profile() @nogc nothrow;
    c_ulong g_printf_string_upper_bound(const(char)*, va_list*) @nogc nothrow;
    int raise(int) @nogc nothrow;
    alias GLogLevelFlags = _Anonymous_144;
    enum _Anonymous_144
    {
        G_LOG_FLAG_RECURSION = 1,
        G_LOG_FLAG_FATAL = 2,
        G_LOG_LEVEL_ERROR = 4,
        G_LOG_LEVEL_CRITICAL = 8,
        G_LOG_LEVEL_WARNING = 16,
        G_LOG_LEVEL_MESSAGE = 32,
        G_LOG_LEVEL_INFO = 64,
        G_LOG_LEVEL_DEBUG = 128,
        G_LOG_LEVEL_MASK = -4,
    }
    enum G_LOG_FLAG_RECURSION = _Anonymous_144.G_LOG_FLAG_RECURSION;
    enum G_LOG_FLAG_FATAL = _Anonymous_144.G_LOG_FLAG_FATAL;
    enum G_LOG_LEVEL_ERROR = _Anonymous_144.G_LOG_LEVEL_ERROR;
    enum G_LOG_LEVEL_CRITICAL = _Anonymous_144.G_LOG_LEVEL_CRITICAL;
    enum G_LOG_LEVEL_WARNING = _Anonymous_144.G_LOG_LEVEL_WARNING;
    enum G_LOG_LEVEL_MESSAGE = _Anonymous_144.G_LOG_LEVEL_MESSAGE;
    enum G_LOG_LEVEL_INFO = _Anonymous_144.G_LOG_LEVEL_INFO;
    enum G_LOG_LEVEL_DEBUG = _Anonymous_144.G_LOG_LEVEL_DEBUG;
    enum G_LOG_LEVEL_MASK = _Anonymous_144.G_LOG_LEVEL_MASK;
    alias GLogFunc = void function(const(char)*, GLogLevelFlags, const(char)*, void*);
    uint g_log_set_handler(const(char)*, GLogLevelFlags, void function(const(char)*, GLogLevelFlags, const(char)*, void*), void*) @nogc nothrow;
    uint g_log_set_handler_full(const(char)*, GLogLevelFlags, void function(const(char)*, GLogLevelFlags, const(char)*, void*), void*, void function(void*)) @nogc nothrow;
    void g_log_remove_handler(const(char)*, uint) @nogc nothrow;
    void g_log_default_handler(const(char)*, GLogLevelFlags, const(char)*, void*) @nogc nothrow;
    void function(const(char)*, GLogLevelFlags, const(char)*, void*) g_log_set_default_handler(void function(const(char)*, GLogLevelFlags, const(char)*, void*), void*) @nogc nothrow;
    void g_log(const(char)*, GLogLevelFlags, const(char)*, ...) @nogc nothrow;
    void g_logv(const(char)*, GLogLevelFlags, const(char)*, va_list*) @nogc nothrow;
    GLogLevelFlags g_log_set_fatal_mask(const(char)*, GLogLevelFlags) @nogc nothrow;
    GLogLevelFlags g_log_set_always_fatal(GLogLevelFlags) @nogc nothrow;
    alias GLogWriterOutput = _Anonymous_145;
    enum _Anonymous_145
    {
        G_LOG_WRITER_HANDLED = 1,
        G_LOG_WRITER_UNHANDLED = 0,
    }
    enum G_LOG_WRITER_HANDLED = _Anonymous_145.G_LOG_WRITER_HANDLED;
    enum G_LOG_WRITER_UNHANDLED = _Anonymous_145.G_LOG_WRITER_UNHANDLED;
    alias GLogField = _GLogField;
    struct _GLogField
    {
        const(char)* key;
        const(void)* value;
        c_long length;
    }
    alias GLogWriterFunc = GLogWriterOutput function(GLogLevelFlags, const(_GLogField)*, c_ulong, void*);
    void g_log_structured(const(char)*, GLogLevelFlags, ...) @nogc nothrow;
    void g_log_structured_array(GLogLevelFlags, const(_GLogField)*, c_ulong) @nogc nothrow;
    void g_log_variant(const(char)*, GLogLevelFlags, _GVariant*) @nogc nothrow;
    void g_log_set_writer_func(GLogWriterOutput function(GLogLevelFlags, const(_GLogField)*, c_ulong, void*), void*, void function(void*)) @nogc nothrow;
    int g_log_writer_supports_color(int) @nogc nothrow;
    int g_log_writer_is_journald(int) @nogc nothrow;
    char* g_log_writer_format_fields(GLogLevelFlags, const(_GLogField)*, c_ulong, int) @nogc nothrow;
    GLogWriterOutput g_log_writer_journald(GLogLevelFlags, const(_GLogField)*, c_ulong, void*) @nogc nothrow;
    GLogWriterOutput g_log_writer_standard_streams(GLogLevelFlags, const(_GLogField)*, c_ulong, void*) @nogc nothrow;
    GLogWriterOutput g_log_writer_default(GLogLevelFlags, const(_GLogField)*, c_ulong, void*) @nogc nothrow;
    int killpg(int, int) @nogc nothrow;
    void _g_log_fallback_handler(const(char)*, GLogLevelFlags, const(char)*, void*) @nogc nothrow;
    void g_return_if_fail_warning(const(char)*, const(char)*, const(char)*) @nogc nothrow;
    void g_warn_message(const(char)*, const(char)*, int, const(char)*, const(char)*) @nogc nothrow;
    void g_assert_warning(const(char)*, const(char)*, const(int), const(char)*, const(char)*) @nogc nothrow;
    void g_log_structured_standard(const(char)*, GLogLevelFlags, const(char)*, const(char)*, const(char)*, const(char)*, ...) @nogc nothrow;
    int kill(int, int) @nogc nothrow;
    void function(int) signal(int, void function(int)) @nogc nothrow;
    alias GPrintFunc = void function(const(char)*);
    void g_print(const(char)*, ...) @nogc nothrow;
    void function(const(char)*) g_set_print_handler(void function(const(char)*)) @nogc nothrow;
    void g_printerr(const(char)*, ...) @nogc nothrow;
    void function(const(char)*) g_set_printerr_handler(void function(const(char)*)) @nogc nothrow;
    void function(int) __sysv_signal(int, void function(int)) @nogc nothrow;
    alias __sighandler_t = void function(int);
    alias GNode = _GNode;
    struct _GNode
    {
        void* data;
        _GNode* next;
        _GNode* prev;
        _GNode* parent;
        _GNode* children;
    }
    alias GTraverseFlags = _Anonymous_146;
    enum _Anonymous_146
    {
        G_TRAVERSE_LEAVES = 1,
        G_TRAVERSE_NON_LEAVES = 2,
        G_TRAVERSE_ALL = 3,
        G_TRAVERSE_MASK = 3,
        G_TRAVERSE_LEAFS = 1,
        G_TRAVERSE_NON_LEAFS = 2,
    }
    enum G_TRAVERSE_LEAVES = _Anonymous_146.G_TRAVERSE_LEAVES;
    enum G_TRAVERSE_NON_LEAVES = _Anonymous_146.G_TRAVERSE_NON_LEAVES;
    enum G_TRAVERSE_ALL = _Anonymous_146.G_TRAVERSE_ALL;
    enum G_TRAVERSE_MASK = _Anonymous_146.G_TRAVERSE_MASK;
    enum G_TRAVERSE_LEAFS = _Anonymous_146.G_TRAVERSE_LEAFS;
    enum G_TRAVERSE_NON_LEAFS = _Anonymous_146.G_TRAVERSE_NON_LEAFS;
    alias GTraverseType = _Anonymous_147;
    enum _Anonymous_147
    {
        G_IN_ORDER = 0,
        G_PRE_ORDER = 1,
        G_POST_ORDER = 2,
        G_LEVEL_ORDER = 3,
    }
    enum G_IN_ORDER = _Anonymous_147.G_IN_ORDER;
    enum G_PRE_ORDER = _Anonymous_147.G_PRE_ORDER;
    enum G_POST_ORDER = _Anonymous_147.G_POST_ORDER;
    enum G_LEVEL_ORDER = _Anonymous_147.G_LEVEL_ORDER;
    alias GNodeTraverseFunc = int function(_GNode*, void*);
    alias GNodeForeachFunc = void function(_GNode*, void*);
    alias GCopyFunc = void* function(const(void)*, void*);
    _GNode* g_node_new(void*) @nogc nothrow;
    void g_node_destroy(_GNode*) @nogc nothrow;
    void g_node_unlink(_GNode*) @nogc nothrow;
    _GNode* g_node_copy_deep(_GNode*, void* function(const(void)*, void*), void*) @nogc nothrow;
    _GNode* g_node_copy(_GNode*) @nogc nothrow;
    _GNode* g_node_insert(_GNode*, int, _GNode*) @nogc nothrow;
    _GNode* g_node_insert_before(_GNode*, _GNode*, _GNode*) @nogc nothrow;
    _GNode* g_node_insert_after(_GNode*, _GNode*, _GNode*) @nogc nothrow;
    _GNode* g_node_prepend(_GNode*, _GNode*) @nogc nothrow;
    uint g_node_n_nodes(_GNode*, GTraverseFlags) @nogc nothrow;
    _GNode* g_node_get_root(_GNode*) @nogc nothrow;
    int g_node_is_ancestor(_GNode*, _GNode*) @nogc nothrow;
    uint g_node_depth(_GNode*) @nogc nothrow;
    _GNode* g_node_find(_GNode*, GTraverseType, GTraverseFlags, void*) @nogc nothrow;
    void g_node_traverse(_GNode*, GTraverseType, GTraverseFlags, int, int function(_GNode*, void*), void*) @nogc nothrow;
    uint g_node_max_height(_GNode*) @nogc nothrow;
    void g_node_children_foreach(_GNode*, GTraverseFlags, void function(_GNode*, void*), void*) @nogc nothrow;
    void g_node_reverse_children(_GNode*) @nogc nothrow;
    uint g_node_n_children(_GNode*) @nogc nothrow;
    _GNode* g_node_nth_child(_GNode*, uint) @nogc nothrow;
    _GNode* g_node_last_child(_GNode*) @nogc nothrow;
    _GNode* g_node_find_child(_GNode*, GTraverseFlags, void*) @nogc nothrow;
    int g_node_child_position(_GNode*, _GNode*) @nogc nothrow;
    int g_node_child_index(_GNode*, void*) @nogc nothrow;
    _GNode* g_node_first_sibling(_GNode*) @nogc nothrow;
    _GNode* g_node_last_sibling(_GNode*) @nogc nothrow;
    alias GOptionContext = _GOptionContext;
    struct _GOptionContext{};
    alias GOptionGroup = _GOptionGroup;
    struct _GOptionGroup{};
    alias GOptionEntry = _GOptionEntry;
    struct _GOptionEntry
    {
        const(char)* long_name;
        char short_name;
        int flags;
        GOptionArg arg;
        void* arg_data;
        const(char)* description;
        const(char)* arg_description;
    }
    alias GOptionFlags = _Anonymous_148;
    enum _Anonymous_148
    {
        G_OPTION_FLAG_NONE = 0,
        G_OPTION_FLAG_HIDDEN = 1,
        G_OPTION_FLAG_IN_MAIN = 2,
        G_OPTION_FLAG_REVERSE = 4,
        G_OPTION_FLAG_NO_ARG = 8,
        G_OPTION_FLAG_FILENAME = 16,
        G_OPTION_FLAG_OPTIONAL_ARG = 32,
        G_OPTION_FLAG_NOALIAS = 64,
    }
    enum G_OPTION_FLAG_NONE = _Anonymous_148.G_OPTION_FLAG_NONE;
    enum G_OPTION_FLAG_HIDDEN = _Anonymous_148.G_OPTION_FLAG_HIDDEN;
    enum G_OPTION_FLAG_IN_MAIN = _Anonymous_148.G_OPTION_FLAG_IN_MAIN;
    enum G_OPTION_FLAG_REVERSE = _Anonymous_148.G_OPTION_FLAG_REVERSE;
    enum G_OPTION_FLAG_NO_ARG = _Anonymous_148.G_OPTION_FLAG_NO_ARG;
    enum G_OPTION_FLAG_FILENAME = _Anonymous_148.G_OPTION_FLAG_FILENAME;
    enum G_OPTION_FLAG_OPTIONAL_ARG = _Anonymous_148.G_OPTION_FLAG_OPTIONAL_ARG;
    enum G_OPTION_FLAG_NOALIAS = _Anonymous_148.G_OPTION_FLAG_NOALIAS;
    alias GOptionArg = _Anonymous_149;
    enum _Anonymous_149
    {
        G_OPTION_ARG_NONE = 0,
        G_OPTION_ARG_STRING = 1,
        G_OPTION_ARG_INT = 2,
        G_OPTION_ARG_CALLBACK = 3,
        G_OPTION_ARG_FILENAME = 4,
        G_OPTION_ARG_STRING_ARRAY = 5,
        G_OPTION_ARG_FILENAME_ARRAY = 6,
        G_OPTION_ARG_DOUBLE = 7,
        G_OPTION_ARG_INT64 = 8,
    }
    enum G_OPTION_ARG_NONE = _Anonymous_149.G_OPTION_ARG_NONE;
    enum G_OPTION_ARG_STRING = _Anonymous_149.G_OPTION_ARG_STRING;
    enum G_OPTION_ARG_INT = _Anonymous_149.G_OPTION_ARG_INT;
    enum G_OPTION_ARG_CALLBACK = _Anonymous_149.G_OPTION_ARG_CALLBACK;
    enum G_OPTION_ARG_FILENAME = _Anonymous_149.G_OPTION_ARG_FILENAME;
    enum G_OPTION_ARG_STRING_ARRAY = _Anonymous_149.G_OPTION_ARG_STRING_ARRAY;
    enum G_OPTION_ARG_FILENAME_ARRAY = _Anonymous_149.G_OPTION_ARG_FILENAME_ARRAY;
    enum G_OPTION_ARG_DOUBLE = _Anonymous_149.G_OPTION_ARG_DOUBLE;
    enum G_OPTION_ARG_INT64 = _Anonymous_149.G_OPTION_ARG_INT64;
    alias GOptionArgFunc = int function(const(char)*, const(char)*, void*, _GError**);
    alias GOptionParseFunc = int function(_GOptionContext*, _GOptionGroup*, void*, _GError**);
    alias GOptionErrorFunc = void function(_GOptionContext*, _GOptionGroup*, void*, _GError**);
    alias GOptionError = _Anonymous_150;
    enum _Anonymous_150
    {
        G_OPTION_ERROR_UNKNOWN_OPTION = 0,
        G_OPTION_ERROR_BAD_VALUE = 1,
        G_OPTION_ERROR_FAILED = 2,
    }
    enum G_OPTION_ERROR_UNKNOWN_OPTION = _Anonymous_150.G_OPTION_ERROR_UNKNOWN_OPTION;
    enum G_OPTION_ERROR_BAD_VALUE = _Anonymous_150.G_OPTION_ERROR_BAD_VALUE;
    enum G_OPTION_ERROR_FAILED = _Anonymous_150.G_OPTION_ERROR_FAILED;
    uint g_option_error_quark() @nogc nothrow;
    _GOptionContext* g_option_context_new(const(char)*) @nogc nothrow;
    void g_option_context_set_summary(_GOptionContext*, const(char)*) @nogc nothrow;
    const(char)* g_option_context_get_summary(_GOptionContext*) @nogc nothrow;
    void g_option_context_set_description(_GOptionContext*, const(char)*) @nogc nothrow;
    const(char)* g_option_context_get_description(_GOptionContext*) @nogc nothrow;
    void g_option_context_free(_GOptionContext*) @nogc nothrow;
    void g_option_context_set_help_enabled(_GOptionContext*, int) @nogc nothrow;
    int g_option_context_get_help_enabled(_GOptionContext*) @nogc nothrow;
    void g_option_context_set_ignore_unknown_options(_GOptionContext*, int) @nogc nothrow;
    int g_option_context_get_ignore_unknown_options(_GOptionContext*) @nogc nothrow;
    void g_option_context_set_strict_posix(_GOptionContext*, int) @nogc nothrow;
    int g_option_context_get_strict_posix(_GOptionContext*) @nogc nothrow;
    void g_option_context_add_main_entries(_GOptionContext*, const(_GOptionEntry)*, const(char)*) @nogc nothrow;
    int g_option_context_parse(_GOptionContext*, int*, char***, _GError**) @nogc nothrow;
    int g_option_context_parse_strv(_GOptionContext*, char***, _GError**) @nogc nothrow;
    void g_option_context_set_translate_func(_GOptionContext*, const(char)* function(const(char)*, void*), void*, void function(void*)) @nogc nothrow;
    void g_option_context_set_translation_domain(_GOptionContext*, const(char)*) @nogc nothrow;
    void g_option_context_add_group(_GOptionContext*, _GOptionGroup*) @nogc nothrow;
    void g_option_context_set_main_group(_GOptionContext*, _GOptionGroup*) @nogc nothrow;
    _GOptionGroup* g_option_context_get_main_group(_GOptionContext*) @nogc nothrow;
    char* g_option_context_get_help(_GOptionContext*, int, _GOptionGroup*) @nogc nothrow;
    _GOptionGroup* g_option_group_new(const(char)*, const(char)*, const(char)*, void*, void function(void*)) @nogc nothrow;
    void g_option_group_set_parse_hooks(_GOptionGroup*, int function(_GOptionContext*, _GOptionGroup*, void*, _GError**), int function(_GOptionContext*, _GOptionGroup*, void*, _GError**)) @nogc nothrow;
    void g_option_group_set_error_hook(_GOptionGroup*, void function(_GOptionContext*, _GOptionGroup*, void*, _GError**)) @nogc nothrow;
    void g_option_group_free(_GOptionGroup*) @nogc nothrow;
    _GOptionGroup* g_option_group_ref(_GOptionGroup*) @nogc nothrow;
    void g_option_group_unref(_GOptionGroup*) @nogc nothrow;
    void g_option_group_add_entries(_GOptionGroup*, const(_GOptionEntry)*) @nogc nothrow;
    void g_option_group_set_translate_func(_GOptionGroup*, const(char)* function(const(char)*, void*), void*, void function(void*)) @nogc nothrow;
    void g_option_group_set_translation_domain(_GOptionGroup*, const(char)*) @nogc nothrow;
    alias GPatternSpec = _GPatternSpec;
    struct _GPatternSpec{};
    _GPatternSpec* g_pattern_spec_new(const(char)*) @nogc nothrow;
    void g_pattern_spec_free(_GPatternSpec*) @nogc nothrow;
    int g_pattern_spec_equal(_GPatternSpec*, _GPatternSpec*) @nogc nothrow;
    int g_pattern_match(_GPatternSpec*, uint, const(char)*, const(char)*) @nogc nothrow;
    int g_pattern_match_string(_GPatternSpec*, const(char)*) @nogc nothrow;
    int g_pattern_match_simple(const(char)*, const(char)*) @nogc nothrow;
    alias GPollFD = _GPollFD;
    struct _GPollFD
    {
        int fd;
        ushort events;
        ushort revents;
    }
    alias GPollFunc = int function(_GPollFD*, uint, int);
    int g_poll(_GPollFD*, uint, int) @nogc nothrow;
    uint g_spaced_primes_closest(uint) @nogc nothrow;
    void g_qsort_with_data(const(void)*, int, c_ulong, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    alias GQuark = uint;
    uint g_quark_try_string(const(char)*) @nogc nothrow;
    uint g_quark_from_static_string(const(char)*) @nogc nothrow;
    uint g_quark_from_string(const(char)*) @nogc nothrow;
    const(char)* g_quark_to_string(uint) @nogc nothrow;
    int sched_rr_get_interval(int, timespec*) @nogc nothrow;
    const(char)* g_intern_string(const(char)*) @nogc nothrow;
    const(char)* g_intern_static_string(const(char)*) @nogc nothrow;
    alias GQueue = _GQueue;
    struct _GQueue
    {
        _GList* head;
        _GList* tail;
        uint length;
    }
    int sched_get_priority_min(int) @nogc nothrow;
    _GQueue* g_queue_new() @nogc nothrow;
    void g_queue_free(_GQueue*) @nogc nothrow;
    void g_queue_free_full(_GQueue*, void function(void*)) @nogc nothrow;
    void g_queue_init(_GQueue*) @nogc nothrow;
    void g_queue_clear(_GQueue*) @nogc nothrow;
    int g_queue_is_empty(_GQueue*) @nogc nothrow;
    uint g_queue_get_length(_GQueue*) @nogc nothrow;
    void g_queue_reverse(_GQueue*) @nogc nothrow;
    _GQueue* g_queue_copy(_GQueue*) @nogc nothrow;
    void g_queue_foreach(_GQueue*, void function(void*, void*), void*) @nogc nothrow;
    _GList* g_queue_find(_GQueue*, const(void)*) @nogc nothrow;
    _GList* g_queue_find_custom(_GQueue*, const(void)*, int function(const(void)*, const(void)*)) @nogc nothrow;
    void g_queue_sort(_GQueue*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void g_queue_push_head(_GQueue*, void*) @nogc nothrow;
    void g_queue_push_tail(_GQueue*, void*) @nogc nothrow;
    void g_queue_push_nth(_GQueue*, void*, int) @nogc nothrow;
    void* g_queue_pop_head(_GQueue*) @nogc nothrow;
    void* g_queue_pop_tail(_GQueue*) @nogc nothrow;
    void* g_queue_pop_nth(_GQueue*, uint) @nogc nothrow;
    void* g_queue_peek_head(_GQueue*) @nogc nothrow;
    void* g_queue_peek_tail(_GQueue*) @nogc nothrow;
    void* g_queue_peek_nth(_GQueue*, uint) @nogc nothrow;
    int g_queue_index(_GQueue*, const(void)*) @nogc nothrow;
    int g_queue_remove(_GQueue*, const(void)*) @nogc nothrow;
    uint g_queue_remove_all(_GQueue*, const(void)*) @nogc nothrow;
    void g_queue_insert_before(_GQueue*, _GList*, void*) @nogc nothrow;
    void g_queue_insert_after(_GQueue*, _GList*, void*) @nogc nothrow;
    void g_queue_insert_sorted(_GQueue*, void*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void g_queue_push_head_link(_GQueue*, _GList*) @nogc nothrow;
    void g_queue_push_tail_link(_GQueue*, _GList*) @nogc nothrow;
    void g_queue_push_nth_link(_GQueue*, int, _GList*) @nogc nothrow;
    _GList* g_queue_pop_head_link(_GQueue*) @nogc nothrow;
    _GList* g_queue_pop_tail_link(_GQueue*) @nogc nothrow;
    _GList* g_queue_pop_nth_link(_GQueue*, uint) @nogc nothrow;
    _GList* g_queue_peek_head_link(_GQueue*) @nogc nothrow;
    _GList* g_queue_peek_tail_link(_GQueue*) @nogc nothrow;
    _GList* g_queue_peek_nth_link(_GQueue*, uint) @nogc nothrow;
    int g_queue_link_index(_GQueue*, _GList*) @nogc nothrow;
    void g_queue_unlink(_GQueue*, _GList*) @nogc nothrow;
    void g_queue_delete_link(_GQueue*, _GList*) @nogc nothrow;
    alias GRand = _GRand;
    struct _GRand{};
    _GRand* g_rand_new_with_seed(uint) @nogc nothrow;
    _GRand* g_rand_new_with_seed_array(const(uint)*, uint) @nogc nothrow;
    _GRand* g_rand_new() @nogc nothrow;
    void g_rand_free(_GRand*) @nogc nothrow;
    _GRand* g_rand_copy(_GRand*) @nogc nothrow;
    void g_rand_set_seed(_GRand*, uint) @nogc nothrow;
    void g_rand_set_seed_array(_GRand*, const(uint)*, uint) @nogc nothrow;
    int sched_get_priority_max(int) @nogc nothrow;
    uint g_rand_int(_GRand*) @nogc nothrow;
    int g_rand_int_range(_GRand*, int, int) @nogc nothrow;
    double g_rand_double(_GRand*) @nogc nothrow;
    double g_rand_double_range(_GRand*, double, double) @nogc nothrow;
    void g_random_set_seed(uint) @nogc nothrow;
    uint g_random_int() @nogc nothrow;
    int g_random_int_range(int, int) @nogc nothrow;
    double g_random_double() @nogc nothrow;
    double g_random_double_range(double, double) @nogc nothrow;
    int sched_yield() @nogc nothrow;
    alias GRegexError = _Anonymous_151;
    enum _Anonymous_151
    {
        G_REGEX_ERROR_COMPILE = 0,
        G_REGEX_ERROR_OPTIMIZE = 1,
        G_REGEX_ERROR_REPLACE = 2,
        G_REGEX_ERROR_MATCH = 3,
        G_REGEX_ERROR_INTERNAL = 4,
        G_REGEX_ERROR_STRAY_BACKSLASH = 101,
        G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
        G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
        G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
        G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
        G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
        G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
        G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
        G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
        G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
        G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
        G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
        G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
        G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
        G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
        G_REGEX_ERROR_MEMORY_ERROR = 121,
        G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
        G_REGEX_ERROR_MALFORMED_CONDITION = 126,
        G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
        G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
        G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
        G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
        G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
        G_REGEX_ERROR_INVALID_CONDITION = 135,
        G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
        G_REGEX_ERROR_INFINITE_LOOP = 140,
        G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
        G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
        G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
        G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
        G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
        G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
        G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
        G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
        G_REGEX_ERROR_DEFINE_REPETION = 155,
        G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
        G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157,
        G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158,
        G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
        G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160,
        G_REGEX_ERROR_NUMBER_TOO_BIG = 161,
        G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162,
        G_REGEX_ERROR_MISSING_DIGIT = 163,
        G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164,
        G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165,
        G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166,
        G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168,
        G_REGEX_ERROR_MISSING_NAME = 169,
        G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171,
        G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172,
        G_REGEX_ERROR_NAME_TOO_LONG = 175,
        G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176,
    }
    enum G_REGEX_ERROR_COMPILE = _Anonymous_151.G_REGEX_ERROR_COMPILE;
    enum G_REGEX_ERROR_OPTIMIZE = _Anonymous_151.G_REGEX_ERROR_OPTIMIZE;
    enum G_REGEX_ERROR_REPLACE = _Anonymous_151.G_REGEX_ERROR_REPLACE;
    enum G_REGEX_ERROR_MATCH = _Anonymous_151.G_REGEX_ERROR_MATCH;
    enum G_REGEX_ERROR_INTERNAL = _Anonymous_151.G_REGEX_ERROR_INTERNAL;
    enum G_REGEX_ERROR_STRAY_BACKSLASH = _Anonymous_151.G_REGEX_ERROR_STRAY_BACKSLASH;
    enum G_REGEX_ERROR_MISSING_CONTROL_CHAR = _Anonymous_151.G_REGEX_ERROR_MISSING_CONTROL_CHAR;
    enum G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = _Anonymous_151.G_REGEX_ERROR_UNRECOGNIZED_ESCAPE;
    enum G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = _Anonymous_151.G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER;
    enum G_REGEX_ERROR_QUANTIFIER_TOO_BIG = _Anonymous_151.G_REGEX_ERROR_QUANTIFIER_TOO_BIG;
    enum G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = _Anonymous_151.G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS;
    enum G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = _Anonymous_151.G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS;
    enum G_REGEX_ERROR_RANGE_OUT_OF_ORDER = _Anonymous_151.G_REGEX_ERROR_RANGE_OUT_OF_ORDER;
    enum G_REGEX_ERROR_NOTHING_TO_REPEAT = _Anonymous_151.G_REGEX_ERROR_NOTHING_TO_REPEAT;
    enum G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = _Anonymous_151.G_REGEX_ERROR_UNRECOGNIZED_CHARACTER;
    enum G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = _Anonymous_151.G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS;
    enum G_REGEX_ERROR_UNMATCHED_PARENTHESIS = _Anonymous_151.G_REGEX_ERROR_UNMATCHED_PARENTHESIS;
    enum G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = _Anonymous_151.G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE;
    enum G_REGEX_ERROR_UNTERMINATED_COMMENT = _Anonymous_151.G_REGEX_ERROR_UNTERMINATED_COMMENT;
    enum G_REGEX_ERROR_EXPRESSION_TOO_LARGE = _Anonymous_151.G_REGEX_ERROR_EXPRESSION_TOO_LARGE;
    enum G_REGEX_ERROR_MEMORY_ERROR = _Anonymous_151.G_REGEX_ERROR_MEMORY_ERROR;
    enum G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = _Anonymous_151.G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND;
    enum G_REGEX_ERROR_MALFORMED_CONDITION = _Anonymous_151.G_REGEX_ERROR_MALFORMED_CONDITION;
    enum G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = _Anonymous_151.G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES;
    enum G_REGEX_ERROR_ASSERTION_EXPECTED = _Anonymous_151.G_REGEX_ERROR_ASSERTION_EXPECTED;
    enum G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = _Anonymous_151.G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME;
    enum G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = _Anonymous_151.G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED;
    enum G_REGEX_ERROR_HEX_CODE_TOO_LARGE = _Anonymous_151.G_REGEX_ERROR_HEX_CODE_TOO_LARGE;
    enum G_REGEX_ERROR_INVALID_CONDITION = _Anonymous_151.G_REGEX_ERROR_INVALID_CONDITION;
    enum G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = _Anonymous_151.G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND;
    enum G_REGEX_ERROR_INFINITE_LOOP = _Anonymous_151.G_REGEX_ERROR_INFINITE_LOOP;
    enum G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = _Anonymous_151.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR;
    enum G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = _Anonymous_151.G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME;
    enum G_REGEX_ERROR_MALFORMED_PROPERTY = _Anonymous_151.G_REGEX_ERROR_MALFORMED_PROPERTY;
    enum G_REGEX_ERROR_UNKNOWN_PROPERTY = _Anonymous_151.G_REGEX_ERROR_UNKNOWN_PROPERTY;
    enum G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = _Anonymous_151.G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG;
    enum G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = _Anonymous_151.G_REGEX_ERROR_TOO_MANY_SUBPATTERNS;
    enum G_REGEX_ERROR_INVALID_OCTAL_VALUE = _Anonymous_151.G_REGEX_ERROR_INVALID_OCTAL_VALUE;
    enum G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = _Anonymous_151.G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE;
    enum G_REGEX_ERROR_DEFINE_REPETION = _Anonymous_151.G_REGEX_ERROR_DEFINE_REPETION;
    enum G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = _Anonymous_151.G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS;
    enum G_REGEX_ERROR_MISSING_BACK_REFERENCE = _Anonymous_151.G_REGEX_ERROR_MISSING_BACK_REFERENCE;
    enum G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = _Anonymous_151.G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE;
    enum G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = _Anonymous_151.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN;
    enum G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = _Anonymous_151.G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB;
    enum G_REGEX_ERROR_NUMBER_TOO_BIG = _Anonymous_151.G_REGEX_ERROR_NUMBER_TOO_BIG;
    enum G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = _Anonymous_151.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME;
    enum G_REGEX_ERROR_MISSING_DIGIT = _Anonymous_151.G_REGEX_ERROR_MISSING_DIGIT;
    enum G_REGEX_ERROR_INVALID_DATA_CHARACTER = _Anonymous_151.G_REGEX_ERROR_INVALID_DATA_CHARACTER;
    enum G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = _Anonymous_151.G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME;
    enum G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = _Anonymous_151.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED;
    enum G_REGEX_ERROR_INVALID_CONTROL_CHAR = _Anonymous_151.G_REGEX_ERROR_INVALID_CONTROL_CHAR;
    enum G_REGEX_ERROR_MISSING_NAME = _Anonymous_151.G_REGEX_ERROR_MISSING_NAME;
    enum G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = _Anonymous_151.G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS;
    enum G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = _Anonymous_151.G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES;
    enum G_REGEX_ERROR_NAME_TOO_LONG = _Anonymous_151.G_REGEX_ERROR_NAME_TOO_LONG;
    enum G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = _Anonymous_151.G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE;
    uint g_regex_error_quark() @nogc nothrow;
    alias GRegexCompileFlags = _Anonymous_152;
    enum _Anonymous_152
    {
        G_REGEX_CASELESS = 1,
        G_REGEX_MULTILINE = 2,
        G_REGEX_DOTALL = 4,
        G_REGEX_EXTENDED = 8,
        G_REGEX_ANCHORED = 16,
        G_REGEX_DOLLAR_ENDONLY = 32,
        G_REGEX_UNGREEDY = 512,
        G_REGEX_RAW = 2048,
        G_REGEX_NO_AUTO_CAPTURE = 4096,
        G_REGEX_OPTIMIZE = 8192,
        G_REGEX_FIRSTLINE = 262144,
        G_REGEX_DUPNAMES = 524288,
        G_REGEX_NEWLINE_CR = 1048576,
        G_REGEX_NEWLINE_LF = 2097152,
        G_REGEX_NEWLINE_CRLF = 3145728,
        G_REGEX_NEWLINE_ANYCRLF = 5242880,
        G_REGEX_BSR_ANYCRLF = 8388608,
        G_REGEX_JAVASCRIPT_COMPAT = 33554432,
    }
    enum G_REGEX_CASELESS = _Anonymous_152.G_REGEX_CASELESS;
    enum G_REGEX_MULTILINE = _Anonymous_152.G_REGEX_MULTILINE;
    enum G_REGEX_DOTALL = _Anonymous_152.G_REGEX_DOTALL;
    enum G_REGEX_EXTENDED = _Anonymous_152.G_REGEX_EXTENDED;
    enum G_REGEX_ANCHORED = _Anonymous_152.G_REGEX_ANCHORED;
    enum G_REGEX_DOLLAR_ENDONLY = _Anonymous_152.G_REGEX_DOLLAR_ENDONLY;
    enum G_REGEX_UNGREEDY = _Anonymous_152.G_REGEX_UNGREEDY;
    enum G_REGEX_RAW = _Anonymous_152.G_REGEX_RAW;
    enum G_REGEX_NO_AUTO_CAPTURE = _Anonymous_152.G_REGEX_NO_AUTO_CAPTURE;
    enum G_REGEX_OPTIMIZE = _Anonymous_152.G_REGEX_OPTIMIZE;
    enum G_REGEX_FIRSTLINE = _Anonymous_152.G_REGEX_FIRSTLINE;
    enum G_REGEX_DUPNAMES = _Anonymous_152.G_REGEX_DUPNAMES;
    enum G_REGEX_NEWLINE_CR = _Anonymous_152.G_REGEX_NEWLINE_CR;
    enum G_REGEX_NEWLINE_LF = _Anonymous_152.G_REGEX_NEWLINE_LF;
    enum G_REGEX_NEWLINE_CRLF = _Anonymous_152.G_REGEX_NEWLINE_CRLF;
    enum G_REGEX_NEWLINE_ANYCRLF = _Anonymous_152.G_REGEX_NEWLINE_ANYCRLF;
    enum G_REGEX_BSR_ANYCRLF = _Anonymous_152.G_REGEX_BSR_ANYCRLF;
    enum G_REGEX_JAVASCRIPT_COMPAT = _Anonymous_152.G_REGEX_JAVASCRIPT_COMPAT;
    alias GRegexMatchFlags = _Anonymous_153;
    enum _Anonymous_153
    {
        G_REGEX_MATCH_ANCHORED = 16,
        G_REGEX_MATCH_NOTBOL = 128,
        G_REGEX_MATCH_NOTEOL = 256,
        G_REGEX_MATCH_NOTEMPTY = 1024,
        G_REGEX_MATCH_PARTIAL = 32768,
        G_REGEX_MATCH_NEWLINE_CR = 1048576,
        G_REGEX_MATCH_NEWLINE_LF = 2097152,
        G_REGEX_MATCH_NEWLINE_CRLF = 3145728,
        G_REGEX_MATCH_NEWLINE_ANY = 4194304,
        G_REGEX_MATCH_NEWLINE_ANYCRLF = 5242880,
        G_REGEX_MATCH_BSR_ANYCRLF = 8388608,
        G_REGEX_MATCH_BSR_ANY = 16777216,
        G_REGEX_MATCH_PARTIAL_SOFT = 32768,
        G_REGEX_MATCH_PARTIAL_HARD = 134217728,
        G_REGEX_MATCH_NOTEMPTY_ATSTART = 268435456,
    }
    enum G_REGEX_MATCH_ANCHORED = _Anonymous_153.G_REGEX_MATCH_ANCHORED;
    enum G_REGEX_MATCH_NOTBOL = _Anonymous_153.G_REGEX_MATCH_NOTBOL;
    enum G_REGEX_MATCH_NOTEOL = _Anonymous_153.G_REGEX_MATCH_NOTEOL;
    enum G_REGEX_MATCH_NOTEMPTY = _Anonymous_153.G_REGEX_MATCH_NOTEMPTY;
    enum G_REGEX_MATCH_PARTIAL = _Anonymous_153.G_REGEX_MATCH_PARTIAL;
    enum G_REGEX_MATCH_NEWLINE_CR = _Anonymous_153.G_REGEX_MATCH_NEWLINE_CR;
    enum G_REGEX_MATCH_NEWLINE_LF = _Anonymous_153.G_REGEX_MATCH_NEWLINE_LF;
    enum G_REGEX_MATCH_NEWLINE_CRLF = _Anonymous_153.G_REGEX_MATCH_NEWLINE_CRLF;
    enum G_REGEX_MATCH_NEWLINE_ANY = _Anonymous_153.G_REGEX_MATCH_NEWLINE_ANY;
    enum G_REGEX_MATCH_NEWLINE_ANYCRLF = _Anonymous_153.G_REGEX_MATCH_NEWLINE_ANYCRLF;
    enum G_REGEX_MATCH_BSR_ANYCRLF = _Anonymous_153.G_REGEX_MATCH_BSR_ANYCRLF;
    enum G_REGEX_MATCH_BSR_ANY = _Anonymous_153.G_REGEX_MATCH_BSR_ANY;
    enum G_REGEX_MATCH_PARTIAL_SOFT = _Anonymous_153.G_REGEX_MATCH_PARTIAL_SOFT;
    enum G_REGEX_MATCH_PARTIAL_HARD = _Anonymous_153.G_REGEX_MATCH_PARTIAL_HARD;
    enum G_REGEX_MATCH_NOTEMPTY_ATSTART = _Anonymous_153.G_REGEX_MATCH_NOTEMPTY_ATSTART;
    alias GRegex = _GRegex;
    struct _GRegex{};
    alias GMatchInfo = _GMatchInfo;
    struct _GMatchInfo{};
    alias GRegexEvalCallback = int function(const(_GMatchInfo)*, _GString*, void*);
    _GRegex* g_regex_new(const(char)*, GRegexCompileFlags, GRegexMatchFlags, _GError**) @nogc nothrow;
    _GRegex* g_regex_ref(_GRegex*) @nogc nothrow;
    void g_regex_unref(_GRegex*) @nogc nothrow;
    const(char)* g_regex_get_pattern(const(_GRegex)*) @nogc nothrow;
    int g_regex_get_max_backref(const(_GRegex)*) @nogc nothrow;
    int g_regex_get_capture_count(const(_GRegex)*) @nogc nothrow;
    int g_regex_get_has_cr_or_lf(const(_GRegex)*) @nogc nothrow;
    int g_regex_get_max_lookbehind(const(_GRegex)*) @nogc nothrow;
    int g_regex_get_string_number(const(_GRegex)*, const(char)*) @nogc nothrow;
    char* g_regex_escape_string(const(char)*, int) @nogc nothrow;
    char* g_regex_escape_nul(const(char)*, int) @nogc nothrow;
    GRegexCompileFlags g_regex_get_compile_flags(const(_GRegex)*) @nogc nothrow;
    GRegexMatchFlags g_regex_get_match_flags(const(_GRegex)*) @nogc nothrow;
    int g_regex_match_simple(const(char)*, const(char)*, GRegexCompileFlags, GRegexMatchFlags) @nogc nothrow;
    int g_regex_match(const(_GRegex)*, const(char)*, GRegexMatchFlags, _GMatchInfo**) @nogc nothrow;
    int g_regex_match_full(const(_GRegex)*, const(char)*, c_long, int, GRegexMatchFlags, _GMatchInfo**, _GError**) @nogc nothrow;
    int g_regex_match_all(const(_GRegex)*, const(char)*, GRegexMatchFlags, _GMatchInfo**) @nogc nothrow;
    int g_regex_match_all_full(const(_GRegex)*, const(char)*, c_long, int, GRegexMatchFlags, _GMatchInfo**, _GError**) @nogc nothrow;
    char** g_regex_split_simple(const(char)*, const(char)*, GRegexCompileFlags, GRegexMatchFlags) @nogc nothrow;
    char** g_regex_split(const(_GRegex)*, const(char)*, GRegexMatchFlags) @nogc nothrow;
    char** g_regex_split_full(const(_GRegex)*, const(char)*, c_long, int, GRegexMatchFlags, int, _GError**) @nogc nothrow;
    char* g_regex_replace(const(_GRegex)*, const(char)*, c_long, int, const(char)*, GRegexMatchFlags, _GError**) @nogc nothrow;
    char* g_regex_replace_literal(const(_GRegex)*, const(char)*, c_long, int, const(char)*, GRegexMatchFlags, _GError**) @nogc nothrow;
    char* g_regex_replace_eval(const(_GRegex)*, const(char)*, c_long, int, GRegexMatchFlags, int function(const(_GMatchInfo)*, _GString*, void*), void*, _GError**) @nogc nothrow;
    int g_regex_check_replacement(const(char)*, int*, _GError**) @nogc nothrow;
    _GRegex* g_match_info_get_regex(const(_GMatchInfo)*) @nogc nothrow;
    const(char)* g_match_info_get_string(const(_GMatchInfo)*) @nogc nothrow;
    _GMatchInfo* g_match_info_ref(_GMatchInfo*) @nogc nothrow;
    void g_match_info_unref(_GMatchInfo*) @nogc nothrow;
    void g_match_info_free(_GMatchInfo*) @nogc nothrow;
    int g_match_info_next(_GMatchInfo*, _GError**) @nogc nothrow;
    int g_match_info_matches(const(_GMatchInfo)*) @nogc nothrow;
    int g_match_info_get_match_count(const(_GMatchInfo)*) @nogc nothrow;
    int g_match_info_is_partial_match(const(_GMatchInfo)*) @nogc nothrow;
    char* g_match_info_expand_references(const(_GMatchInfo)*, const(char)*, _GError**) @nogc nothrow;
    char* g_match_info_fetch(const(_GMatchInfo)*, int) @nogc nothrow;
    int g_match_info_fetch_pos(const(_GMatchInfo)*, int, int*, int*) @nogc nothrow;
    char* g_match_info_fetch_named(const(_GMatchInfo)*, const(char)*) @nogc nothrow;
    int g_match_info_fetch_named_pos(const(_GMatchInfo)*, const(char)*, int*, int*) @nogc nothrow;
    char** g_match_info_fetch_all(const(_GMatchInfo)*) @nogc nothrow;
    int sched_getscheduler(int) @nogc nothrow;
    alias GScanner = _GScanner;
    struct _GScanner
    {
        void* user_data;
        uint max_parse_errors;
        uint parse_errors;
        const(char)* input_name;
        _GData* qdata;
        _GScannerConfig* config;
        GTokenType token;
        _GTokenValue value;
        uint line;
        uint position;
        GTokenType next_token;
        _GTokenValue next_value;
        uint next_line;
        uint next_position;
        _GHashTable* symbol_table;
        int input_fd;
        const(char)* text;
        const(char)* text_end;
        char* buffer;
        uint scope_id;
        void function(_GScanner*, char*, int) msg_handler;
    }
    alias GScannerConfig = _GScannerConfig;
    struct _GScannerConfig
    {
        import std.bitmanip: bitfields;

        align(4):
        char* cset_skip_characters;
        char* cset_identifier_first;
        char* cset_identifier_nth;
        char* cpair_comment_single;
        mixin(bitfields!(
            uint, "case_sensitive", 1,
            uint, "skip_comment_multi", 1,
            uint, "skip_comment_single", 1,
            uint, "scan_comment_multi", 1,
            uint, "scan_identifier", 1,
            uint, "scan_identifier_1char", 1,
            uint, "scan_identifier_NULL", 1,
            uint, "scan_symbols", 1,
            uint, "scan_binary", 1,
            uint, "scan_octal", 1,
            uint, "scan_float", 1,
            uint, "scan_hex", 1,
            uint, "scan_hex_dollar", 1,
            uint, "scan_string_sq", 1,
            uint, "scan_string_dq", 1,
            uint, "numbers_2_int", 1,
            uint, "int_2_float", 1,
            uint, "identifier_2_string", 1,
            uint, "char_2_token", 1,
            uint, "symbol_2_token", 1,
            uint, "scope_0_fallback", 1,
            uint, "store_int64", 1,
            uint, "_padding_0", 10
        ));
        uint padding_dummy;
    }
    alias GTokenValue = _GTokenValue;
    union _GTokenValue
    {
        void* v_symbol;
        char* v_identifier;
        c_ulong v_binary;
        c_ulong v_octal;
        c_ulong v_int;
        c_ulong v_int64;
        double v_float;
        c_ulong v_hex;
        char* v_string;
        char* v_comment;
        ubyte v_char;
        uint v_error;
    }
    alias GScannerMsgFunc = void function(_GScanner*, char*, int);
    int sched_setscheduler(int, int, const(sched_param)*) @nogc nothrow;
    int sched_getparam(int, sched_param*) @nogc nothrow;
    alias GErrorType = _Anonymous_154;
    enum _Anonymous_154
    {
        G_ERR_UNKNOWN = 0,
        G_ERR_UNEXP_EOF = 1,
        G_ERR_UNEXP_EOF_IN_STRING = 2,
        G_ERR_UNEXP_EOF_IN_COMMENT = 3,
        G_ERR_NON_DIGIT_IN_CONST = 4,
        G_ERR_DIGIT_RADIX = 5,
        G_ERR_FLOAT_RADIX = 6,
        G_ERR_FLOAT_MALFORMED = 7,
    }
    enum G_ERR_UNKNOWN = _Anonymous_154.G_ERR_UNKNOWN;
    enum G_ERR_UNEXP_EOF = _Anonymous_154.G_ERR_UNEXP_EOF;
    enum G_ERR_UNEXP_EOF_IN_STRING = _Anonymous_154.G_ERR_UNEXP_EOF_IN_STRING;
    enum G_ERR_UNEXP_EOF_IN_COMMENT = _Anonymous_154.G_ERR_UNEXP_EOF_IN_COMMENT;
    enum G_ERR_NON_DIGIT_IN_CONST = _Anonymous_154.G_ERR_NON_DIGIT_IN_CONST;
    enum G_ERR_DIGIT_RADIX = _Anonymous_154.G_ERR_DIGIT_RADIX;
    enum G_ERR_FLOAT_RADIX = _Anonymous_154.G_ERR_FLOAT_RADIX;
    enum G_ERR_FLOAT_MALFORMED = _Anonymous_154.G_ERR_FLOAT_MALFORMED;
    alias GTokenType = _Anonymous_155;
    enum _Anonymous_155
    {
        G_TOKEN_EOF = 0,
        G_TOKEN_LEFT_PAREN = 40,
        G_TOKEN_RIGHT_PAREN = 41,
        G_TOKEN_LEFT_CURLY = 123,
        G_TOKEN_RIGHT_CURLY = 125,
        G_TOKEN_LEFT_BRACE = 91,
        G_TOKEN_RIGHT_BRACE = 93,
        G_TOKEN_EQUAL_SIGN = 61,
        G_TOKEN_COMMA = 44,
        G_TOKEN_NONE = 256,
        G_TOKEN_ERROR = 257,
        G_TOKEN_CHAR = 258,
        G_TOKEN_BINARY = 259,
        G_TOKEN_OCTAL = 260,
        G_TOKEN_INT = 261,
        G_TOKEN_HEX = 262,
        G_TOKEN_FLOAT = 263,
        G_TOKEN_STRING = 264,
        G_TOKEN_SYMBOL = 265,
        G_TOKEN_IDENTIFIER = 266,
        G_TOKEN_IDENTIFIER_NULL = 267,
        G_TOKEN_COMMENT_SINGLE = 268,
        G_TOKEN_COMMENT_MULTI = 269,
        G_TOKEN_LAST = 270,
    }
    enum G_TOKEN_EOF = _Anonymous_155.G_TOKEN_EOF;
    enum G_TOKEN_LEFT_PAREN = _Anonymous_155.G_TOKEN_LEFT_PAREN;
    enum G_TOKEN_RIGHT_PAREN = _Anonymous_155.G_TOKEN_RIGHT_PAREN;
    enum G_TOKEN_LEFT_CURLY = _Anonymous_155.G_TOKEN_LEFT_CURLY;
    enum G_TOKEN_RIGHT_CURLY = _Anonymous_155.G_TOKEN_RIGHT_CURLY;
    enum G_TOKEN_LEFT_BRACE = _Anonymous_155.G_TOKEN_LEFT_BRACE;
    enum G_TOKEN_RIGHT_BRACE = _Anonymous_155.G_TOKEN_RIGHT_BRACE;
    enum G_TOKEN_EQUAL_SIGN = _Anonymous_155.G_TOKEN_EQUAL_SIGN;
    enum G_TOKEN_COMMA = _Anonymous_155.G_TOKEN_COMMA;
    enum G_TOKEN_NONE = _Anonymous_155.G_TOKEN_NONE;
    enum G_TOKEN_ERROR = _Anonymous_155.G_TOKEN_ERROR;
    enum G_TOKEN_CHAR = _Anonymous_155.G_TOKEN_CHAR;
    enum G_TOKEN_BINARY = _Anonymous_155.G_TOKEN_BINARY;
    enum G_TOKEN_OCTAL = _Anonymous_155.G_TOKEN_OCTAL;
    enum G_TOKEN_INT = _Anonymous_155.G_TOKEN_INT;
    enum G_TOKEN_HEX = _Anonymous_155.G_TOKEN_HEX;
    enum G_TOKEN_FLOAT = _Anonymous_155.G_TOKEN_FLOAT;
    enum G_TOKEN_STRING = _Anonymous_155.G_TOKEN_STRING;
    enum G_TOKEN_SYMBOL = _Anonymous_155.G_TOKEN_SYMBOL;
    enum G_TOKEN_IDENTIFIER = _Anonymous_155.G_TOKEN_IDENTIFIER;
    enum G_TOKEN_IDENTIFIER_NULL = _Anonymous_155.G_TOKEN_IDENTIFIER_NULL;
    enum G_TOKEN_COMMENT_SINGLE = _Anonymous_155.G_TOKEN_COMMENT_SINGLE;
    enum G_TOKEN_COMMENT_MULTI = _Anonymous_155.G_TOKEN_COMMENT_MULTI;
    enum G_TOKEN_LAST = _Anonymous_155.G_TOKEN_LAST;
    _GScanner* g_scanner_new(const(_GScannerConfig)*) @nogc nothrow;
    void g_scanner_destroy(_GScanner*) @nogc nothrow;
    void g_scanner_input_file(_GScanner*, int) @nogc nothrow;
    void g_scanner_sync_file_offset(_GScanner*) @nogc nothrow;
    void g_scanner_input_text(_GScanner*, const(char)*, uint) @nogc nothrow;
    GTokenType g_scanner_get_next_token(_GScanner*) @nogc nothrow;
    GTokenType g_scanner_peek_next_token(_GScanner*) @nogc nothrow;
    GTokenType g_scanner_cur_token(_GScanner*) @nogc nothrow;
    _GTokenValue g_scanner_cur_value(_GScanner*) @nogc nothrow;
    uint g_scanner_cur_line(_GScanner*) @nogc nothrow;
    uint g_scanner_cur_position(_GScanner*) @nogc nothrow;
    int g_scanner_eof(_GScanner*) @nogc nothrow;
    uint g_scanner_set_scope(_GScanner*, uint) @nogc nothrow;
    void g_scanner_scope_add_symbol(_GScanner*, uint, const(char)*, void*) @nogc nothrow;
    void g_scanner_scope_remove_symbol(_GScanner*, uint, const(char)*) @nogc nothrow;
    void* g_scanner_scope_lookup_symbol(_GScanner*, uint, const(char)*) @nogc nothrow;
    void g_scanner_scope_foreach_symbol(_GScanner*, uint, void function(void*, void*, void*), void*) @nogc nothrow;
    void* g_scanner_lookup_symbol(_GScanner*, const(char)*) @nogc nothrow;
    void g_scanner_unexp_token(_GScanner*, GTokenType, const(char)*, const(char)*, const(char)*, const(char)*, int) @nogc nothrow;
    void g_scanner_error(_GScanner*, const(char)*, ...) @nogc nothrow;
    void g_scanner_warn(_GScanner*, const(char)*, ...) @nogc nothrow;
    int sched_setparam(int, const(sched_param)*) @nogc nothrow;
    alias GSequence = _GSequence;
    struct _GSequence{};
    alias GSequenceIter = _GSequenceNode;
    struct _GSequenceNode{};
    alias GSequenceIterCompareFunc = int function(_GSequenceNode*, _GSequenceNode*, void*);
    _GSequence* g_sequence_new(void function(void*)) @nogc nothrow;
    void g_sequence_free(_GSequence*) @nogc nothrow;
    int g_sequence_get_length(_GSequence*) @nogc nothrow;
    void g_sequence_foreach(_GSequence*, void function(void*, void*), void*) @nogc nothrow;
    void g_sequence_foreach_range(_GSequenceNode*, _GSequenceNode*, void function(void*, void*), void*) @nogc nothrow;
    void g_sequence_sort(_GSequence*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void g_sequence_sort_iter(_GSequence*, int function(_GSequenceNode*, _GSequenceNode*, void*), void*) @nogc nothrow;
    int g_sequence_is_empty(_GSequence*) @nogc nothrow;
    _GSequenceNode* g_sequence_get_begin_iter(_GSequence*) @nogc nothrow;
    _GSequenceNode* g_sequence_get_end_iter(_GSequence*) @nogc nothrow;
    _GSequenceNode* g_sequence_get_iter_at_pos(_GSequence*, int) @nogc nothrow;
    _GSequenceNode* g_sequence_append(_GSequence*, void*) @nogc nothrow;
    _GSequenceNode* g_sequence_prepend(_GSequence*, void*) @nogc nothrow;
    _GSequenceNode* g_sequence_insert_before(_GSequenceNode*, void*) @nogc nothrow;
    void g_sequence_move(_GSequenceNode*, _GSequenceNode*) @nogc nothrow;
    void g_sequence_swap(_GSequenceNode*, _GSequenceNode*) @nogc nothrow;
    _GSequenceNode* g_sequence_insert_sorted(_GSequence*, void*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    _GSequenceNode* g_sequence_insert_sorted_iter(_GSequence*, void*, int function(_GSequenceNode*, _GSequenceNode*, void*), void*) @nogc nothrow;
    void g_sequence_sort_changed(_GSequenceNode*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void g_sequence_sort_changed_iter(_GSequenceNode*, int function(_GSequenceNode*, _GSequenceNode*, void*), void*) @nogc nothrow;
    void g_sequence_remove(_GSequenceNode*) @nogc nothrow;
    void g_sequence_remove_range(_GSequenceNode*, _GSequenceNode*) @nogc nothrow;
    void g_sequence_move_range(_GSequenceNode*, _GSequenceNode*, _GSequenceNode*) @nogc nothrow;
    _GSequenceNode* g_sequence_search(_GSequence*, void*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    _GSequenceNode* g_sequence_search_iter(_GSequence*, void*, int function(_GSequenceNode*, _GSequenceNode*, void*), void*) @nogc nothrow;
    _GSequenceNode* g_sequence_lookup(_GSequence*, void*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    _GSequenceNode* g_sequence_lookup_iter(_GSequence*, void*, int function(_GSequenceNode*, _GSequenceNode*, void*), void*) @nogc nothrow;
    void* g_sequence_get(_GSequenceNode*) @nogc nothrow;
    void g_sequence_set(_GSequenceNode*, void*) @nogc nothrow;
    int g_sequence_iter_is_begin(_GSequenceNode*) @nogc nothrow;
    int g_sequence_iter_is_end(_GSequenceNode*) @nogc nothrow;
    _GSequenceNode* g_sequence_iter_next(_GSequenceNode*) @nogc nothrow;
    _GSequenceNode* g_sequence_iter_prev(_GSequenceNode*) @nogc nothrow;
    int g_sequence_iter_get_position(_GSequenceNode*) @nogc nothrow;
    _GSequenceNode* g_sequence_iter_move(_GSequenceNode*, int) @nogc nothrow;
    _GSequence* g_sequence_iter_get_sequence(_GSequenceNode*) @nogc nothrow;
    int g_sequence_iter_compare(_GSequenceNode*, _GSequenceNode*) @nogc nothrow;
    _GSequenceNode* g_sequence_range_get_midpoint(_GSequenceNode*, _GSequenceNode*) @nogc nothrow;
    alias GShellError = _Anonymous_156;
    enum _Anonymous_156
    {
        G_SHELL_ERROR_BAD_QUOTING = 0,
        G_SHELL_ERROR_EMPTY_STRING = 1,
        G_SHELL_ERROR_FAILED = 2,
    }
    enum G_SHELL_ERROR_BAD_QUOTING = _Anonymous_156.G_SHELL_ERROR_BAD_QUOTING;
    enum G_SHELL_ERROR_EMPTY_STRING = _Anonymous_156.G_SHELL_ERROR_EMPTY_STRING;
    enum G_SHELL_ERROR_FAILED = _Anonymous_156.G_SHELL_ERROR_FAILED;
    uint g_shell_error_quark() @nogc nothrow;
    char* g_shell_quote(const(char)*) @nogc nothrow;
    char* g_shell_unquote(const(char)*, _GError**) @nogc nothrow;
    int g_shell_parse_argv(const(char)*, int*, char***, _GError**) @nogc nothrow;
    void* g_slice_alloc(c_ulong) @nogc nothrow;
    void* g_slice_alloc0(c_ulong) @nogc nothrow;
    void* g_slice_copy(c_ulong, const(void)*) @nogc nothrow;
    void g_slice_free1(c_ulong, void*) @nogc nothrow;
    void g_slice_free_chain_with_offset(c_ulong, void*, c_ulong) @nogc nothrow;
    int pthread_atfork(void function(), void function(), void function()) @nogc nothrow;
    alias GSliceConfig = _Anonymous_157;
    enum _Anonymous_157
    {
        G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
        G_SLICE_CONFIG_BYPASS_MAGAZINES = 2,
        G_SLICE_CONFIG_WORKING_SET_MSECS = 3,
        G_SLICE_CONFIG_COLOR_INCREMENT = 4,
        G_SLICE_CONFIG_CHUNK_SIZES = 5,
        G_SLICE_CONFIG_CONTENTION_COUNTER = 6,
    }
    enum G_SLICE_CONFIG_ALWAYS_MALLOC = _Anonymous_157.G_SLICE_CONFIG_ALWAYS_MALLOC;
    enum G_SLICE_CONFIG_BYPASS_MAGAZINES = _Anonymous_157.G_SLICE_CONFIG_BYPASS_MAGAZINES;
    enum G_SLICE_CONFIG_WORKING_SET_MSECS = _Anonymous_157.G_SLICE_CONFIG_WORKING_SET_MSECS;
    enum G_SLICE_CONFIG_COLOR_INCREMENT = _Anonymous_157.G_SLICE_CONFIG_COLOR_INCREMENT;
    enum G_SLICE_CONFIG_CHUNK_SIZES = _Anonymous_157.G_SLICE_CONFIG_CHUNK_SIZES;
    enum G_SLICE_CONFIG_CONTENTION_COUNTER = _Anonymous_157.G_SLICE_CONFIG_CONTENTION_COUNTER;
    void g_slice_set_config(GSliceConfig, c_long) @nogc nothrow;
    c_long g_slice_get_config(GSliceConfig) @nogc nothrow;
    c_long* g_slice_get_config_state(GSliceConfig, c_long, uint*) @nogc nothrow;
    alias GSList = _GSList;
    struct _GSList
    {
        void* data;
        _GSList* next;
    }
    _GSList* g_slist_alloc() @nogc nothrow;
    void g_slist_free(_GSList*) @nogc nothrow;
    void g_slist_free_1(_GSList*) @nogc nothrow;
    void g_slist_free_full(_GSList*, void function(void*)) @nogc nothrow;
    _GSList* g_slist_append(_GSList*, void*) @nogc nothrow;
    _GSList* g_slist_prepend(_GSList*, void*) @nogc nothrow;
    _GSList* g_slist_insert(_GSList*, void*, int) @nogc nothrow;
    _GSList* g_slist_insert_sorted(_GSList*, void*, int function(const(void)*, const(void)*)) @nogc nothrow;
    _GSList* g_slist_insert_sorted_with_data(_GSList*, void*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    _GSList* g_slist_insert_before(_GSList*, _GSList*, void*) @nogc nothrow;
    _GSList* g_slist_concat(_GSList*, _GSList*) @nogc nothrow;
    _GSList* g_slist_remove(_GSList*, const(void)*) @nogc nothrow;
    _GSList* g_slist_remove_all(_GSList*, const(void)*) @nogc nothrow;
    _GSList* g_slist_remove_link(_GSList*, _GSList*) @nogc nothrow;
    _GSList* g_slist_delete_link(_GSList*, _GSList*) @nogc nothrow;
    _GSList* g_slist_reverse(_GSList*) @nogc nothrow;
    _GSList* g_slist_copy(_GSList*) @nogc nothrow;
    _GSList* g_slist_copy_deep(_GSList*, void* function(const(void)*, void*), void*) @nogc nothrow;
    _GSList* g_slist_nth(_GSList*, uint) @nogc nothrow;
    _GSList* g_slist_find(_GSList*, const(void)*) @nogc nothrow;
    _GSList* g_slist_find_custom(_GSList*, const(void)*, int function(const(void)*, const(void)*)) @nogc nothrow;
    int g_slist_position(_GSList*, _GSList*) @nogc nothrow;
    int g_slist_index(_GSList*, const(void)*) @nogc nothrow;
    _GSList* g_slist_last(_GSList*) @nogc nothrow;
    uint g_slist_length(_GSList*) @nogc nothrow;
    void g_slist_foreach(_GSList*, void function(void*, void*), void*) @nogc nothrow;
    _GSList* g_slist_sort(_GSList*, int function(const(void)*, const(void)*)) @nogc nothrow;
    _GSList* g_slist_sort_with_data(_GSList*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    void* g_slist_nth_data(_GSList*, uint) @nogc nothrow;
    int pthread_getcpuclockid(c_ulong, int*) @nogc nothrow;
    alias GSpawnError = _Anonymous_158;
    enum _Anonymous_158
    {
        G_SPAWN_ERROR_FORK = 0,
        G_SPAWN_ERROR_READ = 1,
        G_SPAWN_ERROR_CHDIR = 2,
        G_SPAWN_ERROR_ACCES = 3,
        G_SPAWN_ERROR_PERM = 4,
        G_SPAWN_ERROR_TOO_BIG = 5,
        G_SPAWN_ERROR_2BIG = 5,
        G_SPAWN_ERROR_NOEXEC = 6,
        G_SPAWN_ERROR_NAMETOOLONG = 7,
        G_SPAWN_ERROR_NOENT = 8,
        G_SPAWN_ERROR_NOMEM = 9,
        G_SPAWN_ERROR_NOTDIR = 10,
        G_SPAWN_ERROR_LOOP = 11,
        G_SPAWN_ERROR_TXTBUSY = 12,
        G_SPAWN_ERROR_IO = 13,
        G_SPAWN_ERROR_NFILE = 14,
        G_SPAWN_ERROR_MFILE = 15,
        G_SPAWN_ERROR_INVAL = 16,
        G_SPAWN_ERROR_ISDIR = 17,
        G_SPAWN_ERROR_LIBBAD = 18,
        G_SPAWN_ERROR_FAILED = 19,
    }
    enum G_SPAWN_ERROR_FORK = _Anonymous_158.G_SPAWN_ERROR_FORK;
    enum G_SPAWN_ERROR_READ = _Anonymous_158.G_SPAWN_ERROR_READ;
    enum G_SPAWN_ERROR_CHDIR = _Anonymous_158.G_SPAWN_ERROR_CHDIR;
    enum G_SPAWN_ERROR_ACCES = _Anonymous_158.G_SPAWN_ERROR_ACCES;
    enum G_SPAWN_ERROR_PERM = _Anonymous_158.G_SPAWN_ERROR_PERM;
    enum G_SPAWN_ERROR_TOO_BIG = _Anonymous_158.G_SPAWN_ERROR_TOO_BIG;
    enum G_SPAWN_ERROR_2BIG = _Anonymous_158.G_SPAWN_ERROR_2BIG;
    enum G_SPAWN_ERROR_NOEXEC = _Anonymous_158.G_SPAWN_ERROR_NOEXEC;
    enum G_SPAWN_ERROR_NAMETOOLONG = _Anonymous_158.G_SPAWN_ERROR_NAMETOOLONG;
    enum G_SPAWN_ERROR_NOENT = _Anonymous_158.G_SPAWN_ERROR_NOENT;
    enum G_SPAWN_ERROR_NOMEM = _Anonymous_158.G_SPAWN_ERROR_NOMEM;
    enum G_SPAWN_ERROR_NOTDIR = _Anonymous_158.G_SPAWN_ERROR_NOTDIR;
    enum G_SPAWN_ERROR_LOOP = _Anonymous_158.G_SPAWN_ERROR_LOOP;
    enum G_SPAWN_ERROR_TXTBUSY = _Anonymous_158.G_SPAWN_ERROR_TXTBUSY;
    enum G_SPAWN_ERROR_IO = _Anonymous_158.G_SPAWN_ERROR_IO;
    enum G_SPAWN_ERROR_NFILE = _Anonymous_158.G_SPAWN_ERROR_NFILE;
    enum G_SPAWN_ERROR_MFILE = _Anonymous_158.G_SPAWN_ERROR_MFILE;
    enum G_SPAWN_ERROR_INVAL = _Anonymous_158.G_SPAWN_ERROR_INVAL;
    enum G_SPAWN_ERROR_ISDIR = _Anonymous_158.G_SPAWN_ERROR_ISDIR;
    enum G_SPAWN_ERROR_LIBBAD = _Anonymous_158.G_SPAWN_ERROR_LIBBAD;
    enum G_SPAWN_ERROR_FAILED = _Anonymous_158.G_SPAWN_ERROR_FAILED;
    int pthread_setspecific(uint, const(void)*) @nogc nothrow;
    alias GSpawnChildSetupFunc = void function(void*);
    alias GSpawnFlags = _Anonymous_159;
    enum _Anonymous_159
    {
        G_SPAWN_DEFAULT = 0,
        G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1,
        G_SPAWN_DO_NOT_REAP_CHILD = 2,
        G_SPAWN_SEARCH_PATH = 4,
        G_SPAWN_STDOUT_TO_DEV_NULL = 8,
        G_SPAWN_STDERR_TO_DEV_NULL = 16,
        G_SPAWN_CHILD_INHERITS_STDIN = 32,
        G_SPAWN_FILE_AND_ARGV_ZERO = 64,
        G_SPAWN_SEARCH_PATH_FROM_ENVP = 128,
        G_SPAWN_CLOEXEC_PIPES = 256,
    }
    enum G_SPAWN_DEFAULT = _Anonymous_159.G_SPAWN_DEFAULT;
    enum G_SPAWN_LEAVE_DESCRIPTORS_OPEN = _Anonymous_159.G_SPAWN_LEAVE_DESCRIPTORS_OPEN;
    enum G_SPAWN_DO_NOT_REAP_CHILD = _Anonymous_159.G_SPAWN_DO_NOT_REAP_CHILD;
    enum G_SPAWN_SEARCH_PATH = _Anonymous_159.G_SPAWN_SEARCH_PATH;
    enum G_SPAWN_STDOUT_TO_DEV_NULL = _Anonymous_159.G_SPAWN_STDOUT_TO_DEV_NULL;
    enum G_SPAWN_STDERR_TO_DEV_NULL = _Anonymous_159.G_SPAWN_STDERR_TO_DEV_NULL;
    enum G_SPAWN_CHILD_INHERITS_STDIN = _Anonymous_159.G_SPAWN_CHILD_INHERITS_STDIN;
    enum G_SPAWN_FILE_AND_ARGV_ZERO = _Anonymous_159.G_SPAWN_FILE_AND_ARGV_ZERO;
    enum G_SPAWN_SEARCH_PATH_FROM_ENVP = _Anonymous_159.G_SPAWN_SEARCH_PATH_FROM_ENVP;
    enum G_SPAWN_CLOEXEC_PIPES = _Anonymous_159.G_SPAWN_CLOEXEC_PIPES;
    uint g_spawn_error_quark() @nogc nothrow;
    uint g_spawn_exit_error_quark() @nogc nothrow;
    int g_spawn_async(const(char)*, char**, char**, GSpawnFlags, void function(void*), void*, int*, _GError**) @nogc nothrow;
    int g_spawn_async_with_pipes(const(char)*, char**, char**, GSpawnFlags, void function(void*), void*, int*, int*, int*, int*, _GError**) @nogc nothrow;
    int g_spawn_sync(const(char)*, char**, char**, GSpawnFlags, void function(void*), void*, char**, char**, int*, _GError**) @nogc nothrow;
    int g_spawn_command_line_sync(const(char)*, char**, char**, int*, _GError**) @nogc nothrow;
    int g_spawn_command_line_async(const(char)*, _GError**) @nogc nothrow;
    int g_spawn_check_exit_status(int, _GError**) @nogc nothrow;
    void g_spawn_close_pid(int) @nogc nothrow;
    alias GAsciiType = _Anonymous_160;
    enum _Anonymous_160
    {
        G_ASCII_ALNUM = 1,
        G_ASCII_ALPHA = 2,
        G_ASCII_CNTRL = 4,
        G_ASCII_DIGIT = 8,
        G_ASCII_GRAPH = 16,
        G_ASCII_LOWER = 32,
        G_ASCII_PRINT = 64,
        G_ASCII_PUNCT = 128,
        G_ASCII_SPACE = 256,
        G_ASCII_UPPER = 512,
        G_ASCII_XDIGIT = 1024,
    }
    enum G_ASCII_ALNUM = _Anonymous_160.G_ASCII_ALNUM;
    enum G_ASCII_ALPHA = _Anonymous_160.G_ASCII_ALPHA;
    enum G_ASCII_CNTRL = _Anonymous_160.G_ASCII_CNTRL;
    enum G_ASCII_DIGIT = _Anonymous_160.G_ASCII_DIGIT;
    enum G_ASCII_GRAPH = _Anonymous_160.G_ASCII_GRAPH;
    enum G_ASCII_LOWER = _Anonymous_160.G_ASCII_LOWER;
    enum G_ASCII_PRINT = _Anonymous_160.G_ASCII_PRINT;
    enum G_ASCII_PUNCT = _Anonymous_160.G_ASCII_PUNCT;
    enum G_ASCII_SPACE = _Anonymous_160.G_ASCII_SPACE;
    enum G_ASCII_UPPER = _Anonymous_160.G_ASCII_UPPER;
    enum G_ASCII_XDIGIT = _Anonymous_160.G_ASCII_XDIGIT;
    extern __gshared const(const(ushort)*) g_ascii_table;
    void* pthread_getspecific(uint) @nogc nothrow;
    int pthread_key_delete(uint) @nogc nothrow;
    int pthread_key_create(uint*, void function(void*)) @nogc nothrow;
    int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int) @nogc nothrow;
    char g_ascii_tolower(char) @nogc nothrow;
    char g_ascii_toupper(char) @nogc nothrow;
    int g_ascii_digit_value(char) @nogc nothrow;
    int g_ascii_xdigit_value(char) @nogc nothrow;
    int pthread_barrierattr_getpshared(const(pthread_barrierattr_t)*, int*) @nogc nothrow;
    char* g_strdelimit(char*, const(char)*, char) @nogc nothrow;
    char* g_strcanon(char*, const(char)*, char) @nogc nothrow;
    const(char)* g_strerror(int) @nogc nothrow;
    const(char)* g_strsignal(int) @nogc nothrow;
    char* g_strreverse(char*) @nogc nothrow;
    c_ulong g_strlcpy(char*, const(char)*, c_ulong) @nogc nothrow;
    c_ulong g_strlcat(char*, const(char)*, c_ulong) @nogc nothrow;
    char* g_strstr_len(const(char)*, c_long, const(char)*) @nogc nothrow;
    char* g_strrstr(const(char)*, const(char)*) @nogc nothrow;
    char* g_strrstr_len(const(char)*, c_long, const(char)*) @nogc nothrow;
    int g_str_has_suffix(const(char)*, const(char)*) @nogc nothrow;
    int g_str_has_prefix(const(char)*, const(char)*) @nogc nothrow;
    double g_strtod(const(char)*, char**) @nogc nothrow;
    double g_ascii_strtod(const(char)*, char**) @nogc nothrow;
    c_ulong g_ascii_strtoull(const(char)*, char**, uint) @nogc nothrow;
    c_long g_ascii_strtoll(const(char)*, char**, uint) @nogc nothrow;
    char* g_ascii_dtostr(char*, int, double) @nogc nothrow;
    char* g_ascii_formatd(char*, int, const(char)*, double) @nogc nothrow;
    char* g_strchug(char*) @nogc nothrow;
    char* g_strchomp(char*) @nogc nothrow;
    int g_ascii_strcasecmp(const(char)*, const(char)*) @nogc nothrow;
    int g_ascii_strncasecmp(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    char* g_ascii_strdown(const(char)*, c_long) @nogc nothrow;
    char* g_ascii_strup(const(char)*, c_long) @nogc nothrow;
    int g_str_is_ascii(const(char)*) @nogc nothrow;
    int g_strcasecmp(const(char)*, const(char)*) @nogc nothrow;
    int g_strncasecmp(const(char)*, const(char)*, uint) @nogc nothrow;
    char* g_strdown(char*) @nogc nothrow;
    char* g_strup(char*) @nogc nothrow;
    char* g_strdup(const(char)*) @nogc nothrow;
    char* g_strdup_printf(const(char)*, ...) @nogc nothrow;
    char* g_strdup_vprintf(const(char)*, va_list*) @nogc nothrow;
    char* g_strndup(const(char)*, c_ulong) @nogc nothrow;
    char* g_strnfill(c_ulong, char) @nogc nothrow;
    char* g_strconcat(const(char)*, ...) @nogc nothrow;
    char* g_strjoin(const(char)*, ...) @nogc nothrow;
    char* g_strcompress(const(char)*) @nogc nothrow;
    char* g_strescape(const(char)*, const(char)*) @nogc nothrow;
    void* g_memdup(const(void)*, uint) @nogc nothrow;
    alias GStrv = char**;
    char** g_strsplit(const(char)*, const(char)*, int) @nogc nothrow;
    char** g_strsplit_set(const(char)*, const(char)*, int) @nogc nothrow;
    char* g_strjoinv(const(char)*, char**) @nogc nothrow;
    void g_strfreev(char**) @nogc nothrow;
    char** g_strdupv(char**) @nogc nothrow;
    uint g_strv_length(char**) @nogc nothrow;
    char* g_stpcpy(char*, const(char)*) @nogc nothrow;
    char* g_str_to_ascii(const(char)*, const(char)*) @nogc nothrow;
    char** g_str_tokenize_and_fold(const(char)*, const(char)*, char***) @nogc nothrow;
    int g_str_match_string(const(char)*, const(char)*, int) @nogc nothrow;
    int g_strv_contains(const(const(char)*)*, const(char)*) @nogc nothrow;
    alias GNumberParserError = _Anonymous_161;
    enum _Anonymous_161
    {
        G_NUMBER_PARSER_ERROR_INVALID = 0,
        G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS = 1,
    }
    enum G_NUMBER_PARSER_ERROR_INVALID = _Anonymous_161.G_NUMBER_PARSER_ERROR_INVALID;
    enum G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS = _Anonymous_161.G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS;
    int pthread_barrierattr_destroy(pthread_barrierattr_t*) @nogc nothrow;
    uint g_number_parser_error_quark() @nogc nothrow;
    int g_ascii_string_to_signed(const(char)*, uint, c_long, c_long, c_long*, _GError**) @nogc nothrow;
    int g_ascii_string_to_unsigned(const(char)*, uint, c_ulong, c_ulong, c_ulong*, _GError**) @nogc nothrow;
    alias GString = _GString;
    struct _GString
    {
        char* str;
        c_ulong len;
        c_ulong allocated_len;
    }
    _GString* g_string_new(const(char)*) @nogc nothrow;
    _GString* g_string_new_len(const(char)*, c_long) @nogc nothrow;
    _GString* g_string_sized_new(c_ulong) @nogc nothrow;
    char* g_string_free(_GString*, int) @nogc nothrow;
    _GBytes* g_string_free_to_bytes(_GString*) @nogc nothrow;
    int g_string_equal(const(_GString)*, const(_GString)*) @nogc nothrow;
    uint g_string_hash(const(_GString)*) @nogc nothrow;
    _GString* g_string_assign(_GString*, const(char)*) @nogc nothrow;
    _GString* g_string_truncate(_GString*, c_ulong) @nogc nothrow;
    _GString* g_string_set_size(_GString*, c_ulong) @nogc nothrow;
    _GString* g_string_insert_len(_GString*, c_long, const(char)*, c_long) @nogc nothrow;
    _GString* g_string_append(_GString*, const(char)*) @nogc nothrow;
    _GString* g_string_append_len(_GString*, const(char)*, c_long) @nogc nothrow;
    pragma(mangle, "g_string_append_c") _GString* g_string_append_c_(_GString*, char) @nogc nothrow;
    _GString* g_string_append_unichar(_GString*, uint) @nogc nothrow;
    _GString* g_string_prepend(_GString*, const(char)*) @nogc nothrow;
    _GString* g_string_prepend_c(_GString*, char) @nogc nothrow;
    _GString* g_string_prepend_unichar(_GString*, uint) @nogc nothrow;
    _GString* g_string_prepend_len(_GString*, const(char)*, c_long) @nogc nothrow;
    _GString* g_string_insert(_GString*, c_long, const(char)*) @nogc nothrow;
    _GString* g_string_insert_c(_GString*, c_long, char) @nogc nothrow;
    _GString* g_string_insert_unichar(_GString*, c_long, uint) @nogc nothrow;
    _GString* g_string_overwrite(_GString*, c_ulong, const(char)*) @nogc nothrow;
    _GString* g_string_overwrite_len(_GString*, c_ulong, const(char)*, c_long) @nogc nothrow;
    _GString* g_string_erase(_GString*, c_long, c_long) @nogc nothrow;
    _GString* g_string_ascii_down(_GString*) @nogc nothrow;
    _GString* g_string_ascii_up(_GString*) @nogc nothrow;
    void g_string_vprintf(_GString*, const(char)*, va_list*) @nogc nothrow;
    void g_string_printf(_GString*, const(char)*, ...) @nogc nothrow;
    void g_string_append_vprintf(_GString*, const(char)*, va_list*) @nogc nothrow;
    void g_string_append_printf(_GString*, const(char)*, ...) @nogc nothrow;
    _GString* g_string_append_uri_escaped(_GString*, const(char)*, const(char)*, int) @nogc nothrow;
    static _GString* g_string_append_c_inline(_GString*, char) @nogc nothrow;
    _GString* g_string_down(_GString*) @nogc nothrow;
    _GString* g_string_up(_GString*) @nogc nothrow;
    int pthread_barrierattr_init(pthread_barrierattr_t*) @nogc nothrow;
    alias GStringChunk = _GStringChunk;
    struct _GStringChunk{};
    _GStringChunk* g_string_chunk_new(c_ulong) @nogc nothrow;
    void g_string_chunk_free(_GStringChunk*) @nogc nothrow;
    void g_string_chunk_clear(_GStringChunk*) @nogc nothrow;
    char* g_string_chunk_insert(_GStringChunk*, const(char)*) @nogc nothrow;
    char* g_string_chunk_insert_len(_GStringChunk*, const(char)*, c_long) @nogc nothrow;
    char* g_string_chunk_insert_const(_GStringChunk*, const(char)*) @nogc nothrow;
    int pthread_barrier_wait(pthread_barrier_t*) @nogc nothrow;
    struct GTestCase{};
    struct GTestSuite{};
    alias GTestFunc = void function();
    alias GTestDataFunc = void function(const(void)*);
    alias GTestFixtureFunc = void function(void*, const(void)*);
    int pthread_barrier_destroy(pthread_barrier_t*) @nogc nothrow;
    int pthread_barrier_init(pthread_barrier_t*, const(pthread_barrierattr_t)*, uint) @nogc nothrow;
    int pthread_spin_unlock(int*) @nogc nothrow;
    int pthread_spin_trylock(int*) @nogc nothrow;
    int g_strcmp0(const(char)*, const(char)*) @nogc nothrow;
    void g_test_minimized_result(double, const(char)*, ...) @nogc nothrow;
    void g_test_maximized_result(double, const(char)*, ...) @nogc nothrow;
    void g_test_init(int*, char***, ...) @nogc nothrow;
    int pthread_spin_lock(int*) @nogc nothrow;
    int pthread_spin_destroy(int*) @nogc nothrow;
    int pthread_spin_init(int*, int) @nogc nothrow;
    int g_test_subprocess() @nogc nothrow;
    int g_test_run() @nogc nothrow;
    void g_test_add_func(const(char)*, void function()) @nogc nothrow;
    void g_test_add_data_func(const(char)*, const(void)*, void function(const(void)*)) @nogc nothrow;
    void g_test_add_data_func_full(const(char)*, void*, void function(const(void)*), void function(void*)) @nogc nothrow;
    void g_test_fail() @nogc nothrow;
    void g_test_incomplete(const(char)*) @nogc nothrow;
    void g_test_skip(const(char)*) @nogc nothrow;
    int g_test_failed() @nogc nothrow;
    void g_test_set_nonfatal_assertions() @nogc nothrow;
    void g_test_message(const(char)*, ...) @nogc nothrow;
    void g_test_bug_base(const(char)*) @nogc nothrow;
    void g_test_bug(const(char)*) @nogc nothrow;
    void g_test_timer_start() @nogc nothrow;
    double g_test_timer_elapsed() @nogc nothrow;
    double g_test_timer_last() @nogc nothrow;
    void g_test_queue_free(void*) @nogc nothrow;
    void g_test_queue_destroy(void function(void*), void*) @nogc nothrow;
    alias GTestTrapFlags = _Anonymous_162;
    enum _Anonymous_162
    {
        G_TEST_TRAP_SILENCE_STDOUT = 128,
        G_TEST_TRAP_SILENCE_STDERR = 256,
        G_TEST_TRAP_INHERIT_STDIN = 512,
    }
    enum G_TEST_TRAP_SILENCE_STDOUT = _Anonymous_162.G_TEST_TRAP_SILENCE_STDOUT;
    enum G_TEST_TRAP_SILENCE_STDERR = _Anonymous_162.G_TEST_TRAP_SILENCE_STDERR;
    enum G_TEST_TRAP_INHERIT_STDIN = _Anonymous_162.G_TEST_TRAP_INHERIT_STDIN;
    int g_test_trap_fork(c_ulong, GTestTrapFlags) @nogc nothrow;
    alias GTestSubprocessFlags = _Anonymous_163;
    enum _Anonymous_163
    {
        G_TEST_SUBPROCESS_INHERIT_STDIN = 1,
        G_TEST_SUBPROCESS_INHERIT_STDOUT = 2,
        G_TEST_SUBPROCESS_INHERIT_STDERR = 4,
    }
    enum G_TEST_SUBPROCESS_INHERIT_STDIN = _Anonymous_163.G_TEST_SUBPROCESS_INHERIT_STDIN;
    enum G_TEST_SUBPROCESS_INHERIT_STDOUT = _Anonymous_163.G_TEST_SUBPROCESS_INHERIT_STDOUT;
    enum G_TEST_SUBPROCESS_INHERIT_STDERR = _Anonymous_163.G_TEST_SUBPROCESS_INHERIT_STDERR;
    void g_test_trap_subprocess(const(char)*, c_ulong, GTestSubprocessFlags) @nogc nothrow;
    int g_test_trap_has_passed() @nogc nothrow;
    int g_test_trap_reached_timeout() @nogc nothrow;
    int pthread_condattr_setclock(pthread_condattr_t*, int) @nogc nothrow;
    int pthread_condattr_getclock(const(pthread_condattr_t)*, int*) @nogc nothrow;
    int g_test_rand_int() @nogc nothrow;
    int g_test_rand_int_range(int, int) @nogc nothrow;
    double g_test_rand_double() @nogc nothrow;
    double g_test_rand_double_range(double, double) @nogc nothrow;
    GTestCase* g_test_create_case(const(char)*, c_ulong, const(void)*, void function(void*, const(void)*), void function(void*, const(void)*), void function(void*, const(void)*)) @nogc nothrow;
    GTestSuite* g_test_create_suite(const(char)*) @nogc nothrow;
    GTestSuite* g_test_get_root() @nogc nothrow;
    void g_test_suite_add(GTestSuite*, GTestCase*) @nogc nothrow;
    void g_test_suite_add_suite(GTestSuite*, GTestSuite*) @nogc nothrow;
    int g_test_run_suite(GTestSuite*) @nogc nothrow;
    void g_test_trap_assertions(const(char)*, const(char)*, int, const(char)*, c_ulong, const(char)*) @nogc nothrow;
    void g_assertion_message(const(char)*, const(char)*, int, const(char)*, const(char)*) @nogc nothrow;
    void g_assertion_message_expr(const(char)*, const(char)*, int, const(char)*, const(char)*) @nogc nothrow;
    void g_assertion_message_cmpstr(const(char)*, const(char)*, int, const(char)*, const(char)*, const(char)*, const(char)*, const(char)*) @nogc nothrow;
    void g_assertion_message_cmpnum(const(char)*, const(char)*, int, const(char)*, const(char)*, real, const(char)*, real, char) @nogc nothrow;
    void g_assertion_message_error(const(char)*, const(char)*, int, const(char)*, const(char)*, const(_GError)*, uint, int) @nogc nothrow;
    void g_test_add_vtable(const(char)*, c_ulong, const(void)*, void function(void*, const(void)*), void function(void*, const(void)*), void function(void*, const(void)*)) @nogc nothrow;
    struct GTestConfig
    {
        int test_initialized;
        int test_quick;
        int test_perf;
        int test_verbose;
        int test_quiet;
        int test_undefined;
    }
    extern __gshared const(const(GTestConfig)*) g_test_config_vars;
    alias GTestResult = _Anonymous_164;
    enum _Anonymous_164
    {
        G_TEST_RUN_SUCCESS = 0,
        G_TEST_RUN_SKIPPED = 1,
        G_TEST_RUN_FAILURE = 2,
        G_TEST_RUN_INCOMPLETE = 3,
    }
    enum G_TEST_RUN_SUCCESS = _Anonymous_164.G_TEST_RUN_SUCCESS;
    enum G_TEST_RUN_SKIPPED = _Anonymous_164.G_TEST_RUN_SKIPPED;
    enum G_TEST_RUN_FAILURE = _Anonymous_164.G_TEST_RUN_FAILURE;
    enum G_TEST_RUN_INCOMPLETE = _Anonymous_164.G_TEST_RUN_INCOMPLETE;
    alias GTestLogType = _Anonymous_165;
    enum _Anonymous_165
    {
        G_TEST_LOG_NONE = 0,
        G_TEST_LOG_ERROR = 1,
        G_TEST_LOG_START_BINARY = 2,
        G_TEST_LOG_LIST_CASE = 3,
        G_TEST_LOG_SKIP_CASE = 4,
        G_TEST_LOG_START_CASE = 5,
        G_TEST_LOG_STOP_CASE = 6,
        G_TEST_LOG_MIN_RESULT = 7,
        G_TEST_LOG_MAX_RESULT = 8,
        G_TEST_LOG_MESSAGE = 9,
        G_TEST_LOG_START_SUITE = 10,
        G_TEST_LOG_STOP_SUITE = 11,
    }
    enum G_TEST_LOG_NONE = _Anonymous_165.G_TEST_LOG_NONE;
    enum G_TEST_LOG_ERROR = _Anonymous_165.G_TEST_LOG_ERROR;
    enum G_TEST_LOG_START_BINARY = _Anonymous_165.G_TEST_LOG_START_BINARY;
    enum G_TEST_LOG_LIST_CASE = _Anonymous_165.G_TEST_LOG_LIST_CASE;
    enum G_TEST_LOG_SKIP_CASE = _Anonymous_165.G_TEST_LOG_SKIP_CASE;
    enum G_TEST_LOG_START_CASE = _Anonymous_165.G_TEST_LOG_START_CASE;
    enum G_TEST_LOG_STOP_CASE = _Anonymous_165.G_TEST_LOG_STOP_CASE;
    enum G_TEST_LOG_MIN_RESULT = _Anonymous_165.G_TEST_LOG_MIN_RESULT;
    enum G_TEST_LOG_MAX_RESULT = _Anonymous_165.G_TEST_LOG_MAX_RESULT;
    enum G_TEST_LOG_MESSAGE = _Anonymous_165.G_TEST_LOG_MESSAGE;
    enum G_TEST_LOG_START_SUITE = _Anonymous_165.G_TEST_LOG_START_SUITE;
    enum G_TEST_LOG_STOP_SUITE = _Anonymous_165.G_TEST_LOG_STOP_SUITE;
    struct GTestLogMsg
    {
        GTestLogType log_type;
        uint n_strings;
        char** strings;
        uint n_nums;
        real* nums;
    }
    struct GTestLogBuffer
    {
        _GString* data;
        _GSList* msgs;
    }
    const(char)* g_test_log_type_name(GTestLogType) @nogc nothrow;
    GTestLogBuffer* g_test_log_buffer_new() @nogc nothrow;
    void g_test_log_buffer_free(GTestLogBuffer*) @nogc nothrow;
    void g_test_log_buffer_push(GTestLogBuffer*, uint, const(ubyte)*) @nogc nothrow;
    GTestLogMsg* g_test_log_buffer_pop(GTestLogBuffer*) @nogc nothrow;
    void g_test_log_msg_free(GTestLogMsg*) @nogc nothrow;
    alias GTestLogFatalFunc = int function(const(char)*, GLogLevelFlags, const(char)*, void*);
    void g_test_log_set_fatal_handler(int function(const(char)*, GLogLevelFlags, const(char)*, void*), void*) @nogc nothrow;
    void g_test_expect_message(const(char)*, GLogLevelFlags, const(char)*) @nogc nothrow;
    void g_test_assert_expected_messages_internal(const(char)*, const(char)*, int, const(char)*) @nogc nothrow;
    alias GTestFileType = _Anonymous_166;
    enum _Anonymous_166
    {
        G_TEST_DIST = 0,
        G_TEST_BUILT = 1,
    }
    enum G_TEST_DIST = _Anonymous_166.G_TEST_DIST;
    enum G_TEST_BUILT = _Anonymous_166.G_TEST_BUILT;
    char* g_test_build_filename(GTestFileType, const(char)*, ...) @nogc nothrow;
    const(char)* g_test_get_dir(GTestFileType) @nogc nothrow;
    const(char)* g_test_get_filename(GTestFileType, const(char)*, ...) @nogc nothrow;
    int pthread_condattr_setpshared(pthread_condattr_t*, int) @nogc nothrow;
    uint g_thread_error_quark() @nogc nothrow;
    alias GThreadError = _Anonymous_167;
    enum _Anonymous_167
    {
        G_THREAD_ERROR_AGAIN = 0,
    }
    enum G_THREAD_ERROR_AGAIN = _Anonymous_167.G_THREAD_ERROR_AGAIN;
    alias GThreadFunc = void* function(void*);
    alias GThread = _GThread;
    struct _GThread
    {
        void* function(void*) func;
        void* data;
        int joinable;
        GThreadPriority priority;
    }
    alias GMutex = _GMutex;
    union _GMutex
    {
        void* p;
        uint[2] i;
    }
    alias GRecMutex = _GRecMutex;
    struct _GRecMutex
    {
        void* p;
        uint[2] i;
    }
    alias GRWLock = _GRWLock;
    struct _GRWLock
    {
        void* p;
        uint[2] i;
    }
    alias GCond = _GCond;
    struct _GCond
    {
        void* p;
        uint[2] i;
    }
    alias GPrivate = _GPrivate;
    struct _GPrivate
    {
        void* p;
        void function(void*) notify;
        void*[2] future;
    }
    alias GOnce = _GOnce;
    struct _GOnce
    {
        GOnceStatus status;
        void* retval;
    }
    int pthread_condattr_getpshared(const(pthread_condattr_t)*, int*) @nogc nothrow;
    alias GOnceStatus = _Anonymous_168;
    enum _Anonymous_168
    {
        G_ONCE_STATUS_NOTCALLED = 0,
        G_ONCE_STATUS_PROGRESS = 1,
        G_ONCE_STATUS_READY = 2,
    }
    enum G_ONCE_STATUS_NOTCALLED = _Anonymous_168.G_ONCE_STATUS_NOTCALLED;
    enum G_ONCE_STATUS_PROGRESS = _Anonymous_168.G_ONCE_STATUS_PROGRESS;
    enum G_ONCE_STATUS_READY = _Anonymous_168.G_ONCE_STATUS_READY;
    int pthread_condattr_destroy(pthread_condattr_t*) @nogc nothrow;
    int pthread_condattr_init(pthread_condattr_t*) @nogc nothrow;
    int pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, const(timespec)*) @nogc nothrow;
    _GThread* g_thread_ref(_GThread*) @nogc nothrow;
    void g_thread_unref(_GThread*) @nogc nothrow;
    _GThread* g_thread_new(const(char)*, void* function(void*), void*) @nogc nothrow;
    _GThread* g_thread_try_new(const(char)*, void* function(void*), void*, _GError**) @nogc nothrow;
    _GThread* g_thread_self() @nogc nothrow;
    void g_thread_exit(void*) @nogc nothrow;
    void* g_thread_join(_GThread*) @nogc nothrow;
    void g_thread_yield() @nogc nothrow;
    void g_mutex_init(_GMutex*) @nogc nothrow;
    void g_mutex_clear(_GMutex*) @nogc nothrow;
    void g_mutex_lock(_GMutex*) @nogc nothrow;
    int g_mutex_trylock(_GMutex*) @nogc nothrow;
    void g_mutex_unlock(_GMutex*) @nogc nothrow;
    void g_rw_lock_init(_GRWLock*) @nogc nothrow;
    void g_rw_lock_clear(_GRWLock*) @nogc nothrow;
    void g_rw_lock_writer_lock(_GRWLock*) @nogc nothrow;
    int g_rw_lock_writer_trylock(_GRWLock*) @nogc nothrow;
    void g_rw_lock_writer_unlock(_GRWLock*) @nogc nothrow;
    void g_rw_lock_reader_lock(_GRWLock*) @nogc nothrow;
    int g_rw_lock_reader_trylock(_GRWLock*) @nogc nothrow;
    void g_rw_lock_reader_unlock(_GRWLock*) @nogc nothrow;
    void g_rec_mutex_init(_GRecMutex*) @nogc nothrow;
    void g_rec_mutex_clear(_GRecMutex*) @nogc nothrow;
    void g_rec_mutex_lock(_GRecMutex*) @nogc nothrow;
    int g_rec_mutex_trylock(_GRecMutex*) @nogc nothrow;
    void g_rec_mutex_unlock(_GRecMutex*) @nogc nothrow;
    void g_cond_init(_GCond*) @nogc nothrow;
    void g_cond_clear(_GCond*) @nogc nothrow;
    void g_cond_wait(_GCond*, _GMutex*) @nogc nothrow;
    void g_cond_signal(_GCond*) @nogc nothrow;
    void g_cond_broadcast(_GCond*) @nogc nothrow;
    int g_cond_wait_until(_GCond*, _GMutex*, c_long) @nogc nothrow;
    void* g_private_get(_GPrivate*) @nogc nothrow;
    void g_private_set(_GPrivate*, void*) @nogc nothrow;
    void g_private_replace(_GPrivate*, void*) @nogc nothrow;
    void* g_once_impl(_GOnce*, void* function(void*), void*) @nogc nothrow;
    pragma(mangle, "g_once_init_enter") int g_once_init_enter_(void*) @nogc nothrow;
    pragma(mangle, "g_once_init_leave") void g_once_init_leave_(void*, c_ulong) @nogc nothrow;
    int pthread_cond_wait(pthread_cond_t*, pthread_mutex_t*) @nogc nothrow;
    uint g_get_num_processors() @nogc nothrow;
    alias GMutexLocker = void;
    static void* g_mutex_locker_new(_GMutex*) @nogc nothrow;
    static void g_mutex_locker_free(void*) @nogc nothrow;
    alias GThreadPool = _GThreadPool;
    struct _GThreadPool
    {
        void function(void*, void*) func;
        void* user_data;
        int exclusive;
    }
    _GThreadPool* g_thread_pool_new(void function(void*, void*), void*, int, int, _GError**) @nogc nothrow;
    void g_thread_pool_free(_GThreadPool*, int, int) @nogc nothrow;
    int g_thread_pool_push(_GThreadPool*, void*, _GError**) @nogc nothrow;
    uint g_thread_pool_unprocessed(_GThreadPool*) @nogc nothrow;
    void g_thread_pool_set_sort_function(_GThreadPool*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    int g_thread_pool_move_to_front(_GThreadPool*, void*) @nogc nothrow;
    int g_thread_pool_set_max_threads(_GThreadPool*, int, _GError**) @nogc nothrow;
    int g_thread_pool_get_max_threads(_GThreadPool*) @nogc nothrow;
    uint g_thread_pool_get_num_threads(_GThreadPool*) @nogc nothrow;
    void g_thread_pool_set_max_unused_threads(int) @nogc nothrow;
    int g_thread_pool_get_max_unused_threads() @nogc nothrow;
    uint g_thread_pool_get_num_unused_threads() @nogc nothrow;
    void g_thread_pool_stop_unused_threads() @nogc nothrow;
    void g_thread_pool_set_max_idle_time(uint) @nogc nothrow;
    uint g_thread_pool_get_max_idle_time() @nogc nothrow;
    int pthread_cond_broadcast(pthread_cond_t*) @nogc nothrow;
    alias GTimer = _GTimer;
    struct _GTimer{};
    _GTimer* g_timer_new() @nogc nothrow;
    void g_timer_destroy(_GTimer*) @nogc nothrow;
    void g_timer_start(_GTimer*) @nogc nothrow;
    void g_timer_stop(_GTimer*) @nogc nothrow;
    void g_timer_reset(_GTimer*) @nogc nothrow;
    void g_timer_continue(_GTimer*) @nogc nothrow;
    double g_timer_elapsed(_GTimer*, c_ulong*) @nogc nothrow;
    void g_usleep(c_ulong) @nogc nothrow;
    void g_time_val_add(_GTimeVal*, c_long) @nogc nothrow;
    int g_time_val_from_iso8601(const(char)*, _GTimeVal*) @nogc nothrow;
    char* g_time_val_to_iso8601(_GTimeVal*) @nogc nothrow;
    alias GTimeZone = _GTimeZone;
    struct _GTimeZone{};
    alias GTimeType = _Anonymous_169;
    enum _Anonymous_169
    {
        G_TIME_TYPE_STANDARD = 0,
        G_TIME_TYPE_DAYLIGHT = 1,
        G_TIME_TYPE_UNIVERSAL = 2,
    }
    enum G_TIME_TYPE_STANDARD = _Anonymous_169.G_TIME_TYPE_STANDARD;
    enum G_TIME_TYPE_DAYLIGHT = _Anonymous_169.G_TIME_TYPE_DAYLIGHT;
    enum G_TIME_TYPE_UNIVERSAL = _Anonymous_169.G_TIME_TYPE_UNIVERSAL;
    _GTimeZone* g_time_zone_new(const(char)*) @nogc nothrow;
    _GTimeZone* g_time_zone_new_utc() @nogc nothrow;
    _GTimeZone* g_time_zone_new_local() @nogc nothrow;
    _GTimeZone* g_time_zone_ref(_GTimeZone*) @nogc nothrow;
    void g_time_zone_unref(_GTimeZone*) @nogc nothrow;
    int g_time_zone_find_interval(_GTimeZone*, GTimeType, c_long) @nogc nothrow;
    int g_time_zone_adjust_time(_GTimeZone*, GTimeType, c_long*) @nogc nothrow;
    const(char)* g_time_zone_get_abbreviation(_GTimeZone*, int) @nogc nothrow;
    int g_time_zone_get_offset(_GTimeZone*, int) @nogc nothrow;
    int g_time_zone_is_dst(_GTimeZone*, int) @nogc nothrow;
    int pthread_cond_signal(pthread_cond_t*) @nogc nothrow;
    alias GTrashStack = _GTrashStack;
    struct _GTrashStack
    {
        _GTrashStack* next;
    }
    void g_trash_stack_push(_GTrashStack**, void*) @nogc nothrow;
    void* g_trash_stack_pop(_GTrashStack**) @nogc nothrow;
    void* g_trash_stack_peek(_GTrashStack**) @nogc nothrow;
    uint g_trash_stack_height(_GTrashStack**) @nogc nothrow;
    alias GTree = _GTree;
    struct _GTree{};
    alias GTraverseFunc = int function(void*, void*, void*);
    _GTree* g_tree_new(int function(const(void)*, const(void)*)) @nogc nothrow;
    _GTree* g_tree_new_with_data(int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    _GTree* g_tree_new_full(int function(const(void)*, const(void)*, void*), void*, void function(void*), void function(void*)) @nogc nothrow;
    _GTree* g_tree_ref(_GTree*) @nogc nothrow;
    void g_tree_unref(_GTree*) @nogc nothrow;
    void g_tree_destroy(_GTree*) @nogc nothrow;
    void g_tree_insert(_GTree*, void*, void*) @nogc nothrow;
    void g_tree_replace(_GTree*, void*, void*) @nogc nothrow;
    int g_tree_remove(_GTree*, const(void)*) @nogc nothrow;
    int g_tree_steal(_GTree*, const(void)*) @nogc nothrow;
    void* g_tree_lookup(_GTree*, const(void)*) @nogc nothrow;
    int g_tree_lookup_extended(_GTree*, const(void)*, void**, void**) @nogc nothrow;
    void g_tree_foreach(_GTree*, int function(void*, void*, void*), void*) @nogc nothrow;
    void g_tree_traverse(_GTree*, int function(void*, void*, void*), GTraverseType, void*) @nogc nothrow;
    void* g_tree_search(_GTree*, int function(const(void)*, const(void)*), const(void)*) @nogc nothrow;
    int g_tree_height(_GTree*) @nogc nothrow;
    int g_tree_nnodes(_GTree*) @nogc nothrow;
    alias gchar = char;
    alias gshort = short;
    alias glong = c_long;
    alias gint = int;
    alias gboolean = int;
    alias guchar = ubyte;
    alias gushort = ushort;
    alias gulong = c_ulong;
    alias guint = uint;
    alias gfloat = float;
    alias gdouble = double;
    int pthread_cond_destroy(pthread_cond_t*) @nogc nothrow;
    int pthread_cond_init(pthread_cond_t*, const(pthread_condattr_t)*) @nogc nothrow;
    int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t*, int) @nogc nothrow;
    int pthread_rwlockattr_getkind_np(const(pthread_rwlockattr_t)*, int*) @nogc nothrow;
    alias gpointer = void*;
    alias gconstpointer = const(void)*;
    alias GCompareFunc = int function(const(void)*, const(void)*);
    alias GCompareDataFunc = int function(const(void)*, const(void)*, void*);
    alias GEqualFunc = int function(const(void)*, const(void)*);
    alias GDestroyNotify = void function(void*);
    alias GFunc = void function(void*, void*);
    alias GHashFunc = uint function(const(void)*);
    alias GHFunc = void function(void*, void*, void*);
    alias GFreeFunc = void function(void*);
    alias GTranslateFunc = const(char)* function(const(char)*, void*);
    int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int) @nogc nothrow;
    int pthread_rwlockattr_getpshared(const(pthread_rwlockattr_t)*, int*) @nogc nothrow;
    int pthread_rwlockattr_destroy(pthread_rwlockattr_t*) @nogc nothrow;
    int pthread_rwlockattr_init(pthread_rwlockattr_t*) @nogc nothrow;
    int pthread_rwlock_unlock(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const(timespec)*) @nogc nothrow;
    int pthread_rwlock_trywrlock(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_wrlock(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const(timespec)*) @nogc nothrow;
    int pthread_rwlock_tryrdlock(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_rdlock(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_destroy(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_init(pthread_rwlock_t*, const(pthread_rwlockattr_t)*) @nogc nothrow;
    int pthread_mutexattr_setrobust(pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_getrobust(const(pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_getprioceiling(const(pthread_mutexattr_t)*, int*) @nogc nothrow;
    static int _GLIB_CHECKED_ADD_U32(uint*, uint, uint) @nogc nothrow;
    static int _GLIB_CHECKED_MUL_U32(uint*, uint, uint) @nogc nothrow;
    static int _GLIB_CHECKED_ADD_U64(c_ulong*, c_ulong, c_ulong) @nogc nothrow;
    static int _GLIB_CHECKED_MUL_U64(c_ulong*, c_ulong, c_ulong) @nogc nothrow;
    alias GDoubleIEEE754 = _GDoubleIEEE754;
    union _GDoubleIEEE754
    {
        double v_double;
        static struct _Anonymous_170
        {
            import std.bitmanip: bitfields;

            align(4):
            mixin(bitfields!(
                uint, "mantissa_low", 32,
                uint, "mantissa_high", 20,
                uint, "biased_exponent", 11,
                uint, "sign", 1,
            ));
        }
        _Anonymous_170 mpn;
    }
    alias GFloatIEEE754 = _GFloatIEEE754;
    union _GFloatIEEE754
    {
        float v_float;
        static struct _Anonymous_171
        {
            import std.bitmanip: bitfields;

            align(4):
            mixin(bitfields!(
                uint, "mantissa", 23,
                uint, "biased_exponent", 8,
                uint, "sign", 1,
            ));
        }
        _Anonymous_171 mpn;
    }
    int pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int) @nogc nothrow;
    alias GTimeVal = _GTimeVal;
    struct _GTimeVal
    {
        c_long tv_sec;
        c_long tv_usec;
    }
    int pthread_mutexattr_getprotocol(const(pthread_mutexattr_t)*, int*) @nogc nothrow;
    alias gunichar = uint;
    alias gunichar2 = ushort;
    alias GUnicodeType = _Anonymous_172;
    enum _Anonymous_172
    {
        G_UNICODE_CONTROL = 0,
        G_UNICODE_FORMAT = 1,
        G_UNICODE_UNASSIGNED = 2,
        G_UNICODE_PRIVATE_USE = 3,
        G_UNICODE_SURROGATE = 4,
        G_UNICODE_LOWERCASE_LETTER = 5,
        G_UNICODE_MODIFIER_LETTER = 6,
        G_UNICODE_OTHER_LETTER = 7,
        G_UNICODE_TITLECASE_LETTER = 8,
        G_UNICODE_UPPERCASE_LETTER = 9,
        G_UNICODE_SPACING_MARK = 10,
        G_UNICODE_ENCLOSING_MARK = 11,
        G_UNICODE_NON_SPACING_MARK = 12,
        G_UNICODE_DECIMAL_NUMBER = 13,
        G_UNICODE_LETTER_NUMBER = 14,
        G_UNICODE_OTHER_NUMBER = 15,
        G_UNICODE_CONNECT_PUNCTUATION = 16,
        G_UNICODE_DASH_PUNCTUATION = 17,
        G_UNICODE_CLOSE_PUNCTUATION = 18,
        G_UNICODE_FINAL_PUNCTUATION = 19,
        G_UNICODE_INITIAL_PUNCTUATION = 20,
        G_UNICODE_OTHER_PUNCTUATION = 21,
        G_UNICODE_OPEN_PUNCTUATION = 22,
        G_UNICODE_CURRENCY_SYMBOL = 23,
        G_UNICODE_MODIFIER_SYMBOL = 24,
        G_UNICODE_MATH_SYMBOL = 25,
        G_UNICODE_OTHER_SYMBOL = 26,
        G_UNICODE_LINE_SEPARATOR = 27,
        G_UNICODE_PARAGRAPH_SEPARATOR = 28,
        G_UNICODE_SPACE_SEPARATOR = 29,
    }
    enum G_UNICODE_CONTROL = _Anonymous_172.G_UNICODE_CONTROL;
    enum G_UNICODE_FORMAT = _Anonymous_172.G_UNICODE_FORMAT;
    enum G_UNICODE_UNASSIGNED = _Anonymous_172.G_UNICODE_UNASSIGNED;
    enum G_UNICODE_PRIVATE_USE = _Anonymous_172.G_UNICODE_PRIVATE_USE;
    enum G_UNICODE_SURROGATE = _Anonymous_172.G_UNICODE_SURROGATE;
    enum G_UNICODE_LOWERCASE_LETTER = _Anonymous_172.G_UNICODE_LOWERCASE_LETTER;
    enum G_UNICODE_MODIFIER_LETTER = _Anonymous_172.G_UNICODE_MODIFIER_LETTER;
    enum G_UNICODE_OTHER_LETTER = _Anonymous_172.G_UNICODE_OTHER_LETTER;
    enum G_UNICODE_TITLECASE_LETTER = _Anonymous_172.G_UNICODE_TITLECASE_LETTER;
    enum G_UNICODE_UPPERCASE_LETTER = _Anonymous_172.G_UNICODE_UPPERCASE_LETTER;
    enum G_UNICODE_SPACING_MARK = _Anonymous_172.G_UNICODE_SPACING_MARK;
    enum G_UNICODE_ENCLOSING_MARK = _Anonymous_172.G_UNICODE_ENCLOSING_MARK;
    enum G_UNICODE_NON_SPACING_MARK = _Anonymous_172.G_UNICODE_NON_SPACING_MARK;
    enum G_UNICODE_DECIMAL_NUMBER = _Anonymous_172.G_UNICODE_DECIMAL_NUMBER;
    enum G_UNICODE_LETTER_NUMBER = _Anonymous_172.G_UNICODE_LETTER_NUMBER;
    enum G_UNICODE_OTHER_NUMBER = _Anonymous_172.G_UNICODE_OTHER_NUMBER;
    enum G_UNICODE_CONNECT_PUNCTUATION = _Anonymous_172.G_UNICODE_CONNECT_PUNCTUATION;
    enum G_UNICODE_DASH_PUNCTUATION = _Anonymous_172.G_UNICODE_DASH_PUNCTUATION;
    enum G_UNICODE_CLOSE_PUNCTUATION = _Anonymous_172.G_UNICODE_CLOSE_PUNCTUATION;
    enum G_UNICODE_FINAL_PUNCTUATION = _Anonymous_172.G_UNICODE_FINAL_PUNCTUATION;
    enum G_UNICODE_INITIAL_PUNCTUATION = _Anonymous_172.G_UNICODE_INITIAL_PUNCTUATION;
    enum G_UNICODE_OTHER_PUNCTUATION = _Anonymous_172.G_UNICODE_OTHER_PUNCTUATION;
    enum G_UNICODE_OPEN_PUNCTUATION = _Anonymous_172.G_UNICODE_OPEN_PUNCTUATION;
    enum G_UNICODE_CURRENCY_SYMBOL = _Anonymous_172.G_UNICODE_CURRENCY_SYMBOL;
    enum G_UNICODE_MODIFIER_SYMBOL = _Anonymous_172.G_UNICODE_MODIFIER_SYMBOL;
    enum G_UNICODE_MATH_SYMBOL = _Anonymous_172.G_UNICODE_MATH_SYMBOL;
    enum G_UNICODE_OTHER_SYMBOL = _Anonymous_172.G_UNICODE_OTHER_SYMBOL;
    enum G_UNICODE_LINE_SEPARATOR = _Anonymous_172.G_UNICODE_LINE_SEPARATOR;
    enum G_UNICODE_PARAGRAPH_SEPARATOR = _Anonymous_172.G_UNICODE_PARAGRAPH_SEPARATOR;
    enum G_UNICODE_SPACE_SEPARATOR = _Anonymous_172.G_UNICODE_SPACE_SEPARATOR;
    alias GUnicodeBreakType = _Anonymous_173;
    enum _Anonymous_173
    {
        G_UNICODE_BREAK_MANDATORY = 0,
        G_UNICODE_BREAK_CARRIAGE_RETURN = 1,
        G_UNICODE_BREAK_LINE_FEED = 2,
        G_UNICODE_BREAK_COMBINING_MARK = 3,
        G_UNICODE_BREAK_SURROGATE = 4,
        G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5,
        G_UNICODE_BREAK_INSEPARABLE = 6,
        G_UNICODE_BREAK_NON_BREAKING_GLUE = 7,
        G_UNICODE_BREAK_CONTINGENT = 8,
        G_UNICODE_BREAK_SPACE = 9,
        G_UNICODE_BREAK_AFTER = 10,
        G_UNICODE_BREAK_BEFORE = 11,
        G_UNICODE_BREAK_BEFORE_AND_AFTER = 12,
        G_UNICODE_BREAK_HYPHEN = 13,
        G_UNICODE_BREAK_NON_STARTER = 14,
        G_UNICODE_BREAK_OPEN_PUNCTUATION = 15,
        G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16,
        G_UNICODE_BREAK_QUOTATION = 17,
        G_UNICODE_BREAK_EXCLAMATION = 18,
        G_UNICODE_BREAK_IDEOGRAPHIC = 19,
        G_UNICODE_BREAK_NUMERIC = 20,
        G_UNICODE_BREAK_INFIX_SEPARATOR = 21,
        G_UNICODE_BREAK_SYMBOL = 22,
        G_UNICODE_BREAK_ALPHABETIC = 23,
        G_UNICODE_BREAK_PREFIX = 24,
        G_UNICODE_BREAK_POSTFIX = 25,
        G_UNICODE_BREAK_COMPLEX_CONTEXT = 26,
        G_UNICODE_BREAK_AMBIGUOUS = 27,
        G_UNICODE_BREAK_UNKNOWN = 28,
        G_UNICODE_BREAK_NEXT_LINE = 29,
        G_UNICODE_BREAK_WORD_JOINER = 30,
        G_UNICODE_BREAK_HANGUL_L_JAMO = 31,
        G_UNICODE_BREAK_HANGUL_V_JAMO = 32,
        G_UNICODE_BREAK_HANGUL_T_JAMO = 33,
        G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34,
        G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35,
        G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36,
        G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37,
        G_UNICODE_BREAK_HEBREW_LETTER = 38,
        G_UNICODE_BREAK_REGIONAL_INDICATOR = 39,
        G_UNICODE_BREAK_EMOJI_BASE = 40,
        G_UNICODE_BREAK_EMOJI_MODIFIER = 41,
        G_UNICODE_BREAK_ZERO_WIDTH_JOINER = 42,
    }
    enum G_UNICODE_BREAK_MANDATORY = _Anonymous_173.G_UNICODE_BREAK_MANDATORY;
    enum G_UNICODE_BREAK_CARRIAGE_RETURN = _Anonymous_173.G_UNICODE_BREAK_CARRIAGE_RETURN;
    enum G_UNICODE_BREAK_LINE_FEED = _Anonymous_173.G_UNICODE_BREAK_LINE_FEED;
    enum G_UNICODE_BREAK_COMBINING_MARK = _Anonymous_173.G_UNICODE_BREAK_COMBINING_MARK;
    enum G_UNICODE_BREAK_SURROGATE = _Anonymous_173.G_UNICODE_BREAK_SURROGATE;
    enum G_UNICODE_BREAK_ZERO_WIDTH_SPACE = _Anonymous_173.G_UNICODE_BREAK_ZERO_WIDTH_SPACE;
    enum G_UNICODE_BREAK_INSEPARABLE = _Anonymous_173.G_UNICODE_BREAK_INSEPARABLE;
    enum G_UNICODE_BREAK_NON_BREAKING_GLUE = _Anonymous_173.G_UNICODE_BREAK_NON_BREAKING_GLUE;
    enum G_UNICODE_BREAK_CONTINGENT = _Anonymous_173.G_UNICODE_BREAK_CONTINGENT;
    enum G_UNICODE_BREAK_SPACE = _Anonymous_173.G_UNICODE_BREAK_SPACE;
    enum G_UNICODE_BREAK_AFTER = _Anonymous_173.G_UNICODE_BREAK_AFTER;
    enum G_UNICODE_BREAK_BEFORE = _Anonymous_173.G_UNICODE_BREAK_BEFORE;
    enum G_UNICODE_BREAK_BEFORE_AND_AFTER = _Anonymous_173.G_UNICODE_BREAK_BEFORE_AND_AFTER;
    enum G_UNICODE_BREAK_HYPHEN = _Anonymous_173.G_UNICODE_BREAK_HYPHEN;
    enum G_UNICODE_BREAK_NON_STARTER = _Anonymous_173.G_UNICODE_BREAK_NON_STARTER;
    enum G_UNICODE_BREAK_OPEN_PUNCTUATION = _Anonymous_173.G_UNICODE_BREAK_OPEN_PUNCTUATION;
    enum G_UNICODE_BREAK_CLOSE_PUNCTUATION = _Anonymous_173.G_UNICODE_BREAK_CLOSE_PUNCTUATION;
    enum G_UNICODE_BREAK_QUOTATION = _Anonymous_173.G_UNICODE_BREAK_QUOTATION;
    enum G_UNICODE_BREAK_EXCLAMATION = _Anonymous_173.G_UNICODE_BREAK_EXCLAMATION;
    enum G_UNICODE_BREAK_IDEOGRAPHIC = _Anonymous_173.G_UNICODE_BREAK_IDEOGRAPHIC;
    enum G_UNICODE_BREAK_NUMERIC = _Anonymous_173.G_UNICODE_BREAK_NUMERIC;
    enum G_UNICODE_BREAK_INFIX_SEPARATOR = _Anonymous_173.G_UNICODE_BREAK_INFIX_SEPARATOR;
    enum G_UNICODE_BREAK_SYMBOL = _Anonymous_173.G_UNICODE_BREAK_SYMBOL;
    enum G_UNICODE_BREAK_ALPHABETIC = _Anonymous_173.G_UNICODE_BREAK_ALPHABETIC;
    enum G_UNICODE_BREAK_PREFIX = _Anonymous_173.G_UNICODE_BREAK_PREFIX;
    enum G_UNICODE_BREAK_POSTFIX = _Anonymous_173.G_UNICODE_BREAK_POSTFIX;
    enum G_UNICODE_BREAK_COMPLEX_CONTEXT = _Anonymous_173.G_UNICODE_BREAK_COMPLEX_CONTEXT;
    enum G_UNICODE_BREAK_AMBIGUOUS = _Anonymous_173.G_UNICODE_BREAK_AMBIGUOUS;
    enum G_UNICODE_BREAK_UNKNOWN = _Anonymous_173.G_UNICODE_BREAK_UNKNOWN;
    enum G_UNICODE_BREAK_NEXT_LINE = _Anonymous_173.G_UNICODE_BREAK_NEXT_LINE;
    enum G_UNICODE_BREAK_WORD_JOINER = _Anonymous_173.G_UNICODE_BREAK_WORD_JOINER;
    enum G_UNICODE_BREAK_HANGUL_L_JAMO = _Anonymous_173.G_UNICODE_BREAK_HANGUL_L_JAMO;
    enum G_UNICODE_BREAK_HANGUL_V_JAMO = _Anonymous_173.G_UNICODE_BREAK_HANGUL_V_JAMO;
    enum G_UNICODE_BREAK_HANGUL_T_JAMO = _Anonymous_173.G_UNICODE_BREAK_HANGUL_T_JAMO;
    enum G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = _Anonymous_173.G_UNICODE_BREAK_HANGUL_LV_SYLLABLE;
    enum G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = _Anonymous_173.G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE;
    enum G_UNICODE_BREAK_CLOSE_PARANTHESIS = _Anonymous_173.G_UNICODE_BREAK_CLOSE_PARANTHESIS;
    enum G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = _Anonymous_173.G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER;
    enum G_UNICODE_BREAK_HEBREW_LETTER = _Anonymous_173.G_UNICODE_BREAK_HEBREW_LETTER;
    enum G_UNICODE_BREAK_REGIONAL_INDICATOR = _Anonymous_173.G_UNICODE_BREAK_REGIONAL_INDICATOR;
    enum G_UNICODE_BREAK_EMOJI_BASE = _Anonymous_173.G_UNICODE_BREAK_EMOJI_BASE;
    enum G_UNICODE_BREAK_EMOJI_MODIFIER = _Anonymous_173.G_UNICODE_BREAK_EMOJI_MODIFIER;
    enum G_UNICODE_BREAK_ZERO_WIDTH_JOINER = _Anonymous_173.G_UNICODE_BREAK_ZERO_WIDTH_JOINER;
    alias GUnicodeScript = _Anonymous_174;
    enum _Anonymous_174
    {
        G_UNICODE_SCRIPT_INVALID_CODE = -1,
        G_UNICODE_SCRIPT_COMMON = 0,
        G_UNICODE_SCRIPT_INHERITED = 1,
        G_UNICODE_SCRIPT_ARABIC = 2,
        G_UNICODE_SCRIPT_ARMENIAN = 3,
        G_UNICODE_SCRIPT_BENGALI = 4,
        G_UNICODE_SCRIPT_BOPOMOFO = 5,
        G_UNICODE_SCRIPT_CHEROKEE = 6,
        G_UNICODE_SCRIPT_COPTIC = 7,
        G_UNICODE_SCRIPT_CYRILLIC = 8,
        G_UNICODE_SCRIPT_DESERET = 9,
        G_UNICODE_SCRIPT_DEVANAGARI = 10,
        G_UNICODE_SCRIPT_ETHIOPIC = 11,
        G_UNICODE_SCRIPT_GEORGIAN = 12,
        G_UNICODE_SCRIPT_GOTHIC = 13,
        G_UNICODE_SCRIPT_GREEK = 14,
        G_UNICODE_SCRIPT_GUJARATI = 15,
        G_UNICODE_SCRIPT_GURMUKHI = 16,
        G_UNICODE_SCRIPT_HAN = 17,
        G_UNICODE_SCRIPT_HANGUL = 18,
        G_UNICODE_SCRIPT_HEBREW = 19,
        G_UNICODE_SCRIPT_HIRAGANA = 20,
        G_UNICODE_SCRIPT_KANNADA = 21,
        G_UNICODE_SCRIPT_KATAKANA = 22,
        G_UNICODE_SCRIPT_KHMER = 23,
        G_UNICODE_SCRIPT_LAO = 24,
        G_UNICODE_SCRIPT_LATIN = 25,
        G_UNICODE_SCRIPT_MALAYALAM = 26,
        G_UNICODE_SCRIPT_MONGOLIAN = 27,
        G_UNICODE_SCRIPT_MYANMAR = 28,
        G_UNICODE_SCRIPT_OGHAM = 29,
        G_UNICODE_SCRIPT_OLD_ITALIC = 30,
        G_UNICODE_SCRIPT_ORIYA = 31,
        G_UNICODE_SCRIPT_RUNIC = 32,
        G_UNICODE_SCRIPT_SINHALA = 33,
        G_UNICODE_SCRIPT_SYRIAC = 34,
        G_UNICODE_SCRIPT_TAMIL = 35,
        G_UNICODE_SCRIPT_TELUGU = 36,
        G_UNICODE_SCRIPT_THAANA = 37,
        G_UNICODE_SCRIPT_THAI = 38,
        G_UNICODE_SCRIPT_TIBETAN = 39,
        G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40,
        G_UNICODE_SCRIPT_YI = 41,
        G_UNICODE_SCRIPT_TAGALOG = 42,
        G_UNICODE_SCRIPT_HANUNOO = 43,
        G_UNICODE_SCRIPT_BUHID = 44,
        G_UNICODE_SCRIPT_TAGBANWA = 45,
        G_UNICODE_SCRIPT_BRAILLE = 46,
        G_UNICODE_SCRIPT_CYPRIOT = 47,
        G_UNICODE_SCRIPT_LIMBU = 48,
        G_UNICODE_SCRIPT_OSMANYA = 49,
        G_UNICODE_SCRIPT_SHAVIAN = 50,
        G_UNICODE_SCRIPT_LINEAR_B = 51,
        G_UNICODE_SCRIPT_TAI_LE = 52,
        G_UNICODE_SCRIPT_UGARITIC = 53,
        G_UNICODE_SCRIPT_NEW_TAI_LUE = 54,
        G_UNICODE_SCRIPT_BUGINESE = 55,
        G_UNICODE_SCRIPT_GLAGOLITIC = 56,
        G_UNICODE_SCRIPT_TIFINAGH = 57,
        G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58,
        G_UNICODE_SCRIPT_OLD_PERSIAN = 59,
        G_UNICODE_SCRIPT_KHAROSHTHI = 60,
        G_UNICODE_SCRIPT_UNKNOWN = 61,
        G_UNICODE_SCRIPT_BALINESE = 62,
        G_UNICODE_SCRIPT_CUNEIFORM = 63,
        G_UNICODE_SCRIPT_PHOENICIAN = 64,
        G_UNICODE_SCRIPT_PHAGS_PA = 65,
        G_UNICODE_SCRIPT_NKO = 66,
        G_UNICODE_SCRIPT_KAYAH_LI = 67,
        G_UNICODE_SCRIPT_LEPCHA = 68,
        G_UNICODE_SCRIPT_REJANG = 69,
        G_UNICODE_SCRIPT_SUNDANESE = 70,
        G_UNICODE_SCRIPT_SAURASHTRA = 71,
        G_UNICODE_SCRIPT_CHAM = 72,
        G_UNICODE_SCRIPT_OL_CHIKI = 73,
        G_UNICODE_SCRIPT_VAI = 74,
        G_UNICODE_SCRIPT_CARIAN = 75,
        G_UNICODE_SCRIPT_LYCIAN = 76,
        G_UNICODE_SCRIPT_LYDIAN = 77,
        G_UNICODE_SCRIPT_AVESTAN = 78,
        G_UNICODE_SCRIPT_BAMUM = 79,
        G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80,
        G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81,
        G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82,
        G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83,
        G_UNICODE_SCRIPT_JAVANESE = 84,
        G_UNICODE_SCRIPT_KAITHI = 85,
        G_UNICODE_SCRIPT_LISU = 86,
        G_UNICODE_SCRIPT_MEETEI_MAYEK = 87,
        G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88,
        G_UNICODE_SCRIPT_OLD_TURKIC = 89,
        G_UNICODE_SCRIPT_SAMARITAN = 90,
        G_UNICODE_SCRIPT_TAI_THAM = 91,
        G_UNICODE_SCRIPT_TAI_VIET = 92,
        G_UNICODE_SCRIPT_BATAK = 93,
        G_UNICODE_SCRIPT_BRAHMI = 94,
        G_UNICODE_SCRIPT_MANDAIC = 95,
        G_UNICODE_SCRIPT_CHAKMA = 96,
        G_UNICODE_SCRIPT_MEROITIC_CURSIVE = 97,
        G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98,
        G_UNICODE_SCRIPT_MIAO = 99,
        G_UNICODE_SCRIPT_SHARADA = 100,
        G_UNICODE_SCRIPT_SORA_SOMPENG = 101,
        G_UNICODE_SCRIPT_TAKRI = 102,
        G_UNICODE_SCRIPT_BASSA_VAH = 103,
        G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = 104,
        G_UNICODE_SCRIPT_DUPLOYAN = 105,
        G_UNICODE_SCRIPT_ELBASAN = 106,
        G_UNICODE_SCRIPT_GRANTHA = 107,
        G_UNICODE_SCRIPT_KHOJKI = 108,
        G_UNICODE_SCRIPT_KHUDAWADI = 109,
        G_UNICODE_SCRIPT_LINEAR_A = 110,
        G_UNICODE_SCRIPT_MAHAJANI = 111,
        G_UNICODE_SCRIPT_MANICHAEAN = 112,
        G_UNICODE_SCRIPT_MENDE_KIKAKUI = 113,
        G_UNICODE_SCRIPT_MODI = 114,
        G_UNICODE_SCRIPT_MRO = 115,
        G_UNICODE_SCRIPT_NABATAEAN = 116,
        G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = 117,
        G_UNICODE_SCRIPT_OLD_PERMIC = 118,
        G_UNICODE_SCRIPT_PAHAWH_HMONG = 119,
        G_UNICODE_SCRIPT_PALMYRENE = 120,
        G_UNICODE_SCRIPT_PAU_CIN_HAU = 121,
        G_UNICODE_SCRIPT_PSALTER_PAHLAVI = 122,
        G_UNICODE_SCRIPT_SIDDHAM = 123,
        G_UNICODE_SCRIPT_TIRHUTA = 124,
        G_UNICODE_SCRIPT_WARANG_CITI = 125,
        G_UNICODE_SCRIPT_AHOM = 126,
        G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = 127,
        G_UNICODE_SCRIPT_HATRAN = 128,
        G_UNICODE_SCRIPT_MULTANI = 129,
        G_UNICODE_SCRIPT_OLD_HUNGARIAN = 130,
        G_UNICODE_SCRIPT_SIGNWRITING = 131,
        G_UNICODE_SCRIPT_ADLAM = 132,
        G_UNICODE_SCRIPT_BHAIKSUKI = 133,
        G_UNICODE_SCRIPT_MARCHEN = 134,
        G_UNICODE_SCRIPT_NEWA = 135,
        G_UNICODE_SCRIPT_OSAGE = 136,
        G_UNICODE_SCRIPT_TANGUT = 137,
        G_UNICODE_SCRIPT_MASARAM_GONDI = 138,
        G_UNICODE_SCRIPT_NUSHU = 139,
        G_UNICODE_SCRIPT_SOYOMBO = 140,
        G_UNICODE_SCRIPT_ZANABAZAR_SQUARE = 141,
    }
    enum G_UNICODE_SCRIPT_INVALID_CODE = _Anonymous_174.G_UNICODE_SCRIPT_INVALID_CODE;
    enum G_UNICODE_SCRIPT_COMMON = _Anonymous_174.G_UNICODE_SCRIPT_COMMON;
    enum G_UNICODE_SCRIPT_INHERITED = _Anonymous_174.G_UNICODE_SCRIPT_INHERITED;
    enum G_UNICODE_SCRIPT_ARABIC = _Anonymous_174.G_UNICODE_SCRIPT_ARABIC;
    enum G_UNICODE_SCRIPT_ARMENIAN = _Anonymous_174.G_UNICODE_SCRIPT_ARMENIAN;
    enum G_UNICODE_SCRIPT_BENGALI = _Anonymous_174.G_UNICODE_SCRIPT_BENGALI;
    enum G_UNICODE_SCRIPT_BOPOMOFO = _Anonymous_174.G_UNICODE_SCRIPT_BOPOMOFO;
    enum G_UNICODE_SCRIPT_CHEROKEE = _Anonymous_174.G_UNICODE_SCRIPT_CHEROKEE;
    enum G_UNICODE_SCRIPT_COPTIC = _Anonymous_174.G_UNICODE_SCRIPT_COPTIC;
    enum G_UNICODE_SCRIPT_CYRILLIC = _Anonymous_174.G_UNICODE_SCRIPT_CYRILLIC;
    enum G_UNICODE_SCRIPT_DESERET = _Anonymous_174.G_UNICODE_SCRIPT_DESERET;
    enum G_UNICODE_SCRIPT_DEVANAGARI = _Anonymous_174.G_UNICODE_SCRIPT_DEVANAGARI;
    enum G_UNICODE_SCRIPT_ETHIOPIC = _Anonymous_174.G_UNICODE_SCRIPT_ETHIOPIC;
    enum G_UNICODE_SCRIPT_GEORGIAN = _Anonymous_174.G_UNICODE_SCRIPT_GEORGIAN;
    enum G_UNICODE_SCRIPT_GOTHIC = _Anonymous_174.G_UNICODE_SCRIPT_GOTHIC;
    enum G_UNICODE_SCRIPT_GREEK = _Anonymous_174.G_UNICODE_SCRIPT_GREEK;
    enum G_UNICODE_SCRIPT_GUJARATI = _Anonymous_174.G_UNICODE_SCRIPT_GUJARATI;
    enum G_UNICODE_SCRIPT_GURMUKHI = _Anonymous_174.G_UNICODE_SCRIPT_GURMUKHI;
    enum G_UNICODE_SCRIPT_HAN = _Anonymous_174.G_UNICODE_SCRIPT_HAN;
    enum G_UNICODE_SCRIPT_HANGUL = _Anonymous_174.G_UNICODE_SCRIPT_HANGUL;
    enum G_UNICODE_SCRIPT_HEBREW = _Anonymous_174.G_UNICODE_SCRIPT_HEBREW;
    enum G_UNICODE_SCRIPT_HIRAGANA = _Anonymous_174.G_UNICODE_SCRIPT_HIRAGANA;
    enum G_UNICODE_SCRIPT_KANNADA = _Anonymous_174.G_UNICODE_SCRIPT_KANNADA;
    enum G_UNICODE_SCRIPT_KATAKANA = _Anonymous_174.G_UNICODE_SCRIPT_KATAKANA;
    enum G_UNICODE_SCRIPT_KHMER = _Anonymous_174.G_UNICODE_SCRIPT_KHMER;
    enum G_UNICODE_SCRIPT_LAO = _Anonymous_174.G_UNICODE_SCRIPT_LAO;
    enum G_UNICODE_SCRIPT_LATIN = _Anonymous_174.G_UNICODE_SCRIPT_LATIN;
    enum G_UNICODE_SCRIPT_MALAYALAM = _Anonymous_174.G_UNICODE_SCRIPT_MALAYALAM;
    enum G_UNICODE_SCRIPT_MONGOLIAN = _Anonymous_174.G_UNICODE_SCRIPT_MONGOLIAN;
    enum G_UNICODE_SCRIPT_MYANMAR = _Anonymous_174.G_UNICODE_SCRIPT_MYANMAR;
    enum G_UNICODE_SCRIPT_OGHAM = _Anonymous_174.G_UNICODE_SCRIPT_OGHAM;
    enum G_UNICODE_SCRIPT_OLD_ITALIC = _Anonymous_174.G_UNICODE_SCRIPT_OLD_ITALIC;
    enum G_UNICODE_SCRIPT_ORIYA = _Anonymous_174.G_UNICODE_SCRIPT_ORIYA;
    enum G_UNICODE_SCRIPT_RUNIC = _Anonymous_174.G_UNICODE_SCRIPT_RUNIC;
    enum G_UNICODE_SCRIPT_SINHALA = _Anonymous_174.G_UNICODE_SCRIPT_SINHALA;
    enum G_UNICODE_SCRIPT_SYRIAC = _Anonymous_174.G_UNICODE_SCRIPT_SYRIAC;
    enum G_UNICODE_SCRIPT_TAMIL = _Anonymous_174.G_UNICODE_SCRIPT_TAMIL;
    enum G_UNICODE_SCRIPT_TELUGU = _Anonymous_174.G_UNICODE_SCRIPT_TELUGU;
    enum G_UNICODE_SCRIPT_THAANA = _Anonymous_174.G_UNICODE_SCRIPT_THAANA;
    enum G_UNICODE_SCRIPT_THAI = _Anonymous_174.G_UNICODE_SCRIPT_THAI;
    enum G_UNICODE_SCRIPT_TIBETAN = _Anonymous_174.G_UNICODE_SCRIPT_TIBETAN;
    enum G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = _Anonymous_174.G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL;
    enum G_UNICODE_SCRIPT_YI = _Anonymous_174.G_UNICODE_SCRIPT_YI;
    enum G_UNICODE_SCRIPT_TAGALOG = _Anonymous_174.G_UNICODE_SCRIPT_TAGALOG;
    enum G_UNICODE_SCRIPT_HANUNOO = _Anonymous_174.G_UNICODE_SCRIPT_HANUNOO;
    enum G_UNICODE_SCRIPT_BUHID = _Anonymous_174.G_UNICODE_SCRIPT_BUHID;
    enum G_UNICODE_SCRIPT_TAGBANWA = _Anonymous_174.G_UNICODE_SCRIPT_TAGBANWA;
    enum G_UNICODE_SCRIPT_BRAILLE = _Anonymous_174.G_UNICODE_SCRIPT_BRAILLE;
    enum G_UNICODE_SCRIPT_CYPRIOT = _Anonymous_174.G_UNICODE_SCRIPT_CYPRIOT;
    enum G_UNICODE_SCRIPT_LIMBU = _Anonymous_174.G_UNICODE_SCRIPT_LIMBU;
    enum G_UNICODE_SCRIPT_OSMANYA = _Anonymous_174.G_UNICODE_SCRIPT_OSMANYA;
    enum G_UNICODE_SCRIPT_SHAVIAN = _Anonymous_174.G_UNICODE_SCRIPT_SHAVIAN;
    enum G_UNICODE_SCRIPT_LINEAR_B = _Anonymous_174.G_UNICODE_SCRIPT_LINEAR_B;
    enum G_UNICODE_SCRIPT_TAI_LE = _Anonymous_174.G_UNICODE_SCRIPT_TAI_LE;
    enum G_UNICODE_SCRIPT_UGARITIC = _Anonymous_174.G_UNICODE_SCRIPT_UGARITIC;
    enum G_UNICODE_SCRIPT_NEW_TAI_LUE = _Anonymous_174.G_UNICODE_SCRIPT_NEW_TAI_LUE;
    enum G_UNICODE_SCRIPT_BUGINESE = _Anonymous_174.G_UNICODE_SCRIPT_BUGINESE;
    enum G_UNICODE_SCRIPT_GLAGOLITIC = _Anonymous_174.G_UNICODE_SCRIPT_GLAGOLITIC;
    enum G_UNICODE_SCRIPT_TIFINAGH = _Anonymous_174.G_UNICODE_SCRIPT_TIFINAGH;
    enum G_UNICODE_SCRIPT_SYLOTI_NAGRI = _Anonymous_174.G_UNICODE_SCRIPT_SYLOTI_NAGRI;
    enum G_UNICODE_SCRIPT_OLD_PERSIAN = _Anonymous_174.G_UNICODE_SCRIPT_OLD_PERSIAN;
    enum G_UNICODE_SCRIPT_KHAROSHTHI = _Anonymous_174.G_UNICODE_SCRIPT_KHAROSHTHI;
    enum G_UNICODE_SCRIPT_UNKNOWN = _Anonymous_174.G_UNICODE_SCRIPT_UNKNOWN;
    enum G_UNICODE_SCRIPT_BALINESE = _Anonymous_174.G_UNICODE_SCRIPT_BALINESE;
    enum G_UNICODE_SCRIPT_CUNEIFORM = _Anonymous_174.G_UNICODE_SCRIPT_CUNEIFORM;
    enum G_UNICODE_SCRIPT_PHOENICIAN = _Anonymous_174.G_UNICODE_SCRIPT_PHOENICIAN;
    enum G_UNICODE_SCRIPT_PHAGS_PA = _Anonymous_174.G_UNICODE_SCRIPT_PHAGS_PA;
    enum G_UNICODE_SCRIPT_NKO = _Anonymous_174.G_UNICODE_SCRIPT_NKO;
    enum G_UNICODE_SCRIPT_KAYAH_LI = _Anonymous_174.G_UNICODE_SCRIPT_KAYAH_LI;
    enum G_UNICODE_SCRIPT_LEPCHA = _Anonymous_174.G_UNICODE_SCRIPT_LEPCHA;
    enum G_UNICODE_SCRIPT_REJANG = _Anonymous_174.G_UNICODE_SCRIPT_REJANG;
    enum G_UNICODE_SCRIPT_SUNDANESE = _Anonymous_174.G_UNICODE_SCRIPT_SUNDANESE;
    enum G_UNICODE_SCRIPT_SAURASHTRA = _Anonymous_174.G_UNICODE_SCRIPT_SAURASHTRA;
    enum G_UNICODE_SCRIPT_CHAM = _Anonymous_174.G_UNICODE_SCRIPT_CHAM;
    enum G_UNICODE_SCRIPT_OL_CHIKI = _Anonymous_174.G_UNICODE_SCRIPT_OL_CHIKI;
    enum G_UNICODE_SCRIPT_VAI = _Anonymous_174.G_UNICODE_SCRIPT_VAI;
    enum G_UNICODE_SCRIPT_CARIAN = _Anonymous_174.G_UNICODE_SCRIPT_CARIAN;
    enum G_UNICODE_SCRIPT_LYCIAN = _Anonymous_174.G_UNICODE_SCRIPT_LYCIAN;
    enum G_UNICODE_SCRIPT_LYDIAN = _Anonymous_174.G_UNICODE_SCRIPT_LYDIAN;
    enum G_UNICODE_SCRIPT_AVESTAN = _Anonymous_174.G_UNICODE_SCRIPT_AVESTAN;
    enum G_UNICODE_SCRIPT_BAMUM = _Anonymous_174.G_UNICODE_SCRIPT_BAMUM;
    enum G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = _Anonymous_174.G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS;
    enum G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = _Anonymous_174.G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC;
    enum G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = _Anonymous_174.G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI;
    enum G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = _Anonymous_174.G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN;
    enum G_UNICODE_SCRIPT_JAVANESE = _Anonymous_174.G_UNICODE_SCRIPT_JAVANESE;
    enum G_UNICODE_SCRIPT_KAITHI = _Anonymous_174.G_UNICODE_SCRIPT_KAITHI;
    enum G_UNICODE_SCRIPT_LISU = _Anonymous_174.G_UNICODE_SCRIPT_LISU;
    enum G_UNICODE_SCRIPT_MEETEI_MAYEK = _Anonymous_174.G_UNICODE_SCRIPT_MEETEI_MAYEK;
    enum G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = _Anonymous_174.G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN;
    enum G_UNICODE_SCRIPT_OLD_TURKIC = _Anonymous_174.G_UNICODE_SCRIPT_OLD_TURKIC;
    enum G_UNICODE_SCRIPT_SAMARITAN = _Anonymous_174.G_UNICODE_SCRIPT_SAMARITAN;
    enum G_UNICODE_SCRIPT_TAI_THAM = _Anonymous_174.G_UNICODE_SCRIPT_TAI_THAM;
    enum G_UNICODE_SCRIPT_TAI_VIET = _Anonymous_174.G_UNICODE_SCRIPT_TAI_VIET;
    enum G_UNICODE_SCRIPT_BATAK = _Anonymous_174.G_UNICODE_SCRIPT_BATAK;
    enum G_UNICODE_SCRIPT_BRAHMI = _Anonymous_174.G_UNICODE_SCRIPT_BRAHMI;
    enum G_UNICODE_SCRIPT_MANDAIC = _Anonymous_174.G_UNICODE_SCRIPT_MANDAIC;
    enum G_UNICODE_SCRIPT_CHAKMA = _Anonymous_174.G_UNICODE_SCRIPT_CHAKMA;
    enum G_UNICODE_SCRIPT_MEROITIC_CURSIVE = _Anonymous_174.G_UNICODE_SCRIPT_MEROITIC_CURSIVE;
    enum G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = _Anonymous_174.G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS;
    enum G_UNICODE_SCRIPT_MIAO = _Anonymous_174.G_UNICODE_SCRIPT_MIAO;
    enum G_UNICODE_SCRIPT_SHARADA = _Anonymous_174.G_UNICODE_SCRIPT_SHARADA;
    enum G_UNICODE_SCRIPT_SORA_SOMPENG = _Anonymous_174.G_UNICODE_SCRIPT_SORA_SOMPENG;
    enum G_UNICODE_SCRIPT_TAKRI = _Anonymous_174.G_UNICODE_SCRIPT_TAKRI;
    enum G_UNICODE_SCRIPT_BASSA_VAH = _Anonymous_174.G_UNICODE_SCRIPT_BASSA_VAH;
    enum G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = _Anonymous_174.G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN;
    enum G_UNICODE_SCRIPT_DUPLOYAN = _Anonymous_174.G_UNICODE_SCRIPT_DUPLOYAN;
    enum G_UNICODE_SCRIPT_ELBASAN = _Anonymous_174.G_UNICODE_SCRIPT_ELBASAN;
    enum G_UNICODE_SCRIPT_GRANTHA = _Anonymous_174.G_UNICODE_SCRIPT_GRANTHA;
    enum G_UNICODE_SCRIPT_KHOJKI = _Anonymous_174.G_UNICODE_SCRIPT_KHOJKI;
    enum G_UNICODE_SCRIPT_KHUDAWADI = _Anonymous_174.G_UNICODE_SCRIPT_KHUDAWADI;
    enum G_UNICODE_SCRIPT_LINEAR_A = _Anonymous_174.G_UNICODE_SCRIPT_LINEAR_A;
    enum G_UNICODE_SCRIPT_MAHAJANI = _Anonymous_174.G_UNICODE_SCRIPT_MAHAJANI;
    enum G_UNICODE_SCRIPT_MANICHAEAN = _Anonymous_174.G_UNICODE_SCRIPT_MANICHAEAN;
    enum G_UNICODE_SCRIPT_MENDE_KIKAKUI = _Anonymous_174.G_UNICODE_SCRIPT_MENDE_KIKAKUI;
    enum G_UNICODE_SCRIPT_MODI = _Anonymous_174.G_UNICODE_SCRIPT_MODI;
    enum G_UNICODE_SCRIPT_MRO = _Anonymous_174.G_UNICODE_SCRIPT_MRO;
    enum G_UNICODE_SCRIPT_NABATAEAN = _Anonymous_174.G_UNICODE_SCRIPT_NABATAEAN;
    enum G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = _Anonymous_174.G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN;
    enum G_UNICODE_SCRIPT_OLD_PERMIC = _Anonymous_174.G_UNICODE_SCRIPT_OLD_PERMIC;
    enum G_UNICODE_SCRIPT_PAHAWH_HMONG = _Anonymous_174.G_UNICODE_SCRIPT_PAHAWH_HMONG;
    enum G_UNICODE_SCRIPT_PALMYRENE = _Anonymous_174.G_UNICODE_SCRIPT_PALMYRENE;
    enum G_UNICODE_SCRIPT_PAU_CIN_HAU = _Anonymous_174.G_UNICODE_SCRIPT_PAU_CIN_HAU;
    enum G_UNICODE_SCRIPT_PSALTER_PAHLAVI = _Anonymous_174.G_UNICODE_SCRIPT_PSALTER_PAHLAVI;
    enum G_UNICODE_SCRIPT_SIDDHAM = _Anonymous_174.G_UNICODE_SCRIPT_SIDDHAM;
    enum G_UNICODE_SCRIPT_TIRHUTA = _Anonymous_174.G_UNICODE_SCRIPT_TIRHUTA;
    enum G_UNICODE_SCRIPT_WARANG_CITI = _Anonymous_174.G_UNICODE_SCRIPT_WARANG_CITI;
    enum G_UNICODE_SCRIPT_AHOM = _Anonymous_174.G_UNICODE_SCRIPT_AHOM;
    enum G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = _Anonymous_174.G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS;
    enum G_UNICODE_SCRIPT_HATRAN = _Anonymous_174.G_UNICODE_SCRIPT_HATRAN;
    enum G_UNICODE_SCRIPT_MULTANI = _Anonymous_174.G_UNICODE_SCRIPT_MULTANI;
    enum G_UNICODE_SCRIPT_OLD_HUNGARIAN = _Anonymous_174.G_UNICODE_SCRIPT_OLD_HUNGARIAN;
    enum G_UNICODE_SCRIPT_SIGNWRITING = _Anonymous_174.G_UNICODE_SCRIPT_SIGNWRITING;
    enum G_UNICODE_SCRIPT_ADLAM = _Anonymous_174.G_UNICODE_SCRIPT_ADLAM;
    enum G_UNICODE_SCRIPT_BHAIKSUKI = _Anonymous_174.G_UNICODE_SCRIPT_BHAIKSUKI;
    enum G_UNICODE_SCRIPT_MARCHEN = _Anonymous_174.G_UNICODE_SCRIPT_MARCHEN;
    enum G_UNICODE_SCRIPT_NEWA = _Anonymous_174.G_UNICODE_SCRIPT_NEWA;
    enum G_UNICODE_SCRIPT_OSAGE = _Anonymous_174.G_UNICODE_SCRIPT_OSAGE;
    enum G_UNICODE_SCRIPT_TANGUT = _Anonymous_174.G_UNICODE_SCRIPT_TANGUT;
    enum G_UNICODE_SCRIPT_MASARAM_GONDI = _Anonymous_174.G_UNICODE_SCRIPT_MASARAM_GONDI;
    enum G_UNICODE_SCRIPT_NUSHU = _Anonymous_174.G_UNICODE_SCRIPT_NUSHU;
    enum G_UNICODE_SCRIPT_SOYOMBO = _Anonymous_174.G_UNICODE_SCRIPT_SOYOMBO;
    enum G_UNICODE_SCRIPT_ZANABAZAR_SQUARE = _Anonymous_174.G_UNICODE_SCRIPT_ZANABAZAR_SQUARE;
    uint g_unicode_script_to_iso15924(GUnicodeScript) @nogc nothrow;
    GUnicodeScript g_unicode_script_from_iso15924(uint) @nogc nothrow;
    int g_unichar_isalnum(uint) @nogc nothrow;
    int g_unichar_isalpha(uint) @nogc nothrow;
    int g_unichar_iscntrl(uint) @nogc nothrow;
    int g_unichar_isdigit(uint) @nogc nothrow;
    int g_unichar_isgraph(uint) @nogc nothrow;
    int g_unichar_islower(uint) @nogc nothrow;
    int g_unichar_isprint(uint) @nogc nothrow;
    int g_unichar_ispunct(uint) @nogc nothrow;
    int g_unichar_isspace(uint) @nogc nothrow;
    int g_unichar_isupper(uint) @nogc nothrow;
    int g_unichar_isxdigit(uint) @nogc nothrow;
    int g_unichar_istitle(uint) @nogc nothrow;
    int g_unichar_isdefined(uint) @nogc nothrow;
    int g_unichar_iswide(uint) @nogc nothrow;
    int g_unichar_iswide_cjk(uint) @nogc nothrow;
    int g_unichar_iszerowidth(uint) @nogc nothrow;
    int g_unichar_ismark(uint) @nogc nothrow;
    uint g_unichar_toupper(uint) @nogc nothrow;
    uint g_unichar_tolower(uint) @nogc nothrow;
    uint g_unichar_totitle(uint) @nogc nothrow;
    int g_unichar_digit_value(uint) @nogc nothrow;
    int g_unichar_xdigit_value(uint) @nogc nothrow;
    GUnicodeType g_unichar_type(uint) @nogc nothrow;
    GUnicodeBreakType g_unichar_break_type(uint) @nogc nothrow;
    int g_unichar_combining_class(uint) @nogc nothrow;
    int g_unichar_get_mirror_char(uint, uint*) @nogc nothrow;
    GUnicodeScript g_unichar_get_script(uint) @nogc nothrow;
    int g_unichar_validate(uint) @nogc nothrow;
    int g_unichar_compose(uint, uint, uint*) @nogc nothrow;
    int g_unichar_decompose(uint, uint*, uint*) @nogc nothrow;
    c_ulong g_unichar_fully_decompose(uint, int, uint*, c_ulong) @nogc nothrow;
    int pthread_mutexattr_settype(pthread_mutexattr_t*, int) @nogc nothrow;
    void g_unicode_canonical_ordering(uint*, c_ulong) @nogc nothrow;
    uint* g_unicode_canonical_decomposition(uint, c_ulong*) @nogc nothrow;
    extern __gshared const(const(char)*) g_utf8_skip;
    uint g_utf8_get_char(const(char)*) @nogc nothrow;
    uint g_utf8_get_char_validated(const(char)*, c_long) @nogc nothrow;
    char* g_utf8_offset_to_pointer(const(char)*, c_long) @nogc nothrow;
    c_long g_utf8_pointer_to_offset(const(char)*, const(char)*) @nogc nothrow;
    char* g_utf8_prev_char(const(char)*) @nogc nothrow;
    char* g_utf8_find_next_char(const(char)*, const(char)*) @nogc nothrow;
    char* g_utf8_find_prev_char(const(char)*, const(char)*) @nogc nothrow;
    c_long g_utf8_strlen(const(char)*, c_long) @nogc nothrow;
    char* g_utf8_substring(const(char)*, c_long, c_long) @nogc nothrow;
    char* g_utf8_strncpy(char*, const(char)*, c_ulong) @nogc nothrow;
    char* g_utf8_strchr(const(char)*, c_long, uint) @nogc nothrow;
    char* g_utf8_strrchr(const(char)*, c_long, uint) @nogc nothrow;
    char* g_utf8_strreverse(const(char)*, c_long) @nogc nothrow;
    ushort* g_utf8_to_utf16(const(char)*, c_long, c_long*, c_long*, _GError**) @nogc nothrow;
    uint* g_utf8_to_ucs4(const(char)*, c_long, c_long*, c_long*, _GError**) @nogc nothrow;
    uint* g_utf8_to_ucs4_fast(const(char)*, c_long, c_long*) @nogc nothrow;
    uint* g_utf16_to_ucs4(const(ushort)*, c_long, c_long*, c_long*, _GError**) @nogc nothrow;
    char* g_utf16_to_utf8(const(ushort)*, c_long, c_long*, c_long*, _GError**) @nogc nothrow;
    ushort* g_ucs4_to_utf16(const(uint)*, c_long, c_long*, c_long*, _GError**) @nogc nothrow;
    char* g_ucs4_to_utf8(const(uint)*, c_long, c_long*, c_long*, _GError**) @nogc nothrow;
    int g_unichar_to_utf8(uint, char*) @nogc nothrow;
    int g_utf8_validate(const(char)*, c_long, const(char)**) @nogc nothrow;
    char* g_utf8_strup(const(char)*, c_long) @nogc nothrow;
    char* g_utf8_strdown(const(char)*, c_long) @nogc nothrow;
    char* g_utf8_casefold(const(char)*, c_long) @nogc nothrow;
    alias GNormalizeMode = _Anonymous_175;
    enum _Anonymous_175
    {
        G_NORMALIZE_DEFAULT = 0,
        G_NORMALIZE_NFD = 0,
        G_NORMALIZE_DEFAULT_COMPOSE = 1,
        G_NORMALIZE_NFC = 1,
        G_NORMALIZE_ALL = 2,
        G_NORMALIZE_NFKD = 2,
        G_NORMALIZE_ALL_COMPOSE = 3,
        G_NORMALIZE_NFKC = 3,
    }
    enum G_NORMALIZE_DEFAULT = _Anonymous_175.G_NORMALIZE_DEFAULT;
    enum G_NORMALIZE_NFD = _Anonymous_175.G_NORMALIZE_NFD;
    enum G_NORMALIZE_DEFAULT_COMPOSE = _Anonymous_175.G_NORMALIZE_DEFAULT_COMPOSE;
    enum G_NORMALIZE_NFC = _Anonymous_175.G_NORMALIZE_NFC;
    enum G_NORMALIZE_ALL = _Anonymous_175.G_NORMALIZE_ALL;
    enum G_NORMALIZE_NFKD = _Anonymous_175.G_NORMALIZE_NFKD;
    enum G_NORMALIZE_ALL_COMPOSE = _Anonymous_175.G_NORMALIZE_ALL_COMPOSE;
    enum G_NORMALIZE_NFKC = _Anonymous_175.G_NORMALIZE_NFKC;
    char* g_utf8_normalize(const(char)*, c_long, GNormalizeMode) @nogc nothrow;
    int g_utf8_collate(const(char)*, const(char)*) @nogc nothrow;
    char* g_utf8_collate_key(const(char)*, c_long) @nogc nothrow;
    char* g_utf8_collate_key_for_filename(const(char)*, c_long) @nogc nothrow;
    char* g_utf8_make_valid(const(char)*, c_long) @nogc nothrow;
    int pthread_mutexattr_gettype(const(pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int) @nogc nothrow;
    char* g_uri_unescape_string(const(char)*, const(char)*) @nogc nothrow;
    char* g_uri_unescape_segment(const(char)*, const(char)*, const(char)*) @nogc nothrow;
    char* g_uri_parse_scheme(const(char)*) @nogc nothrow;
    char* g_uri_escape_string(const(char)*, const(char)*, int) @nogc nothrow;
    const(char)* g_get_user_name() @nogc nothrow;
    const(char)* g_get_real_name() @nogc nothrow;
    const(char)* g_get_home_dir() @nogc nothrow;
    const(char)* g_get_tmp_dir() @nogc nothrow;
    const(char)* g_get_host_name() @nogc nothrow;
    const(char)* g_get_prgname() @nogc nothrow;
    void g_set_prgname(const(char)*) @nogc nothrow;
    const(char)* g_get_application_name() @nogc nothrow;
    void g_set_application_name(const(char)*) @nogc nothrow;
    void g_reload_user_special_dirs_cache() @nogc nothrow;
    const(char)* g_get_user_data_dir() @nogc nothrow;
    const(char)* g_get_user_config_dir() @nogc nothrow;
    const(char)* g_get_user_cache_dir() @nogc nothrow;
    const(const(char)*)* g_get_system_data_dirs() @nogc nothrow;
    const(const(char)*)* g_get_system_config_dirs() @nogc nothrow;
    const(char)* g_get_user_runtime_dir() @nogc nothrow;
    alias GUserDirectory = _Anonymous_176;
    enum _Anonymous_176
    {
        G_USER_DIRECTORY_DESKTOP = 0,
        G_USER_DIRECTORY_DOCUMENTS = 1,
        G_USER_DIRECTORY_DOWNLOAD = 2,
        G_USER_DIRECTORY_MUSIC = 3,
        G_USER_DIRECTORY_PICTURES = 4,
        G_USER_DIRECTORY_PUBLIC_SHARE = 5,
        G_USER_DIRECTORY_TEMPLATES = 6,
        G_USER_DIRECTORY_VIDEOS = 7,
        G_USER_N_DIRECTORIES = 8,
    }
    enum G_USER_DIRECTORY_DESKTOP = _Anonymous_176.G_USER_DIRECTORY_DESKTOP;
    enum G_USER_DIRECTORY_DOCUMENTS = _Anonymous_176.G_USER_DIRECTORY_DOCUMENTS;
    enum G_USER_DIRECTORY_DOWNLOAD = _Anonymous_176.G_USER_DIRECTORY_DOWNLOAD;
    enum G_USER_DIRECTORY_MUSIC = _Anonymous_176.G_USER_DIRECTORY_MUSIC;
    enum G_USER_DIRECTORY_PICTURES = _Anonymous_176.G_USER_DIRECTORY_PICTURES;
    enum G_USER_DIRECTORY_PUBLIC_SHARE = _Anonymous_176.G_USER_DIRECTORY_PUBLIC_SHARE;
    enum G_USER_DIRECTORY_TEMPLATES = _Anonymous_176.G_USER_DIRECTORY_TEMPLATES;
    enum G_USER_DIRECTORY_VIDEOS = _Anonymous_176.G_USER_DIRECTORY_VIDEOS;
    enum G_USER_N_DIRECTORIES = _Anonymous_176.G_USER_N_DIRECTORIES;
    const(char)* g_get_user_special_dir(GUserDirectory) @nogc nothrow;
    alias GDebugKey = _GDebugKey;
    struct _GDebugKey
    {
        const(char)* key;
        uint value;
    }
    uint g_parse_debug_string(const(char)*, const(_GDebugKey)*, uint) @nogc nothrow;
    int g_snprintf(char*, c_ulong, const(char)*, ...) @nogc nothrow;
    int g_vsnprintf(char*, c_ulong, const(char)*, va_list*) @nogc nothrow;
    void g_nullify_pointer(void**) @nogc nothrow;
    alias GFormatSizeFlags = _Anonymous_177;
    enum _Anonymous_177
    {
        G_FORMAT_SIZE_DEFAULT = 0,
        G_FORMAT_SIZE_LONG_FORMAT = 1,
        G_FORMAT_SIZE_IEC_UNITS = 2,
        G_FORMAT_SIZE_BITS = 4,
    }
    enum G_FORMAT_SIZE_DEFAULT = _Anonymous_177.G_FORMAT_SIZE_DEFAULT;
    enum G_FORMAT_SIZE_LONG_FORMAT = _Anonymous_177.G_FORMAT_SIZE_LONG_FORMAT;
    enum G_FORMAT_SIZE_IEC_UNITS = _Anonymous_177.G_FORMAT_SIZE_IEC_UNITS;
    enum G_FORMAT_SIZE_BITS = _Anonymous_177.G_FORMAT_SIZE_BITS;
    char* g_format_size_full(c_ulong, GFormatSizeFlags) @nogc nothrow;
    char* g_format_size(c_ulong) @nogc nothrow;
    char* g_format_size_for_display(c_long) @nogc nothrow;
    alias GVoidFunc = void function();
    void g_atexit(void function()) @nogc nothrow;
    char* g_find_program_in_path(const(char)*) @nogc nothrow;
    int pthread_mutexattr_getpshared(const(pthread_mutexattr_t)*, int*) @nogc nothrow;
    pragma(mangle, "g_bit_nth_lsf") int g_bit_nth_lsf_(c_ulong, int) @nogc nothrow;
    pragma(mangle, "g_bit_nth_msf") int g_bit_nth_msf_(c_ulong, int) @nogc nothrow;
    pragma(mangle, "g_bit_storage") uint g_bit_storage_(c_ulong) @nogc nothrow;
    static int g_bit_nth_lsf_impl(c_ulong, int) @nogc nothrow;
    static int g_bit_nth_msf_impl(c_ulong, int) @nogc nothrow;
    static uint g_bit_storage_impl(c_ulong) @nogc nothrow;
    int pthread_mutexattr_destroy(pthread_mutexattr_t*) @nogc nothrow;
    int g_uuid_string_is_valid(const(char)*) @nogc nothrow;
    char* g_uuid_string_random() @nogc nothrow;
    int pthread_mutexattr_init(pthread_mutexattr_t*) @nogc nothrow;
    alias GVariant = _GVariant;
    struct _GVariant{};
    alias GVariantClass = _Anonymous_178;
    enum _Anonymous_178
    {
        G_VARIANT_CLASS_BOOLEAN = 98,
        G_VARIANT_CLASS_BYTE = 121,
        G_VARIANT_CLASS_INT16 = 110,
        G_VARIANT_CLASS_UINT16 = 113,
        G_VARIANT_CLASS_INT32 = 105,
        G_VARIANT_CLASS_UINT32 = 117,
        G_VARIANT_CLASS_INT64 = 120,
        G_VARIANT_CLASS_UINT64 = 116,
        G_VARIANT_CLASS_HANDLE = 104,
        G_VARIANT_CLASS_DOUBLE = 100,
        G_VARIANT_CLASS_STRING = 115,
        G_VARIANT_CLASS_OBJECT_PATH = 111,
        G_VARIANT_CLASS_SIGNATURE = 103,
        G_VARIANT_CLASS_VARIANT = 118,
        G_VARIANT_CLASS_MAYBE = 109,
        G_VARIANT_CLASS_ARRAY = 97,
        G_VARIANT_CLASS_TUPLE = 40,
        G_VARIANT_CLASS_DICT_ENTRY = 123,
    }
    enum G_VARIANT_CLASS_BOOLEAN = _Anonymous_178.G_VARIANT_CLASS_BOOLEAN;
    enum G_VARIANT_CLASS_BYTE = _Anonymous_178.G_VARIANT_CLASS_BYTE;
    enum G_VARIANT_CLASS_INT16 = _Anonymous_178.G_VARIANT_CLASS_INT16;
    enum G_VARIANT_CLASS_UINT16 = _Anonymous_178.G_VARIANT_CLASS_UINT16;
    enum G_VARIANT_CLASS_INT32 = _Anonymous_178.G_VARIANT_CLASS_INT32;
    enum G_VARIANT_CLASS_UINT32 = _Anonymous_178.G_VARIANT_CLASS_UINT32;
    enum G_VARIANT_CLASS_INT64 = _Anonymous_178.G_VARIANT_CLASS_INT64;
    enum G_VARIANT_CLASS_UINT64 = _Anonymous_178.G_VARIANT_CLASS_UINT64;
    enum G_VARIANT_CLASS_HANDLE = _Anonymous_178.G_VARIANT_CLASS_HANDLE;
    enum G_VARIANT_CLASS_DOUBLE = _Anonymous_178.G_VARIANT_CLASS_DOUBLE;
    enum G_VARIANT_CLASS_STRING = _Anonymous_178.G_VARIANT_CLASS_STRING;
    enum G_VARIANT_CLASS_OBJECT_PATH = _Anonymous_178.G_VARIANT_CLASS_OBJECT_PATH;
    enum G_VARIANT_CLASS_SIGNATURE = _Anonymous_178.G_VARIANT_CLASS_SIGNATURE;
    enum G_VARIANT_CLASS_VARIANT = _Anonymous_178.G_VARIANT_CLASS_VARIANT;
    enum G_VARIANT_CLASS_MAYBE = _Anonymous_178.G_VARIANT_CLASS_MAYBE;
    enum G_VARIANT_CLASS_ARRAY = _Anonymous_178.G_VARIANT_CLASS_ARRAY;
    enum G_VARIANT_CLASS_TUPLE = _Anonymous_178.G_VARIANT_CLASS_TUPLE;
    enum G_VARIANT_CLASS_DICT_ENTRY = _Anonymous_178.G_VARIANT_CLASS_DICT_ENTRY;
    void g_variant_unref(_GVariant*) @nogc nothrow;
    _GVariant* g_variant_ref(_GVariant*) @nogc nothrow;
    _GVariant* g_variant_ref_sink(_GVariant*) @nogc nothrow;
    int g_variant_is_floating(_GVariant*) @nogc nothrow;
    _GVariant* g_variant_take_ref(_GVariant*) @nogc nothrow;
    const(_GVariantType)* g_variant_get_type(_GVariant*) @nogc nothrow;
    const(char)* g_variant_get_type_string(_GVariant*) @nogc nothrow;
    int g_variant_is_of_type(_GVariant*, const(_GVariantType)*) @nogc nothrow;
    int g_variant_is_container(_GVariant*) @nogc nothrow;
    GVariantClass g_variant_classify(_GVariant*) @nogc nothrow;
    _GVariant* g_variant_new_boolean(int) @nogc nothrow;
    _GVariant* g_variant_new_byte(ubyte) @nogc nothrow;
    _GVariant* g_variant_new_int16(short) @nogc nothrow;
    _GVariant* g_variant_new_uint16(ushort) @nogc nothrow;
    _GVariant* g_variant_new_int32(int) @nogc nothrow;
    _GVariant* g_variant_new_uint32(uint) @nogc nothrow;
    _GVariant* g_variant_new_int64(c_long) @nogc nothrow;
    _GVariant* g_variant_new_uint64(c_ulong) @nogc nothrow;
    _GVariant* g_variant_new_handle(int) @nogc nothrow;
    _GVariant* g_variant_new_double(double) @nogc nothrow;
    _GVariant* g_variant_new_string(const(char)*) @nogc nothrow;
    _GVariant* g_variant_new_take_string(char*) @nogc nothrow;
    _GVariant* g_variant_new_printf(const(char)*, ...) @nogc nothrow;
    _GVariant* g_variant_new_object_path(const(char)*) @nogc nothrow;
    int g_variant_is_object_path(const(char)*) @nogc nothrow;
    _GVariant* g_variant_new_signature(const(char)*) @nogc nothrow;
    int g_variant_is_signature(const(char)*) @nogc nothrow;
    _GVariant* g_variant_new_variant(_GVariant*) @nogc nothrow;
    _GVariant* g_variant_new_strv(const(const(char)*)*, c_long) @nogc nothrow;
    _GVariant* g_variant_new_objv(const(const(char)*)*, c_long) @nogc nothrow;
    _GVariant* g_variant_new_bytestring(const(char)*) @nogc nothrow;
    _GVariant* g_variant_new_bytestring_array(const(const(char)*)*, c_long) @nogc nothrow;
    _GVariant* g_variant_new_fixed_array(const(_GVariantType)*, const(void)*, c_ulong, c_ulong) @nogc nothrow;
    int g_variant_get_boolean(_GVariant*) @nogc nothrow;
    ubyte g_variant_get_byte(_GVariant*) @nogc nothrow;
    short g_variant_get_int16(_GVariant*) @nogc nothrow;
    ushort g_variant_get_uint16(_GVariant*) @nogc nothrow;
    int g_variant_get_int32(_GVariant*) @nogc nothrow;
    uint g_variant_get_uint32(_GVariant*) @nogc nothrow;
    c_long g_variant_get_int64(_GVariant*) @nogc nothrow;
    c_ulong g_variant_get_uint64(_GVariant*) @nogc nothrow;
    int g_variant_get_handle(_GVariant*) @nogc nothrow;
    double g_variant_get_double(_GVariant*) @nogc nothrow;
    _GVariant* g_variant_get_variant(_GVariant*) @nogc nothrow;
    const(char)* g_variant_get_string(_GVariant*, c_ulong*) @nogc nothrow;
    char* g_variant_dup_string(_GVariant*, c_ulong*) @nogc nothrow;
    const(char)** g_variant_get_strv(_GVariant*, c_ulong*) @nogc nothrow;
    char** g_variant_dup_strv(_GVariant*, c_ulong*) @nogc nothrow;
    const(char)** g_variant_get_objv(_GVariant*, c_ulong*) @nogc nothrow;
    char** g_variant_dup_objv(_GVariant*, c_ulong*) @nogc nothrow;
    const(char)* g_variant_get_bytestring(_GVariant*) @nogc nothrow;
    char* g_variant_dup_bytestring(_GVariant*, c_ulong*) @nogc nothrow;
    const(char)** g_variant_get_bytestring_array(_GVariant*, c_ulong*) @nogc nothrow;
    char** g_variant_dup_bytestring_array(_GVariant*, c_ulong*) @nogc nothrow;
    _GVariant* g_variant_new_maybe(const(_GVariantType)*, _GVariant*) @nogc nothrow;
    _GVariant* g_variant_new_array(const(_GVariantType)*, _GVariant**, c_ulong) @nogc nothrow;
    _GVariant* g_variant_new_tuple(_GVariant**, c_ulong) @nogc nothrow;
    _GVariant* g_variant_new_dict_entry(_GVariant*, _GVariant*) @nogc nothrow;
    _GVariant* g_variant_get_maybe(_GVariant*) @nogc nothrow;
    c_ulong g_variant_n_children(_GVariant*) @nogc nothrow;
    void g_variant_get_child(_GVariant*, c_ulong, const(char)*, ...) @nogc nothrow;
    _GVariant* g_variant_get_child_value(_GVariant*, c_ulong) @nogc nothrow;
    int g_variant_lookup(_GVariant*, const(char)*, const(char)*, ...) @nogc nothrow;
    _GVariant* g_variant_lookup_value(_GVariant*, const(char)*, const(_GVariantType)*) @nogc nothrow;
    const(void)* g_variant_get_fixed_array(_GVariant*, c_ulong*, c_ulong) @nogc nothrow;
    c_ulong g_variant_get_size(_GVariant*) @nogc nothrow;
    const(void)* g_variant_get_data(_GVariant*) @nogc nothrow;
    _GBytes* g_variant_get_data_as_bytes(_GVariant*) @nogc nothrow;
    void g_variant_store(_GVariant*, void*) @nogc nothrow;
    char* g_variant_print(_GVariant*, int) @nogc nothrow;
    _GString* g_variant_print_string(_GVariant*, _GString*, int) @nogc nothrow;
    uint g_variant_hash(const(void)*) @nogc nothrow;
    int g_variant_equal(const(void)*, const(void)*) @nogc nothrow;
    _GVariant* g_variant_get_normal_form(_GVariant*) @nogc nothrow;
    int g_variant_is_normal_form(_GVariant*) @nogc nothrow;
    _GVariant* g_variant_byteswap(_GVariant*) @nogc nothrow;
    _GVariant* g_variant_new_from_bytes(const(_GVariantType)*, _GBytes*, int) @nogc nothrow;
    _GVariant* g_variant_new_from_data(const(_GVariantType)*, const(void)*, c_ulong, int, void function(void*), void*) @nogc nothrow;
    alias GVariantIter = _GVariantIter;
    struct _GVariantIter
    {
        c_ulong[16] x;
    }
    _GVariantIter* g_variant_iter_new(_GVariant*) @nogc nothrow;
    c_ulong g_variant_iter_init(_GVariantIter*, _GVariant*) @nogc nothrow;
    _GVariantIter* g_variant_iter_copy(_GVariantIter*) @nogc nothrow;
    c_ulong g_variant_iter_n_children(_GVariantIter*) @nogc nothrow;
    void g_variant_iter_free(_GVariantIter*) @nogc nothrow;
    _GVariant* g_variant_iter_next_value(_GVariantIter*) @nogc nothrow;
    int g_variant_iter_next(_GVariantIter*, const(char)*, ...) @nogc nothrow;
    int g_variant_iter_loop(_GVariantIter*, const(char)*, ...) @nogc nothrow;
    alias GVariantBuilder = _GVariantBuilder;
    struct _GVariantBuilder
    {
        static union _Anonymous_179
        {
            static struct _Anonymous_180
            {
                c_ulong partial_magic;
                const(_GVariantType)* type;
                c_ulong[14] y;
            }
            _Anonymous_180 s;
            c_ulong[16] x;
        }
        _Anonymous_179 u;
    }
    alias GVariantParseError = _Anonymous_181;
    enum _Anonymous_181
    {
        G_VARIANT_PARSE_ERROR_FAILED = 0,
        G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1,
        G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2,
        G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3,
        G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4,
        G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5,
        G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6,
        G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7,
        G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8,
        G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9,
        G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10,
        G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11,
        G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12,
        G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13,
        G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14,
        G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15,
        G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16,
        G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17,
    }
    enum G_VARIANT_PARSE_ERROR_FAILED = _Anonymous_181.G_VARIANT_PARSE_ERROR_FAILED;
    enum G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = _Anonymous_181.G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED;
    enum G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = _Anonymous_181.G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE;
    enum G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = _Anonymous_181.G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED;
    enum G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = _Anonymous_181.G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END;
    enum G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = _Anonymous_181.G_VARIANT_PARSE_ERROR_INVALID_CHARACTER;
    enum G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = _Anonymous_181.G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING;
    enum G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = _Anonymous_181.G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH;
    enum G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = _Anonymous_181.G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE;
    enum G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = _Anonymous_181.G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING;
    enum G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = _Anonymous_181.G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE;
    enum G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = _Anonymous_181.G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE;
    enum G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = _Anonymous_181.G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG;
    enum G_VARIANT_PARSE_ERROR_TYPE_ERROR = _Anonymous_181.G_VARIANT_PARSE_ERROR_TYPE_ERROR;
    enum G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = _Anonymous_181.G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN;
    enum G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = _Anonymous_181.G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD;
    enum G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = _Anonymous_181.G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT;
    enum G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = _Anonymous_181.G_VARIANT_PARSE_ERROR_VALUE_EXPECTED;
    uint g_variant_parser_get_error_quark() @nogc nothrow;
    uint g_variant_parse_error_quark() @nogc nothrow;
    _GVariantBuilder* g_variant_builder_new(const(_GVariantType)*) @nogc nothrow;
    void g_variant_builder_unref(_GVariantBuilder*) @nogc nothrow;
    _GVariantBuilder* g_variant_builder_ref(_GVariantBuilder*) @nogc nothrow;
    void g_variant_builder_init(_GVariantBuilder*, const(_GVariantType)*) @nogc nothrow;
    _GVariant* g_variant_builder_end(_GVariantBuilder*) @nogc nothrow;
    void g_variant_builder_clear(_GVariantBuilder*) @nogc nothrow;
    void g_variant_builder_open(_GVariantBuilder*, const(_GVariantType)*) @nogc nothrow;
    void g_variant_builder_close(_GVariantBuilder*) @nogc nothrow;
    void g_variant_builder_add_value(_GVariantBuilder*, _GVariant*) @nogc nothrow;
    void g_variant_builder_add(_GVariantBuilder*, const(char)*, ...) @nogc nothrow;
    void g_variant_builder_add_parsed(_GVariantBuilder*, const(char)*, ...) @nogc nothrow;
    _GVariant* g_variant_new(const(char)*, ...) @nogc nothrow;
    void g_variant_get(_GVariant*, const(char)*, ...) @nogc nothrow;
    _GVariant* g_variant_new_va(const(char)*, const(char)**, va_list**) @nogc nothrow;
    void g_variant_get_va(_GVariant*, const(char)*, const(char)**, va_list**) @nogc nothrow;
    int g_variant_check_format_string(_GVariant*, const(char)*, int) @nogc nothrow;
    _GVariant* g_variant_parse(const(_GVariantType)*, const(char)*, const(char)*, const(char)**, _GError**) @nogc nothrow;
    _GVariant* g_variant_new_parsed(const(char)*, ...) @nogc nothrow;
    _GVariant* g_variant_new_parsed_va(const(char)*, va_list**) @nogc nothrow;
    char* g_variant_parse_error_print_context(_GError*, const(char)*) @nogc nothrow;
    int g_variant_compare(const(void)*, const(void)*) @nogc nothrow;
    alias GVariantDict = _GVariantDict;
    struct _GVariantDict
    {
        static union _Anonymous_182
        {
            static struct _Anonymous_183
            {
                _GVariant* asv;
                c_ulong partial_magic;
                c_ulong[14] y;
            }
            _Anonymous_183 s;
            c_ulong[16] x;
        }
        _Anonymous_182 u;
    }
    int pthread_mutex_consistent(pthread_mutex_t*) @nogc nothrow;
    _GVariantDict* g_variant_dict_new(_GVariant*) @nogc nothrow;
    void g_variant_dict_init(_GVariantDict*, _GVariant*) @nogc nothrow;
    int g_variant_dict_lookup(_GVariantDict*, const(char)*, const(char)*, ...) @nogc nothrow;
    _GVariant* g_variant_dict_lookup_value(_GVariantDict*, const(char)*, const(_GVariantType)*) @nogc nothrow;
    int g_variant_dict_contains(_GVariantDict*, const(char)*) @nogc nothrow;
    void g_variant_dict_insert(_GVariantDict*, const(char)*, const(char)*, ...) @nogc nothrow;
    void g_variant_dict_insert_value(_GVariantDict*, const(char)*, _GVariant*) @nogc nothrow;
    int g_variant_dict_remove(_GVariantDict*, const(char)*) @nogc nothrow;
    void g_variant_dict_clear(_GVariantDict*) @nogc nothrow;
    _GVariant* g_variant_dict_end(_GVariantDict*) @nogc nothrow;
    _GVariantDict* g_variant_dict_ref(_GVariantDict*) @nogc nothrow;
    void g_variant_dict_unref(_GVariantDict*) @nogc nothrow;
    alias GVariantType = _GVariantType;
    struct _GVariantType{};
    int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*) @nogc nothrow;
    int pthread_mutex_getprioceiling(const(pthread_mutex_t)*, int*) @nogc nothrow;
    int pthread_mutex_unlock(pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_timedlock(pthread_mutex_t*, const(timespec)*) @nogc nothrow;
    int pthread_mutex_lock(pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_trylock(pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_destroy(pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_init(pthread_mutex_t*, const(pthread_mutexattr_t)*) @nogc nothrow;
    int __sigsetjmp(__jmp_buf_tag*, int) @nogc nothrow;
    struct __jmp_buf_tag{};
    int g_variant_type_string_is_valid(const(char)*) @nogc nothrow;
    int g_variant_type_string_scan(const(char)*, const(char)*, const(char)**) @nogc nothrow;
    void g_variant_type_free(_GVariantType*) @nogc nothrow;
    _GVariantType* g_variant_type_copy(const(_GVariantType)*) @nogc nothrow;
    _GVariantType* g_variant_type_new(const(char)*) @nogc nothrow;
    c_ulong g_variant_type_get_string_length(const(_GVariantType)*) @nogc nothrow;
    const(char)* g_variant_type_peek_string(const(_GVariantType)*) @nogc nothrow;
    char* g_variant_type_dup_string(const(_GVariantType)*) @nogc nothrow;
    int g_variant_type_is_definite(const(_GVariantType)*) @nogc nothrow;
    int g_variant_type_is_container(const(_GVariantType)*) @nogc nothrow;
    int g_variant_type_is_basic(const(_GVariantType)*) @nogc nothrow;
    int g_variant_type_is_maybe(const(_GVariantType)*) @nogc nothrow;
    int g_variant_type_is_array(const(_GVariantType)*) @nogc nothrow;
    int g_variant_type_is_tuple(const(_GVariantType)*) @nogc nothrow;
    int g_variant_type_is_dict_entry(const(_GVariantType)*) @nogc nothrow;
    int g_variant_type_is_variant(const(_GVariantType)*) @nogc nothrow;
    uint g_variant_type_hash(const(void)*) @nogc nothrow;
    int g_variant_type_equal(const(void)*, const(void)*) @nogc nothrow;
    int g_variant_type_is_subtype_of(const(_GVariantType)*, const(_GVariantType)*) @nogc nothrow;
    const(_GVariantType)* g_variant_type_element(const(_GVariantType)*) @nogc nothrow;
    const(_GVariantType)* g_variant_type_first(const(_GVariantType)*) @nogc nothrow;
    const(_GVariantType)* g_variant_type_next(const(_GVariantType)*) @nogc nothrow;
    c_ulong g_variant_type_n_items(const(_GVariantType)*) @nogc nothrow;
    const(_GVariantType)* g_variant_type_key(const(_GVariantType)*) @nogc nothrow;
    const(_GVariantType)* g_variant_type_value(const(_GVariantType)*) @nogc nothrow;
    _GVariantType* g_variant_type_new_array(const(_GVariantType)*) @nogc nothrow;
    _GVariantType* g_variant_type_new_maybe(const(_GVariantType)*) @nogc nothrow;
    _GVariantType* g_variant_type_new_tuple(const(const(_GVariantType)*)*, int) @nogc nothrow;
    _GVariantType* g_variant_type_new_dict_entry(const(_GVariantType)*, const(_GVariantType)*) @nogc nothrow;
    const(_GVariantType)* g_variant_type_checked_(const(char)*) @nogc nothrow;
    c_ulong g_variant_type_string_get_depth_(const(char)*) @nogc nothrow;
    extern __gshared const(uint) glib_major_version;
    extern __gshared const(uint) glib_minor_version;
    extern __gshared const(uint) glib_micro_version;
    extern __gshared const(uint) glib_interface_age;
    extern __gshared const(uint) glib_binary_age;
    const(char)* glib_check_version(uint, uint, uint) @nogc nothrow;
    void __pthread_unwind_next(__pthread_unwind_buf_t*) @nogc nothrow;
    void __pthread_unregister_cancel(__pthread_unwind_buf_t*) @nogc nothrow;
    void __pthread_register_cancel(__pthread_unwind_buf_t*) @nogc nothrow;
    struct __pthread_cleanup_frame
    {
        void function(void*) __cancel_routine;
        void* __cancel_arg;
        int __do_it;
        int __cancel_type;
    }
    struct __pthread_unwind_buf_t
    {
        static struct _Anonymous_184
        {
            c_long[8] __cancel_jmp_buf;
            int __mask_was_saved;
        }
        _Anonymous_184[1] __cancel_jmp_buf;
        void*[4] __pad;
    }
    void pthread_testcancel() @nogc nothrow;
    int pthread_cancel(c_ulong) @nogc nothrow;
    int pthread_setcanceltype(int, int*) @nogc nothrow;
    int pthread_setcancelstate(int, int*) @nogc nothrow;
    int pthread_once(int*, void function()) @nogc nothrow;
    int pthread_setschedprio(c_ulong, int) @nogc nothrow;
    int pthread_getschedparam(c_ulong, int*, sched_param*) @nogc nothrow;
    int pthread_setschedparam(c_ulong, int, const(sched_param)*) @nogc nothrow;
    int pthread_attr_setstack(pthread_attr_t*, void*, c_ulong) @nogc nothrow;
    int pthread_attr_getstack(const(pthread_attr_t)*, void**, c_ulong*) @nogc nothrow;
    int pthread_attr_setstacksize(pthread_attr_t*, c_ulong) @nogc nothrow;
    int pthread_attr_getstacksize(const(pthread_attr_t)*, c_ulong*) @nogc nothrow;
    int pthread_attr_setstackaddr(pthread_attr_t*, void*) @nogc nothrow;
    int pthread_attr_getstackaddr(const(pthread_attr_t)*, void**) @nogc nothrow;
    int pthread_attr_setscope(pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_getscope(const(pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_setinheritsched(pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_getinheritsched(const(pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_setschedpolicy(pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_getschedpolicy(const(pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_setschedparam(pthread_attr_t*, const(sched_param)*) @nogc nothrow;
    int pthread_attr_getschedparam(const(pthread_attr_t)*, sched_param*) @nogc nothrow;
    int pthread_attr_setguardsize(pthread_attr_t*, c_ulong) @nogc nothrow;
    int pthread_attr_getguardsize(const(pthread_attr_t)*, c_ulong*) @nogc nothrow;
    alias GModuleFlags = _Anonymous_185;
    enum _Anonymous_185
    {
        G_MODULE_BIND_LAZY = 1,
        G_MODULE_BIND_LOCAL = 2,
        G_MODULE_BIND_MASK = 3,
    }
    enum G_MODULE_BIND_LAZY = _Anonymous_185.G_MODULE_BIND_LAZY;
    enum G_MODULE_BIND_LOCAL = _Anonymous_185.G_MODULE_BIND_LOCAL;
    enum G_MODULE_BIND_MASK = _Anonymous_185.G_MODULE_BIND_MASK;
    alias GModule = _GModule;
    struct _GModule{};
    alias GModuleCheckInit = const(char)* function(_GModule*);
    alias GModuleUnload = void function(_GModule*);
    int g_module_supported() @nogc nothrow;
    _GModule* g_module_open(const(char)*, GModuleFlags) @nogc nothrow;
    int g_module_close(_GModule*) @nogc nothrow;
    void g_module_make_resident(_GModule*) @nogc nothrow;
    const(char)* g_module_error() @nogc nothrow;
    int g_module_symbol(_GModule*, const(char)*, void**) @nogc nothrow;
    const(char)* g_module_name(_GModule*) @nogc nothrow;
    char* g_module_build_path(const(char)*, const(char)*) @nogc nothrow;
    int pthread_attr_setdetachstate(pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_getdetachstate(const(pthread_attr_t)*, int*) @nogc nothrow;
    alias GBinding = _GBinding;
    struct _GBinding{};
    alias GBindingTransformFunc = int function(_GBinding*, const(_GValue)*, _GValue*, void*);
    alias GBindingFlags = _Anonymous_186;
    enum _Anonymous_186
    {
        G_BINDING_DEFAULT = 0,
        G_BINDING_BIDIRECTIONAL = 1,
        G_BINDING_SYNC_CREATE = 2,
        G_BINDING_INVERT_BOOLEAN = 4,
    }
    enum G_BINDING_DEFAULT = _Anonymous_186.G_BINDING_DEFAULT;
    enum G_BINDING_BIDIRECTIONAL = _Anonymous_186.G_BINDING_BIDIRECTIONAL;
    enum G_BINDING_SYNC_CREATE = _Anonymous_186.G_BINDING_SYNC_CREATE;
    enum G_BINDING_INVERT_BOOLEAN = _Anonymous_186.G_BINDING_INVERT_BOOLEAN;
    c_ulong g_binding_flags_get_type() @nogc nothrow;
    c_ulong g_binding_get_type() @nogc nothrow;
    GBindingFlags g_binding_get_flags(_GBinding*) @nogc nothrow;
    _GObject* g_binding_get_source(_GBinding*) @nogc nothrow;
    _GObject* g_binding_get_target(_GBinding*) @nogc nothrow;
    const(char)* g_binding_get_source_property(_GBinding*) @nogc nothrow;
    const(char)* g_binding_get_target_property(_GBinding*) @nogc nothrow;
    void g_binding_unbind(_GBinding*) @nogc nothrow;
    _GBinding* g_object_bind_property(void*, const(char)*, void*, const(char)*, GBindingFlags) @nogc nothrow;
    _GBinding* g_object_bind_property_full(void*, const(char)*, void*, const(char)*, GBindingFlags, int function(_GBinding*, const(_GValue)*, _GValue*, void*), int function(_GBinding*, const(_GValue)*, _GValue*, void*), void*, void function(void*)) @nogc nothrow;
    _GBinding* g_object_bind_property_with_closures(void*, const(char)*, void*, const(char)*, GBindingFlags, _GClosure*, _GClosure*) @nogc nothrow;
    int pthread_attr_destroy(pthread_attr_t*) @nogc nothrow;
    alias GBoxedCopyFunc = void* function(void*);
    alias GBoxedFreeFunc = void function(void*);
    void* g_boxed_copy(c_ulong, const(void)*) @nogc nothrow;
    void g_boxed_free(c_ulong, void*) @nogc nothrow;
    void g_value_set_boxed(_GValue*, const(void)*) @nogc nothrow;
    void g_value_set_static_boxed(_GValue*, const(void)*) @nogc nothrow;
    void g_value_take_boxed(_GValue*, const(void)*) @nogc nothrow;
    void g_value_set_boxed_take_ownership(_GValue*, const(void)*) @nogc nothrow;
    void* g_value_get_boxed(const(_GValue)*) @nogc nothrow;
    void* g_value_dup_boxed(const(_GValue)*) @nogc nothrow;
    c_ulong g_boxed_type_register_static(const(char)*, void* function(void*), void function(void*)) @nogc nothrow;
    c_ulong g_closure_get_type() @nogc nothrow;
    c_ulong g_value_get_type() @nogc nothrow;
    int pthread_attr_init(pthread_attr_t*) @nogc nothrow;
    int pthread_equal(c_ulong, c_ulong) @nogc nothrow;
    c_ulong pthread_self() @nogc nothrow;
    alias GClosure = _GClosure;
    struct _GClosure
    {
        import std.bitmanip: bitfields;

        align(4):
        mixin(bitfields!(
            uint, "ref_count", 15,
            uint, "meta_marshal_nouse", 1,
            uint, "n_guards", 1,
            uint, "n_fnotifiers", 2,
            uint, "n_inotifiers", 8,
            uint, "in_inotify", 1,
            uint, "floating", 1,
            uint, "derivative_flag", 1,
            uint, "in_marshal", 1,
            uint, "is_invalid", 1,
        ));
        void function(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) marshal;
        void* data;
        _GClosureNotifyData* notifiers;
    }
    alias GClosureNotifyData = _GClosureNotifyData;
    struct _GClosureNotifyData
    {
        void* data;
        void function(void*, _GClosure*) notify;
    }
    alias GCallback = void function();
    alias GClosureNotify = void function(void*, _GClosure*);
    alias GClosureMarshal = void function(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*);
    alias GVaClosureMarshal = void function(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*);
    alias GCClosure = _GCClosure;
    struct _GCClosure
    {
        _GClosure closure;
        void* callback;
    }
    _GClosure* g_cclosure_new(void function(), void*, void function(void*, _GClosure*)) @nogc nothrow;
    _GClosure* g_cclosure_new_swap(void function(), void*, void function(void*, _GClosure*)) @nogc nothrow;
    _GClosure* g_signal_type_cclosure_new(c_ulong, uint) @nogc nothrow;
    _GClosure* g_closure_ref(_GClosure*) @nogc nothrow;
    void g_closure_sink(_GClosure*) @nogc nothrow;
    void g_closure_unref(_GClosure*) @nogc nothrow;
    _GClosure* g_closure_new_simple(uint, void*) @nogc nothrow;
    void g_closure_add_finalize_notifier(_GClosure*, void*, void function(void*, _GClosure*)) @nogc nothrow;
    void g_closure_remove_finalize_notifier(_GClosure*, void*, void function(void*, _GClosure*)) @nogc nothrow;
    void g_closure_add_invalidate_notifier(_GClosure*, void*, void function(void*, _GClosure*)) @nogc nothrow;
    void g_closure_remove_invalidate_notifier(_GClosure*, void*, void function(void*, _GClosure*)) @nogc nothrow;
    void g_closure_add_marshal_guards(_GClosure*, void*, void function(void*, _GClosure*), void*, void function(void*, _GClosure*)) @nogc nothrow;
    void g_closure_set_marshal(_GClosure*, void function(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*)) @nogc nothrow;
    void g_closure_set_meta_marshal(_GClosure*, void*, void function(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*)) @nogc nothrow;
    void g_closure_invalidate(_GClosure*) @nogc nothrow;
    void g_closure_invoke(_GClosure*, _GValue*, uint, const(_GValue)*, void*) @nogc nothrow;
    void g_cclosure_marshal_generic(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_generic_va(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    int pthread_detach(c_ulong) @nogc nothrow;
    int pthread_join(c_ulong, void**) @nogc nothrow;
    void pthread_exit(void*) @nogc nothrow;
    int pthread_create(c_ulong*, const(pthread_attr_t)*, void* function(void*), void*) @nogc nothrow;
    enum _Anonymous_187
    {
        PTHREAD_CANCEL_DEFERRED = 0,
        PTHREAD_CANCEL_ASYNCHRONOUS = 1,
    }
    enum PTHREAD_CANCEL_DEFERRED = _Anonymous_187.PTHREAD_CANCEL_DEFERRED;
    enum PTHREAD_CANCEL_ASYNCHRONOUS = _Anonymous_187.PTHREAD_CANCEL_ASYNCHRONOUS;
    enum _Anonymous_188
    {
        PTHREAD_CANCEL_ENABLE = 0,
        PTHREAD_CANCEL_DISABLE = 1,
    }
    enum PTHREAD_CANCEL_ENABLE = _Anonymous_188.PTHREAD_CANCEL_ENABLE;
    enum PTHREAD_CANCEL_DISABLE = _Anonymous_188.PTHREAD_CANCEL_DISABLE;
    struct _pthread_cleanup_buffer
    {
        void function(void*) __routine;
        void* __arg;
        int __canceltype;
        _pthread_cleanup_buffer* __prev;
    }
    enum _Anonymous_189
    {
        PTHREAD_PROCESS_PRIVATE = 0,
        PTHREAD_PROCESS_SHARED = 1,
    }
    enum PTHREAD_PROCESS_PRIVATE = _Anonymous_189.PTHREAD_PROCESS_PRIVATE;
    enum PTHREAD_PROCESS_SHARED = _Anonymous_189.PTHREAD_PROCESS_SHARED;
    alias GEnumClass = _GEnumClass;
    struct _GEnumClass
    {
        _GTypeClass g_type_class;
        int minimum;
        int maximum;
        uint n_values;
        _GEnumValue* values;
    }
    alias GFlagsClass = _GFlagsClass;
    struct _GFlagsClass
    {
        _GTypeClass g_type_class;
        uint mask;
        uint n_values;
        _GFlagsValue* values;
    }
    alias GEnumValue = _GEnumValue;
    struct _GEnumValue
    {
        int value;
        const(char)* value_name;
        const(char)* value_nick;
    }
    alias GFlagsValue = _GFlagsValue;
    struct _GFlagsValue
    {
        uint value;
        const(char)* value_name;
        const(char)* value_nick;
    }
    _GEnumValue* g_enum_get_value(_GEnumClass*, int) @nogc nothrow;
    _GEnumValue* g_enum_get_value_by_name(_GEnumClass*, const(char)*) @nogc nothrow;
    _GEnumValue* g_enum_get_value_by_nick(_GEnumClass*, const(char)*) @nogc nothrow;
    _GFlagsValue* g_flags_get_first_value(_GFlagsClass*, uint) @nogc nothrow;
    _GFlagsValue* g_flags_get_value_by_name(_GFlagsClass*, const(char)*) @nogc nothrow;
    _GFlagsValue* g_flags_get_value_by_nick(_GFlagsClass*, const(char)*) @nogc nothrow;
    char* g_enum_to_string(c_ulong, int) @nogc nothrow;
    char* g_flags_to_string(c_ulong, uint) @nogc nothrow;
    void g_value_set_enum(_GValue*, int) @nogc nothrow;
    int g_value_get_enum(const(_GValue)*) @nogc nothrow;
    void g_value_set_flags(_GValue*, uint) @nogc nothrow;
    uint g_value_get_flags(const(_GValue)*) @nogc nothrow;
    c_ulong g_enum_register_static(const(char)*, const(_GEnumValue)*) @nogc nothrow;
    c_ulong g_flags_register_static(const(char)*, const(_GFlagsValue)*) @nogc nothrow;
    void g_enum_complete_type_info(c_ulong, _GTypeInfo*, const(_GEnumValue)*) @nogc nothrow;
    void g_flags_complete_type_info(c_ulong, _GTypeInfo*, const(_GFlagsValue)*) @nogc nothrow;
    enum _Anonymous_190
    {
        PTHREAD_SCOPE_SYSTEM = 0,
        PTHREAD_SCOPE_PROCESS = 1,
    }
    enum PTHREAD_SCOPE_SYSTEM = _Anonymous_190.PTHREAD_SCOPE_SYSTEM;
    enum PTHREAD_SCOPE_PROCESS = _Anonymous_190.PTHREAD_SCOPE_PROCESS;
    enum _Anonymous_191
    {
        PTHREAD_INHERIT_SCHED = 0,
        PTHREAD_EXPLICIT_SCHED = 1,
    }
    enum PTHREAD_INHERIT_SCHED = _Anonymous_191.PTHREAD_INHERIT_SCHED;
    enum PTHREAD_EXPLICIT_SCHED = _Anonymous_191.PTHREAD_EXPLICIT_SCHED;
    enum _Anonymous_192
    {
        PTHREAD_RWLOCK_PREFER_READER_NP = 0,
        PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
        PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
        PTHREAD_RWLOCK_DEFAULT_NP = 0,
    }
    enum PTHREAD_RWLOCK_PREFER_READER_NP = _Anonymous_192.PTHREAD_RWLOCK_PREFER_READER_NP;
    enum PTHREAD_RWLOCK_PREFER_WRITER_NP = _Anonymous_192.PTHREAD_RWLOCK_PREFER_WRITER_NP;
    enum PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = _Anonymous_192.PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP;
    enum PTHREAD_RWLOCK_DEFAULT_NP = _Anonymous_192.PTHREAD_RWLOCK_DEFAULT_NP;
    enum _Anonymous_193
    {
        PTHREAD_PRIO_NONE = 0,
        PTHREAD_PRIO_INHERIT = 1,
        PTHREAD_PRIO_PROTECT = 2,
    }
    enum PTHREAD_PRIO_NONE = _Anonymous_193.PTHREAD_PRIO_NONE;
    enum PTHREAD_PRIO_INHERIT = _Anonymous_193.PTHREAD_PRIO_INHERIT;
    enum PTHREAD_PRIO_PROTECT = _Anonymous_193.PTHREAD_PRIO_PROTECT;
    enum _Anonymous_194
    {
        PTHREAD_MUTEX_STALLED = 0,
        PTHREAD_MUTEX_STALLED_NP = 0,
        PTHREAD_MUTEX_ROBUST = 1,
        PTHREAD_MUTEX_ROBUST_NP = 1,
    }
    enum PTHREAD_MUTEX_STALLED = _Anonymous_194.PTHREAD_MUTEX_STALLED;
    enum PTHREAD_MUTEX_STALLED_NP = _Anonymous_194.PTHREAD_MUTEX_STALLED_NP;
    enum PTHREAD_MUTEX_ROBUST = _Anonymous_194.PTHREAD_MUTEX_ROBUST;
    enum PTHREAD_MUTEX_ROBUST_NP = _Anonymous_194.PTHREAD_MUTEX_ROBUST_NP;
    enum _Anonymous_195
    {
        PTHREAD_MUTEX_TIMED_NP = 0,
        PTHREAD_MUTEX_RECURSIVE_NP = 1,
        PTHREAD_MUTEX_ERRORCHECK_NP = 2,
        PTHREAD_MUTEX_ADAPTIVE_NP = 3,
        PTHREAD_MUTEX_NORMAL = 0,
        PTHREAD_MUTEX_RECURSIVE = 1,
        PTHREAD_MUTEX_ERRORCHECK = 2,
        PTHREAD_MUTEX_DEFAULT = 0,
    }
    enum PTHREAD_MUTEX_TIMED_NP = _Anonymous_195.PTHREAD_MUTEX_TIMED_NP;
    enum PTHREAD_MUTEX_RECURSIVE_NP = _Anonymous_195.PTHREAD_MUTEX_RECURSIVE_NP;
    enum PTHREAD_MUTEX_ERRORCHECK_NP = _Anonymous_195.PTHREAD_MUTEX_ERRORCHECK_NP;
    enum PTHREAD_MUTEX_ADAPTIVE_NP = _Anonymous_195.PTHREAD_MUTEX_ADAPTIVE_NP;
    enum PTHREAD_MUTEX_NORMAL = _Anonymous_195.PTHREAD_MUTEX_NORMAL;
    enum PTHREAD_MUTEX_RECURSIVE = _Anonymous_195.PTHREAD_MUTEX_RECURSIVE;
    enum PTHREAD_MUTEX_ERRORCHECK = _Anonymous_195.PTHREAD_MUTEX_ERRORCHECK;
    enum PTHREAD_MUTEX_DEFAULT = _Anonymous_195.PTHREAD_MUTEX_DEFAULT;
    enum _Anonymous_196
    {
        PTHREAD_CREATE_JOINABLE = 0,
        PTHREAD_CREATE_DETACHED = 1,
    }
    enum PTHREAD_CREATE_JOINABLE = _Anonymous_196.PTHREAD_CREATE_JOINABLE;
    enum PTHREAD_CREATE_DETACHED = _Anonymous_196.PTHREAD_CREATE_DETACHED;
    c_ulong g_date_get_type() @nogc nothrow;
    c_ulong g_strv_get_type() @nogc nothrow;
    c_ulong g_gstring_get_type() @nogc nothrow;
    c_ulong g_hash_table_get_type() @nogc nothrow;
    c_ulong g_array_get_type() @nogc nothrow;
    c_ulong g_byte_array_get_type() @nogc nothrow;
    c_ulong g_ptr_array_get_type() @nogc nothrow;
    c_ulong g_bytes_get_type() @nogc nothrow;
    c_ulong g_variant_type_get_gtype() @nogc nothrow;
    c_ulong g_regex_get_type() @nogc nothrow;
    c_ulong g_match_info_get_type() @nogc nothrow;
    c_ulong g_error_get_type() @nogc nothrow;
    c_ulong g_date_time_get_type() @nogc nothrow;
    c_ulong g_time_zone_get_type() @nogc nothrow;
    c_ulong g_io_channel_get_type() @nogc nothrow;
    c_ulong g_io_condition_get_type() @nogc nothrow;
    c_ulong g_variant_builder_get_type() @nogc nothrow;
    c_ulong g_variant_dict_get_type() @nogc nothrow;
    c_ulong g_key_file_get_type() @nogc nothrow;
    c_ulong g_main_loop_get_type() @nogc nothrow;
    c_ulong g_main_context_get_type() @nogc nothrow;
    c_ulong g_source_get_type() @nogc nothrow;
    c_ulong g_pollfd_get_type() @nogc nothrow;
    c_ulong g_thread_get_type() @nogc nothrow;
    c_ulong g_checksum_get_type() @nogc nothrow;
    c_ulong g_markup_parse_context_get_type() @nogc nothrow;
    c_ulong g_mapped_file_get_type() @nogc nothrow;
    c_ulong g_option_group_get_type() @nogc nothrow;
    c_ulong g_variant_get_gtype() @nogc nothrow;
    void g_cclosure_marshal_VOID__VOID(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__VOIDv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__BOOLEAN(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__BOOLEANv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__CHAR(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__CHARv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__UCHAR(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__UCHARv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__INT(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__INTv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__UINT(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__UINTv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__LONG(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__LONGv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__ULONG(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__ULONGv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__ENUM(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__ENUMv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__FLAGS(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__FLAGSv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__FLOAT(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__FLOATv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__DOUBLE(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__DOUBLEv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__STRING(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__STRINGv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__PARAM(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__PARAMv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__BOXED(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__BOXEDv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__POINTER(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__POINTERv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__OBJECT(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__OBJECTv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__VARIANT(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__VARIANTv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_VOID__UINT_POINTER(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_VOID__UINT_POINTERv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_BOOLEAN__FLAGS(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_BOOLEAN__FLAGSv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_STRING__OBJECT_POINTER(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_STRING__OBJECT_POINTERv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*) @nogc nothrow;
    void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*) @nogc nothrow;
    alias GClosure_autoptr = _GClosure*;
    alias GClosure_listautoptr = _GList*;
    alias GClosure_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GClosure(_GClosure**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GClosure(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GClosure(_GSList**) @nogc nothrow;
    alias GObject_autoptr = _GObject*;
    alias GObject_listautoptr = _GList*;
    alias GObject_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GObject(_GObject**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GObject(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GObject(_GSList**) @nogc nothrow;
    alias GInitiallyUnowned_autoptr = _GObject*;
    alias GInitiallyUnowned_listautoptr = _GList*;
    alias GInitiallyUnowned_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GInitiallyUnowned(_GObject**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GInitiallyUnowned(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GInitiallyUnowned(_GSList**) @nogc nothrow;
    static void glib_auto_cleanup_GValue(_GValue*) @nogc nothrow;
    alias gchararray = char*;
    void g_value_set_string_take_ownership(_GValue*, char*) @nogc nothrow;
    void g_value_take_string(_GValue*, char*) @nogc nothrow;
    char* g_strdup_value_contents(const(_GValue)*) @nogc nothrow;
    c_ulong g_pointer_type_register_static(const(char)*) @nogc nothrow;
    _GVariant* g_value_dup_variant(const(_GValue)*) @nogc nothrow;
    _GVariant* g_value_get_variant(const(_GValue)*) @nogc nothrow;
    void g_value_take_variant(_GValue*, _GVariant*) @nogc nothrow;
    void g_value_set_variant(_GValue*, _GVariant*) @nogc nothrow;
    alias GObject = _GObject;
    struct _GObject
    {
        _GTypeInstance g_type_instance;
        uint ref_count;
        _GData* qdata;
    }
    alias GObjectClass = _GObjectClass;
    struct _GObjectClass
    {
        _GTypeClass g_type_class;
        _GSList* construct_properties;
        _GObject* function(c_ulong, uint, _GObjectConstructParam*) constructor;
        void function(_GObject*, uint, const(_GValue)*, _GParamSpec*) set_property;
        void function(_GObject*, uint, _GValue*, _GParamSpec*) get_property;
        void function(_GObject*) dispose;
        void function(_GObject*) finalize;
        void function(_GObject*, uint, _GParamSpec**) dispatch_properties_changed;
        void function(_GObject*, _GParamSpec*) notify;
        void function(_GObject*) constructed;
        c_ulong flags;
        void*[6] pdummy;
    }
    alias GInitiallyUnowned = _GObject;
    alias GInitiallyUnownedClass = _GObjectClass;
    alias GObjectConstructParam = _GObjectConstructParam;
    struct _GObjectConstructParam
    {
        _GParamSpec* pspec;
        _GValue* value;
    }
    alias GObjectGetPropertyFunc = void function(_GObject*, uint, _GValue*, _GParamSpec*);
    alias GObjectSetPropertyFunc = void function(_GObject*, uint, const(_GValue)*, _GParamSpec*);
    alias GObjectFinalizeFunc = void function(_GObject*);
    alias GWeakNotify = void function(void*, _GObject*);
    c_ulong g_initially_unowned_get_type() @nogc nothrow;
    void g_object_class_install_property(_GObjectClass*, uint, _GParamSpec*) @nogc nothrow;
    _GParamSpec* g_object_class_find_property(_GObjectClass*, const(char)*) @nogc nothrow;
    _GParamSpec** g_object_class_list_properties(_GObjectClass*, uint*) @nogc nothrow;
    void g_object_class_override_property(_GObjectClass*, uint, const(char)*) @nogc nothrow;
    void g_object_class_install_properties(_GObjectClass*, uint, _GParamSpec**) @nogc nothrow;
    void g_object_interface_install_property(void*, _GParamSpec*) @nogc nothrow;
    _GParamSpec* g_object_interface_find_property(void*, const(char)*) @nogc nothrow;
    _GParamSpec** g_object_interface_list_properties(void*, uint*) @nogc nothrow;
    c_ulong g_object_get_type() @nogc nothrow;
    void* g_object_new(c_ulong, const(char)*, ...) @nogc nothrow;
    _GObject* g_object_new_with_properties(c_ulong, uint, const(char)**, const(_GValue)*) @nogc nothrow;
    void* g_object_newv(c_ulong, uint, _GParameter*) @nogc nothrow;
    _GObject* g_object_new_valist(c_ulong, const(char)*, va_list*) @nogc nothrow;
    void g_object_set(void*, const(char)*, ...) @nogc nothrow;
    void g_object_get(void*, const(char)*, ...) @nogc nothrow;
    void* g_object_connect(void*, const(char)*, ...) @nogc nothrow;
    void g_object_disconnect(void*, const(char)*, ...) @nogc nothrow;
    void g_object_setv(_GObject*, uint, const(char)**, const(_GValue)*) @nogc nothrow;
    void g_object_set_valist(_GObject*, const(char)*, va_list*) @nogc nothrow;
    void g_object_getv(_GObject*, uint, const(char)**, _GValue*) @nogc nothrow;
    void g_object_get_valist(_GObject*, const(char)*, va_list*) @nogc nothrow;
    void g_object_set_property(_GObject*, const(char)*, const(_GValue)*) @nogc nothrow;
    void g_object_get_property(_GObject*, const(char)*, _GValue*) @nogc nothrow;
    void g_object_freeze_notify(_GObject*) @nogc nothrow;
    void g_object_notify(_GObject*, const(char)*) @nogc nothrow;
    void g_object_notify_by_pspec(_GObject*, _GParamSpec*) @nogc nothrow;
    void g_object_thaw_notify(_GObject*) @nogc nothrow;
    int g_object_is_floating(void*) @nogc nothrow;
    void* g_object_ref_sink(void*) @nogc nothrow;
    void* g_object_ref(void*) @nogc nothrow;
    void g_object_unref(void*) @nogc nothrow;
    void g_object_weak_ref(_GObject*, void function(void*, _GObject*), void*) @nogc nothrow;
    void g_object_weak_unref(_GObject*, void function(void*, _GObject*), void*) @nogc nothrow;
    void g_object_add_weak_pointer(_GObject*, void**) @nogc nothrow;
    void g_object_remove_weak_pointer(_GObject*, void**) @nogc nothrow;
    alias GToggleNotify = void function(void*, _GObject*, int);
    void g_object_add_toggle_ref(_GObject*, void function(void*, _GObject*, int), void*) @nogc nothrow;
    void g_object_remove_toggle_ref(_GObject*, void function(void*, _GObject*, int), void*) @nogc nothrow;
    void* g_object_get_qdata(_GObject*, uint) @nogc nothrow;
    void g_object_set_qdata(_GObject*, uint, void*) @nogc nothrow;
    void g_object_set_qdata_full(_GObject*, uint, void*, void function(void*)) @nogc nothrow;
    void* g_object_steal_qdata(_GObject*, uint) @nogc nothrow;
    void* g_object_dup_qdata(_GObject*, uint, void* function(void*, void*), void*) @nogc nothrow;
    int g_object_replace_qdata(_GObject*, uint, void*, void*, void function(void*), void function(void*)*) @nogc nothrow;
    void* g_object_get_data(_GObject*, const(char)*) @nogc nothrow;
    void g_object_set_data(_GObject*, const(char)*, void*) @nogc nothrow;
    void g_object_set_data_full(_GObject*, const(char)*, void*, void function(void*)) @nogc nothrow;
    void* g_object_steal_data(_GObject*, const(char)*) @nogc nothrow;
    void* g_object_dup_data(_GObject*, const(char)*, void* function(void*, void*), void*) @nogc nothrow;
    int g_object_replace_data(_GObject*, const(char)*, void*, void*, void function(void*), void function(void*)*) @nogc nothrow;
    void g_object_watch_closure(_GObject*, _GClosure*) @nogc nothrow;
    _GClosure* g_cclosure_new_object(void function(), _GObject*) @nogc nothrow;
    _GClosure* g_cclosure_new_object_swap(void function(), _GObject*) @nogc nothrow;
    _GClosure* g_closure_new_object(uint, _GObject*) @nogc nothrow;
    void g_value_set_object(_GValue*, void*) @nogc nothrow;
    void* g_value_get_object(const(_GValue)*) @nogc nothrow;
    void* g_value_dup_object(const(_GValue)*) @nogc nothrow;
    c_ulong g_signal_connect_object(void*, const(char)*, void function(), void*, GConnectFlags) @nogc nothrow;
    void g_object_force_floating(_GObject*) @nogc nothrow;
    void g_object_run_dispose(_GObject*) @nogc nothrow;
    void g_value_take_object(_GValue*, void*) @nogc nothrow;
    void g_value_set_object_take_ownership(_GValue*, void*) @nogc nothrow;
    c_ulong g_object_compat_control(c_ulong, void*) @nogc nothrow;
    c_ulong g_value_get_gtype(const(_GValue)*) @nogc nothrow;
    pragma(mangle, "g_clear_object") void g_clear_object_(_GObject**) @nogc nothrow;
    pragma(mangle, "g_set_object") static int g_set_object_(_GObject**, _GObject*) @nogc nothrow;
    void g_value_set_gtype(_GValue*, c_ulong) @nogc nothrow;
    pragma(mangle, "g_clear_weak_pointer") static void g_clear_weak_pointer_(void**) @nogc nothrow;
    pragma(mangle, "g_set_weak_pointer") static int g_set_weak_pointer_(void**, _GObject*) @nogc nothrow;
    c_ulong g_gtype_get_type() @nogc nothrow;
    struct GWeakRef
    {
        static union _Anonymous_197
        {
            void* p;
        }
        _Anonymous_197 priv;
    }
    void g_weak_ref_init(GWeakRef*, void*) @nogc nothrow;
    void g_weak_ref_clear(GWeakRef*) @nogc nothrow;
    void* g_weak_ref_get(GWeakRef*) @nogc nothrow;
    void g_weak_ref_set(GWeakRef*, void*) @nogc nothrow;
    void* g_value_get_pointer(const(_GValue)*) @nogc nothrow;
    void g_value_set_pointer(_GValue*, void*) @nogc nothrow;
    char* g_value_dup_string(const(_GValue)*) @nogc nothrow;
    const(char)* g_value_get_string(const(_GValue)*) @nogc nothrow;
    void g_value_set_static_string(_GValue*, const(char)*) @nogc nothrow;
    alias GParamFlags = _Anonymous_198;
    enum _Anonymous_198
    {
        G_PARAM_READABLE = 1,
        G_PARAM_WRITABLE = 2,
        G_PARAM_READWRITE = 3,
        G_PARAM_CONSTRUCT = 4,
        G_PARAM_CONSTRUCT_ONLY = 8,
        G_PARAM_LAX_VALIDATION = 16,
        G_PARAM_STATIC_NAME = 32,
        G_PARAM_PRIVATE = 32,
        G_PARAM_STATIC_NICK = 64,
        G_PARAM_STATIC_BLURB = 128,
        G_PARAM_EXPLICIT_NOTIFY = 1073741824,
        G_PARAM_DEPRECATED = -2147483648,
    }
    enum G_PARAM_READABLE = _Anonymous_198.G_PARAM_READABLE;
    enum G_PARAM_WRITABLE = _Anonymous_198.G_PARAM_WRITABLE;
    enum G_PARAM_READWRITE = _Anonymous_198.G_PARAM_READWRITE;
    enum G_PARAM_CONSTRUCT = _Anonymous_198.G_PARAM_CONSTRUCT;
    enum G_PARAM_CONSTRUCT_ONLY = _Anonymous_198.G_PARAM_CONSTRUCT_ONLY;
    enum G_PARAM_LAX_VALIDATION = _Anonymous_198.G_PARAM_LAX_VALIDATION;
    enum G_PARAM_STATIC_NAME = _Anonymous_198.G_PARAM_STATIC_NAME;
    enum G_PARAM_PRIVATE = _Anonymous_198.G_PARAM_PRIVATE;
    enum G_PARAM_STATIC_NICK = _Anonymous_198.G_PARAM_STATIC_NICK;
    enum G_PARAM_STATIC_BLURB = _Anonymous_198.G_PARAM_STATIC_BLURB;
    enum G_PARAM_EXPLICIT_NOTIFY = _Anonymous_198.G_PARAM_EXPLICIT_NOTIFY;
    enum G_PARAM_DEPRECATED = _Anonymous_198.G_PARAM_DEPRECATED;
    void g_value_set_string(_GValue*, const(char)*) @nogc nothrow;
    alias GParamSpec = _GParamSpec;
    struct _GParamSpec
    {
        _GTypeInstance g_type_instance;
        const(char)* name;
        GParamFlags flags;
        c_ulong value_type;
        c_ulong owner_type;
        char* _nick;
        char* _blurb;
        _GData* qdata;
        uint ref_count;
        uint param_id;
    }
    alias GParamSpecClass = _GParamSpecClass;
    struct _GParamSpecClass
    {
        _GTypeClass g_type_class;
        c_ulong value_type;
        void function(_GParamSpec*) finalize;
        void function(_GParamSpec*, _GValue*) value_set_default;
        int function(_GParamSpec*, _GValue*) value_validate;
        int function(_GParamSpec*, const(_GValue)*, const(_GValue)*) values_cmp;
        void*[4] dummy;
    }
    alias GParameter = _GParameter;
    struct _GParameter
    {
        const(char)* name;
        _GValue value;
    }
    alias GParamSpecPool = _GParamSpecPool;
    struct _GParamSpecPool{};
    _GParamSpec* g_param_spec_ref(_GParamSpec*) @nogc nothrow;
    void g_param_spec_unref(_GParamSpec*) @nogc nothrow;
    void g_param_spec_sink(_GParamSpec*) @nogc nothrow;
    _GParamSpec* g_param_spec_ref_sink(_GParamSpec*) @nogc nothrow;
    void* g_param_spec_get_qdata(_GParamSpec*, uint) @nogc nothrow;
    void g_param_spec_set_qdata(_GParamSpec*, uint, void*) @nogc nothrow;
    void g_param_spec_set_qdata_full(_GParamSpec*, uint, void*, void function(void*)) @nogc nothrow;
    void* g_param_spec_steal_qdata(_GParamSpec*, uint) @nogc nothrow;
    _GParamSpec* g_param_spec_get_redirect_target(_GParamSpec*) @nogc nothrow;
    void g_param_value_set_default(_GParamSpec*, _GValue*) @nogc nothrow;
    int g_param_value_defaults(_GParamSpec*, _GValue*) @nogc nothrow;
    int g_param_value_validate(_GParamSpec*, _GValue*) @nogc nothrow;
    int g_param_value_convert(_GParamSpec*, const(_GValue)*, _GValue*, int) @nogc nothrow;
    int g_param_values_cmp(_GParamSpec*, const(_GValue)*, const(_GValue)*) @nogc nothrow;
    const(char)* g_param_spec_get_name(_GParamSpec*) @nogc nothrow;
    const(char)* g_param_spec_get_nick(_GParamSpec*) @nogc nothrow;
    const(char)* g_param_spec_get_blurb(_GParamSpec*) @nogc nothrow;
    void g_value_set_param(_GValue*, _GParamSpec*) @nogc nothrow;
    _GParamSpec* g_value_get_param(const(_GValue)*) @nogc nothrow;
    _GParamSpec* g_value_dup_param(const(_GValue)*) @nogc nothrow;
    void g_value_take_param(_GValue*, _GParamSpec*) @nogc nothrow;
    void g_value_set_param_take_ownership(_GValue*, _GParamSpec*) @nogc nothrow;
    const(_GValue)* g_param_spec_get_default_value(_GParamSpec*) @nogc nothrow;
    uint g_param_spec_get_name_quark(_GParamSpec*) @nogc nothrow;
    alias GParamSpecTypeInfo = _GParamSpecTypeInfo;
    struct _GParamSpecTypeInfo
    {
        ushort instance_size;
        ushort n_preallocs;
        void function(_GParamSpec*) instance_init;
        c_ulong value_type;
        void function(_GParamSpec*) finalize;
        void function(_GParamSpec*, _GValue*) value_set_default;
        int function(_GParamSpec*, _GValue*) value_validate;
        int function(_GParamSpec*, const(_GValue)*, const(_GValue)*) values_cmp;
    }
    c_ulong g_param_type_register_static(const(char)*, const(_GParamSpecTypeInfo)*) @nogc nothrow;
    c_ulong _g_param_type_register_static_constant(const(char)*, const(_GParamSpecTypeInfo)*, c_ulong) @nogc nothrow;
    void* g_param_spec_internal(c_ulong, const(char)*, const(char)*, const(char)*, GParamFlags) @nogc nothrow;
    _GParamSpecPool* g_param_spec_pool_new(int) @nogc nothrow;
    void g_param_spec_pool_insert(_GParamSpecPool*, _GParamSpec*, c_ulong) @nogc nothrow;
    void g_param_spec_pool_remove(_GParamSpecPool*, _GParamSpec*) @nogc nothrow;
    _GParamSpec* g_param_spec_pool_lookup(_GParamSpecPool*, const(char)*, c_ulong, int) @nogc nothrow;
    _GList* g_param_spec_pool_list_owned(_GParamSpecPool*, c_ulong) @nogc nothrow;
    _GParamSpec** g_param_spec_pool_list(_GParamSpecPool*, c_ulong, uint*) @nogc nothrow;
    double g_value_get_double(const(_GValue)*) @nogc nothrow;
    void g_value_set_double(_GValue*, double) @nogc nothrow;
    float g_value_get_float(const(_GValue)*) @nogc nothrow;
    void g_value_set_float(_GValue*, float) @nogc nothrow;
    c_ulong g_value_get_uint64(const(_GValue)*) @nogc nothrow;
    void g_value_set_uint64(_GValue*, c_ulong) @nogc nothrow;
    c_long g_value_get_int64(const(_GValue)*) @nogc nothrow;
    void g_value_set_int64(_GValue*, c_long) @nogc nothrow;
    c_ulong g_value_get_ulong(const(_GValue)*) @nogc nothrow;
    void g_value_set_ulong(_GValue*, c_ulong) @nogc nothrow;
    c_long g_value_get_long(const(_GValue)*) @nogc nothrow;
    void g_value_set_long(_GValue*, c_long) @nogc nothrow;
    uint g_value_get_uint(const(_GValue)*) @nogc nothrow;
    void g_value_set_uint(_GValue*, uint) @nogc nothrow;
    int g_value_get_int(const(_GValue)*) @nogc nothrow;
    void g_value_set_int(_GValue*, int) @nogc nothrow;
    int g_value_get_boolean(const(_GValue)*) @nogc nothrow;
    void g_value_set_boolean(_GValue*, int) @nogc nothrow;
    ubyte g_value_get_uchar(const(_GValue)*) @nogc nothrow;
    void g_value_set_uchar(_GValue*, ubyte) @nogc nothrow;
    byte g_value_get_schar(const(_GValue)*) @nogc nothrow;
    void g_value_set_schar(_GValue*, byte) @nogc nothrow;
    char g_value_get_char(const(_GValue)*) @nogc nothrow;
    void g_value_set_char(_GValue*, char) @nogc nothrow;
    _GValueArray* g_value_array_sort_with_data(_GValueArray*, int function(const(void)*, const(void)*, void*), void*) @nogc nothrow;
    _GValueArray* g_value_array_sort(_GValueArray*, int function(const(void)*, const(void)*)) @nogc nothrow;
    _GValueArray* g_value_array_remove(_GValueArray*, uint) @nogc nothrow;
    _GValueArray* g_value_array_insert(_GValueArray*, uint, const(_GValue)*) @nogc nothrow;
    _GValueArray* g_value_array_append(_GValueArray*, const(_GValue)*) @nogc nothrow;
    _GValueArray* g_value_array_prepend(_GValueArray*, const(_GValue)*) @nogc nothrow;
    _GValueArray* g_value_array_copy(const(_GValueArray)*) @nogc nothrow;
    void g_value_array_free(_GValueArray*) @nogc nothrow;
    _GValueArray* g_value_array_new(uint) @nogc nothrow;
    _GValue* g_value_array_get_nth(_GValueArray*, uint) @nogc nothrow;
    alias GParamSpecChar = _GParamSpecChar;
    struct _GParamSpecChar
    {
        _GParamSpec parent_instance;
        byte minimum;
        byte maximum;
        byte default_value;
    }
    alias GParamSpecUChar = _GParamSpecUChar;
    struct _GParamSpecUChar
    {
        _GParamSpec parent_instance;
        ubyte minimum;
        ubyte maximum;
        ubyte default_value;
    }
    alias GParamSpecBoolean = _GParamSpecBoolean;
    struct _GParamSpecBoolean
    {
        _GParamSpec parent_instance;
        int default_value;
    }
    alias GParamSpecInt = _GParamSpecInt;
    struct _GParamSpecInt
    {
        _GParamSpec parent_instance;
        int minimum;
        int maximum;
        int default_value;
    }
    alias GParamSpecUInt = _GParamSpecUInt;
    struct _GParamSpecUInt
    {
        _GParamSpec parent_instance;
        uint minimum;
        uint maximum;
        uint default_value;
    }
    alias GParamSpecLong = _GParamSpecLong;
    struct _GParamSpecLong
    {
        _GParamSpec parent_instance;
        c_long minimum;
        c_long maximum;
        c_long default_value;
    }
    alias GParamSpecULong = _GParamSpecULong;
    struct _GParamSpecULong
    {
        _GParamSpec parent_instance;
        c_ulong minimum;
        c_ulong maximum;
        c_ulong default_value;
    }
    alias GParamSpecInt64 = _GParamSpecInt64;
    struct _GParamSpecInt64
    {
        _GParamSpec parent_instance;
        c_long minimum;
        c_long maximum;
        c_long default_value;
    }
    alias GParamSpecUInt64 = _GParamSpecUInt64;
    struct _GParamSpecUInt64
    {
        _GParamSpec parent_instance;
        c_ulong minimum;
        c_ulong maximum;
        c_ulong default_value;
    }
    alias GParamSpecUnichar = _GParamSpecUnichar;
    struct _GParamSpecUnichar
    {
        _GParamSpec parent_instance;
        uint default_value;
    }
    alias GParamSpecEnum = _GParamSpecEnum;
    struct _GParamSpecEnum
    {
        _GParamSpec parent_instance;
        _GEnumClass* enum_class;
        int default_value;
    }
    alias GParamSpecFlags = _GParamSpecFlags;
    struct _GParamSpecFlags
    {
        _GParamSpec parent_instance;
        _GFlagsClass* flags_class;
        uint default_value;
    }
    alias GParamSpecFloat = _GParamSpecFloat;
    struct _GParamSpecFloat
    {
        _GParamSpec parent_instance;
        float minimum;
        float maximum;
        float default_value;
        float epsilon;
    }
    alias GParamSpecDouble = _GParamSpecDouble;
    struct _GParamSpecDouble
    {
        _GParamSpec parent_instance;
        double minimum;
        double maximum;
        double default_value;
        double epsilon;
    }
    alias GParamSpecString = _GParamSpecString;
    struct _GParamSpecString
    {
        import std.bitmanip: bitfields;

        align(4):
        _GParamSpec parent_instance;
        char* default_value;
        char* cset_first;
        char* cset_nth;
        char substitutor;
        mixin(bitfields!(
            uint, "null_fold_if_empty", 1,
            uint, "ensure_non_null", 1,
            uint, "_padding_0", 6
        ));
    }
    alias GParamSpecParam = _GParamSpecParam;
    struct _GParamSpecParam
    {
        _GParamSpec parent_instance;
    }
    alias GParamSpecBoxed = _GParamSpecBoxed;
    struct _GParamSpecBoxed
    {
        _GParamSpec parent_instance;
    }
    alias GParamSpecPointer = _GParamSpecPointer;
    struct _GParamSpecPointer
    {
        _GParamSpec parent_instance;
    }
    alias GParamSpecValueArray = _GParamSpecValueArray;
    struct _GParamSpecValueArray
    {
        _GParamSpec parent_instance;
        _GParamSpec* element_spec;
        uint fixed_n_elements;
    }
    alias GParamSpecObject = _GParamSpecObject;
    struct _GParamSpecObject
    {
        _GParamSpec parent_instance;
    }
    alias GParamSpecOverride = _GParamSpecOverride;
    struct _GParamSpecOverride
    {
        _GParamSpec parent_instance;
        _GParamSpec* overridden;
    }
    alias GParamSpecGType = _GParamSpecGType;
    struct _GParamSpecGType
    {
        _GParamSpec parent_instance;
        c_ulong is_a_type;
    }
    alias GParamSpecVariant = _GParamSpecVariant;
    struct _GParamSpecVariant
    {
        _GParamSpec parent_instance;
        _GVariantType* type;
        _GVariant* default_value;
        void*[4] padding;
    }
    _GParamSpec* g_param_spec_char(const(char)*, const(char)*, const(char)*, byte, byte, byte, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_uchar(const(char)*, const(char)*, const(char)*, ubyte, ubyte, ubyte, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_boolean(const(char)*, const(char)*, const(char)*, int, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_int(const(char)*, const(char)*, const(char)*, int, int, int, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_uint(const(char)*, const(char)*, const(char)*, uint, uint, uint, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_long(const(char)*, const(char)*, const(char)*, c_long, c_long, c_long, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_ulong(const(char)*, const(char)*, const(char)*, c_ulong, c_ulong, c_ulong, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_int64(const(char)*, const(char)*, const(char)*, c_long, c_long, c_long, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_uint64(const(char)*, const(char)*, const(char)*, c_ulong, c_ulong, c_ulong, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_unichar(const(char)*, const(char)*, const(char)*, uint, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_enum(const(char)*, const(char)*, const(char)*, c_ulong, int, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_flags(const(char)*, const(char)*, const(char)*, c_ulong, uint, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_float(const(char)*, const(char)*, const(char)*, float, float, float, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_double(const(char)*, const(char)*, const(char)*, double, double, double, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_string(const(char)*, const(char)*, const(char)*, const(char)*, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_param(const(char)*, const(char)*, const(char)*, c_ulong, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_boxed(const(char)*, const(char)*, const(char)*, c_ulong, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_pointer(const(char)*, const(char)*, const(char)*, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_value_array(const(char)*, const(char)*, const(char)*, _GParamSpec*, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_object(const(char)*, const(char)*, const(char)*, c_ulong, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_override(const(char)*, _GParamSpec*) @nogc nothrow;
    _GParamSpec* g_param_spec_gtype(const(char)*, const(char)*, const(char)*, c_ulong, GParamFlags) @nogc nothrow;
    _GParamSpec* g_param_spec_variant(const(char)*, const(char)*, const(char)*, const(_GVariantType)*, _GVariant*, GParamFlags) @nogc nothrow;
    extern __gshared c_ulong* g_param_spec_types;
    alias GSignalQuery = _GSignalQuery;
    struct _GSignalQuery
    {
        uint signal_id;
        const(char)* signal_name;
        c_ulong itype;
        GSignalFlags signal_flags;
        c_ulong return_type;
        uint n_params;
        const(c_ulong)* param_types;
    }
    alias GSignalInvocationHint = _GSignalInvocationHint;
    struct _GSignalInvocationHint
    {
        uint signal_id;
        uint detail;
        GSignalFlags run_type;
    }
    alias GSignalCMarshaller = void function(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*);
    alias GSignalCVaMarshaller = void function(_GClosure*, _GValue*, void*, va_list*, void*, int, c_ulong*);
    alias GSignalEmissionHook = int function(_GSignalInvocationHint*, uint, const(_GValue)*, void*);
    alias GSignalAccumulator = int function(_GSignalInvocationHint*, _GValue*, const(_GValue)*, void*);
    alias GSignalFlags = _Anonymous_199;
    enum _Anonymous_199
    {
        G_SIGNAL_RUN_FIRST = 1,
        G_SIGNAL_RUN_LAST = 2,
        G_SIGNAL_RUN_CLEANUP = 4,
        G_SIGNAL_NO_RECURSE = 8,
        G_SIGNAL_DETAILED = 16,
        G_SIGNAL_ACTION = 32,
        G_SIGNAL_NO_HOOKS = 64,
        G_SIGNAL_MUST_COLLECT = 128,
        G_SIGNAL_DEPRECATED = 256,
    }
    enum G_SIGNAL_RUN_FIRST = _Anonymous_199.G_SIGNAL_RUN_FIRST;
    enum G_SIGNAL_RUN_LAST = _Anonymous_199.G_SIGNAL_RUN_LAST;
    enum G_SIGNAL_RUN_CLEANUP = _Anonymous_199.G_SIGNAL_RUN_CLEANUP;
    enum G_SIGNAL_NO_RECURSE = _Anonymous_199.G_SIGNAL_NO_RECURSE;
    enum G_SIGNAL_DETAILED = _Anonymous_199.G_SIGNAL_DETAILED;
    enum G_SIGNAL_ACTION = _Anonymous_199.G_SIGNAL_ACTION;
    enum G_SIGNAL_NO_HOOKS = _Anonymous_199.G_SIGNAL_NO_HOOKS;
    enum G_SIGNAL_MUST_COLLECT = _Anonymous_199.G_SIGNAL_MUST_COLLECT;
    enum G_SIGNAL_DEPRECATED = _Anonymous_199.G_SIGNAL_DEPRECATED;
    c_ulong g_value_array_get_type() @nogc nothrow;
    alias GConnectFlags = _Anonymous_200;
    enum _Anonymous_200
    {
        G_CONNECT_AFTER = 1,
        G_CONNECT_SWAPPED = 2,
    }
    enum G_CONNECT_AFTER = _Anonymous_200.G_CONNECT_AFTER;
    enum G_CONNECT_SWAPPED = _Anonymous_200.G_CONNECT_SWAPPED;
    alias GSignalMatchType = _Anonymous_201;
    enum _Anonymous_201
    {
        G_SIGNAL_MATCH_ID = 1,
        G_SIGNAL_MATCH_DETAIL = 2,
        G_SIGNAL_MATCH_CLOSURE = 4,
        G_SIGNAL_MATCH_FUNC = 8,
        G_SIGNAL_MATCH_DATA = 16,
        G_SIGNAL_MATCH_UNBLOCKED = 32,
    }
    enum G_SIGNAL_MATCH_ID = _Anonymous_201.G_SIGNAL_MATCH_ID;
    enum G_SIGNAL_MATCH_DETAIL = _Anonymous_201.G_SIGNAL_MATCH_DETAIL;
    enum G_SIGNAL_MATCH_CLOSURE = _Anonymous_201.G_SIGNAL_MATCH_CLOSURE;
    enum G_SIGNAL_MATCH_FUNC = _Anonymous_201.G_SIGNAL_MATCH_FUNC;
    enum G_SIGNAL_MATCH_DATA = _Anonymous_201.G_SIGNAL_MATCH_DATA;
    enum G_SIGNAL_MATCH_UNBLOCKED = _Anonymous_201.G_SIGNAL_MATCH_UNBLOCKED;
    struct _GValueArray
    {
        uint n_values;
        _GValue* values;
        uint n_prealloced;
    }
    uint g_signal_newv(const(char)*, c_ulong, GSignalFlags, _GClosure*, int function(_GSignalInvocationHint*, _GValue*, const(_GValue)*, void*), void*, void function(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*), c_ulong, uint, c_ulong*) @nogc nothrow;
    uint g_signal_new_valist(const(char)*, c_ulong, GSignalFlags, _GClosure*, int function(_GSignalInvocationHint*, _GValue*, const(_GValue)*, void*), void*, void function(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*), c_ulong, uint, va_list*) @nogc nothrow;
    uint g_signal_new(const(char)*, c_ulong, GSignalFlags, uint, int function(_GSignalInvocationHint*, _GValue*, const(_GValue)*, void*), void*, void function(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*), c_ulong, uint, ...) @nogc nothrow;
    uint g_signal_new_class_handler(const(char)*, c_ulong, GSignalFlags, void function(), int function(_GSignalInvocationHint*, _GValue*, const(_GValue)*, void*), void*, void function(_GClosure*, _GValue*, uint, const(_GValue)*, void*, void*), c_ulong, uint, ...) @nogc nothrow;
    void g_signal_set_va_marshaller(uint, c_ulong, void function(_GClosure*, _GValue*, void*, va_list[1], void*, int, c_ulong*)) @nogc nothrow;
    void g_signal_emitv(const(_GValue)*, uint, uint, _GValue*) @nogc nothrow;
    void g_signal_emit_valist(void*, uint, uint, va_list*) @nogc nothrow;
    void g_signal_emit(void*, uint, uint, ...) @nogc nothrow;
    void g_signal_emit_by_name(void*, const(char)*, ...) @nogc nothrow;
    uint g_signal_lookup(const(char)*, c_ulong) @nogc nothrow;
    const(char)* g_signal_name(uint) @nogc nothrow;
    void g_signal_query(uint, _GSignalQuery*) @nogc nothrow;
    uint* g_signal_list_ids(c_ulong, uint*) @nogc nothrow;
    int g_signal_parse_name(const(char)*, c_ulong, uint*, uint*, int) @nogc nothrow;
    _GSignalInvocationHint* g_signal_get_invocation_hint(void*) @nogc nothrow;
    void g_signal_stop_emission(void*, uint, uint) @nogc nothrow;
    void g_signal_stop_emission_by_name(void*, const(char)*) @nogc nothrow;
    c_ulong g_signal_add_emission_hook(uint, uint, int function(_GSignalInvocationHint*, uint, const(_GValue)*, void*), void*, void function(void*)) @nogc nothrow;
    void g_signal_remove_emission_hook(uint, c_ulong) @nogc nothrow;
    int g_signal_has_handler_pending(void*, uint, uint, int) @nogc nothrow;
    c_ulong g_signal_connect_closure_by_id(void*, uint, uint, _GClosure*, int) @nogc nothrow;
    c_ulong g_signal_connect_closure(void*, const(char)*, _GClosure*, int) @nogc nothrow;
    c_ulong g_signal_connect_data(void*, const(char)*, void function(), void*, void function(void*, _GClosure*), GConnectFlags) @nogc nothrow;
    void g_signal_handler_block(void*, c_ulong) @nogc nothrow;
    void g_signal_handler_unblock(void*, c_ulong) @nogc nothrow;
    void g_signal_handler_disconnect(void*, c_ulong) @nogc nothrow;
    int g_signal_handler_is_connected(void*, c_ulong) @nogc nothrow;
    c_ulong g_signal_handler_find(void*, GSignalMatchType, uint, uint, _GClosure*, void*, void*) @nogc nothrow;
    uint g_signal_handlers_block_matched(void*, GSignalMatchType, uint, uint, _GClosure*, void*, void*) @nogc nothrow;
    uint g_signal_handlers_unblock_matched(void*, GSignalMatchType, uint, uint, _GClosure*, void*, void*) @nogc nothrow;
    uint g_signal_handlers_disconnect_matched(void*, GSignalMatchType, uint, uint, _GClosure*, void*, void*) @nogc nothrow;
    void g_signal_override_class_closure(uint, c_ulong, _GClosure*) @nogc nothrow;
    void g_signal_override_class_handler(const(char)*, c_ulong, void function()) @nogc nothrow;
    void g_signal_chain_from_overridden(const(_GValue)*, _GValue*) @nogc nothrow;
    void g_signal_chain_from_overridden_handler(void*, ...) @nogc nothrow;
    alias GValueArray = _GValueArray;
    void g_value_register_transform_func(c_ulong, c_ulong, void function(const(_GValue)*, _GValue*)) @nogc nothrow;
    int g_signal_accumulator_true_handled(_GSignalInvocationHint*, _GValue*, const(_GValue)*, void*) @nogc nothrow;
    int g_signal_accumulator_first_wins(_GSignalInvocationHint*, _GValue*, const(_GValue)*, void*) @nogc nothrow;
    void g_signal_handlers_destroy(void*) @nogc nothrow;
    void _g_signals_destroy(c_ulong) @nogc nothrow;
    void g_source_set_closure(_GSource*, _GClosure*) @nogc nothrow;
    void g_source_set_dummy_callback(_GSource*) @nogc nothrow;
    int g_value_transform(const(_GValue)*, _GValue*) @nogc nothrow;
    int g_value_type_transformable(c_ulong, c_ulong) @nogc nothrow;
    int g_value_type_compatible(c_ulong, c_ulong) @nogc nothrow;
    void* g_value_peek_pointer(const(_GValue)*) @nogc nothrow;
    int g_value_fits_pointer(const(_GValue)*) @nogc nothrow;
    void g_value_init_from_instance(_GValue*, void*) @nogc nothrow;
    void g_value_set_instance(_GValue*, void*) @nogc nothrow;
    void g_value_unset(_GValue*) @nogc nothrow;
    _GValue* g_value_reset(_GValue*) @nogc nothrow;
    void g_value_copy(const(_GValue)*, _GValue*) @nogc nothrow;
    _GValue* g_value_init(_GValue*, c_ulong) @nogc nothrow;
    alias GValueTransform = void function(const(_GValue)*, _GValue*);
    void g_type_plugin_complete_interface_info(_GTypePlugin*, c_ulong, c_ulong, _GInterfaceInfo*) @nogc nothrow;
    void g_type_plugin_complete_type_info(_GTypePlugin*, c_ulong, _GTypeInfo*, _GTypeValueTable*) @nogc nothrow;
    void g_type_plugin_unuse(_GTypePlugin*) @nogc nothrow;
    void g_type_plugin_use(_GTypePlugin*) @nogc nothrow;
    c_ulong g_type_plugin_get_type() @nogc nothrow;
    alias GTypePluginCompleteInterfaceInfo = void function(_GTypePlugin*, c_ulong, c_ulong, _GInterfaceInfo*);
    alias GTypePluginCompleteTypeInfo = void function(_GTypePlugin*, c_ulong, _GTypeInfo*, _GTypeValueTable*);
    alias GTypePluginUnuse = void function(_GTypePlugin*);
    alias GTypePluginUse = void function(_GTypePlugin*);
    struct _GTypePluginClass
    {
        _GTypeInterface base_iface;
        void function(_GTypePlugin*) use_plugin;
        void function(_GTypePlugin*) unuse_plugin;
        void function(_GTypePlugin*, c_ulong, _GTypeInfo*, _GTypeValueTable*) complete_type_info;
        void function(_GTypePlugin*, c_ulong, c_ulong, _GInterfaceInfo*) complete_interface_info;
    }
    alias GTypePluginClass = _GTypePluginClass;
    alias GType = c_ulong;
    alias GValue = _GValue;
    struct _GValue
    {
        c_ulong g_type;
        static union _Anonymous_202
        {
            int v_int;
            uint v_uint;
            c_long v_long;
            c_ulong v_ulong;
            c_long v_int64;
            c_ulong v_uint64;
            float v_float;
            double v_double;
            void* v_pointer;
        }
        _Anonymous_202[2] data;
    }
    alias GTypeCValue = _GTypeCValue;
    union _GTypeCValue;
    alias GTypePlugin = _GTypePlugin;
    struct _GTypePlugin{};
    alias GTypeClass = _GTypeClass;
    struct _GTypeClass
    {
        c_ulong g_type;
    }
    alias GTypeInterface = _GTypeInterface;
    struct _GTypeInterface
    {
        c_ulong g_type;
        c_ulong g_instance_type;
    }
    alias GTypeInstance = _GTypeInstance;
    struct _GTypeInstance
    {
        _GTypeClass* g_class;
    }
    alias GTypeInfo = _GTypeInfo;
    struct _GTypeInfo
    {
        ushort class_size;
        void function(void*) base_init;
        void function(void*) base_finalize;
        void function(void*, void*) class_init;
        void function(void*, void*) class_finalize;
        const(void)* class_data;
        ushort instance_size;
        ushort n_preallocs;
        void function(_GTypeInstance*, void*) instance_init;
        const(_GTypeValueTable)* value_table;
    }
    alias GTypeFundamentalInfo = _GTypeFundamentalInfo;
    struct _GTypeFundamentalInfo
    {
        GTypeFundamentalFlags type_flags;
    }
    alias GInterfaceInfo = _GInterfaceInfo;
    struct _GInterfaceInfo
    {
        void function(void*, void*) interface_init;
        void function(void*, void*) interface_finalize;
        void* interface_data;
    }
    alias GTypeValueTable = _GTypeValueTable;
    struct _GTypeValueTable
    {
        void function(_GValue*) value_init;
        void function(_GValue*) value_free;
        void function(const(_GValue)*, _GValue*) value_copy;
        void* function(const(_GValue)*) value_peek_pointer;
        const(char)* collect_format;
        char* function(_GValue*, uint, _GTypeCValue*, uint) collect_value;
        const(char)* lcopy_format;
        char* function(const(_GValue)*, uint, _GTypeCValue*, uint) lcopy_value;
    }
    alias GTypeQuery = _GTypeQuery;
    struct _GTypeQuery
    {
        c_ulong type;
        const(char)* type_name;
        uint class_size;
        uint instance_size;
    }
    c_ulong g_type_module_register_flags(_GTypeModule*, const(char)*, const(_GFlagsValue)*) @nogc nothrow;
    c_ulong g_type_module_register_enum(_GTypeModule*, const(char)*, const(_GEnumValue)*) @nogc nothrow;
    void g_type_module_add_interface(_GTypeModule*, c_ulong, c_ulong, const(_GInterfaceInfo)*) @nogc nothrow;
    c_ulong g_type_module_register_type(_GTypeModule*, c_ulong, const(char)*, const(_GTypeInfo)*, GTypeFlags) @nogc nothrow;
    void g_type_module_set_name(_GTypeModule*, const(char)*) @nogc nothrow;
    alias GTypeDebugFlags = _Anonymous_203;
    enum _Anonymous_203
    {
        G_TYPE_DEBUG_NONE = 0,
        G_TYPE_DEBUG_OBJECTS = 1,
        G_TYPE_DEBUG_SIGNALS = 2,
        G_TYPE_DEBUG_INSTANCE_COUNT = 4,
        G_TYPE_DEBUG_MASK = 7,
    }
    enum G_TYPE_DEBUG_NONE = _Anonymous_203.G_TYPE_DEBUG_NONE;
    enum G_TYPE_DEBUG_OBJECTS = _Anonymous_203.G_TYPE_DEBUG_OBJECTS;
    enum G_TYPE_DEBUG_SIGNALS = _Anonymous_203.G_TYPE_DEBUG_SIGNALS;
    enum G_TYPE_DEBUG_INSTANCE_COUNT = _Anonymous_203.G_TYPE_DEBUG_INSTANCE_COUNT;
    enum G_TYPE_DEBUG_MASK = _Anonymous_203.G_TYPE_DEBUG_MASK;
    void g_type_init() @nogc nothrow;
    void g_type_init_with_debug_flags(GTypeDebugFlags) @nogc nothrow;
    const(char)* g_type_name(c_ulong) @nogc nothrow;
    uint g_type_qname(c_ulong) @nogc nothrow;
    c_ulong g_type_from_name(const(char)*) @nogc nothrow;
    c_ulong g_type_parent(c_ulong) @nogc nothrow;
    uint g_type_depth(c_ulong) @nogc nothrow;
    c_ulong g_type_next_base(c_ulong, c_ulong) @nogc nothrow;
    int g_type_is_a(c_ulong, c_ulong) @nogc nothrow;
    void* g_type_class_ref(c_ulong) @nogc nothrow;
    void* g_type_class_peek(c_ulong) @nogc nothrow;
    void* g_type_class_peek_static(c_ulong) @nogc nothrow;
    void g_type_class_unref(void*) @nogc nothrow;
    void* g_type_class_peek_parent(void*) @nogc nothrow;
    void* g_type_interface_peek(void*, c_ulong) @nogc nothrow;
    void* g_type_interface_peek_parent(void*) @nogc nothrow;
    void* g_type_default_interface_ref(c_ulong) @nogc nothrow;
    void* g_type_default_interface_peek(c_ulong) @nogc nothrow;
    void g_type_default_interface_unref(void*) @nogc nothrow;
    c_ulong* g_type_children(c_ulong, uint*) @nogc nothrow;
    c_ulong* g_type_interfaces(c_ulong, uint*) @nogc nothrow;
    void g_type_set_qdata(c_ulong, uint, void*) @nogc nothrow;
    void* g_type_get_qdata(c_ulong, uint) @nogc nothrow;
    void g_type_query(c_ulong, _GTypeQuery*) @nogc nothrow;
    int g_type_get_instance_count(c_ulong) @nogc nothrow;
    alias GBaseInitFunc = void function(void*);
    alias GBaseFinalizeFunc = void function(void*);
    alias GClassInitFunc = void function(void*, void*);
    alias GClassFinalizeFunc = void function(void*, void*);
    alias GInstanceInitFunc = void function(_GTypeInstance*, void*);
    alias GInterfaceInitFunc = void function(void*, void*);
    alias GInterfaceFinalizeFunc = void function(void*, void*);
    alias GTypeClassCacheFunc = int function(void*, _GTypeClass*);
    alias GTypeInterfaceCheckFunc = void function(void*, void*);
    alias GTypeFundamentalFlags = _Anonymous_204;
    enum _Anonymous_204
    {
        G_TYPE_FLAG_CLASSED = 1,
        G_TYPE_FLAG_INSTANTIATABLE = 2,
        G_TYPE_FLAG_DERIVABLE = 4,
        G_TYPE_FLAG_DEEP_DERIVABLE = 8,
    }
    enum G_TYPE_FLAG_CLASSED = _Anonymous_204.G_TYPE_FLAG_CLASSED;
    enum G_TYPE_FLAG_INSTANTIATABLE = _Anonymous_204.G_TYPE_FLAG_INSTANTIATABLE;
    enum G_TYPE_FLAG_DERIVABLE = _Anonymous_204.G_TYPE_FLAG_DERIVABLE;
    enum G_TYPE_FLAG_DEEP_DERIVABLE = _Anonymous_204.G_TYPE_FLAG_DEEP_DERIVABLE;
    alias GTypeFlags = _Anonymous_205;
    enum _Anonymous_205
    {
        G_TYPE_FLAG_ABSTRACT = 16,
        G_TYPE_FLAG_VALUE_ABSTRACT = 32,
    }
    enum G_TYPE_FLAG_ABSTRACT = _Anonymous_205.G_TYPE_FLAG_ABSTRACT;
    enum G_TYPE_FLAG_VALUE_ABSTRACT = _Anonymous_205.G_TYPE_FLAG_VALUE_ABSTRACT;
    c_ulong g_type_register_static(c_ulong, const(char)*, const(_GTypeInfo)*, GTypeFlags) @nogc nothrow;
    c_ulong g_type_register_static_simple(c_ulong, const(char)*, uint, void function(void*, void*), uint, void function(_GTypeInstance*, void*), GTypeFlags) @nogc nothrow;
    c_ulong g_type_register_dynamic(c_ulong, const(char)*, _GTypePlugin*, GTypeFlags) @nogc nothrow;
    c_ulong g_type_register_fundamental(c_ulong, const(char)*, const(_GTypeInfo)*, const(_GTypeFundamentalInfo)*, GTypeFlags) @nogc nothrow;
    void g_type_add_interface_static(c_ulong, c_ulong, const(_GInterfaceInfo)*) @nogc nothrow;
    void g_type_add_interface_dynamic(c_ulong, c_ulong, _GTypePlugin*) @nogc nothrow;
    void g_type_interface_add_prerequisite(c_ulong, c_ulong) @nogc nothrow;
    c_ulong* g_type_interface_prerequisites(c_ulong, uint*) @nogc nothrow;
    void g_type_class_add_private(void*, c_ulong) @nogc nothrow;
    int g_type_add_instance_private(c_ulong, c_ulong) @nogc nothrow;
    void* g_type_instance_get_private(_GTypeInstance*, c_ulong) @nogc nothrow;
    void g_type_class_adjust_private_offset(void*, int*) @nogc nothrow;
    void g_type_add_class_private(c_ulong, c_ulong) @nogc nothrow;
    void* g_type_class_get_private(_GTypeClass*, c_ulong) @nogc nothrow;
    int g_type_class_get_instance_private_offset(void*) @nogc nothrow;
    void g_type_ensure(c_ulong) @nogc nothrow;
    uint g_type_get_type_registration_serial() @nogc nothrow;
    void g_type_module_unuse(_GTypeModule*) @nogc nothrow;
    int g_type_module_use(_GTypeModule*) @nogc nothrow;
    c_ulong g_type_module_get_type() @nogc nothrow;
    alias GTypeModule_autoptr = _GTypeModule*;
    alias GTypeModule_listautoptr = _GList*;
    alias GTypeModule_slistautoptr = _GSList*;
    static void glib_autoptr_cleanup_GTypeModule(_GTypeModule**) @nogc nothrow;
    static void glib_listautoptr_cleanup_GTypeModule(_GList**) @nogc nothrow;
    static void glib_slistautoptr_cleanup_GTypeModule(_GSList**) @nogc nothrow;
    struct _GTypeModuleClass
    {
        _GObjectClass parent_class;
        int function(_GTypeModule*) load;
        void function(_GTypeModule*) unload;
        void function() reserved1;
        void function() reserved2;
        void function() reserved3;
        void function() reserved4;
    }
    alias GTypeModuleClass = _GTypeModuleClass;
    struct _GTypeModule
    {
        _GObject parent_instance;
        uint use_count;
        _GSList* type_infos;
        _GSList* interface_infos;
        char* name;
    }
    alias GTypeModule = _GTypeModule;
    const(char)* g_type_name_from_class(_GTypeClass*) @nogc nothrow;
    const(char)* g_type_name_from_instance(_GTypeInstance*) @nogc nothrow;
    int g_type_test_flags(c_ulong, uint) @nogc nothrow;
    _GTypePlugin* g_type_get_plugin(c_ulong) @nogc nothrow;
    _GTypePlugin* g_type_interface_get_plugin(c_ulong, c_ulong) @nogc nothrow;
    c_ulong g_type_fundamental_next() @nogc nothrow;
    c_ulong g_type_fundamental(c_ulong) @nogc nothrow;
    _GTypeInstance* g_type_create_instance(c_ulong) @nogc nothrow;
    void g_type_free_instance(_GTypeInstance*) @nogc nothrow;
    void g_type_add_class_cache_func(void*, int function(void*, _GTypeClass*)) @nogc nothrow;
    void g_type_remove_class_cache_func(void*, int function(void*, _GTypeClass*)) @nogc nothrow;
    void g_type_class_unref_uncached(void*) @nogc nothrow;
    void g_type_add_interface_check(void*, void function(void*, void*)) @nogc nothrow;
    void g_type_remove_interface_check(void*, void function(void*, void*)) @nogc nothrow;
    _GTypeValueTable* g_type_value_table_peek(c_ulong) @nogc nothrow;
    int g_type_check_instance(_GTypeInstance*) @nogc nothrow;
    _GTypeInstance* g_type_check_instance_cast(_GTypeInstance*, c_ulong) @nogc nothrow;
    int g_type_check_instance_is_a(_GTypeInstance*, c_ulong) @nogc nothrow;
    int g_type_check_instance_is_fundamentally_a(_GTypeInstance*, c_ulong) @nogc nothrow;
    _GTypeClass* g_type_check_class_cast(_GTypeClass*, c_ulong) @nogc nothrow;
    int g_type_check_class_is_a(_GTypeClass*, c_ulong) @nogc nothrow;
    int g_type_check_is_value_type(c_ulong) @nogc nothrow;
    int g_type_check_value(const(_GValue)*) @nogc nothrow;
    int g_type_check_value_holds(const(_GValue)*, c_ulong) @nogc nothrow;
    static if(!is(typeof(G_TYPE_FLAG_RESERVED_ID_BIT))) {
        private enum enumMixinStr_G_TYPE_FLAG_RESERVED_ID_BIT = `enum G_TYPE_FLAG_RESERVED_ID_BIT = ( cast( GType ) ( 1 << 0 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FLAG_RESERVED_ID_BIT); }))) {
            mixin(enumMixinStr_G_TYPE_FLAG_RESERVED_ID_BIT);
        }
    }
    static if(!is(typeof(G_TYPE_TYPE_MODULE))) {
        private enum enumMixinStr_G_TYPE_TYPE_MODULE = `enum G_TYPE_TYPE_MODULE = ( g_type_module_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TYPE_MODULE); }))) {
            mixin(enumMixinStr_G_TYPE_TYPE_MODULE);
        }
    }
    static if(!is(typeof(G_TYPE_TYPE_PLUGIN))) {
        private enum enumMixinStr_G_TYPE_TYPE_PLUGIN = `enum G_TYPE_TYPE_PLUGIN = ( g_type_plugin_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TYPE_PLUGIN); }))) {
            mixin(enumMixinStr_G_TYPE_TYPE_PLUGIN);
        }
    }
    static if(!is(typeof(G_TYPE_RESERVED_USER_FIRST))) {
        private enum enumMixinStr_G_TYPE_RESERVED_USER_FIRST = `enum G_TYPE_RESERVED_USER_FIRST = ( 49 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESERVED_USER_FIRST); }))) {
            mixin(enumMixinStr_G_TYPE_RESERVED_USER_FIRST);
        }
    }




    static if(!is(typeof(G_TYPE_RESERVED_BSE_LAST))) {
        private enum enumMixinStr_G_TYPE_RESERVED_BSE_LAST = `enum G_TYPE_RESERVED_BSE_LAST = ( 48 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESERVED_BSE_LAST); }))) {
            mixin(enumMixinStr_G_TYPE_RESERVED_BSE_LAST);
        }
    }




    static if(!is(typeof(G_TYPE_RESERVED_BSE_FIRST))) {
        private enum enumMixinStr_G_TYPE_RESERVED_BSE_FIRST = `enum G_TYPE_RESERVED_BSE_FIRST = ( 32 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESERVED_BSE_FIRST); }))) {
            mixin(enumMixinStr_G_TYPE_RESERVED_BSE_FIRST);
        }
    }




    static if(!is(typeof(G_TYPE_RESERVED_GLIB_LAST))) {
        private enum enumMixinStr_G_TYPE_RESERVED_GLIB_LAST = `enum G_TYPE_RESERVED_GLIB_LAST = ( 31 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESERVED_GLIB_LAST); }))) {
            mixin(enumMixinStr_G_TYPE_RESERVED_GLIB_LAST);
        }
    }




    static if(!is(typeof(G_TYPE_RESERVED_GLIB_FIRST))) {
        private enum enumMixinStr_G_TYPE_RESERVED_GLIB_FIRST = `enum G_TYPE_RESERVED_GLIB_FIRST = ( 22 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESERVED_GLIB_FIRST); }))) {
            mixin(enumMixinStr_G_TYPE_RESERVED_GLIB_FIRST);
        }
    }






    static if(!is(typeof(G_TYPE_FUNDAMENTAL_SHIFT))) {
        private enum enumMixinStr_G_TYPE_FUNDAMENTAL_SHIFT = `enum G_TYPE_FUNDAMENTAL_SHIFT = ( 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FUNDAMENTAL_SHIFT); }))) {
            mixin(enumMixinStr_G_TYPE_FUNDAMENTAL_SHIFT);
        }
    }






    static if(!is(typeof(G_TYPE_VARIANT))) {
        private enum enumMixinStr_G_TYPE_VARIANT = `enum G_TYPE_VARIANT = ( cast( GType ) ( ( 21 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_VARIANT); }))) {
            mixin(enumMixinStr_G_TYPE_VARIANT);
        }
    }




    static if(!is(typeof(G_TYPE_OBJECT))) {
        private enum enumMixinStr_G_TYPE_OBJECT = `enum G_TYPE_OBJECT = ( cast( GType ) ( ( 20 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_OBJECT); }))) {
            mixin(enumMixinStr_G_TYPE_OBJECT);
        }
    }




    static if(!is(typeof(G_TYPE_PARAM))) {
        private enum enumMixinStr_G_TYPE_PARAM = `enum G_TYPE_PARAM = ( cast( GType ) ( ( 19 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM);
        }
    }
    static if(!is(typeof(G_TYPE_BOXED))) {
        private enum enumMixinStr_G_TYPE_BOXED = `enum G_TYPE_BOXED = ( cast( GType ) ( ( 18 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BOXED); }))) {
            mixin(enumMixinStr_G_TYPE_BOXED);
        }
    }




    static if(!is(typeof(G_TYPE_POINTER))) {
        private enum enumMixinStr_G_TYPE_POINTER = `enum G_TYPE_POINTER = ( cast( GType ) ( ( 17 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_POINTER); }))) {
            mixin(enumMixinStr_G_TYPE_POINTER);
        }
    }




    static if(!is(typeof(G_TYPE_STRING))) {
        private enum enumMixinStr_G_TYPE_STRING = `enum G_TYPE_STRING = ( cast( GType ) ( ( 16 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_STRING); }))) {
            mixin(enumMixinStr_G_TYPE_STRING);
        }
    }




    static if(!is(typeof(G_TYPE_DOUBLE))) {
        private enum enumMixinStr_G_TYPE_DOUBLE = `enum G_TYPE_DOUBLE = ( cast( GType ) ( ( 15 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DOUBLE); }))) {
            mixin(enumMixinStr_G_TYPE_DOUBLE);
        }
    }




    static if(!is(typeof(G_TYPE_FLOAT))) {
        private enum enumMixinStr_G_TYPE_FLOAT = `enum G_TYPE_FLOAT = ( cast( GType ) ( ( 14 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FLOAT); }))) {
            mixin(enumMixinStr_G_TYPE_FLOAT);
        }
    }




    static if(!is(typeof(G_TYPE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_FLAGS = `enum G_TYPE_FLAGS = ( cast( GType ) ( ( 13 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_ENUM))) {
        private enum enumMixinStr_G_TYPE_ENUM = `enum G_TYPE_ENUM = ( cast( GType ) ( ( 12 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ENUM); }))) {
            mixin(enumMixinStr_G_TYPE_ENUM);
        }
    }




    static if(!is(typeof(G_TYPE_UINT64))) {
        private enum enumMixinStr_G_TYPE_UINT64 = `enum G_TYPE_UINT64 = ( cast( GType ) ( ( 11 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_UINT64); }))) {
            mixin(enumMixinStr_G_TYPE_UINT64);
        }
    }




    static if(!is(typeof(G_TYPE_INT64))) {
        private enum enumMixinStr_G_TYPE_INT64 = `enum G_TYPE_INT64 = ( cast( GType ) ( ( 10 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_INT64); }))) {
            mixin(enumMixinStr_G_TYPE_INT64);
        }
    }




    static if(!is(typeof(G_TYPE_ULONG))) {
        private enum enumMixinStr_G_TYPE_ULONG = `enum G_TYPE_ULONG = ( cast( GType ) ( ( 9 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ULONG); }))) {
            mixin(enumMixinStr_G_TYPE_ULONG);
        }
    }




    static if(!is(typeof(G_TYPE_LONG))) {
        private enum enumMixinStr_G_TYPE_LONG = `enum G_TYPE_LONG = ( cast( GType ) ( ( 8 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_LONG); }))) {
            mixin(enumMixinStr_G_TYPE_LONG);
        }
    }




    static if(!is(typeof(G_TYPE_UINT))) {
        private enum enumMixinStr_G_TYPE_UINT = `enum G_TYPE_UINT = ( cast( GType ) ( ( 7 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_UINT); }))) {
            mixin(enumMixinStr_G_TYPE_UINT);
        }
    }




    static if(!is(typeof(G_TYPE_INT))) {
        private enum enumMixinStr_G_TYPE_INT = `enum G_TYPE_INT = ( cast( GType ) ( ( 6 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_INT); }))) {
            mixin(enumMixinStr_G_TYPE_INT);
        }
    }




    static if(!is(typeof(G_TYPE_BOOLEAN))) {
        private enum enumMixinStr_G_TYPE_BOOLEAN = `enum G_TYPE_BOOLEAN = ( cast( GType ) ( ( 5 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BOOLEAN); }))) {
            mixin(enumMixinStr_G_TYPE_BOOLEAN);
        }
    }




    static if(!is(typeof(G_TYPE_UCHAR))) {
        private enum enumMixinStr_G_TYPE_UCHAR = `enum G_TYPE_UCHAR = ( cast( GType ) ( ( 4 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_UCHAR); }))) {
            mixin(enumMixinStr_G_TYPE_UCHAR);
        }
    }




    static if(!is(typeof(G_TYPE_CHAR))) {
        private enum enumMixinStr_G_TYPE_CHAR = `enum G_TYPE_CHAR = ( cast( GType ) ( ( 3 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CHAR); }))) {
            mixin(enumMixinStr_G_TYPE_CHAR);
        }
    }




    static if(!is(typeof(G_TYPE_INTERFACE))) {
        private enum enumMixinStr_G_TYPE_INTERFACE = `enum G_TYPE_INTERFACE = ( cast( GType ) ( ( 2 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_INTERFACE); }))) {
            mixin(enumMixinStr_G_TYPE_INTERFACE);
        }
    }




    static if(!is(typeof(G_TYPE_NONE))) {
        private enum enumMixinStr_G_TYPE_NONE = `enum G_TYPE_NONE = ( cast( GType ) ( ( 1 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_NONE); }))) {
            mixin(enumMixinStr_G_TYPE_NONE);
        }
    }




    static if(!is(typeof(G_TYPE_INVALID))) {
        private enum enumMixinStr_G_TYPE_INVALID = `enum G_TYPE_INVALID = ( cast( GType ) ( ( 0 ) << ( 2 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_INVALID); }))) {
            mixin(enumMixinStr_G_TYPE_INVALID);
        }
    }




    static if(!is(typeof(G_TYPE_FUNDAMENTAL_MAX))) {
        private enum enumMixinStr_G_TYPE_FUNDAMENTAL_MAX = `enum G_TYPE_FUNDAMENTAL_MAX = ( 255 << ( 2 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FUNDAMENTAL_MAX); }))) {
            mixin(enumMixinStr_G_TYPE_FUNDAMENTAL_MAX);
        }
    }
    static if(!is(typeof(G_VALUE_NOCOPY_CONTENTS))) {
        private enum enumMixinStr_G_VALUE_NOCOPY_CONTENTS = `enum G_VALUE_NOCOPY_CONTENTS = ( 1 << 27 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VALUE_NOCOPY_CONTENTS); }))) {
            mixin(enumMixinStr_G_VALUE_NOCOPY_CONTENTS);
        }
    }




    static if(!is(typeof(G_VALUE_INIT))) {
        private enum enumMixinStr_G_VALUE_INIT = `enum G_VALUE_INIT = { 0 , { { 0 } } };`;
        static if(is(typeof({ mixin(enumMixinStr_G_VALUE_INIT); }))) {
            mixin(enumMixinStr_G_VALUE_INIT);
        }
    }
    static if(!is(typeof(G_TYPE_VALUE_ARRAY))) {
        private enum enumMixinStr_G_TYPE_VALUE_ARRAY = `enum G_TYPE_VALUE_ARRAY = ( g_value_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_VALUE_ARRAY); }))) {
            mixin(enumMixinStr_G_TYPE_VALUE_ARRAY);
        }
    }






    static if(!is(typeof(G_SIGNAL_TYPE_STATIC_SCOPE))) {
        private enum enumMixinStr_G_SIGNAL_TYPE_STATIC_SCOPE = `enum G_SIGNAL_TYPE_STATIC_SCOPE = ( ( cast( GType ) ( 1 << 0 ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_SIGNAL_TYPE_STATIC_SCOPE); }))) {
            mixin(enumMixinStr_G_SIGNAL_TYPE_STATIC_SCOPE);
        }
    }




    static if(!is(typeof(G_SIGNAL_MATCH_MASK))) {
        private enum enumMixinStr_G_SIGNAL_MATCH_MASK = `enum G_SIGNAL_MATCH_MASK = 0x3f;`;
        static if(is(typeof({ mixin(enumMixinStr_G_SIGNAL_MATCH_MASK); }))) {
            mixin(enumMixinStr_G_SIGNAL_MATCH_MASK);
        }
    }




    static if(!is(typeof(G_SIGNAL_FLAGS_MASK))) {
        private enum enumMixinStr_G_SIGNAL_FLAGS_MASK = `enum G_SIGNAL_FLAGS_MASK = 0x1ff;`;
        static if(is(typeof({ mixin(enumMixinStr_G_SIGNAL_FLAGS_MASK); }))) {
            mixin(enumMixinStr_G_SIGNAL_FLAGS_MASK);
        }
    }






    static if(!is(typeof(GOBJECT_VAR))) {
        private enum enumMixinStr_GOBJECT_VAR = `enum GOBJECT_VAR = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GOBJECT_VAR); }))) {
            mixin(enumMixinStr_GOBJECT_VAR);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_VARIANT))) {
        private enum enumMixinStr_G_TYPE_PARAM_VARIANT = `enum G_TYPE_PARAM_VARIANT = ( g_param_spec_types [ 22 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_VARIANT); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_VARIANT);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_GTYPE))) {
        private enum enumMixinStr_G_TYPE_PARAM_GTYPE = `enum G_TYPE_PARAM_GTYPE = ( g_param_spec_types [ 21 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_GTYPE); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_GTYPE);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_OVERRIDE))) {
        private enum enumMixinStr_G_TYPE_PARAM_OVERRIDE = `enum G_TYPE_PARAM_OVERRIDE = ( g_param_spec_types [ 20 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_OVERRIDE); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_OVERRIDE);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_OBJECT))) {
        private enum enumMixinStr_G_TYPE_PARAM_OBJECT = `enum G_TYPE_PARAM_OBJECT = ( g_param_spec_types [ 19 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_OBJECT); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_OBJECT);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_VALUE_ARRAY))) {
        private enum enumMixinStr_G_TYPE_PARAM_VALUE_ARRAY = `enum G_TYPE_PARAM_VALUE_ARRAY = ( g_param_spec_types [ 18 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_VALUE_ARRAY); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_VALUE_ARRAY);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_POINTER))) {
        private enum enumMixinStr_G_TYPE_PARAM_POINTER = `enum G_TYPE_PARAM_POINTER = ( g_param_spec_types [ 17 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_POINTER); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_POINTER);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_BOXED))) {
        private enum enumMixinStr_G_TYPE_PARAM_BOXED = `enum G_TYPE_PARAM_BOXED = ( g_param_spec_types [ 16 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_BOXED); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_BOXED);
        }
    }
    static if(!is(typeof(G_TYPE_GTYPE))) {
        private enum enumMixinStr_G_TYPE_GTYPE = `enum G_TYPE_GTYPE = ( g_gtype_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_GTYPE); }))) {
            mixin(enumMixinStr_G_TYPE_GTYPE);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_PARAM))) {
        private enum enumMixinStr_G_TYPE_PARAM_PARAM = `enum G_TYPE_PARAM_PARAM = ( g_param_spec_types [ 15 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_PARAM); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_PARAM);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_STRING))) {
        private enum enumMixinStr_G_TYPE_PARAM_STRING = `enum G_TYPE_PARAM_STRING = ( g_param_spec_types [ 14 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_STRING); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_STRING);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_DOUBLE))) {
        private enum enumMixinStr_G_TYPE_PARAM_DOUBLE = `enum G_TYPE_PARAM_DOUBLE = ( g_param_spec_types [ 13 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_DOUBLE); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_DOUBLE);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_FLOAT))) {
        private enum enumMixinStr_G_TYPE_PARAM_FLOAT = `enum G_TYPE_PARAM_FLOAT = ( g_param_spec_types [ 12 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_FLOAT); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_FLOAT);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_FLAGS))) {
        private enum enumMixinStr_G_TYPE_PARAM_FLAGS = `enum G_TYPE_PARAM_FLAGS = ( g_param_spec_types [ 11 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_FLAGS);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_ENUM))) {
        private enum enumMixinStr_G_TYPE_PARAM_ENUM = `enum G_TYPE_PARAM_ENUM = ( g_param_spec_types [ 10 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_ENUM); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_ENUM);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_UNICHAR))) {
        private enum enumMixinStr_G_TYPE_PARAM_UNICHAR = `enum G_TYPE_PARAM_UNICHAR = ( g_param_spec_types [ 9 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_UNICHAR); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_UNICHAR);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_UINT64))) {
        private enum enumMixinStr_G_TYPE_PARAM_UINT64 = `enum G_TYPE_PARAM_UINT64 = ( g_param_spec_types [ 8 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_UINT64); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_UINT64);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_INT64))) {
        private enum enumMixinStr_G_TYPE_PARAM_INT64 = `enum G_TYPE_PARAM_INT64 = ( g_param_spec_types [ 7 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_INT64); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_INT64);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_ULONG))) {
        private enum enumMixinStr_G_TYPE_PARAM_ULONG = `enum G_TYPE_PARAM_ULONG = ( g_param_spec_types [ 6 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_ULONG); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_ULONG);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_LONG))) {
        private enum enumMixinStr_G_TYPE_PARAM_LONG = `enum G_TYPE_PARAM_LONG = ( g_param_spec_types [ 5 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_LONG); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_LONG);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_UINT))) {
        private enum enumMixinStr_G_TYPE_PARAM_UINT = `enum G_TYPE_PARAM_UINT = ( g_param_spec_types [ 4 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_UINT); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_UINT);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_INT))) {
        private enum enumMixinStr_G_TYPE_PARAM_INT = `enum G_TYPE_PARAM_INT = ( g_param_spec_types [ 3 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_INT); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_INT);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_BOOLEAN))) {
        private enum enumMixinStr_G_TYPE_PARAM_BOOLEAN = `enum G_TYPE_PARAM_BOOLEAN = ( g_param_spec_types [ 2 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_BOOLEAN); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_BOOLEAN);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_UCHAR))) {
        private enum enumMixinStr_G_TYPE_PARAM_UCHAR = `enum G_TYPE_PARAM_UCHAR = ( g_param_spec_types [ 1 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_UCHAR); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_UCHAR);
        }
    }
    static if(!is(typeof(G_TYPE_PARAM_CHAR))) {
        private enum enumMixinStr_G_TYPE_PARAM_CHAR = `enum G_TYPE_PARAM_CHAR = ( g_param_spec_types [ 0 ] );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PARAM_CHAR); }))) {
            mixin(enumMixinStr_G_TYPE_PARAM_CHAR);
        }
    }






    static if(!is(typeof(G_PARAM_USER_SHIFT))) {
        private enum enumMixinStr_G_PARAM_USER_SHIFT = `enum G_PARAM_USER_SHIFT = ( 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_PARAM_USER_SHIFT); }))) {
            mixin(enumMixinStr_G_PARAM_USER_SHIFT);
        }
    }




    static if(!is(typeof(G_PARAM_MASK))) {
        private enum enumMixinStr_G_PARAM_MASK = `enum G_PARAM_MASK = ( 0x000000ff );`;
        static if(is(typeof({ mixin(enumMixinStr_G_PARAM_MASK); }))) {
            mixin(enumMixinStr_G_PARAM_MASK);
        }
    }




    static if(!is(typeof(G_PARAM_STATIC_STRINGS))) {
        private enum enumMixinStr_G_PARAM_STATIC_STRINGS = `enum G_PARAM_STATIC_STRINGS = ( G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB );`;
        static if(is(typeof({ mixin(enumMixinStr_G_PARAM_STATIC_STRINGS); }))) {
            mixin(enumMixinStr_G_PARAM_STATIC_STRINGS);
        }
    }
    static if(!is(typeof(G_TYPE_INITIALLY_UNOWNED))) {
        private enum enumMixinStr_G_TYPE_INITIALLY_UNOWNED = `enum G_TYPE_INITIALLY_UNOWNED = ( g_initially_unowned_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_INITIALLY_UNOWNED); }))) {
            mixin(enumMixinStr_G_TYPE_INITIALLY_UNOWNED);
        }
    }
    static if(!is(typeof(_LIBC_LIMITS_H_))) {
        private enum enumMixinStr__LIBC_LIMITS_H_ = `enum _LIBC_LIMITS_H_ = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__LIBC_LIMITS_H_); }))) {
            mixin(enumMixinStr__LIBC_LIMITS_H_);
        }
    }
    static if(!is(typeof(MB_LEN_MAX))) {
        private enum enumMixinStr_MB_LEN_MAX = `enum MB_LEN_MAX = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_MB_LEN_MAX); }))) {
            mixin(enumMixinStr_MB_LEN_MAX);
        }
    }




    static if(!is(typeof(g_cclosure_marshal_BOOL__BOXED_BOXED))) {
        private enum enumMixinStr_g_cclosure_marshal_BOOL__BOXED_BOXED = `enum g_cclosure_marshal_BOOL__BOXED_BOXED = g_cclosure_marshal_BOOLEAN__BOXED_BOXED;`;
        static if(is(typeof({ mixin(enumMixinStr_g_cclosure_marshal_BOOL__BOXED_BOXED); }))) {
            mixin(enumMixinStr_g_cclosure_marshal_BOOL__BOXED_BOXED);
        }
    }




    static if(!is(typeof(g_cclosure_marshal_BOOL__FLAGS))) {
        private enum enumMixinStr_g_cclosure_marshal_BOOL__FLAGS = `enum g_cclosure_marshal_BOOL__FLAGS = g_cclosure_marshal_BOOLEAN__FLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr_g_cclosure_marshal_BOOL__FLAGS); }))) {
            mixin(enumMixinStr_g_cclosure_marshal_BOOL__FLAGS);
        }
    }






    static if(!is(typeof(G_TYPE_OPTION_GROUP))) {
        private enum enumMixinStr_G_TYPE_OPTION_GROUP = `enum G_TYPE_OPTION_GROUP = ( g_option_group_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_OPTION_GROUP); }))) {
            mixin(enumMixinStr_G_TYPE_OPTION_GROUP);
        }
    }




    static if(!is(typeof(G_TYPE_CHECKSUM))) {
        private enum enumMixinStr_G_TYPE_CHECKSUM = `enum G_TYPE_CHECKSUM = ( g_checksum_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CHECKSUM); }))) {
            mixin(enumMixinStr_G_TYPE_CHECKSUM);
        }
    }




    static if(!is(typeof(G_TYPE_THREAD))) {
        private enum enumMixinStr_G_TYPE_THREAD = `enum G_TYPE_THREAD = ( g_thread_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_THREAD); }))) {
            mixin(enumMixinStr_G_TYPE_THREAD);
        }
    }




    static if(!is(typeof(LLONG_MIN))) {
        private enum enumMixinStr_LLONG_MIN = `enum LLONG_MIN = ( - LLONG_MAX - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_LLONG_MIN); }))) {
            mixin(enumMixinStr_LLONG_MIN);
        }
    }




    static if(!is(typeof(LLONG_MAX))) {
        private enum enumMixinStr_LLONG_MAX = `enum LLONG_MAX = 0x7fffffffffffffffLL;`;
        static if(is(typeof({ mixin(enumMixinStr_LLONG_MAX); }))) {
            mixin(enumMixinStr_LLONG_MAX);
        }
    }




    static if(!is(typeof(ULLONG_MAX))) {
        private enum enumMixinStr_ULLONG_MAX = `enum ULLONG_MAX = ( 0x7fffffffffffffffLL * 2ULL + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_ULLONG_MAX); }))) {
            mixin(enumMixinStr_ULLONG_MAX);
        }
    }




    static if(!is(typeof(G_TYPE_MAPPED_FILE))) {
        private enum enumMixinStr_G_TYPE_MAPPED_FILE = `enum G_TYPE_MAPPED_FILE = ( g_mapped_file_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MAPPED_FILE); }))) {
            mixin(enumMixinStr_G_TYPE_MAPPED_FILE);
        }
    }




    static if(!is(typeof(G_TYPE_KEY_FILE))) {
        private enum enumMixinStr_G_TYPE_KEY_FILE = `enum G_TYPE_KEY_FILE = ( g_key_file_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_KEY_FILE); }))) {
            mixin(enumMixinStr_G_TYPE_KEY_FILE);
        }
    }




    static if(!is(typeof(G_TYPE_MARKUP_PARSE_CONTEXT))) {
        private enum enumMixinStr_G_TYPE_MARKUP_PARSE_CONTEXT = `enum G_TYPE_MARKUP_PARSE_CONTEXT = ( g_markup_parse_context_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MARKUP_PARSE_CONTEXT); }))) {
            mixin(enumMixinStr_G_TYPE_MARKUP_PARSE_CONTEXT);
        }
    }




    static if(!is(typeof(G_TYPE_POLLFD))) {
        private enum enumMixinStr_G_TYPE_POLLFD = `enum G_TYPE_POLLFD = ( g_pollfd_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_POLLFD); }))) {
            mixin(enumMixinStr_G_TYPE_POLLFD);
        }
    }




    static if(!is(typeof(G_TYPE_SOURCE))) {
        private enum enumMixinStr_G_TYPE_SOURCE = `enum G_TYPE_SOURCE = ( g_source_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOURCE); }))) {
            mixin(enumMixinStr_G_TYPE_SOURCE);
        }
    }






    static if(!is(typeof(NR_OPEN))) {
        private enum enumMixinStr_NR_OPEN = `enum NR_OPEN = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_NR_OPEN); }))) {
            mixin(enumMixinStr_NR_OPEN);
        }
    }




    static if(!is(typeof(NGROUPS_MAX))) {
        private enum enumMixinStr_NGROUPS_MAX = `enum NGROUPS_MAX = 65536;`;
        static if(is(typeof({ mixin(enumMixinStr_NGROUPS_MAX); }))) {
            mixin(enumMixinStr_NGROUPS_MAX);
        }
    }




    static if(!is(typeof(ARG_MAX))) {
        private enum enumMixinStr_ARG_MAX = `enum ARG_MAX = 131072;`;
        static if(is(typeof({ mixin(enumMixinStr_ARG_MAX); }))) {
            mixin(enumMixinStr_ARG_MAX);
        }
    }




    static if(!is(typeof(LINK_MAX))) {
        private enum enumMixinStr_LINK_MAX = `enum LINK_MAX = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_LINK_MAX); }))) {
            mixin(enumMixinStr_LINK_MAX);
        }
    }




    static if(!is(typeof(MAX_CANON))) {
        private enum enumMixinStr_MAX_CANON = `enum MAX_CANON = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_MAX_CANON); }))) {
            mixin(enumMixinStr_MAX_CANON);
        }
    }




    static if(!is(typeof(MAX_INPUT))) {
        private enum enumMixinStr_MAX_INPUT = `enum MAX_INPUT = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_MAX_INPUT); }))) {
            mixin(enumMixinStr_MAX_INPUT);
        }
    }




    static if(!is(typeof(NAME_MAX))) {
        private enum enumMixinStr_NAME_MAX = `enum NAME_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_NAME_MAX); }))) {
            mixin(enumMixinStr_NAME_MAX);
        }
    }




    static if(!is(typeof(PATH_MAX))) {
        private enum enumMixinStr_PATH_MAX = `enum PATH_MAX = 4096;`;
        static if(is(typeof({ mixin(enumMixinStr_PATH_MAX); }))) {
            mixin(enumMixinStr_PATH_MAX);
        }
    }




    static if(!is(typeof(PIPE_BUF))) {
        private enum enumMixinStr_PIPE_BUF = `enum PIPE_BUF = 4096;`;
        static if(is(typeof({ mixin(enumMixinStr_PIPE_BUF); }))) {
            mixin(enumMixinStr_PIPE_BUF);
        }
    }




    static if(!is(typeof(XATTR_NAME_MAX))) {
        private enum enumMixinStr_XATTR_NAME_MAX = `enum XATTR_NAME_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_XATTR_NAME_MAX); }))) {
            mixin(enumMixinStr_XATTR_NAME_MAX);
        }
    }




    static if(!is(typeof(XATTR_SIZE_MAX))) {
        private enum enumMixinStr_XATTR_SIZE_MAX = `enum XATTR_SIZE_MAX = 65536;`;
        static if(is(typeof({ mixin(enumMixinStr_XATTR_SIZE_MAX); }))) {
            mixin(enumMixinStr_XATTR_SIZE_MAX);
        }
    }




    static if(!is(typeof(XATTR_LIST_MAX))) {
        private enum enumMixinStr_XATTR_LIST_MAX = `enum XATTR_LIST_MAX = 65536;`;
        static if(is(typeof({ mixin(enumMixinStr_XATTR_LIST_MAX); }))) {
            mixin(enumMixinStr_XATTR_LIST_MAX);
        }
    }




    static if(!is(typeof(RTSIG_MAX))) {
        private enum enumMixinStr_RTSIG_MAX = `enum RTSIG_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_RTSIG_MAX); }))) {
            mixin(enumMixinStr_RTSIG_MAX);
        }
    }




    static if(!is(typeof(_PTHREAD_H))) {
        private enum enumMixinStr__PTHREAD_H = `enum _PTHREAD_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__PTHREAD_H); }))) {
            mixin(enumMixinStr__PTHREAD_H);
        }
    }




    static if(!is(typeof(G_TYPE_MAIN_CONTEXT))) {
        private enum enumMixinStr_G_TYPE_MAIN_CONTEXT = `enum G_TYPE_MAIN_CONTEXT = ( g_main_context_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MAIN_CONTEXT); }))) {
            mixin(enumMixinStr_G_TYPE_MAIN_CONTEXT);
        }
    }




    static if(!is(typeof(G_TYPE_MAIN_LOOP))) {
        private enum enumMixinStr_G_TYPE_MAIN_LOOP = `enum G_TYPE_MAIN_LOOP = ( g_main_loop_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MAIN_LOOP); }))) {
            mixin(enumMixinStr_G_TYPE_MAIN_LOOP);
        }
    }




    static if(!is(typeof(G_TYPE_VARIANT_DICT))) {
        private enum enumMixinStr_G_TYPE_VARIANT_DICT = `enum G_TYPE_VARIANT_DICT = ( g_variant_dict_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_VARIANT_DICT); }))) {
            mixin(enumMixinStr_G_TYPE_VARIANT_DICT);
        }
    }




    static if(!is(typeof(G_TYPE_VARIANT_BUILDER))) {
        private enum enumMixinStr_G_TYPE_VARIANT_BUILDER = `enum G_TYPE_VARIANT_BUILDER = ( g_variant_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_VARIANT_BUILDER); }))) {
            mixin(enumMixinStr_G_TYPE_VARIANT_BUILDER);
        }
    }




    static if(!is(typeof(G_TYPE_IO_CONDITION))) {
        private enum enumMixinStr_G_TYPE_IO_CONDITION = `enum G_TYPE_IO_CONDITION = ( g_io_condition_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_IO_CONDITION); }))) {
            mixin(enumMixinStr_G_TYPE_IO_CONDITION);
        }
    }




    static if(!is(typeof(G_TYPE_IO_CHANNEL))) {
        private enum enumMixinStr_G_TYPE_IO_CHANNEL = `enum G_TYPE_IO_CHANNEL = ( g_io_channel_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_IO_CHANNEL); }))) {
            mixin(enumMixinStr_G_TYPE_IO_CHANNEL);
        }
    }




    static if(!is(typeof(G_TYPE_TIME_ZONE))) {
        private enum enumMixinStr_G_TYPE_TIME_ZONE = `enum G_TYPE_TIME_ZONE = ( g_time_zone_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TIME_ZONE); }))) {
            mixin(enumMixinStr_G_TYPE_TIME_ZONE);
        }
    }




    static if(!is(typeof(G_TYPE_DATE_TIME))) {
        private enum enumMixinStr_G_TYPE_DATE_TIME = `enum G_TYPE_DATE_TIME = ( g_date_time_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DATE_TIME); }))) {
            mixin(enumMixinStr_G_TYPE_DATE_TIME);
        }
    }




    static if(!is(typeof(G_TYPE_ERROR))) {
        private enum enumMixinStr_G_TYPE_ERROR = `enum G_TYPE_ERROR = ( g_error_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ERROR); }))) {
            mixin(enumMixinStr_G_TYPE_ERROR);
        }
    }




    static if(!is(typeof(PTHREAD_CREATE_JOINABLE))) {
        private enum enumMixinStr_PTHREAD_CREATE_JOINABLE = `enum PTHREAD_CREATE_JOINABLE = PTHREAD_CREATE_JOINABLE;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CREATE_JOINABLE); }))) {
            mixin(enumMixinStr_PTHREAD_CREATE_JOINABLE);
        }
    }




    static if(!is(typeof(PTHREAD_CREATE_DETACHED))) {
        private enum enumMixinStr_PTHREAD_CREATE_DETACHED = `enum PTHREAD_CREATE_DETACHED = PTHREAD_CREATE_DETACHED;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CREATE_DETACHED); }))) {
            mixin(enumMixinStr_PTHREAD_CREATE_DETACHED);
        }
    }




    static if(!is(typeof(G_TYPE_VARIANT_TYPE))) {
        private enum enumMixinStr_G_TYPE_VARIANT_TYPE = `enum G_TYPE_VARIANT_TYPE = ( g_variant_type_get_gtype ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_VARIANT_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_VARIANT_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_BYTES))) {
        private enum enumMixinStr_G_TYPE_BYTES = `enum G_TYPE_BYTES = ( g_bytes_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BYTES); }))) {
            mixin(enumMixinStr_G_TYPE_BYTES);
        }
    }




    static if(!is(typeof(G_TYPE_PTR_ARRAY))) {
        private enum enumMixinStr_G_TYPE_PTR_ARRAY = `enum G_TYPE_PTR_ARRAY = ( g_ptr_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PTR_ARRAY); }))) {
            mixin(enumMixinStr_G_TYPE_PTR_ARRAY);
        }
    }




    static if(!is(typeof(G_TYPE_BYTE_ARRAY))) {
        private enum enumMixinStr_G_TYPE_BYTE_ARRAY = `enum G_TYPE_BYTE_ARRAY = ( g_byte_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BYTE_ARRAY); }))) {
            mixin(enumMixinStr_G_TYPE_BYTE_ARRAY);
        }
    }




    static if(!is(typeof(G_TYPE_ARRAY))) {
        private enum enumMixinStr_G_TYPE_ARRAY = `enum G_TYPE_ARRAY = ( g_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ARRAY); }))) {
            mixin(enumMixinStr_G_TYPE_ARRAY);
        }
    }




    static if(!is(typeof(G_TYPE_MATCH_INFO))) {
        private enum enumMixinStr_G_TYPE_MATCH_INFO = `enum G_TYPE_MATCH_INFO = ( g_match_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MATCH_INFO); }))) {
            mixin(enumMixinStr_G_TYPE_MATCH_INFO);
        }
    }




    static if(!is(typeof(G_TYPE_REGEX))) {
        private enum enumMixinStr_G_TYPE_REGEX = `enum G_TYPE_REGEX = ( g_regex_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_REGEX); }))) {
            mixin(enumMixinStr_G_TYPE_REGEX);
        }
    }




    static if(!is(typeof(PTHREAD_MUTEX_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_MUTEX_INITIALIZER = `enum PTHREAD_MUTEX_INITIALIZER = { { 0 , 0 , 0 , 0 , 0 , __PTHREAD_SPINS , { 0 , 0 } } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_MUTEX_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_MUTEX_INITIALIZER);
        }
    }




    static if(!is(typeof(G_TYPE_HASH_TABLE))) {
        private enum enumMixinStr_G_TYPE_HASH_TABLE = `enum G_TYPE_HASH_TABLE = ( g_hash_table_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_HASH_TABLE); }))) {
            mixin(enumMixinStr_G_TYPE_HASH_TABLE);
        }
    }




    static if(!is(typeof(G_TYPE_GSTRING))) {
        private enum enumMixinStr_G_TYPE_GSTRING = `enum G_TYPE_GSTRING = ( g_gstring_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_GSTRING); }))) {
            mixin(enumMixinStr_G_TYPE_GSTRING);
        }
    }




    static if(!is(typeof(G_TYPE_STRV))) {
        private enum enumMixinStr_G_TYPE_STRV = `enum G_TYPE_STRV = ( g_strv_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_STRV); }))) {
            mixin(enumMixinStr_G_TYPE_STRV);
        }
    }




    static if(!is(typeof(PTHREAD_RWLOCK_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_RWLOCK_INITIALIZER = `enum PTHREAD_RWLOCK_INITIALIZER = { { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __PTHREAD_RWLOCK_ELISION_EXTRA , 0 , 0 } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_RWLOCK_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_RWLOCK_INITIALIZER);
        }
    }




    static if(!is(typeof(G_TYPE_DATE))) {
        private enum enumMixinStr_G_TYPE_DATE = `enum G_TYPE_DATE = ( g_date_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DATE); }))) {
            mixin(enumMixinStr_G_TYPE_DATE);
        }
    }




    static if(!is(typeof(PTHREAD_INHERIT_SCHED))) {
        private enum enumMixinStr_PTHREAD_INHERIT_SCHED = `enum PTHREAD_INHERIT_SCHED = PTHREAD_INHERIT_SCHED;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_INHERIT_SCHED); }))) {
            mixin(enumMixinStr_PTHREAD_INHERIT_SCHED);
        }
    }




    static if(!is(typeof(PTHREAD_EXPLICIT_SCHED))) {
        private enum enumMixinStr_PTHREAD_EXPLICIT_SCHED = `enum PTHREAD_EXPLICIT_SCHED = PTHREAD_EXPLICIT_SCHED;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_EXPLICIT_SCHED); }))) {
            mixin(enumMixinStr_PTHREAD_EXPLICIT_SCHED);
        }
    }






    static if(!is(typeof(PTHREAD_SCOPE_SYSTEM))) {
        private enum enumMixinStr_PTHREAD_SCOPE_SYSTEM = `enum PTHREAD_SCOPE_SYSTEM = PTHREAD_SCOPE_SYSTEM;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_SCOPE_SYSTEM); }))) {
            mixin(enumMixinStr_PTHREAD_SCOPE_SYSTEM);
        }
    }




    static if(!is(typeof(PTHREAD_SCOPE_PROCESS))) {
        private enum enumMixinStr_PTHREAD_SCOPE_PROCESS = `enum PTHREAD_SCOPE_PROCESS = PTHREAD_SCOPE_PROCESS;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_SCOPE_PROCESS); }))) {
            mixin(enumMixinStr_PTHREAD_SCOPE_PROCESS);
        }
    }






    static if(!is(typeof(PTHREAD_PROCESS_PRIVATE))) {
        private enum enumMixinStr_PTHREAD_PROCESS_PRIVATE = `enum PTHREAD_PROCESS_PRIVATE = PTHREAD_PROCESS_PRIVATE;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_PROCESS_PRIVATE); }))) {
            mixin(enumMixinStr_PTHREAD_PROCESS_PRIVATE);
        }
    }




    static if(!is(typeof(PTHREAD_PROCESS_SHARED))) {
        private enum enumMixinStr_PTHREAD_PROCESS_SHARED = `enum PTHREAD_PROCESS_SHARED = PTHREAD_PROCESS_SHARED;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_PROCESS_SHARED); }))) {
            mixin(enumMixinStr_PTHREAD_PROCESS_SHARED);
        }
    }




    static if(!is(typeof(PTHREAD_COND_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_COND_INITIALIZER = `enum PTHREAD_COND_INITIALIZER = { { { 0 } , { 0 } , { 0 , 0 } , { 0 , 0 } , 0 , 0 , { 0 , 0 } } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_COND_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_COND_INITIALIZER);
        }
    }
    static if(!is(typeof(PTHREAD_CANCEL_ENABLE))) {
        private enum enumMixinStr_PTHREAD_CANCEL_ENABLE = `enum PTHREAD_CANCEL_ENABLE = PTHREAD_CANCEL_ENABLE;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_ENABLE); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_ENABLE);
        }
    }




    static if(!is(typeof(PTHREAD_CANCEL_DISABLE))) {
        private enum enumMixinStr_PTHREAD_CANCEL_DISABLE = `enum PTHREAD_CANCEL_DISABLE = PTHREAD_CANCEL_DISABLE;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_DISABLE); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_DISABLE);
        }
    }






    static if(!is(typeof(PTHREAD_CANCEL_DEFERRED))) {
        private enum enumMixinStr_PTHREAD_CANCEL_DEFERRED = `enum PTHREAD_CANCEL_DEFERRED = PTHREAD_CANCEL_DEFERRED;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_DEFERRED); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_DEFERRED);
        }
    }




    static if(!is(typeof(PTHREAD_CANCEL_ASYNCHRONOUS))) {
        private enum enumMixinStr_PTHREAD_CANCEL_ASYNCHRONOUS = `enum PTHREAD_CANCEL_ASYNCHRONOUS = PTHREAD_CANCEL_ASYNCHRONOUS;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_ASYNCHRONOUS); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_ASYNCHRONOUS);
        }
    }




    static if(!is(typeof(PTHREAD_CANCELED))) {
        private enum enumMixinStr_PTHREAD_CANCELED = `enum PTHREAD_CANCELED = ( cast( void * ) - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCELED); }))) {
            mixin(enumMixinStr_PTHREAD_CANCELED);
        }
    }




    static if(!is(typeof(PTHREAD_ONCE_INIT))) {
        private enum enumMixinStr_PTHREAD_ONCE_INIT = `enum PTHREAD_ONCE_INIT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_ONCE_INIT); }))) {
            mixin(enumMixinStr_PTHREAD_ONCE_INIT);
        }
    }






    static if(!is(typeof(PTHREAD_BARRIER_SERIAL_THREAD))) {
        private enum enumMixinStr_PTHREAD_BARRIER_SERIAL_THREAD = `enum PTHREAD_BARRIER_SERIAL_THREAD = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_BARRIER_SERIAL_THREAD); }))) {
            mixin(enumMixinStr_PTHREAD_BARRIER_SERIAL_THREAD);
        }
    }
    static if(!is(typeof(G_TYPE_VALUE))) {
        private enum enumMixinStr_G_TYPE_VALUE = `enum G_TYPE_VALUE = ( g_value_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_VALUE); }))) {
            mixin(enumMixinStr_G_TYPE_VALUE);
        }
    }




    static if(!is(typeof(G_TYPE_CLOSURE))) {
        private enum enumMixinStr_G_TYPE_CLOSURE = `enum G_TYPE_CLOSURE = ( g_closure_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CLOSURE); }))) {
            mixin(enumMixinStr_G_TYPE_CLOSURE);
        }
    }
    static if(!is(typeof(G_TYPE_BINDING))) {
        private enum enumMixinStr_G_TYPE_BINDING = `enum G_TYPE_BINDING = ( g_binding_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BINDING); }))) {
            mixin(enumMixinStr_G_TYPE_BINDING);
        }
    }




    static if(!is(typeof(G_TYPE_BINDING_FLAGS))) {
        private enum enumMixinStr_G_TYPE_BINDING_FLAGS = `enum G_TYPE_BINDING_FLAGS = ( g_binding_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BINDING_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_BINDING_FLAGS);
        }
    }






    static if(!is(typeof(G_MODULE_EXPORT))) {
        private enum enumMixinStr_G_MODULE_EXPORT = `enum G_MODULE_EXPORT = __attribute__ ( ( visibility ( "default" ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MODULE_EXPORT); }))) {
            mixin(enumMixinStr_G_MODULE_EXPORT);
        }
    }




    static if(!is(typeof(G_MODULE_IMPORT))) {
        private enum enumMixinStr_G_MODULE_IMPORT = `enum G_MODULE_IMPORT = extern;`;
        static if(is(typeof({ mixin(enumMixinStr_G_MODULE_IMPORT); }))) {
            mixin(enumMixinStr_G_MODULE_IMPORT);
        }
    }






    static if(!is(typeof(GLIB_AVAILABLE_IN_2_56))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_56 = `enum GLIB_AVAILABLE_IN_2_56 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_56); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_56);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_56))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_56 = `enum GLIB_DEPRECATED_IN_2_56 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_56); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_56);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_54))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_54 = `enum GLIB_AVAILABLE_IN_2_54 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_54); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_54);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_54))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_54 = `enum GLIB_DEPRECATED_IN_2_54 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_54); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_54);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_52))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_52 = `enum GLIB_AVAILABLE_IN_2_52 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_52); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_52);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_52))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_52 = `enum GLIB_DEPRECATED_IN_2_52 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_52); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_52);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_50))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_50 = `enum GLIB_AVAILABLE_IN_2_50 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_50); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_50);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_50))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_50 = `enum GLIB_DEPRECATED_IN_2_50 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_50); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_50);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_48))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_48 = `enum GLIB_AVAILABLE_IN_2_48 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_48); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_48);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_48))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_48 = `enum GLIB_DEPRECATED_IN_2_48 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_48); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_48);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_46))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_46 = `enum GLIB_AVAILABLE_IN_2_46 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_46); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_46);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_46))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_46 = `enum GLIB_DEPRECATED_IN_2_46 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_46); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_46);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_44))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_44 = `enum GLIB_AVAILABLE_IN_2_44 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_44); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_44);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_44))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_44 = `enum GLIB_DEPRECATED_IN_2_44 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_44); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_44);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_42))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_42 = `enum GLIB_AVAILABLE_IN_2_42 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_42); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_42);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_42))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_42 = `enum GLIB_DEPRECATED_IN_2_42 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_42); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_42);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_40))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_40 = `enum GLIB_AVAILABLE_IN_2_40 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_40); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_40);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_40))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_40 = `enum GLIB_DEPRECATED_IN_2_40 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_40); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_40);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_38))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_38 = `enum GLIB_AVAILABLE_IN_2_38 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_38); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_38);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_38))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_38 = `enum GLIB_DEPRECATED_IN_2_38 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_38); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_38);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_36))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_36 = `enum GLIB_AVAILABLE_IN_2_36 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_36); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_36);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_36))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_36 = `enum GLIB_DEPRECATED_IN_2_36 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_36); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_36);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_34))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_34 = `enum GLIB_AVAILABLE_IN_2_34 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_34); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_34);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_34))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_34 = `enum GLIB_DEPRECATED_IN_2_34 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_34); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_34);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_32))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_32 = `enum GLIB_AVAILABLE_IN_2_32 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_32); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_32);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_32))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_32 = `enum GLIB_DEPRECATED_IN_2_32 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_32); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_32);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_30))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_30 = `enum GLIB_AVAILABLE_IN_2_30 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_30); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_30);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_30))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_30 = `enum GLIB_DEPRECATED_IN_2_30 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_30); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_30);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_28))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_28 = `enum GLIB_AVAILABLE_IN_2_28 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_28); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_28);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_28))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_28 = `enum GLIB_DEPRECATED_IN_2_28 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_28); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_28);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_2_26))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_2_26 = `enum GLIB_AVAILABLE_IN_2_26 = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_26); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_2_26);
        }
    }






    static if(!is(typeof(GLIB_DEPRECATED_IN_2_26))) {
        private enum enumMixinStr_GLIB_DEPRECATED_IN_2_26 = `enum GLIB_DEPRECATED_IN_2_26 = GLIB_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_26); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED_IN_2_26);
        }
    }




    static if(!is(typeof(GLIB_AVAILABLE_IN_ALL))) {
        private enum enumMixinStr_GLIB_AVAILABLE_IN_ALL = `enum GLIB_AVAILABLE_IN_ALL = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_AVAILABLE_IN_ALL); }))) {
            mixin(enumMixinStr_GLIB_AVAILABLE_IN_ALL);
        }
    }




    static if(!is(typeof(GLIB_VERSION_MAX_ALLOWED))) {
        private enum enumMixinStr_GLIB_VERSION_MAX_ALLOWED = `enum GLIB_VERSION_MAX_ALLOWED = ( GLIB_VERSION_CUR_STABLE );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_MAX_ALLOWED); }))) {
            mixin(enumMixinStr_GLIB_VERSION_MAX_ALLOWED);
        }
    }




    static if(!is(typeof(GLIB_VERSION_MIN_REQUIRED))) {
        private enum enumMixinStr_GLIB_VERSION_MIN_REQUIRED = `enum GLIB_VERSION_MIN_REQUIRED = ( GLIB_VERSION_CUR_STABLE );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_MIN_REQUIRED); }))) {
            mixin(enumMixinStr_GLIB_VERSION_MIN_REQUIRED);
        }
    }




    static if(!is(typeof(GLIB_VERSION_PREV_STABLE))) {
        private enum enumMixinStr_GLIB_VERSION_PREV_STABLE = `enum GLIB_VERSION_PREV_STABLE = ( G_ENCODE_VERSION ( GLIB_MAJOR_VERSION , GLIB_MINOR_VERSION - 2 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_PREV_STABLE); }))) {
            mixin(enumMixinStr_GLIB_VERSION_PREV_STABLE);
        }
    }




    static if(!is(typeof(GLIB_VERSION_CUR_STABLE))) {
        private enum enumMixinStr_GLIB_VERSION_CUR_STABLE = `enum GLIB_VERSION_CUR_STABLE = ( G_ENCODE_VERSION ( GLIB_MAJOR_VERSION , GLIB_MINOR_VERSION ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_CUR_STABLE); }))) {
            mixin(enumMixinStr_GLIB_VERSION_CUR_STABLE);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_56))) {
        private enum enumMixinStr_GLIB_VERSION_2_56 = `enum GLIB_VERSION_2_56 = ( G_ENCODE_VERSION ( 2 , 56 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_56); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_56);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_54))) {
        private enum enumMixinStr_GLIB_VERSION_2_54 = `enum GLIB_VERSION_2_54 = ( G_ENCODE_VERSION ( 2 , 54 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_54); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_54);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_52))) {
        private enum enumMixinStr_GLIB_VERSION_2_52 = `enum GLIB_VERSION_2_52 = ( G_ENCODE_VERSION ( 2 , 52 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_52); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_52);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_50))) {
        private enum enumMixinStr_GLIB_VERSION_2_50 = `enum GLIB_VERSION_2_50 = ( G_ENCODE_VERSION ( 2 , 50 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_50); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_50);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_48))) {
        private enum enumMixinStr_GLIB_VERSION_2_48 = `enum GLIB_VERSION_2_48 = ( G_ENCODE_VERSION ( 2 , 48 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_48); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_48);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_46))) {
        private enum enumMixinStr_GLIB_VERSION_2_46 = `enum GLIB_VERSION_2_46 = ( G_ENCODE_VERSION ( 2 , 46 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_46); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_46);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_44))) {
        private enum enumMixinStr_GLIB_VERSION_2_44 = `enum GLIB_VERSION_2_44 = ( G_ENCODE_VERSION ( 2 , 44 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_44); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_44);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_42))) {
        private enum enumMixinStr_GLIB_VERSION_2_42 = `enum GLIB_VERSION_2_42 = ( G_ENCODE_VERSION ( 2 , 42 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_42); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_42);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_40))) {
        private enum enumMixinStr_GLIB_VERSION_2_40 = `enum GLIB_VERSION_2_40 = ( G_ENCODE_VERSION ( 2 , 40 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_40); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_40);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_38))) {
        private enum enumMixinStr_GLIB_VERSION_2_38 = `enum GLIB_VERSION_2_38 = ( G_ENCODE_VERSION ( 2 , 38 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_38); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_38);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_36))) {
        private enum enumMixinStr_GLIB_VERSION_2_36 = `enum GLIB_VERSION_2_36 = ( G_ENCODE_VERSION ( 2 , 36 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_36); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_36);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_34))) {
        private enum enumMixinStr_GLIB_VERSION_2_34 = `enum GLIB_VERSION_2_34 = ( G_ENCODE_VERSION ( 2 , 34 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_34); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_34);
        }
    }






    static if(!is(typeof(GLIB_VERSION_2_32))) {
        private enum enumMixinStr_GLIB_VERSION_2_32 = `enum GLIB_VERSION_2_32 = ( G_ENCODE_VERSION ( 2 , 32 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_32); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_32);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_30))) {
        private enum enumMixinStr_GLIB_VERSION_2_30 = `enum GLIB_VERSION_2_30 = ( G_ENCODE_VERSION ( 2 , 30 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_30); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_30);
        }
    }






    static if(!is(typeof(GLIB_VERSION_2_28))) {
        private enum enumMixinStr_GLIB_VERSION_2_28 = `enum GLIB_VERSION_2_28 = ( G_ENCODE_VERSION ( 2 , 28 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_28); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_28);
        }
    }




    static if(!is(typeof(GLIB_VERSION_2_26))) {
        private enum enumMixinStr_GLIB_VERSION_2_26 = `enum GLIB_VERSION_2_26 = ( G_ENCODE_VERSION ( 2 , 26 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VERSION_2_26); }))) {
            mixin(enumMixinStr_GLIB_VERSION_2_26);
        }
    }
    static if(!is(typeof(G_VARIANT_TYPE_VARDICT))) {
        private enum enumMixinStr_G_VARIANT_TYPE_VARDICT = `enum G_VARIANT_TYPE_VARDICT = ( cast( const GVariantType * ) "a{sv}" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_VARDICT); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_VARDICT);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_BYTESTRING_ARRAY))) {
        private enum enumMixinStr_G_VARIANT_TYPE_BYTESTRING_ARRAY = `enum G_VARIANT_TYPE_BYTESTRING_ARRAY = ( cast( const GVariantType * ) "aay" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_BYTESTRING_ARRAY); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_BYTESTRING_ARRAY);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_BYTESTRING))) {
        private enum enumMixinStr_G_VARIANT_TYPE_BYTESTRING = `enum G_VARIANT_TYPE_BYTESTRING = ( cast( const GVariantType * ) "ay" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_BYTESTRING); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_BYTESTRING);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_OBJECT_PATH_ARRAY))) {
        private enum enumMixinStr_G_VARIANT_TYPE_OBJECT_PATH_ARRAY = `enum G_VARIANT_TYPE_OBJECT_PATH_ARRAY = ( cast( const GVariantType * ) "ao" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_OBJECT_PATH_ARRAY); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_OBJECT_PATH_ARRAY);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_STRING_ARRAY))) {
        private enum enumMixinStr_G_VARIANT_TYPE_STRING_ARRAY = `enum G_VARIANT_TYPE_STRING_ARRAY = ( cast( const GVariantType * ) "as" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_STRING_ARRAY); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_STRING_ARRAY);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_DICTIONARY))) {
        private enum enumMixinStr_G_VARIANT_TYPE_DICTIONARY = `enum G_VARIANT_TYPE_DICTIONARY = ( cast( const GVariantType * ) "a{?*}" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_DICTIONARY); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_DICTIONARY);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_DICT_ENTRY))) {
        private enum enumMixinStr_G_VARIANT_TYPE_DICT_ENTRY = `enum G_VARIANT_TYPE_DICT_ENTRY = ( cast( const GVariantType * ) "{?*}" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_DICT_ENTRY); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_DICT_ENTRY);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_TUPLE))) {
        private enum enumMixinStr_G_VARIANT_TYPE_TUPLE = `enum G_VARIANT_TYPE_TUPLE = ( cast( const GVariantType * ) "r" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_TUPLE); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_TUPLE);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_ARRAY))) {
        private enum enumMixinStr_G_VARIANT_TYPE_ARRAY = `enum G_VARIANT_TYPE_ARRAY = ( cast( const GVariantType * ) "a*" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_ARRAY); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_ARRAY);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_MAYBE))) {
        private enum enumMixinStr_G_VARIANT_TYPE_MAYBE = `enum G_VARIANT_TYPE_MAYBE = ( cast( const GVariantType * ) "m*" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_MAYBE); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_MAYBE);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_BASIC))) {
        private enum enumMixinStr_G_VARIANT_TYPE_BASIC = `enum G_VARIANT_TYPE_BASIC = ( cast( const GVariantType * ) "?" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_BASIC); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_BASIC);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_ANY))) {
        private enum enumMixinStr_G_VARIANT_TYPE_ANY = `enum G_VARIANT_TYPE_ANY = ( cast( const GVariantType * ) "*" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_ANY); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_ANY);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_UNIT))) {
        private enum enumMixinStr_G_VARIANT_TYPE_UNIT = `enum G_VARIANT_TYPE_UNIT = ( cast( const GVariantType * ) "()" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_UNIT); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_UNIT);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_HANDLE))) {
        private enum enumMixinStr_G_VARIANT_TYPE_HANDLE = `enum G_VARIANT_TYPE_HANDLE = ( cast( const GVariantType * ) "h" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_HANDLE); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_HANDLE);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_VARIANT))) {
        private enum enumMixinStr_G_VARIANT_TYPE_VARIANT = `enum G_VARIANT_TYPE_VARIANT = ( cast( const GVariantType * ) "v" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_VARIANT); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_VARIANT);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_SIGNATURE))) {
        private enum enumMixinStr_G_VARIANT_TYPE_SIGNATURE = `enum G_VARIANT_TYPE_SIGNATURE = ( cast( const GVariantType * ) "g" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_SIGNATURE); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_SIGNATURE);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_OBJECT_PATH))) {
        private enum enumMixinStr_G_VARIANT_TYPE_OBJECT_PATH = `enum G_VARIANT_TYPE_OBJECT_PATH = ( cast( const GVariantType * ) "o" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_OBJECT_PATH); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_OBJECT_PATH);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_STRING))) {
        private enum enumMixinStr_G_VARIANT_TYPE_STRING = `enum G_VARIANT_TYPE_STRING = ( cast( const GVariantType * ) "s" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_STRING); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_STRING);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_DOUBLE))) {
        private enum enumMixinStr_G_VARIANT_TYPE_DOUBLE = `enum G_VARIANT_TYPE_DOUBLE = ( cast( const GVariantType * ) "d" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_DOUBLE); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_DOUBLE);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_UINT64))) {
        private enum enumMixinStr_G_VARIANT_TYPE_UINT64 = `enum G_VARIANT_TYPE_UINT64 = ( cast( const GVariantType * ) "t" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_UINT64); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_UINT64);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_INT64))) {
        private enum enumMixinStr_G_VARIANT_TYPE_INT64 = `enum G_VARIANT_TYPE_INT64 = ( cast( const GVariantType * ) "x" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_INT64); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_INT64);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_UINT32))) {
        private enum enumMixinStr_G_VARIANT_TYPE_UINT32 = `enum G_VARIANT_TYPE_UINT32 = ( cast( const GVariantType * ) "u" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_UINT32); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_UINT32);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_INT32))) {
        private enum enumMixinStr_G_VARIANT_TYPE_INT32 = `enum G_VARIANT_TYPE_INT32 = ( cast( const GVariantType * ) "i" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_INT32); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_INT32);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_UINT16))) {
        private enum enumMixinStr_G_VARIANT_TYPE_UINT16 = `enum G_VARIANT_TYPE_UINT16 = ( cast( const GVariantType * ) "q" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_UINT16); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_UINT16);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_INT16))) {
        private enum enumMixinStr_G_VARIANT_TYPE_INT16 = `enum G_VARIANT_TYPE_INT16 = ( cast( const GVariantType * ) "n" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_INT16); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_INT16);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_BYTE))) {
        private enum enumMixinStr_G_VARIANT_TYPE_BYTE = `enum G_VARIANT_TYPE_BYTE = ( cast( const GVariantType * ) "y" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_BYTE); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_BYTE);
        }
    }




    static if(!is(typeof(G_VARIANT_TYPE_BOOLEAN))) {
        private enum enumMixinStr_G_VARIANT_TYPE_BOOLEAN = `enum G_VARIANT_TYPE_BOOLEAN = ( cast( const GVariantType * ) "b" );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_TYPE_BOOLEAN); }))) {
            mixin(enumMixinStr_G_VARIANT_TYPE_BOOLEAN);
        }
    }
    static if(!is(typeof(G_VARIANT_PARSE_ERROR))) {
        private enum enumMixinStr_G_VARIANT_PARSE_ERROR = `enum G_VARIANT_PARSE_ERROR = ( g_variant_parse_error_quark ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_VARIANT_PARSE_ERROR); }))) {
            mixin(enumMixinStr_G_VARIANT_PARSE_ERROR);
        }
    }
    static if(!is(typeof(G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO))) {
        private enum enumMixinStr_G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO = `enum G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO = G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS ":";`;
        static if(is(typeof({ mixin(enumMixinStr_G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO); }))) {
            mixin(enumMixinStr_G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO);
        }
    }




    static if(!is(typeof(G_URI_RESERVED_CHARS_ALLOWED_IN_PATH))) {
        private enum enumMixinStr_G_URI_RESERVED_CHARS_ALLOWED_IN_PATH = `enum G_URI_RESERVED_CHARS_ALLOWED_IN_PATH = G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT "/";`;
        static if(is(typeof({ mixin(enumMixinStr_G_URI_RESERVED_CHARS_ALLOWED_IN_PATH); }))) {
            mixin(enumMixinStr_G_URI_RESERVED_CHARS_ALLOWED_IN_PATH);
        }
    }




    static if(!is(typeof(G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT))) {
        private enum enumMixinStr_G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT = `enum G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT = G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS ":@";`;
        static if(is(typeof({ mixin(enumMixinStr_G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT); }))) {
            mixin(enumMixinStr_G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT);
        }
    }




    static if(!is(typeof(G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS))) {
        private enum enumMixinStr_G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = `enum G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = "!$&'()*+,;=";`;
        static if(is(typeof({ mixin(enumMixinStr_G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS); }))) {
            mixin(enumMixinStr_G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS);
        }
    }




    static if(!is(typeof(G_URI_RESERVED_CHARS_GENERIC_DELIMITERS))) {
        private enum enumMixinStr_G_URI_RESERVED_CHARS_GENERIC_DELIMITERS = `enum G_URI_RESERVED_CHARS_GENERIC_DELIMITERS = ":/?#[]@";`;
        static if(is(typeof({ mixin(enumMixinStr_G_URI_RESERVED_CHARS_GENERIC_DELIMITERS); }))) {
            mixin(enumMixinStr_G_URI_RESERVED_CHARS_GENERIC_DELIMITERS);
        }
    }
    static if(!is(typeof(G_UNICHAR_MAX_DECOMPOSITION_LENGTH))) {
        private enum enumMixinStr_G_UNICHAR_MAX_DECOMPOSITION_LENGTH = `enum G_UNICHAR_MAX_DECOMPOSITION_LENGTH = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_G_UNICHAR_MAX_DECOMPOSITION_LENGTH); }))) {
            mixin(enumMixinStr_G_UNICHAR_MAX_DECOMPOSITION_LENGTH);
        }
    }




    static if(!is(typeof(G_UNICODE_COMBINING_MARK))) {
        private enum enumMixinStr_G_UNICODE_COMBINING_MARK = `enum G_UNICODE_COMBINING_MARK = G_UNICODE_SPACING_MARK;`;
        static if(is(typeof({ mixin(enumMixinStr_G_UNICODE_COMBINING_MARK); }))) {
            mixin(enumMixinStr_G_UNICODE_COMBINING_MARK);
        }
    }






    static if(!is(typeof(GLIB_VAR))) {
        private enum enumMixinStr_GLIB_VAR = `enum GLIB_VAR = _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_VAR); }))) {
            mixin(enumMixinStr_GLIB_VAR);
        }
    }




    static if(!is(typeof(G_LOG_2_BASE_10))) {
        private enum enumMixinStr_G_LOG_2_BASE_10 = `enum G_LOG_2_BASE_10 = ( 0.30102999566398119521 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_LOG_2_BASE_10); }))) {
            mixin(enumMixinStr_G_LOG_2_BASE_10);
        }
    }




    static if(!is(typeof(G_IEEE754_DOUBLE_BIAS))) {
        private enum enumMixinStr_G_IEEE754_DOUBLE_BIAS = `enum G_IEEE754_DOUBLE_BIAS = ( 1023 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_IEEE754_DOUBLE_BIAS); }))) {
            mixin(enumMixinStr_G_IEEE754_DOUBLE_BIAS);
        }
    }




    static if(!is(typeof(G_IEEE754_FLOAT_BIAS))) {
        private enum enumMixinStr_G_IEEE754_FLOAT_BIAS = `enum G_IEEE754_FLOAT_BIAS = ( 127 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_IEEE754_FLOAT_BIAS); }))) {
            mixin(enumMixinStr_G_IEEE754_FLOAT_BIAS);
        }
    }
    static if(!is(typeof(G_PDP_ENDIAN))) {
        private enum enumMixinStr_G_PDP_ENDIAN = `enum G_PDP_ENDIAN = 3412;`;
        static if(is(typeof({ mixin(enumMixinStr_G_PDP_ENDIAN); }))) {
            mixin(enumMixinStr_G_PDP_ENDIAN);
        }
    }




    static if(!is(typeof(G_BIG_ENDIAN))) {
        private enum enumMixinStr_G_BIG_ENDIAN = `enum G_BIG_ENDIAN = 4321;`;
        static if(is(typeof({ mixin(enumMixinStr_G_BIG_ENDIAN); }))) {
            mixin(enumMixinStr_G_BIG_ENDIAN);
        }
    }




    static if(!is(typeof(G_LITTLE_ENDIAN))) {
        private enum enumMixinStr_G_LITTLE_ENDIAN = `enum G_LITTLE_ENDIAN = 1234;`;
        static if(is(typeof({ mixin(enumMixinStr_G_LITTLE_ENDIAN); }))) {
            mixin(enumMixinStr_G_LITTLE_ENDIAN);
        }
    }




    static if(!is(typeof(G_SQRT2))) {
        private enum enumMixinStr_G_SQRT2 = `enum G_SQRT2 = 1.4142135623730950488016887242096980785696718753769;`;
        static if(is(typeof({ mixin(enumMixinStr_G_SQRT2); }))) {
            mixin(enumMixinStr_G_SQRT2);
        }
    }




    static if(!is(typeof(G_PI_4))) {
        private enum enumMixinStr_G_PI_4 = `enum G_PI_4 = 0.78539816339744830961566084581987572104929234984378;`;
        static if(is(typeof({ mixin(enumMixinStr_G_PI_4); }))) {
            mixin(enumMixinStr_G_PI_4);
        }
    }




    static if(!is(typeof(G_PI_2))) {
        private enum enumMixinStr_G_PI_2 = `enum G_PI_2 = 1.5707963267948966192313216916397514420985846996876;`;
        static if(is(typeof({ mixin(enumMixinStr_G_PI_2); }))) {
            mixin(enumMixinStr_G_PI_2);
        }
    }




    static if(!is(typeof(G_PI))) {
        private enum enumMixinStr_G_PI = `enum G_PI = 3.1415926535897932384626433832795028841971693993751;`;
        static if(is(typeof({ mixin(enumMixinStr_G_PI); }))) {
            mixin(enumMixinStr_G_PI);
        }
    }




    static if(!is(typeof(G_LN10))) {
        private enum enumMixinStr_G_LN10 = `enum G_LN10 = 2.3025850929940456840179914546843642076011014886288;`;
        static if(is(typeof({ mixin(enumMixinStr_G_LN10); }))) {
            mixin(enumMixinStr_G_LN10);
        }
    }




    static if(!is(typeof(G_LN2))) {
        private enum enumMixinStr_G_LN2 = `enum G_LN2 = 0.69314718055994530941723212145817656807550013436026;`;
        static if(is(typeof({ mixin(enumMixinStr_G_LN2); }))) {
            mixin(enumMixinStr_G_LN2);
        }
    }




    static if(!is(typeof(G_E))) {
        private enum enumMixinStr_G_E = `enum G_E = 2.7182818284590452353602874713526624977572470937000;`;
        static if(is(typeof({ mixin(enumMixinStr_G_E); }))) {
            mixin(enumMixinStr_G_E);
        }
    }




    static if(!is(typeof(G_MAXUINT64))) {
        private enum enumMixinStr_G_MAXUINT64 = `enum G_MAXUINT64 = G_GUINT64_CONSTANT ( 0xffffffffffffffff );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXUINT64); }))) {
            mixin(enumMixinStr_G_MAXUINT64);
        }
    }




    static if(!is(typeof(G_MAXINT64))) {
        private enum enumMixinStr_G_MAXINT64 = `enum G_MAXINT64 = G_GINT64_CONSTANT ( 0x7fffffffffffffff );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXINT64); }))) {
            mixin(enumMixinStr_G_MAXINT64);
        }
    }




    static if(!is(typeof(G_MININT64))) {
        private enum enumMixinStr_G_MININT64 = `enum G_MININT64 = ( cast( gint64 ) G_GINT64_CONSTANT ( - 0x8000000000000000 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MININT64); }))) {
            mixin(enumMixinStr_G_MININT64);
        }
    }




    static if(!is(typeof(G_MAXUINT32))) {
        private enum enumMixinStr_G_MAXUINT32 = `enum G_MAXUINT32 = ( cast( guint32 ) 0xffffffff );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXUINT32); }))) {
            mixin(enumMixinStr_G_MAXUINT32);
        }
    }




    static if(!is(typeof(G_MAXINT32))) {
        private enum enumMixinStr_G_MAXINT32 = `enum G_MAXINT32 = ( cast( gint32 ) 0x7fffffff );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXINT32); }))) {
            mixin(enumMixinStr_G_MAXINT32);
        }
    }




    static if(!is(typeof(G_MININT32))) {
        private enum enumMixinStr_G_MININT32 = `enum G_MININT32 = ( cast( gint32 ) - 0x80000000 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MININT32); }))) {
            mixin(enumMixinStr_G_MININT32);
        }
    }




    static if(!is(typeof(G_MAXUINT16))) {
        private enum enumMixinStr_G_MAXUINT16 = `enum G_MAXUINT16 = ( cast( guint16 ) 0xffff );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXUINT16); }))) {
            mixin(enumMixinStr_G_MAXUINT16);
        }
    }




    static if(!is(typeof(G_MAXINT16))) {
        private enum enumMixinStr_G_MAXINT16 = `enum G_MAXINT16 = ( cast( gint16 ) 0x7fff );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXINT16); }))) {
            mixin(enumMixinStr_G_MAXINT16);
        }
    }




    static if(!is(typeof(G_MININT16))) {
        private enum enumMixinStr_G_MININT16 = `enum G_MININT16 = ( cast( gint16 ) - 0x8000 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MININT16); }))) {
            mixin(enumMixinStr_G_MININT16);
        }
    }




    static if(!is(typeof(G_MAXUINT8))) {
        private enum enumMixinStr_G_MAXUINT8 = `enum G_MAXUINT8 = ( cast( guint8 ) 0xff );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXUINT8); }))) {
            mixin(enumMixinStr_G_MAXUINT8);
        }
    }




    static if(!is(typeof(G_MAXINT8))) {
        private enum enumMixinStr_G_MAXINT8 = `enum G_MAXINT8 = ( cast( gint8 ) 0x7f );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXINT8); }))) {
            mixin(enumMixinStr_G_MAXINT8);
        }
    }




    static if(!is(typeof(G_MININT8))) {
        private enum enumMixinStr_G_MININT8 = `enum G_MININT8 = ( cast( gint8 ) - 0x80 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MININT8); }))) {
            mixin(enumMixinStr_G_MININT8);
        }
    }
    static if(!is(typeof(G_USEC_PER_SEC))) {
        private enum enumMixinStr_G_USEC_PER_SEC = `enum G_USEC_PER_SEC = 1000000;`;
        static if(is(typeof({ mixin(enumMixinStr_G_USEC_PER_SEC); }))) {
            mixin(enumMixinStr_G_USEC_PER_SEC);
        }
    }
    static if(!is(typeof(G_ONCE_INIT))) {
        private enum enumMixinStr_G_ONCE_INIT = `enum G_ONCE_INIT = { G_ONCE_STATUS_NOTCALLED , null };`;
        static if(is(typeof({ mixin(enumMixinStr_G_ONCE_INIT); }))) {
            mixin(enumMixinStr_G_ONCE_INIT);
        }
    }






    static if(!is(typeof(G_THREAD_ERROR))) {
        private enum enumMixinStr_G_THREAD_ERROR = `enum G_THREAD_ERROR = g_thread_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_THREAD_ERROR); }))) {
            mixin(enumMixinStr_G_THREAD_ERROR);
        }
    }
    static if(!is(typeof(g_string_sprintfa))) {
        private enum enumMixinStr_g_string_sprintfa = `enum g_string_sprintfa = g_string_append_printf;`;
        static if(is(typeof({ mixin(enumMixinStr_g_string_sprintfa); }))) {
            mixin(enumMixinStr_g_string_sprintfa);
        }
    }




    static if(!is(typeof(g_string_sprintf))) {
        private enum enumMixinStr_g_string_sprintf = `enum g_string_sprintf = g_string_printf;`;
        static if(is(typeof({ mixin(enumMixinStr_g_string_sprintf); }))) {
            mixin(enumMixinStr_g_string_sprintf);
        }
    }
    static if(!is(typeof(G_NUMBER_PARSER_ERROR))) {
        private enum enumMixinStr_G_NUMBER_PARSER_ERROR = `enum G_NUMBER_PARSER_ERROR = ( g_number_parser_error_quark ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_NUMBER_PARSER_ERROR); }))) {
            mixin(enumMixinStr_G_NUMBER_PARSER_ERROR);
        }
    }






    static if(!is(typeof(G_ASCII_DTOSTR_BUF_SIZE))) {
        private enum enumMixinStr_G_ASCII_DTOSTR_BUF_SIZE = `enum G_ASCII_DTOSTR_BUF_SIZE = ( 29 + 10 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_ASCII_DTOSTR_BUF_SIZE); }))) {
            mixin(enumMixinStr_G_ASCII_DTOSTR_BUF_SIZE);
        }
    }




    static if(!is(typeof(G_STR_DELIMITERS))) {
        private enum enumMixinStr_G_STR_DELIMITERS = `enum G_STR_DELIMITERS = "_-|> <.";`;
        static if(is(typeof({ mixin(enumMixinStr_G_STR_DELIMITERS); }))) {
            mixin(enumMixinStr_G_STR_DELIMITERS);
        }
    }
    static if(!is(typeof(G_SPAWN_EXIT_ERROR))) {
        private enum enumMixinStr_G_SPAWN_EXIT_ERROR = `enum G_SPAWN_EXIT_ERROR = g_spawn_exit_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_SPAWN_EXIT_ERROR); }))) {
            mixin(enumMixinStr_G_SPAWN_EXIT_ERROR);
        }
    }




    static if(!is(typeof(G_SPAWN_ERROR))) {
        private enum enumMixinStr_G_SPAWN_ERROR = `enum G_SPAWN_ERROR = g_spawn_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_SPAWN_ERROR); }))) {
            mixin(enumMixinStr_G_SPAWN_ERROR);
        }
    }
    static if(!is(typeof(g_slist_free1))) {
        private enum enumMixinStr_g_slist_free1 = `enum g_slist_free1 = g_slist_free_1;`;
        static if(is(typeof({ mixin(enumMixinStr_g_slist_free1); }))) {
            mixin(enumMixinStr_g_slist_free1);
        }
    }
    static if(!is(typeof(_SCHED_H))) {
        private enum enumMixinStr__SCHED_H = `enum _SCHED_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SCHED_H); }))) {
            mixin(enumMixinStr__SCHED_H);
        }
    }
    static if(!is(typeof(G_SHELL_ERROR))) {
        private enum enumMixinStr_G_SHELL_ERROR = `enum G_SHELL_ERROR = g_shell_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_SHELL_ERROR); }))) {
            mixin(enumMixinStr_G_SHELL_ERROR);
        }
    }
    static if(!is(typeof(sched_priority))) {
        private enum enumMixinStr_sched_priority = `enum sched_priority = sched_priority;`;
        static if(is(typeof({ mixin(enumMixinStr_sched_priority); }))) {
            mixin(enumMixinStr_sched_priority);
        }
    }




    static if(!is(typeof(__sched_priority))) {
        private enum enumMixinStr___sched_priority = `enum __sched_priority = sched_priority;`;
        static if(is(typeof({ mixin(enumMixinStr___sched_priority); }))) {
            mixin(enumMixinStr___sched_priority);
        }
    }
    static if(!is(typeof(G_CSET_LATINS))) {
        private enum enumMixinStr_G_CSET_LATINS = `enum G_CSET_LATINS = "\337\340\341\342\343\344\345\346" "\347\350\351\352\353\354\355\356\357\360" "\361\362\363\364\365\366" "\370\371\372\373\374\375\376\377";`;
        static if(is(typeof({ mixin(enumMixinStr_G_CSET_LATINS); }))) {
            mixin(enumMixinStr_G_CSET_LATINS);
        }
    }




    static if(!is(typeof(G_CSET_LATINC))) {
        private enum enumMixinStr_G_CSET_LATINC = `enum G_CSET_LATINC = "\300\301\302\303\304\305\306" "\307\310\311\312\313\314\315\316\317\320" "\321\322\323\324\325\326" "\330\331\332\333\334\335\336";`;
        static if(is(typeof({ mixin(enumMixinStr_G_CSET_LATINC); }))) {
            mixin(enumMixinStr_G_CSET_LATINC);
        }
    }




    static if(!is(typeof(G_CSET_DIGITS))) {
        private enum enumMixinStr_G_CSET_DIGITS = `enum G_CSET_DIGITS = "0123456789";`;
        static if(is(typeof({ mixin(enumMixinStr_G_CSET_DIGITS); }))) {
            mixin(enumMixinStr_G_CSET_DIGITS);
        }
    }




    static if(!is(typeof(G_CSET_a_2_z))) {
        private enum enumMixinStr_G_CSET_a_2_z = `enum G_CSET_a_2_z = "abcdefghijklmnopqrstuvwxyz";`;
        static if(is(typeof({ mixin(enumMixinStr_G_CSET_a_2_z); }))) {
            mixin(enumMixinStr_G_CSET_a_2_z);
        }
    }




    static if(!is(typeof(G_CSET_A_2_Z))) {
        private enum enumMixinStr_G_CSET_A_2_Z = `enum G_CSET_A_2_Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";`;
        static if(is(typeof({ mixin(enumMixinStr_G_CSET_A_2_Z); }))) {
            mixin(enumMixinStr_G_CSET_A_2_Z);
        }
    }






    static if(!is(typeof(G_REGEX_ERROR))) {
        private enum enumMixinStr_G_REGEX_ERROR = `enum G_REGEX_ERROR = g_regex_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_REGEX_ERROR); }))) {
            mixin(enumMixinStr_G_REGEX_ERROR);
        }
    }
    static if(!is(typeof(G_QUEUE_INIT))) {
        private enum enumMixinStr_G_QUEUE_INIT = `enum G_QUEUE_INIT = { null , null , 0 };`;
        static if(is(typeof({ mixin(enumMixinStr_G_QUEUE_INIT); }))) {
            mixin(enumMixinStr_G_QUEUE_INIT);
        }
    }
    static if(!is(typeof(G_OPTION_REMAINING))) {
        private enum enumMixinStr_G_OPTION_REMAINING = `enum G_OPTION_REMAINING = "";`;
        static if(is(typeof({ mixin(enumMixinStr_G_OPTION_REMAINING); }))) {
            mixin(enumMixinStr_G_OPTION_REMAINING);
        }
    }




    static if(!is(typeof(G_OPTION_ERROR))) {
        private enum enumMixinStr_G_OPTION_ERROR = `enum G_OPTION_ERROR = ( g_option_error_quark ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_OPTION_ERROR); }))) {
            mixin(enumMixinStr_G_OPTION_ERROR);
        }
    }
    static if(!is(typeof(G_LOG_DOMAIN))) {
        private enum enumMixinStr_G_LOG_DOMAIN = `enum G_LOG_DOMAIN = ( cast( gchar * ) 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_LOG_DOMAIN); }))) {
            mixin(enumMixinStr_G_LOG_DOMAIN);
        }
    }






    static if(!is(typeof(G_LOG_FATAL_MASK))) {
        private enum enumMixinStr_G_LOG_FATAL_MASK = `enum G_LOG_FATAL_MASK = ( G_LOG_FLAG_RECURSION | G_LOG_LEVEL_ERROR );`;
        static if(is(typeof({ mixin(enumMixinStr_G_LOG_FATAL_MASK); }))) {
            mixin(enumMixinStr_G_LOG_FATAL_MASK);
        }
    }




    static if(!is(typeof(G_LOG_LEVEL_USER_SHIFT))) {
        private enum enumMixinStr_G_LOG_LEVEL_USER_SHIFT = `enum G_LOG_LEVEL_USER_SHIFT = ( 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_LOG_LEVEL_USER_SHIFT); }))) {
            mixin(enumMixinStr_G_LOG_LEVEL_USER_SHIFT);
        }
    }
    static if(!is(typeof(G_MEM_ALIGN))) {
        private enum enumMixinStr_G_MEM_ALIGN = `enum G_MEM_ALIGN = GLIB_SIZEOF_LONG;`;
        static if(is(typeof({ mixin(enumMixinStr_G_MEM_ALIGN); }))) {
            mixin(enumMixinStr_G_MEM_ALIGN);
        }
    }






    static if(!is(typeof(G_MARKUP_ERROR))) {
        private enum enumMixinStr_G_MARKUP_ERROR = `enum G_MARKUP_ERROR = g_markup_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MARKUP_ERROR); }))) {
            mixin(enumMixinStr_G_MARKUP_ERROR);
        }
    }
    static if(!is(typeof(G_SOURCE_CONTINUE))) {
        private enum enumMixinStr_G_SOURCE_CONTINUE = `enum G_SOURCE_CONTINUE = TRUE;`;
        static if(is(typeof({ mixin(enumMixinStr_G_SOURCE_CONTINUE); }))) {
            mixin(enumMixinStr_G_SOURCE_CONTINUE);
        }
    }




    static if(!is(typeof(G_SOURCE_REMOVE))) {
        private enum enumMixinStr_G_SOURCE_REMOVE = `enum G_SOURCE_REMOVE = FALSE;`;
        static if(is(typeof({ mixin(enumMixinStr_G_SOURCE_REMOVE); }))) {
            mixin(enumMixinStr_G_SOURCE_REMOVE);
        }
    }




    static if(!is(typeof(G_PRIORITY_LOW))) {
        private enum enumMixinStr_G_PRIORITY_LOW = `enum G_PRIORITY_LOW = 300;`;
        static if(is(typeof({ mixin(enumMixinStr_G_PRIORITY_LOW); }))) {
            mixin(enumMixinStr_G_PRIORITY_LOW);
        }
    }




    static if(!is(typeof(NSIG))) {
        private enum enumMixinStr_NSIG = `enum NSIG = _NSIG;`;
        static if(is(typeof({ mixin(enumMixinStr_NSIG); }))) {
            mixin(enumMixinStr_NSIG);
        }
    }




    static if(!is(typeof(G_PRIORITY_DEFAULT_IDLE))) {
        private enum enumMixinStr_G_PRIORITY_DEFAULT_IDLE = `enum G_PRIORITY_DEFAULT_IDLE = 200;`;
        static if(is(typeof({ mixin(enumMixinStr_G_PRIORITY_DEFAULT_IDLE); }))) {
            mixin(enumMixinStr_G_PRIORITY_DEFAULT_IDLE);
        }
    }




    static if(!is(typeof(G_PRIORITY_HIGH_IDLE))) {
        private enum enumMixinStr_G_PRIORITY_HIGH_IDLE = `enum G_PRIORITY_HIGH_IDLE = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_G_PRIORITY_HIGH_IDLE); }))) {
            mixin(enumMixinStr_G_PRIORITY_HIGH_IDLE);
        }
    }




    static if(!is(typeof(G_PRIORITY_DEFAULT))) {
        private enum enumMixinStr_G_PRIORITY_DEFAULT = `enum G_PRIORITY_DEFAULT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_G_PRIORITY_DEFAULT); }))) {
            mixin(enumMixinStr_G_PRIORITY_DEFAULT);
        }
    }




    static if(!is(typeof(G_PRIORITY_HIGH))) {
        private enum enumMixinStr_G_PRIORITY_HIGH = `enum G_PRIORITY_HIGH = - 100;`;
        static if(is(typeof({ mixin(enumMixinStr_G_PRIORITY_HIGH); }))) {
            mixin(enumMixinStr_G_PRIORITY_HIGH);
        }
    }






    static if(!is(typeof(g_autofree))) {
        private enum enumMixinStr_g_autofree = `enum g_autofree = _GLIB_CLEANUP ( g_autoptr_cleanup_generic_gfree );`;
        static if(is(typeof({ mixin(enumMixinStr_g_autofree); }))) {
            mixin(enumMixinStr_g_autofree);
        }
    }
    static if(!is(typeof(GLIB_DEPRECATED))) {
        private enum enumMixinStr_GLIB_DEPRECATED = `enum GLIB_DEPRECATED = G_DEPRECATED _GLIB_EXTERN;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_DEPRECATED); }))) {
            mixin(enumMixinStr_GLIB_DEPRECATED);
        }
    }




    static if(!is(typeof(_GLIB_EXTERN))) {
        private enum enumMixinStr__GLIB_EXTERN = `enum _GLIB_EXTERN = extern;`;
        static if(is(typeof({ mixin(enumMixinStr__GLIB_EXTERN); }))) {
            mixin(enumMixinStr__GLIB_EXTERN);
        }
    }
    static if(!is(typeof(G_DEPRECATED))) {
        private enum enumMixinStr_G_DEPRECATED = `enum G_DEPRECATED = __attribute__ ( ( __deprecated__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_DEPRECATED); }))) {
            mixin(enumMixinStr_G_DEPRECATED);
        }
    }
    static if(!is(typeof(G_CONST_RETURN))) {
        private enum enumMixinStr_G_CONST_RETURN = `enum G_CONST_RETURN = const;`;
        static if(is(typeof({ mixin(enumMixinStr_G_CONST_RETURN); }))) {
            mixin(enumMixinStr_G_CONST_RETURN);
        }
    }




    static if(!is(typeof(G_STMT_END))) {
        private enum enumMixinStr_G_STMT_END = `enum G_STMT_END = while ( 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_STMT_END); }))) {
            mixin(enumMixinStr_G_STMT_END);
        }
    }




    static if(!is(typeof(G_STMT_START))) {
        private enum enumMixinStr_G_STMT_START = `enum G_STMT_START = do;`;
        static if(is(typeof({ mixin(enumMixinStr_G_STMT_START); }))) {
            mixin(enumMixinStr_G_STMT_START);
        }
    }
    static if(!is(typeof(TRUE))) {
        private enum enumMixinStr_TRUE = `enum TRUE = ( ! FALSE );`;
        static if(is(typeof({ mixin(enumMixinStr_TRUE); }))) {
            mixin(enumMixinStr_TRUE);
        }
    }




    static if(!is(typeof(FALSE))) {
        private enum enumMixinStr_FALSE = `enum FALSE = ( 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_FALSE); }))) {
            mixin(enumMixinStr_FALSE);
        }
    }
    static if(!is(typeof(G_STRFUNC))) {
        private enum enumMixinStr_G_STRFUNC = `enum G_STRFUNC = ( cast( const char * ) cast( __func__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_STRFUNC); }))) {
            mixin(enumMixinStr_G_STRFUNC);
        }
    }




    static if(!is(typeof(G_STRLOC))) {
        private enum enumMixinStr_G_STRLOC = `enum G_STRLOC = "/tmp/arrow.d.tmp" ":" G_STRINGIFY ( 20602 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_STRLOC); }))) {
            mixin(enumMixinStr_G_STRLOC);
        }
    }
    static if(!is(typeof(G_ANALYZER_ANALYZING))) {
        private enum enumMixinStr_G_ANALYZER_ANALYZING = `enum G_ANALYZER_ANALYZING = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_G_ANALYZER_ANALYZING); }))) {
            mixin(enumMixinStr_G_ANALYZER_ANALYZING);
        }
    }




    static if(!is(typeof(G_GNUC_PRETTY_FUNCTION))) {
        private enum enumMixinStr_G_GNUC_PRETTY_FUNCTION = `enum G_GNUC_PRETTY_FUNCTION = "";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_PRETTY_FUNCTION); }))) {
            mixin(enumMixinStr_G_GNUC_PRETTY_FUNCTION);
        }
    }




    static if(!is(typeof(G_GNUC_FUNCTION))) {
        private enum enumMixinStr_G_GNUC_FUNCTION = `enum G_GNUC_FUNCTION = "";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_FUNCTION); }))) {
            mixin(enumMixinStr_G_GNUC_FUNCTION);
        }
    }




    static if(!is(typeof(G_GNUC_WARN_UNUSED_RESULT))) {
        private enum enumMixinStr_G_GNUC_WARN_UNUSED_RESULT = `enum G_GNUC_WARN_UNUSED_RESULT = __attribute__ ( ( warn_unused_result ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_WARN_UNUSED_RESULT); }))) {
            mixin(enumMixinStr_G_GNUC_WARN_UNUSED_RESULT);
        }
    }




    static if(!is(typeof(G_GNUC_MAY_ALIAS))) {
        private enum enumMixinStr_G_GNUC_MAY_ALIAS = `enum G_GNUC_MAY_ALIAS = __attribute__ ( ( may_alias ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_MAY_ALIAS); }))) {
            mixin(enumMixinStr_G_GNUC_MAY_ALIAS);
        }
    }




    static if(!is(typeof(G_GNUC_END_IGNORE_DEPRECATIONS))) {
        private enum enumMixinStr_G_GNUC_END_IGNORE_DEPRECATIONS = `enum G_GNUC_END_IGNORE_DEPRECATIONS =
        ;`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_END_IGNORE_DEPRECATIONS); }))) {
            mixin(enumMixinStr_G_GNUC_END_IGNORE_DEPRECATIONS);
        }
    }




    static if(!is(typeof(G_GNUC_BEGIN_IGNORE_DEPRECATIONS))) {
        private enum enumMixinStr_G_GNUC_BEGIN_IGNORE_DEPRECATIONS = `enum G_GNUC_BEGIN_IGNORE_DEPRECATIONS =
       
        ;`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_BEGIN_IGNORE_DEPRECATIONS); }))) {
            mixin(enumMixinStr_G_GNUC_BEGIN_IGNORE_DEPRECATIONS);
        }
    }






    static if(!is(typeof(G_GNUC_DEPRECATED))) {
        private enum enumMixinStr_G_GNUC_DEPRECATED = `enum G_GNUC_DEPRECATED = __attribute__ ( ( __deprecated__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_DEPRECATED); }))) {
            mixin(enumMixinStr_G_GNUC_DEPRECATED);
        }
    }




    static if(!is(typeof(G_GNUC_NO_INSTRUMENT))) {
        private enum enumMixinStr_G_GNUC_NO_INSTRUMENT = `enum G_GNUC_NO_INSTRUMENT = __attribute__ ( ( __no_instrument_function__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_NO_INSTRUMENT); }))) {
            mixin(enumMixinStr_G_GNUC_NO_INSTRUMENT);
        }
    }




    static if(!is(typeof(G_GNUC_UNUSED))) {
        private enum enumMixinStr_G_GNUC_UNUSED = `enum G_GNUC_UNUSED = __attribute__ ( ( __unused__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_UNUSED); }))) {
            mixin(enumMixinStr_G_GNUC_UNUSED);
        }
    }




    static if(!is(typeof(G_GNUC_CONST))) {
        private enum enumMixinStr_G_GNUC_CONST = `enum G_GNUC_CONST = __attribute__ ( cast( __const__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_CONST); }))) {
            mixin(enumMixinStr_G_GNUC_CONST);
        }
    }




    static if(!is(typeof(G_GNUC_NORETURN))) {
        private enum enumMixinStr_G_GNUC_NORETURN = `enum G_GNUC_NORETURN = __attribute__ ( ( __noreturn__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_NORETURN); }))) {
            mixin(enumMixinStr_G_GNUC_NORETURN);
        }
    }
    static if(!is(typeof(SIGRTMIN))) {
        private enum enumMixinStr_SIGRTMIN = `enum SIGRTMIN = ( __libc_current_sigrtmin ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SIGRTMIN); }))) {
            mixin(enumMixinStr_SIGRTMIN);
        }
    }




    static if(!is(typeof(SIGRTMAX))) {
        private enum enumMixinStr_SIGRTMAX = `enum SIGRTMAX = ( __libc_current_sigrtmax ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SIGRTMAX); }))) {
            mixin(enumMixinStr_SIGRTMAX);
        }
    }






    static if(!is(typeof(_STDC_PREDEF_H))) {
        private enum enumMixinStr__STDC_PREDEF_H = `enum _STDC_PREDEF_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STDC_PREDEF_H); }))) {
            mixin(enumMixinStr__STDC_PREDEF_H);
        }
    }
    static if(!is(typeof(G_GNUC_NULL_TERMINATED))) {
        private enum enumMixinStr_G_GNUC_NULL_TERMINATED = `enum G_GNUC_NULL_TERMINATED = __attribute__ ( ( __sentinel__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_NULL_TERMINATED); }))) {
            mixin(enumMixinStr_G_GNUC_NULL_TERMINATED);
        }
    }




    static if(!is(typeof(G_GNUC_MALLOC))) {
        private enum enumMixinStr_G_GNUC_MALLOC = `enum G_GNUC_MALLOC = __attribute__ ( ( __malloc__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_MALLOC); }))) {
            mixin(enumMixinStr_G_GNUC_MALLOC);
        }
    }




    static if(!is(typeof(_STDLIB_H))) {
        private enum enumMixinStr__STDLIB_H = `enum _STDLIB_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STDLIB_H); }))) {
            mixin(enumMixinStr__STDLIB_H);
        }
    }




    static if(!is(typeof(G_GNUC_PURE))) {
        private enum enumMixinStr_G_GNUC_PURE = `enum G_GNUC_PURE = __attribute__ ( ( __pure__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_PURE); }))) {
            mixin(enumMixinStr_G_GNUC_PURE);
        }
    }




    static if(!is(typeof(G_INLINE_FUNC))) {
        private enum enumMixinStr_G_INLINE_FUNC = `enum G_INLINE_FUNC = static inline;`;
        static if(is(typeof({ mixin(enumMixinStr_G_INLINE_FUNC); }))) {
            mixin(enumMixinStr_G_INLINE_FUNC);
        }
    }
    static if(!is(typeof(G_GNUC_EXTENSION))) {
        private enum enumMixinStr_G_GNUC_EXTENSION = `enum G_GNUC_EXTENSION = __extension__;`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_EXTENSION); }))) {
            mixin(enumMixinStr_G_GNUC_EXTENSION);
        }
    }
    static if(!is(typeof(g_list_free1))) {
        private enum enumMixinStr_g_list_free1 = `enum g_list_free1 = g_list_free_1;`;
        static if(is(typeof({ mixin(enumMixinStr_g_list_free1); }))) {
            mixin(enumMixinStr_g_list_free1);
        }
    }




    static if(!is(typeof(__ldiv_t_defined))) {
        private enum enumMixinStr___ldiv_t_defined = `enum __ldiv_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___ldiv_t_defined); }))) {
            mixin(enumMixinStr___ldiv_t_defined);
        }
    }






    static if(!is(typeof(G_KEY_FILE_DESKTOP_TYPE_DIRECTORY))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_TYPE_DIRECTORY = `enum G_KEY_FILE_DESKTOP_TYPE_DIRECTORY = "Directory";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_TYPE_DIRECTORY); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_TYPE_DIRECTORY);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_TYPE_LINK))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_TYPE_LINK = `enum G_KEY_FILE_DESKTOP_TYPE_LINK = "Link";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_TYPE_LINK); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_TYPE_LINK);
        }
    }




    static if(!is(typeof(__lldiv_t_defined))) {
        private enum enumMixinStr___lldiv_t_defined = `enum __lldiv_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___lldiv_t_defined); }))) {
            mixin(enumMixinStr___lldiv_t_defined);
        }
    }




    static if(!is(typeof(RAND_MAX))) {
        private enum enumMixinStr_RAND_MAX = `enum RAND_MAX = 2147483647;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_MAX); }))) {
            mixin(enumMixinStr_RAND_MAX);
        }
    }




    static if(!is(typeof(EXIT_FAILURE))) {
        private enum enumMixinStr_EXIT_FAILURE = `enum EXIT_FAILURE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_EXIT_FAILURE); }))) {
            mixin(enumMixinStr_EXIT_FAILURE);
        }
    }




    static if(!is(typeof(EXIT_SUCCESS))) {
        private enum enumMixinStr_EXIT_SUCCESS = `enum EXIT_SUCCESS = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_EXIT_SUCCESS); }))) {
            mixin(enumMixinStr_EXIT_SUCCESS);
        }
    }




    static if(!is(typeof(MB_CUR_MAX))) {
        private enum enumMixinStr_MB_CUR_MAX = `enum MB_CUR_MAX = ( __ctype_get_mb_cur_max ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_MB_CUR_MAX); }))) {
            mixin(enumMixinStr_MB_CUR_MAX);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_TYPE_APPLICATION))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_TYPE_APPLICATION = `enum G_KEY_FILE_DESKTOP_TYPE_APPLICATION = "Application";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_TYPE_APPLICATION); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_TYPE_APPLICATION);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_KEYWORDS))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_KEYWORDS = `enum G_KEY_FILE_DESKTOP_KEY_KEYWORDS = "Keywords";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_KEYWORDS); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_KEYWORDS);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_FULLNAME))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_FULLNAME = `enum G_KEY_FILE_DESKTOP_KEY_FULLNAME = "X-GNOME-FullName";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_FULLNAME); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_FULLNAME);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN = `enum G_KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN = "X-GNOME-Gettext-Domain";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_ACTIONS))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_ACTIONS = `enum G_KEY_FILE_DESKTOP_KEY_ACTIONS = "Actions";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_ACTIONS); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_ACTIONS);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = `enum G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = "DBusActivatable";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_URL))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_URL = `enum G_KEY_FILE_DESKTOP_KEY_URL = "URL";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_URL); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_URL);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = `enum G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = "StartupWMClass";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = `enum G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = "StartupNotify";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_CATEGORIES))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_CATEGORIES = `enum G_KEY_FILE_DESKTOP_KEY_CATEGORIES = "Categories";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_CATEGORIES); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_CATEGORIES);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_MIME_TYPE))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_MIME_TYPE = `enum G_KEY_FILE_DESKTOP_KEY_MIME_TYPE = "MimeType";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_MIME_TYPE); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_MIME_TYPE);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_TERMINAL))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_TERMINAL = `enum G_KEY_FILE_DESKTOP_KEY_TERMINAL = "Terminal";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_TERMINAL); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_TERMINAL);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_PATH))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_PATH = `enum G_KEY_FILE_DESKTOP_KEY_PATH = "Path";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_PATH); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_PATH);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_EXEC))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_EXEC = `enum G_KEY_FILE_DESKTOP_KEY_EXEC = "Exec";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_EXEC); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_EXEC);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_TRY_EXEC))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_TRY_EXEC = `enum G_KEY_FILE_DESKTOP_KEY_TRY_EXEC = "TryExec";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_TRY_EXEC); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_TRY_EXEC);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = `enum G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = "NotShowIn";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = `enum G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = "OnlyShowIn";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_HIDDEN))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_HIDDEN = `enum G_KEY_FILE_DESKTOP_KEY_HIDDEN = "Hidden";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_HIDDEN); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_HIDDEN);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_ICON))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_ICON = `enum G_KEY_FILE_DESKTOP_KEY_ICON = "Icon";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_ICON); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_ICON);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_COMMENT))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_COMMENT = `enum G_KEY_FILE_DESKTOP_KEY_COMMENT = "Comment";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_COMMENT); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_COMMENT);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY = `enum G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY = "NoDisplay";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME = `enum G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME = "GenericName";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_NAME))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_NAME = `enum G_KEY_FILE_DESKTOP_KEY_NAME = "Name";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_NAME); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_NAME);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_VERSION))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_VERSION = `enum G_KEY_FILE_DESKTOP_KEY_VERSION = "Version";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_VERSION); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_VERSION);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_KEY_TYPE))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_KEY_TYPE = `enum G_KEY_FILE_DESKTOP_KEY_TYPE = "Type";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_TYPE); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_KEY_TYPE);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_ACTION_GROUP_PREFIX))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_ACTION_GROUP_PREFIX = `enum G_KEY_FILE_DESKTOP_ACTION_GROUP_PREFIX = "Desktop Action";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_ACTION_GROUP_PREFIX); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_ACTION_GROUP_PREFIX);
        }
    }




    static if(!is(typeof(G_KEY_FILE_DESKTOP_GROUP))) {
        private enum enumMixinStr_G_KEY_FILE_DESKTOP_GROUP = `enum G_KEY_FILE_DESKTOP_GROUP = "Desktop Entry";`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_DESKTOP_GROUP); }))) {
            mixin(enumMixinStr_G_KEY_FILE_DESKTOP_GROUP);
        }
    }




    static if(!is(typeof(G_KEY_FILE_ERROR))) {
        private enum enumMixinStr_G_KEY_FILE_ERROR = `enum G_KEY_FILE_ERROR = g_key_file_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_KEY_FILE_ERROR); }))) {
            mixin(enumMixinStr_G_KEY_FILE_ERROR);
        }
    }






    static if(!is(typeof(G_IO_CHANNEL_ERROR))) {
        private enum enumMixinStr_G_IO_CHANNEL_ERROR = `enum G_IO_CHANNEL_ERROR = g_io_channel_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_IO_CHANNEL_ERROR); }))) {
            mixin(enumMixinStr_G_IO_CHANNEL_ERROR);
        }
    }
    static if(!is(typeof(G_HOOK_FLAG_USER_SHIFT))) {
        private enum enumMixinStr_G_HOOK_FLAG_USER_SHIFT = `enum G_HOOK_FLAG_USER_SHIFT = ( 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_HOOK_FLAG_USER_SHIFT); }))) {
            mixin(enumMixinStr_G_HOOK_FLAG_USER_SHIFT);
        }
    }
    static if(!is(typeof(g_dirname))) {
        private enum enumMixinStr_g_dirname = `enum g_dirname = g_path_get_dirname;`;
        static if(is(typeof({ mixin(enumMixinStr_g_dirname); }))) {
            mixin(enumMixinStr_g_dirname);
        }
    }






    static if(!is(typeof(G_FILE_ERROR))) {
        private enum enumMixinStr_G_FILE_ERROR = `enum G_FILE_ERROR = g_file_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ERROR); }))) {
            mixin(enumMixinStr_G_FILE_ERROR);
        }
    }
    static if(!is(typeof(G_TIME_SPAN_MILLISECOND))) {
        private enum enumMixinStr_G_TIME_SPAN_MILLISECOND = `enum G_TIME_SPAN_MILLISECOND = ( G_GINT64_CONSTANT ( 1000 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TIME_SPAN_MILLISECOND); }))) {
            mixin(enumMixinStr_G_TIME_SPAN_MILLISECOND);
        }
    }




    static if(!is(typeof(G_TIME_SPAN_SECOND))) {
        private enum enumMixinStr_G_TIME_SPAN_SECOND = `enum G_TIME_SPAN_SECOND = ( G_GINT64_CONSTANT ( 1000000 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TIME_SPAN_SECOND); }))) {
            mixin(enumMixinStr_G_TIME_SPAN_SECOND);
        }
    }




    static if(!is(typeof(G_TIME_SPAN_MINUTE))) {
        private enum enumMixinStr_G_TIME_SPAN_MINUTE = `enum G_TIME_SPAN_MINUTE = ( G_GINT64_CONSTANT ( 60000000 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TIME_SPAN_MINUTE); }))) {
            mixin(enumMixinStr_G_TIME_SPAN_MINUTE);
        }
    }




    static if(!is(typeof(G_TIME_SPAN_HOUR))) {
        private enum enumMixinStr_G_TIME_SPAN_HOUR = `enum G_TIME_SPAN_HOUR = ( G_GINT64_CONSTANT ( 3600000000 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TIME_SPAN_HOUR); }))) {
            mixin(enumMixinStr_G_TIME_SPAN_HOUR);
        }
    }




    static if(!is(typeof(G_TIME_SPAN_DAY))) {
        private enum enumMixinStr_G_TIME_SPAN_DAY = `enum G_TIME_SPAN_DAY = ( G_GINT64_CONSTANT ( 86400000000 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TIME_SPAN_DAY); }))) {
            mixin(enumMixinStr_G_TIME_SPAN_DAY);
        }
    }






    static if(!is(typeof(g_date_sunday_weeks_in_year))) {
        private enum enumMixinStr_g_date_sunday_weeks_in_year = `enum g_date_sunday_weeks_in_year = g_date_get_sunday_weeks_in_year;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_sunday_weeks_in_year); }))) {
            mixin(enumMixinStr_g_date_sunday_weeks_in_year);
        }
    }




    static if(!is(typeof(g_date_monday_weeks_in_year))) {
        private enum enumMixinStr_g_date_monday_weeks_in_year = `enum g_date_monday_weeks_in_year = g_date_get_monday_weeks_in_year;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_monday_weeks_in_year); }))) {
            mixin(enumMixinStr_g_date_monday_weeks_in_year);
        }
    }




    static if(!is(typeof(g_date_days_in_month))) {
        private enum enumMixinStr_g_date_days_in_month = `enum g_date_days_in_month = g_date_get_days_in_month;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_days_in_month); }))) {
            mixin(enumMixinStr_g_date_days_in_month);
        }
    }




    static if(!is(typeof(g_date_sunday_week_of_year))) {
        private enum enumMixinStr_g_date_sunday_week_of_year = `enum g_date_sunday_week_of_year = g_date_get_sunday_week_of_year;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_sunday_week_of_year); }))) {
            mixin(enumMixinStr_g_date_sunday_week_of_year);
        }
    }




    static if(!is(typeof(g_date_monday_week_of_year))) {
        private enum enumMixinStr_g_date_monday_week_of_year = `enum g_date_monday_week_of_year = g_date_get_monday_week_of_year;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_monday_week_of_year); }))) {
            mixin(enumMixinStr_g_date_monday_week_of_year);
        }
    }




    static if(!is(typeof(g_date_day_of_year))) {
        private enum enumMixinStr_g_date_day_of_year = `enum g_date_day_of_year = g_date_get_day_of_year;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_day_of_year); }))) {
            mixin(enumMixinStr_g_date_day_of_year);
        }
    }




    static if(!is(typeof(g_date_julian))) {
        private enum enumMixinStr_g_date_julian = `enum g_date_julian = g_date_get_julian;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_julian); }))) {
            mixin(enumMixinStr_g_date_julian);
        }
    }




    static if(!is(typeof(g_date_day))) {
        private enum enumMixinStr_g_date_day = `enum g_date_day = g_date_get_day;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_day); }))) {
            mixin(enumMixinStr_g_date_day);
        }
    }




    static if(!is(typeof(g_date_year))) {
        private enum enumMixinStr_g_date_year = `enum g_date_year = g_date_get_year;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_year); }))) {
            mixin(enumMixinStr_g_date_year);
        }
    }




    static if(!is(typeof(g_date_month))) {
        private enum enumMixinStr_g_date_month = `enum g_date_month = g_date_get_month;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_month); }))) {
            mixin(enumMixinStr_g_date_month);
        }
    }




    static if(!is(typeof(g_date_weekday))) {
        private enum enumMixinStr_g_date_weekday = `enum g_date_weekday = g_date_get_weekday;`;
        static if(is(typeof({ mixin(enumMixinStr_g_date_weekday); }))) {
            mixin(enumMixinStr_g_date_weekday);
        }
    }




    static if(!is(typeof(G_DATE_BAD_YEAR))) {
        private enum enumMixinStr_G_DATE_BAD_YEAR = `enum G_DATE_BAD_YEAR = 0U;`;
        static if(is(typeof({ mixin(enumMixinStr_G_DATE_BAD_YEAR); }))) {
            mixin(enumMixinStr_G_DATE_BAD_YEAR);
        }
    }




    static if(!is(typeof(G_DATE_BAD_DAY))) {
        private enum enumMixinStr_G_DATE_BAD_DAY = `enum G_DATE_BAD_DAY = 0U;`;
        static if(is(typeof({ mixin(enumMixinStr_G_DATE_BAD_DAY); }))) {
            mixin(enumMixinStr_G_DATE_BAD_DAY);
        }
    }




    static if(!is(typeof(G_DATE_BAD_JULIAN))) {
        private enum enumMixinStr_G_DATE_BAD_JULIAN = `enum G_DATE_BAD_JULIAN = 0U;`;
        static if(is(typeof({ mixin(enumMixinStr_G_DATE_BAD_JULIAN); }))) {
            mixin(enumMixinStr_G_DATE_BAD_JULIAN);
        }
    }
    static if(!is(typeof(G_DATALIST_FLAGS_MASK))) {
        private enum enumMixinStr_G_DATALIST_FLAGS_MASK = `enum G_DATALIST_FLAGS_MASK = 0x3;`;
        static if(is(typeof({ mixin(enumMixinStr_G_DATALIST_FLAGS_MASK); }))) {
            mixin(enumMixinStr_G_DATALIST_FLAGS_MASK);
        }
    }






    static if(!is(typeof(G_CONVERT_ERROR))) {
        private enum enumMixinStr_G_CONVERT_ERROR = `enum G_CONVERT_ERROR = g_convert_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_CONVERT_ERROR); }))) {
            mixin(enumMixinStr_G_CONVERT_ERROR);
        }
    }
    static if(!is(typeof(G_BOOKMARK_FILE_ERROR))) {
        private enum enumMixinStr_G_BOOKMARK_FILE_ERROR = `enum G_BOOKMARK_FILE_ERROR = ( g_bookmark_file_error_quark ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_BOOKMARK_FILE_ERROR); }))) {
            mixin(enumMixinStr_G_BOOKMARK_FILE_ERROR);
        }
    }
    static if(!is(typeof(G_STATIC_PRIVATE_INIT))) {
        private enum enumMixinStr_G_STATIC_PRIVATE_INIT = `enum G_STATIC_PRIVATE_INIT = { 0 };`;
        static if(is(typeof({ mixin(enumMixinStr_G_STATIC_PRIVATE_INIT); }))) {
            mixin(enumMixinStr_G_STATIC_PRIVATE_INIT);
        }
    }




    static if(!is(typeof(G_STATIC_RW_LOCK_INIT))) {
        private enum enumMixinStr_G_STATIC_RW_LOCK_INIT = `enum G_STATIC_RW_LOCK_INIT = { G_STATIC_MUTEX_INIT , null , null , 0 , ( 0 ) , 0 , 0 };`;
        static if(is(typeof({ mixin(enumMixinStr_G_STATIC_RW_LOCK_INIT); }))) {
            mixin(enumMixinStr_G_STATIC_RW_LOCK_INIT);
        }
    }




    static if(!is(typeof(G_STATIC_REC_MUTEX_INIT))) {
        private enum enumMixinStr_G_STATIC_REC_MUTEX_INIT = `enum G_STATIC_REC_MUTEX_INIT = { G_STATIC_MUTEX_INIT };`;
        static if(is(typeof({ mixin(enumMixinStr_G_STATIC_REC_MUTEX_INIT); }))) {
            mixin(enumMixinStr_G_STATIC_REC_MUTEX_INIT);
        }
    }
    static if(!is(typeof(G_STATIC_MUTEX_INIT))) {
        private enum enumMixinStr_G_STATIC_MUTEX_INIT = `enum G_STATIC_MUTEX_INIT = { null };`;
        static if(is(typeof({ mixin(enumMixinStr_G_STATIC_MUTEX_INIT); }))) {
            mixin(enumMixinStr_G_STATIC_MUTEX_INIT);
        }
    }




    static if(!is(typeof(g_static_mutex_get_mutex))) {
        private enum enumMixinStr_g_static_mutex_get_mutex = `enum g_static_mutex_get_mutex = g_static_mutex_get_mutex_impl;`;
        static if(is(typeof({ mixin(enumMixinStr_g_static_mutex_get_mutex); }))) {
            mixin(enumMixinStr_g_static_mutex_get_mutex);
        }
    }
    static if(!is(typeof(G_ALLOCATOR_NODE))) {
        private enum enumMixinStr_G_ALLOCATOR_NODE = `enum G_ALLOCATOR_NODE = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_G_ALLOCATOR_NODE); }))) {
            mixin(enumMixinStr_G_ALLOCATOR_NODE);
        }
    }




    static if(!is(typeof(G_ALLOCATOR_SLIST))) {
        private enum enumMixinStr_G_ALLOCATOR_SLIST = `enum G_ALLOCATOR_SLIST = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_G_ALLOCATOR_SLIST); }))) {
            mixin(enumMixinStr_G_ALLOCATOR_SLIST);
        }
    }




    static if(!is(typeof(G_ALLOCATOR_LIST))) {
        private enum enumMixinStr_G_ALLOCATOR_LIST = `enum G_ALLOCATOR_LIST = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_G_ALLOCATOR_LIST); }))) {
            mixin(enumMixinStr_G_ALLOCATOR_LIST);
        }
    }




    static if(!is(typeof(G_ALLOC_AND_FREE))) {
        private enum enumMixinStr_G_ALLOC_AND_FREE = `enum G_ALLOC_AND_FREE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_G_ALLOC_AND_FREE); }))) {
            mixin(enumMixinStr_G_ALLOC_AND_FREE);
        }
    }




    static if(!is(typeof(G_ALLOC_ONLY))) {
        private enum enumMixinStr_G_ALLOC_ONLY = `enum G_ALLOC_ONLY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_G_ALLOC_ONLY); }))) {
            mixin(enumMixinStr_G_ALLOC_ONLY);
        }
    }
    static if(!is(typeof(G_TYPE_ZLIB_DECOMPRESSOR))) {
        private enum enumMixinStr_G_TYPE_ZLIB_DECOMPRESSOR = `enum G_TYPE_ZLIB_DECOMPRESSOR = ( g_zlib_decompressor_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ZLIB_DECOMPRESSOR); }))) {
            mixin(enumMixinStr_G_TYPE_ZLIB_DECOMPRESSOR);
        }
    }
    static if(!is(typeof(G_TYPE_ZLIB_COMPRESSOR))) {
        private enum enumMixinStr_G_TYPE_ZLIB_COMPRESSOR = `enum G_TYPE_ZLIB_COMPRESSOR = ( g_zlib_compressor_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ZLIB_COMPRESSOR); }))) {
            mixin(enumMixinStr_G_TYPE_ZLIB_COMPRESSOR);
        }
    }






    static if(!is(typeof(G_VOLUME_MONITOR_EXTENSION_POINT_NAME))) {
        private enum enumMixinStr_G_VOLUME_MONITOR_EXTENSION_POINT_NAME = `enum G_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor";`;
        static if(is(typeof({ mixin(enumMixinStr_G_VOLUME_MONITOR_EXTENSION_POINT_NAME); }))) {
            mixin(enumMixinStr_G_VOLUME_MONITOR_EXTENSION_POINT_NAME);
        }
    }
    static if(!is(typeof(G_TYPE_VOLUME_MONITOR))) {
        private enum enumMixinStr_G_TYPE_VOLUME_MONITOR = `enum G_TYPE_VOLUME_MONITOR = ( g_volume_monitor_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_VOLUME_MONITOR); }))) {
            mixin(enumMixinStr_G_TYPE_VOLUME_MONITOR);
        }
    }
    static if(!is(typeof(G_TYPE_VOLUME))) {
        private enum enumMixinStr_G_TYPE_VOLUME = `enum G_TYPE_VOLUME = ( g_volume_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_VOLUME); }))) {
            mixin(enumMixinStr_G_TYPE_VOLUME);
        }
    }




    static if(!is(typeof(G_VOLUME_IDENTIFIER_KIND_CLASS))) {
        private enum enumMixinStr_G_VOLUME_IDENTIFIER_KIND_CLASS = `enum G_VOLUME_IDENTIFIER_KIND_CLASS = "class";`;
        static if(is(typeof({ mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_CLASS); }))) {
            mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_CLASS);
        }
    }




    static if(!is(typeof(G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT))) {
        private enum enumMixinStr_G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT = `enum G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT = "nfs-mount";`;
        static if(is(typeof({ mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT); }))) {
            mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT);
        }
    }




    static if(!is(typeof(G_VOLUME_IDENTIFIER_KIND_UUID))) {
        private enum enumMixinStr_G_VOLUME_IDENTIFIER_KIND_UUID = `enum G_VOLUME_IDENTIFIER_KIND_UUID = "uuid";`;
        static if(is(typeof({ mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_UUID); }))) {
            mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_UUID);
        }
    }




    static if(!is(typeof(G_VOLUME_IDENTIFIER_KIND_LABEL))) {
        private enum enumMixinStr_G_VOLUME_IDENTIFIER_KIND_LABEL = `enum G_VOLUME_IDENTIFIER_KIND_LABEL = "label";`;
        static if(is(typeof({ mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_LABEL); }))) {
            mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_LABEL);
        }
    }




    static if(!is(typeof(G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE))) {
        private enum enumMixinStr_G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = `enum G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device";`;
        static if(is(typeof({ mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE); }))) {
            mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE);
        }
    }




    static if(!is(typeof(G_VOLUME_IDENTIFIER_KIND_HAL_UDI))) {
        private enum enumMixinStr_G_VOLUME_IDENTIFIER_KIND_HAL_UDI = `enum G_VOLUME_IDENTIFIER_KIND_HAL_UDI = "hal-udi";`;
        static if(is(typeof({ mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_HAL_UDI); }))) {
            mixin(enumMixinStr_G_VOLUME_IDENTIFIER_KIND_HAL_UDI);
        }
    }






    static if(!is(typeof(G_VFS_EXTENSION_POINT_NAME))) {
        private enum enumMixinStr_G_VFS_EXTENSION_POINT_NAME = `enum G_VFS_EXTENSION_POINT_NAME = "gio-vfs";`;
        static if(is(typeof({ mixin(enumMixinStr_G_VFS_EXTENSION_POINT_NAME); }))) {
            mixin(enumMixinStr_G_VFS_EXTENSION_POINT_NAME);
        }
    }
    static if(!is(typeof(G_TYPE_VFS))) {
        private enum enumMixinStr_G_TYPE_VFS = `enum G_TYPE_VFS = ( g_vfs_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_VFS); }))) {
            mixin(enumMixinStr_G_TYPE_VFS);
        }
    }
    static if(!is(typeof(G_TYPE_TLS_SERVER_CONNECTION))) {
        private enum enumMixinStr_G_TYPE_TLS_SERVER_CONNECTION = `enum G_TYPE_TLS_SERVER_CONNECTION = ( g_tls_server_connection_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_SERVER_CONNECTION); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_SERVER_CONNECTION);
        }
    }
    static if(!is(typeof(G_TYPE_TLS_PASSWORD))) {
        private enum enumMixinStr_G_TYPE_TLS_PASSWORD = `enum G_TYPE_TLS_PASSWORD = ( g_tls_password_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_PASSWORD); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_PASSWORD);
        }
    }
    static if(!is(typeof(G_TYPE_TLS_INTERACTION))) {
        private enum enumMixinStr_G_TYPE_TLS_INTERACTION = `enum G_TYPE_TLS_INTERACTION = ( g_tls_interaction_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_INTERACTION); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_INTERACTION);
        }
    }
    static if(!is(typeof(G_TYPE_TLS_FILE_DATABASE))) {
        private enum enumMixinStr_G_TYPE_TLS_FILE_DATABASE = `enum G_TYPE_TLS_FILE_DATABASE = ( g_tls_file_database_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_FILE_DATABASE); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_FILE_DATABASE);
        }
    }
    static if(!is(typeof(G_TYPE_TLS_DATABASE))) {
        private enum enumMixinStr_G_TYPE_TLS_DATABASE = `enum G_TYPE_TLS_DATABASE = ( g_tls_database_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_DATABASE); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_DATABASE);
        }
    }




    static if(!is(typeof(G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT))) {
        private enum enumMixinStr_G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = `enum G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = "1.3.6.1.5.5.7.3.2";`;
        static if(is(typeof({ mixin(enumMixinStr_G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT); }))) {
            mixin(enumMixinStr_G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT);
        }
    }




    static if(!is(typeof(G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER))) {
        private enum enumMixinStr_G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = `enum G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = "1.3.6.1.5.5.7.3.1";`;
        static if(is(typeof({ mixin(enumMixinStr_G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER); }))) {
            mixin(enumMixinStr_G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER);
        }
    }






    static if(!is(typeof(G_TLS_ERROR))) {
        private enum enumMixinStr_G_TLS_ERROR = `enum G_TLS_ERROR = ( g_tls_error_quark ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TLS_ERROR); }))) {
            mixin(enumMixinStr_G_TLS_ERROR);
        }
    }
    static if(!is(typeof(G_TYPE_TLS_CONNECTION))) {
        private enum enumMixinStr_G_TYPE_TLS_CONNECTION = `enum G_TYPE_TLS_CONNECTION = ( g_tls_connection_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_CONNECTION); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_CONNECTION);
        }
    }
    static if(!is(typeof(G_TYPE_TLS_CLIENT_CONNECTION))) {
        private enum enumMixinStr_G_TYPE_TLS_CLIENT_CONNECTION = `enum G_TYPE_TLS_CLIENT_CONNECTION = ( g_tls_client_connection_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_CLIENT_CONNECTION); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_CLIENT_CONNECTION);
        }
    }
    static if(!is(typeof(G_TYPE_TLS_CERTIFICATE))) {
        private enum enumMixinStr_G_TYPE_TLS_CERTIFICATE = `enum G_TYPE_TLS_CERTIFICATE = ( g_tls_certificate_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_CERTIFICATE); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_CERTIFICATE);
        }
    }
    static if(!is(typeof(G_TYPE_TLS_BACKEND))) {
        private enum enumMixinStr_G_TYPE_TLS_BACKEND = `enum G_TYPE_TLS_BACKEND = ( g_tls_backend_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_BACKEND); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_BACKEND);
        }
    }




    static if(!is(typeof(G_TLS_BACKEND_EXTENSION_POINT_NAME))) {
        private enum enumMixinStr_G_TLS_BACKEND_EXTENSION_POINT_NAME = `enum G_TLS_BACKEND_EXTENSION_POINT_NAME = "gio-tls-backend";`;
        static if(is(typeof({ mixin(enumMixinStr_G_TLS_BACKEND_EXTENSION_POINT_NAME); }))) {
            mixin(enumMixinStr_G_TLS_BACKEND_EXTENSION_POINT_NAME);
        }
    }
    static if(!is(typeof(G_TYPE_THREADED_SOCKET_SERVICE))) {
        private enum enumMixinStr_G_TYPE_THREADED_SOCKET_SERVICE = `enum G_TYPE_THREADED_SOCKET_SERVICE = ( g_threaded_socket_service_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_THREADED_SOCKET_SERVICE); }))) {
            mixin(enumMixinStr_G_TYPE_THREADED_SOCKET_SERVICE);
        }
    }
    static if(!is(typeof(G_TYPE_THEMED_ICON))) {
        private enum enumMixinStr_G_TYPE_THEMED_ICON = `enum G_TYPE_THEMED_ICON = ( g_themed_icon_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_THEMED_ICON); }))) {
            mixin(enumMixinStr_G_TYPE_THEMED_ICON);
        }
    }
    static if(!is(typeof(G_TYPE_TEST_DBUS))) {
        private enum enumMixinStr_G_TYPE_TEST_DBUS = `enum G_TYPE_TEST_DBUS = ( g_test_dbus_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TEST_DBUS); }))) {
            mixin(enumMixinStr_G_TYPE_TEST_DBUS);
        }
    }
    static if(!is(typeof(G_TYPE_TCP_WRAPPER_CONNECTION))) {
        private enum enumMixinStr_G_TYPE_TCP_WRAPPER_CONNECTION = `enum G_TYPE_TCP_WRAPPER_CONNECTION = ( g_tcp_wrapper_connection_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TCP_WRAPPER_CONNECTION); }))) {
            mixin(enumMixinStr_G_TYPE_TCP_WRAPPER_CONNECTION);
        }
    }
    static if(!is(typeof(G_TYPE_TCP_CONNECTION))) {
        private enum enumMixinStr_G_TYPE_TCP_CONNECTION = `enum G_TYPE_TCP_CONNECTION = ( g_tcp_connection_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TCP_CONNECTION); }))) {
            mixin(enumMixinStr_G_TYPE_TCP_CONNECTION);
        }
    }
    static if(!is(typeof(G_TYPE_TASK))) {
        private enum enumMixinStr_G_TYPE_TASK = `enum G_TYPE_TASK = ( g_task_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TASK); }))) {
            mixin(enumMixinStr_G_TYPE_TASK);
        }
    }
    static if(!is(typeof(G_TYPE_SUBPROCESS_LAUNCHER))) {
        private enum enumMixinStr_G_TYPE_SUBPROCESS_LAUNCHER = `enum G_TYPE_SUBPROCESS_LAUNCHER = ( g_subprocess_launcher_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SUBPROCESS_LAUNCHER); }))) {
            mixin(enumMixinStr_G_TYPE_SUBPROCESS_LAUNCHER);
        }
    }
    static if(!is(typeof(G_TYPE_SUBPROCESS))) {
        private enum enumMixinStr_G_TYPE_SUBPROCESS = `enum G_TYPE_SUBPROCESS = ( g_subprocess_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SUBPROCESS); }))) {
            mixin(enumMixinStr_G_TYPE_SUBPROCESS);
        }
    }






    static if(!is(typeof(G_TYPE_SRV_TARGET))) {
        private enum enumMixinStr_G_TYPE_SRV_TARGET = `enum G_TYPE_SRV_TARGET = ( g_srv_target_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SRV_TARGET); }))) {
            mixin(enumMixinStr_G_TYPE_SRV_TARGET);
        }
    }
    static if(!is(typeof(G_TYPE_SOCKET_SERVICE))) {
        private enum enumMixinStr_G_TYPE_SOCKET_SERVICE = `enum G_TYPE_SOCKET_SERVICE = ( g_socket_service_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_SERVICE); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_SERVICE);
        }
    }
    static if(!is(typeof(G_TYPE_SOCKET_LISTENER))) {
        private enum enumMixinStr_G_TYPE_SOCKET_LISTENER = `enum G_TYPE_SOCKET_LISTENER = ( g_socket_listener_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_LISTENER); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_LISTENER);
        }
    }
    static if(!is(typeof(G_TYPE_SOCKET_CONTROL_MESSAGE))) {
        private enum enumMixinStr_G_TYPE_SOCKET_CONTROL_MESSAGE = `enum G_TYPE_SOCKET_CONTROL_MESSAGE = ( g_socket_control_message_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_CONTROL_MESSAGE); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_CONTROL_MESSAGE);
        }
    }
    static if(!is(typeof(G_TYPE_SOCKET_CONNECTION))) {
        private enum enumMixinStr_G_TYPE_SOCKET_CONNECTION = `enum G_TYPE_SOCKET_CONNECTION = ( g_socket_connection_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_CONNECTION); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_CONNECTION);
        }
    }
    static if(!is(typeof(G_TYPE_SOCKET_CONNECTABLE))) {
        private enum enumMixinStr_G_TYPE_SOCKET_CONNECTABLE = `enum G_TYPE_SOCKET_CONNECTABLE = ( g_socket_connectable_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_CONNECTABLE); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_CONNECTABLE);
        }
    }
    static if(!is(typeof(G_TYPE_SOCKET_CLIENT))) {
        private enum enumMixinStr_G_TYPE_SOCKET_CLIENT = `enum G_TYPE_SOCKET_CLIENT = ( g_socket_client_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_CLIENT); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_CLIENT);
        }
    }
    static if(!is(typeof(G_TYPE_SOCKET_ADDRESS_ENUMERATOR))) {
        private enum enumMixinStr_G_TYPE_SOCKET_ADDRESS_ENUMERATOR = `enum G_TYPE_SOCKET_ADDRESS_ENUMERATOR = ( g_socket_address_enumerator_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_ADDRESS_ENUMERATOR); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_ADDRESS_ENUMERATOR);
        }
    }
    static if(!is(typeof(_STRING_H))) {
        private enum enumMixinStr__STRING_H = `enum _STRING_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STRING_H); }))) {
            mixin(enumMixinStr__STRING_H);
        }
    }






    static if(!is(typeof(G_TYPE_SOCKET_ADDRESS))) {
        private enum enumMixinStr_G_TYPE_SOCKET_ADDRESS = `enum G_TYPE_SOCKET_ADDRESS = ( g_socket_address_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_ADDRESS); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_ADDRESS);
        }
    }
    static if(!is(typeof(G_TYPE_SOCKET))) {
        private enum enumMixinStr_G_TYPE_SOCKET = `enum G_TYPE_SOCKET = ( g_socket_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET);
        }
    }
    static if(!is(typeof(G_TYPE_SIMPLE_PROXY_RESOLVER))) {
        private enum enumMixinStr_G_TYPE_SIMPLE_PROXY_RESOLVER = `enum G_TYPE_SIMPLE_PROXY_RESOLVER = ( g_simple_proxy_resolver_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SIMPLE_PROXY_RESOLVER); }))) {
            mixin(enumMixinStr_G_TYPE_SIMPLE_PROXY_RESOLVER);
        }
    }
    static if(!is(typeof(G_TYPE_SIMPLE_PERMISSION))) {
        private enum enumMixinStr_G_TYPE_SIMPLE_PERMISSION = `enum G_TYPE_SIMPLE_PERMISSION = ( g_simple_permission_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SIMPLE_PERMISSION); }))) {
            mixin(enumMixinStr_G_TYPE_SIMPLE_PERMISSION);
        }
    }
    static if(!is(typeof(G_TYPE_SIMPLE_IO_STREAM))) {
        private enum enumMixinStr_G_TYPE_SIMPLE_IO_STREAM = `enum G_TYPE_SIMPLE_IO_STREAM = ( g_simple_io_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SIMPLE_IO_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_SIMPLE_IO_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_SIMPLE_ASYNC_RESULT))) {
        private enum enumMixinStr_G_TYPE_SIMPLE_ASYNC_RESULT = `enum G_TYPE_SIMPLE_ASYNC_RESULT = ( g_simple_async_result_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SIMPLE_ASYNC_RESULT); }))) {
            mixin(enumMixinStr_G_TYPE_SIMPLE_ASYNC_RESULT);
        }
    }
    static if(!is(typeof(G_TYPE_SIMPLE_ACTION_GROUP))) {
        private enum enumMixinStr_G_TYPE_SIMPLE_ACTION_GROUP = `enum G_TYPE_SIMPLE_ACTION_GROUP = ( g_simple_action_group_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SIMPLE_ACTION_GROUP); }))) {
            mixin(enumMixinStr_G_TYPE_SIMPLE_ACTION_GROUP);
        }
    }
    static if(!is(typeof(G_TYPE_SIMPLE_ACTION))) {
        private enum enumMixinStr_G_TYPE_SIMPLE_ACTION = `enum G_TYPE_SIMPLE_ACTION = ( g_simple_action_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SIMPLE_ACTION); }))) {
            mixin(enumMixinStr_G_TYPE_SIMPLE_ACTION);
        }
    }






    static if(!is(typeof(G_TYPE_SETTINGS_SCHEMA_KEY))) {
        private enum enumMixinStr_G_TYPE_SETTINGS_SCHEMA_KEY = `enum G_TYPE_SETTINGS_SCHEMA_KEY = ( g_settings_schema_key_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SETTINGS_SCHEMA_KEY); }))) {
            mixin(enumMixinStr_G_TYPE_SETTINGS_SCHEMA_KEY);
        }
    }




    static if(!is(typeof(G_TYPE_SETTINGS_SCHEMA))) {
        private enum enumMixinStr_G_TYPE_SETTINGS_SCHEMA = `enum G_TYPE_SETTINGS_SCHEMA = ( g_settings_schema_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SETTINGS_SCHEMA); }))) {
            mixin(enumMixinStr_G_TYPE_SETTINGS_SCHEMA);
        }
    }




    static if(!is(typeof(G_TYPE_SETTINGS_SCHEMA_SOURCE))) {
        private enum enumMixinStr_G_TYPE_SETTINGS_SCHEMA_SOURCE = `enum G_TYPE_SETTINGS_SCHEMA_SOURCE = ( g_settings_schema_source_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SETTINGS_SCHEMA_SOURCE); }))) {
            mixin(enumMixinStr_G_TYPE_SETTINGS_SCHEMA_SOURCE);
        }
    }
    static if(!is(typeof(G_TYPE_SETTINGS))) {
        private enum enumMixinStr_G_TYPE_SETTINGS = `enum G_TYPE_SETTINGS = ( g_settings_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SETTINGS); }))) {
            mixin(enumMixinStr_G_TYPE_SETTINGS);
        }
    }
    static if(!is(typeof(G_TYPE_SEEKABLE))) {
        private enum enumMixinStr_G_TYPE_SEEKABLE = `enum G_TYPE_SEEKABLE = ( g_seekable_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SEEKABLE); }))) {
            mixin(enumMixinStr_G_TYPE_SEEKABLE);
        }
    }






    static if(!is(typeof(G_RESOURCE_ERROR))) {
        private enum enumMixinStr_G_RESOURCE_ERROR = `enum G_RESOURCE_ERROR = ( g_resource_error_quark ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_RESOURCE_ERROR); }))) {
            mixin(enumMixinStr_G_RESOURCE_ERROR);
        }
    }




    static if(!is(typeof(G_TYPE_RESOURCE))) {
        private enum enumMixinStr_G_TYPE_RESOURCE = `enum G_TYPE_RESOURCE = ( g_resource_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESOURCE); }))) {
            mixin(enumMixinStr_G_TYPE_RESOURCE);
        }
    }






    static if(!is(typeof(G_RESOLVER_ERROR))) {
        private enum enumMixinStr_G_RESOLVER_ERROR = `enum G_RESOLVER_ERROR = ( g_resolver_error_quark ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_RESOLVER_ERROR); }))) {
            mixin(enumMixinStr_G_RESOLVER_ERROR);
        }
    }
    static if(!is(typeof(G_TYPE_RESOLVER))) {
        private enum enumMixinStr_G_TYPE_RESOLVER = `enum G_TYPE_RESOLVER = ( g_resolver_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESOLVER); }))) {
            mixin(enumMixinStr_G_TYPE_RESOLVER);
        }
    }
    static if(!is(typeof(G_TYPE_REMOTE_ACTION_GROUP))) {
        private enum enumMixinStr_G_TYPE_REMOTE_ACTION_GROUP = `enum G_TYPE_REMOTE_ACTION_GROUP = ( g_remote_action_group_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_REMOTE_ACTION_GROUP); }))) {
            mixin(enumMixinStr_G_TYPE_REMOTE_ACTION_GROUP);
        }
    }






    static if(!is(typeof(G_PROXY_RESOLVER_EXTENSION_POINT_NAME))) {
        private enum enumMixinStr_G_PROXY_RESOLVER_EXTENSION_POINT_NAME = `enum G_PROXY_RESOLVER_EXTENSION_POINT_NAME = "gio-proxy-resolver";`;
        static if(is(typeof({ mixin(enumMixinStr_G_PROXY_RESOLVER_EXTENSION_POINT_NAME); }))) {
            mixin(enumMixinStr_G_PROXY_RESOLVER_EXTENSION_POINT_NAME);
        }
    }
    static if(!is(typeof(G_TYPE_PROXY_RESOLVER))) {
        private enum enumMixinStr_G_TYPE_PROXY_RESOLVER = `enum G_TYPE_PROXY_RESOLVER = ( g_proxy_resolver_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PROXY_RESOLVER); }))) {
            mixin(enumMixinStr_G_TYPE_PROXY_RESOLVER);
        }
    }
    static if(!is(typeof(G_TYPE_PROXY_ADDRESS_ENUMERATOR))) {
        private enum enumMixinStr_G_TYPE_PROXY_ADDRESS_ENUMERATOR = `enum G_TYPE_PROXY_ADDRESS_ENUMERATOR = ( g_proxy_address_enumerator_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PROXY_ADDRESS_ENUMERATOR); }))) {
            mixin(enumMixinStr_G_TYPE_PROXY_ADDRESS_ENUMERATOR);
        }
    }
    static if(!is(typeof(G_TYPE_PROXY_ADDRESS))) {
        private enum enumMixinStr_G_TYPE_PROXY_ADDRESS = `enum G_TYPE_PROXY_ADDRESS = ( g_proxy_address_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PROXY_ADDRESS); }))) {
            mixin(enumMixinStr_G_TYPE_PROXY_ADDRESS);
        }
    }






    static if(!is(typeof(G_PROXY_EXTENSION_POINT_NAME))) {
        private enum enumMixinStr_G_PROXY_EXTENSION_POINT_NAME = `enum G_PROXY_EXTENSION_POINT_NAME = "gio-proxy";`;
        static if(is(typeof({ mixin(enumMixinStr_G_PROXY_EXTENSION_POINT_NAME); }))) {
            mixin(enumMixinStr_G_PROXY_EXTENSION_POINT_NAME);
        }
    }
    static if(!is(typeof(G_TYPE_PROXY))) {
        private enum enumMixinStr_G_TYPE_PROXY = `enum G_TYPE_PROXY = ( g_proxy_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PROXY); }))) {
            mixin(enumMixinStr_G_TYPE_PROXY);
        }
    }
    static if(!is(typeof(G_TYPE_PROPERTY_ACTION))) {
        private enum enumMixinStr_G_TYPE_PROPERTY_ACTION = `enum G_TYPE_PROPERTY_ACTION = ( g_property_action_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PROPERTY_ACTION); }))) {
            mixin(enumMixinStr_G_TYPE_PROPERTY_ACTION);
        }
    }
    static if(!is(typeof(G_TYPE_POLLABLE_OUTPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_POLLABLE_OUTPUT_STREAM = `enum G_TYPE_POLLABLE_OUTPUT_STREAM = ( g_pollable_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_POLLABLE_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_POLLABLE_OUTPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_POLLABLE_INPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_POLLABLE_INPUT_STREAM = `enum G_TYPE_POLLABLE_INPUT_STREAM = ( g_pollable_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_POLLABLE_INPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_POLLABLE_INPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_PERMISSION))) {
        private enum enumMixinStr_G_TYPE_PERMISSION = `enum G_TYPE_PERMISSION = ( g_permission_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PERMISSION); }))) {
            mixin(enumMixinStr_G_TYPE_PERMISSION);
        }
    }
    static if(!is(typeof(G_TYPE_OUTPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_OUTPUT_STREAM = `enum G_TYPE_OUTPUT_STREAM = ( g_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_OUTPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_NOTIFICATION))) {
        private enum enumMixinStr_G_TYPE_NOTIFICATION = `enum G_TYPE_NOTIFICATION = ( g_notification_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_NOTIFICATION); }))) {
            mixin(enumMixinStr_G_TYPE_NOTIFICATION);
        }
    }
    static if(!is(typeof(G_TYPE_NETWORK_SERVICE))) {
        private enum enumMixinStr_G_TYPE_NETWORK_SERVICE = `enum G_TYPE_NETWORK_SERVICE = ( g_network_service_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_NETWORK_SERVICE); }))) {
            mixin(enumMixinStr_G_TYPE_NETWORK_SERVICE);
        }
    }
    static if(!is(typeof(G_TYPE_NETWORK_MONITOR))) {
        private enum enumMixinStr_G_TYPE_NETWORK_MONITOR = `enum G_TYPE_NETWORK_MONITOR = ( g_network_monitor_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_NETWORK_MONITOR); }))) {
            mixin(enumMixinStr_G_TYPE_NETWORK_MONITOR);
        }
    }




    static if(!is(typeof(G_NETWORK_MONITOR_EXTENSION_POINT_NAME))) {
        private enum enumMixinStr_G_NETWORK_MONITOR_EXTENSION_POINT_NAME = `enum G_NETWORK_MONITOR_EXTENSION_POINT_NAME = "gio-network-monitor";`;
        static if(is(typeof({ mixin(enumMixinStr_G_NETWORK_MONITOR_EXTENSION_POINT_NAME); }))) {
            mixin(enumMixinStr_G_NETWORK_MONITOR_EXTENSION_POINT_NAME);
        }
    }
    static if(!is(typeof(G_TYPE_NETWORK_ADDRESS))) {
        private enum enumMixinStr_G_TYPE_NETWORK_ADDRESS = `enum G_TYPE_NETWORK_ADDRESS = ( g_network_address_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_NETWORK_ADDRESS); }))) {
            mixin(enumMixinStr_G_TYPE_NETWORK_ADDRESS);
        }
    }






    static if(!is(typeof(G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME))) {
        private enum enumMixinStr_G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = `enum G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor";`;
        static if(is(typeof({ mixin(enumMixinStr_G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME); }))) {
            mixin(enumMixinStr_G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME);
        }
    }




    static if(!is(typeof(_STRINGS_H))) {
        private enum enumMixinStr__STRINGS_H = `enum _STRINGS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STRINGS_H); }))) {
            mixin(enumMixinStr__STRINGS_H);
        }
    }
    static if(!is(typeof(G_TYPE_NATIVE_VOLUME_MONITOR))) {
        private enum enumMixinStr_G_TYPE_NATIVE_VOLUME_MONITOR = `enum G_TYPE_NATIVE_VOLUME_MONITOR = ( g_native_volume_monitor_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_NATIVE_VOLUME_MONITOR); }))) {
            mixin(enumMixinStr_G_TYPE_NATIVE_VOLUME_MONITOR);
        }
    }
    static if(!is(typeof(G_TYPE_MOUNT_OPERATION))) {
        private enum enumMixinStr_G_TYPE_MOUNT_OPERATION = `enum G_TYPE_MOUNT_OPERATION = ( g_mount_operation_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MOUNT_OPERATION); }))) {
            mixin(enumMixinStr_G_TYPE_MOUNT_OPERATION);
        }
    }
    static if(!is(typeof(G_TYPE_MOUNT))) {
        private enum enumMixinStr_G_TYPE_MOUNT = `enum G_TYPE_MOUNT = ( g_mount_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MOUNT); }))) {
            mixin(enumMixinStr_G_TYPE_MOUNT);
        }
    }
    static if(!is(typeof(G_TYPE_MENU_LINK_ITER))) {
        private enum enumMixinStr_G_TYPE_MENU_LINK_ITER = `enum G_TYPE_MENU_LINK_ITER = ( g_menu_link_iter_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MENU_LINK_ITER); }))) {
            mixin(enumMixinStr_G_TYPE_MENU_LINK_ITER);
        }
    }
    static if(!is(typeof(G_TYPE_MENU_ATTRIBUTE_ITER))) {
        private enum enumMixinStr_G_TYPE_MENU_ATTRIBUTE_ITER = `enum G_TYPE_MENU_ATTRIBUTE_ITER = ( g_menu_attribute_iter_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MENU_ATTRIBUTE_ITER); }))) {
            mixin(enumMixinStr_G_TYPE_MENU_ATTRIBUTE_ITER);
        }
    }
    static if(!is(typeof(G_TYPE_MENU_MODEL))) {
        private enum enumMixinStr_G_TYPE_MENU_MODEL = `enum G_TYPE_MENU_MODEL = ( g_menu_model_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MENU_MODEL); }))) {
            mixin(enumMixinStr_G_TYPE_MENU_MODEL);
        }
    }




    static if(!is(typeof(G_MENU_LINK_SECTION))) {
        private enum enumMixinStr_G_MENU_LINK_SECTION = `enum G_MENU_LINK_SECTION = "section";`;
        static if(is(typeof({ mixin(enumMixinStr_G_MENU_LINK_SECTION); }))) {
            mixin(enumMixinStr_G_MENU_LINK_SECTION);
        }
    }




    static if(!is(typeof(G_MENU_LINK_SUBMENU))) {
        private enum enumMixinStr_G_MENU_LINK_SUBMENU = `enum G_MENU_LINK_SUBMENU = "submenu";`;
        static if(is(typeof({ mixin(enumMixinStr_G_MENU_LINK_SUBMENU); }))) {
            mixin(enumMixinStr_G_MENU_LINK_SUBMENU);
        }
    }




    static if(!is(typeof(G_MENU_ATTRIBUTE_ICON))) {
        private enum enumMixinStr_G_MENU_ATTRIBUTE_ICON = `enum G_MENU_ATTRIBUTE_ICON = "icon";`;
        static if(is(typeof({ mixin(enumMixinStr_G_MENU_ATTRIBUTE_ICON); }))) {
            mixin(enumMixinStr_G_MENU_ATTRIBUTE_ICON);
        }
    }




    static if(!is(typeof(G_MENU_ATTRIBUTE_LABEL))) {
        private enum enumMixinStr_G_MENU_ATTRIBUTE_LABEL = `enum G_MENU_ATTRIBUTE_LABEL = "label";`;
        static if(is(typeof({ mixin(enumMixinStr_G_MENU_ATTRIBUTE_LABEL); }))) {
            mixin(enumMixinStr_G_MENU_ATTRIBUTE_LABEL);
        }
    }




    static if(!is(typeof(G_MENU_ATTRIBUTE_TARGET))) {
        private enum enumMixinStr_G_MENU_ATTRIBUTE_TARGET = `enum G_MENU_ATTRIBUTE_TARGET = "target";`;
        static if(is(typeof({ mixin(enumMixinStr_G_MENU_ATTRIBUTE_TARGET); }))) {
            mixin(enumMixinStr_G_MENU_ATTRIBUTE_TARGET);
        }
    }




    static if(!is(typeof(G_MENU_ATTRIBUTE_ACTION_NAMESPACE))) {
        private enum enumMixinStr_G_MENU_ATTRIBUTE_ACTION_NAMESPACE = `enum G_MENU_ATTRIBUTE_ACTION_NAMESPACE = "action-namespace";`;
        static if(is(typeof({ mixin(enumMixinStr_G_MENU_ATTRIBUTE_ACTION_NAMESPACE); }))) {
            mixin(enumMixinStr_G_MENU_ATTRIBUTE_ACTION_NAMESPACE);
        }
    }




    static if(!is(typeof(G_MENU_ATTRIBUTE_ACTION))) {
        private enum enumMixinStr_G_MENU_ATTRIBUTE_ACTION = `enum G_MENU_ATTRIBUTE_ACTION = "action";`;
        static if(is(typeof({ mixin(enumMixinStr_G_MENU_ATTRIBUTE_ACTION); }))) {
            mixin(enumMixinStr_G_MENU_ATTRIBUTE_ACTION);
        }
    }
    static if(!is(typeof(G_TYPE_MENU_ITEM))) {
        private enum enumMixinStr_G_TYPE_MENU_ITEM = `enum G_TYPE_MENU_ITEM = ( g_menu_item_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MENU_ITEM); }))) {
            mixin(enumMixinStr_G_TYPE_MENU_ITEM);
        }
    }
    static if(!is(typeof(G_TYPE_MENU))) {
        private enum enumMixinStr_G_TYPE_MENU = `enum G_TYPE_MENU = ( g_menu_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MENU); }))) {
            mixin(enumMixinStr_G_TYPE_MENU);
        }
    }
    static if(!is(typeof(G_TYPE_MEMORY_OUTPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_MEMORY_OUTPUT_STREAM = `enum G_TYPE_MEMORY_OUTPUT_STREAM = ( g_memory_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MEMORY_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_MEMORY_OUTPUT_STREAM);
        }
    }




    static if(!is(typeof(_TIME_H))) {
        private enum enumMixinStr__TIME_H = `enum _TIME_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__TIME_H); }))) {
            mixin(enumMixinStr__TIME_H);
        }
    }
    static if(!is(typeof(G_TYPE_MEMORY_INPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_MEMORY_INPUT_STREAM = `enum G_TYPE_MEMORY_INPUT_STREAM = ( g_memory_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MEMORY_INPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_MEMORY_INPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_LOADABLE_ICON))) {
        private enum enumMixinStr_G_TYPE_LOADABLE_ICON = `enum G_TYPE_LOADABLE_ICON = ( g_loadable_icon_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_LOADABLE_ICON); }))) {
            mixin(enumMixinStr_G_TYPE_LOADABLE_ICON);
        }
    }






    static if(!is(typeof(G_TYPE_LIST_STORE))) {
        private enum enumMixinStr_G_TYPE_LIST_STORE = `enum G_TYPE_LIST_STORE = ( g_list_store_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_LIST_STORE); }))) {
            mixin(enumMixinStr_G_TYPE_LIST_STORE);
        }
    }






    static if(!is(typeof(G_TYPE_LIST_MODEL))) {
        private enum enumMixinStr_G_TYPE_LIST_MODEL = `enum G_TYPE_LIST_MODEL = g_list_model_get_type ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_LIST_MODEL); }))) {
            mixin(enumMixinStr_G_TYPE_LIST_MODEL);
        }
    }
    static if(!is(typeof(TIME_UTC))) {
        private enum enumMixinStr_TIME_UTC = `enum TIME_UTC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TIME_UTC); }))) {
            mixin(enumMixinStr_TIME_UTC);
        }
    }
    static if(!is(typeof(G_TYPE_IO_STREAM))) {
        private enum enumMixinStr_G_TYPE_IO_STREAM = `enum G_TYPE_IO_STREAM = ( g_io_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_IO_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_IO_STREAM);
        }
    }
    static if(!is(typeof(G_IO_TYPE_MODULE))) {
        private enum enumMixinStr_G_IO_TYPE_MODULE = `enum G_IO_TYPE_MODULE = ( g_io_module_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_IO_TYPE_MODULE); }))) {
            mixin(enumMixinStr_G_IO_TYPE_MODULE);
        }
    }






    static if(!is(typeof(G_IO_ERROR))) {
        private enum enumMixinStr_G_IO_ERROR = `enum G_IO_ERROR = g_io_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_IO_ERROR); }))) {
            mixin(enumMixinStr_G_IO_ERROR);
        }
    }






    static if(!is(typeof(G_TYPE_SETTINGS_BIND_FLAGS))) {
        private enum enumMixinStr_G_TYPE_SETTINGS_BIND_FLAGS = `enum G_TYPE_SETTINGS_BIND_FLAGS = ( g_settings_bind_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SETTINGS_BIND_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_SETTINGS_BIND_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_NETWORK_CONNECTIVITY))) {
        private enum enumMixinStr_G_TYPE_NETWORK_CONNECTIVITY = `enum G_TYPE_NETWORK_CONNECTIVITY = ( g_network_connectivity_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_NETWORK_CONNECTIVITY); }))) {
            mixin(enumMixinStr_G_TYPE_NETWORK_CONNECTIVITY);
        }
    }




    static if(!is(typeof(G_TYPE_NOTIFICATION_PRIORITY))) {
        private enum enumMixinStr_G_TYPE_NOTIFICATION_PRIORITY = `enum G_TYPE_NOTIFICATION_PRIORITY = ( g_notification_priority_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_NOTIFICATION_PRIORITY); }))) {
            mixin(enumMixinStr_G_TYPE_NOTIFICATION_PRIORITY);
        }
    }




    static if(!is(typeof(G_TYPE_SUBPROCESS_FLAGS))) {
        private enum enumMixinStr_G_TYPE_SUBPROCESS_FLAGS = `enum G_TYPE_SUBPROCESS_FLAGS = ( g_subprocess_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SUBPROCESS_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_SUBPROCESS_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_TEST_DBUS_FLAGS))) {
        private enum enumMixinStr_G_TYPE_TEST_DBUS_FLAGS = `enum G_TYPE_TEST_DBUS_FLAGS = ( g_test_dbus_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TEST_DBUS_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_TEST_DBUS_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_SOCKET_LISTENER_EVENT))) {
        private enum enumMixinStr_G_TYPE_SOCKET_LISTENER_EVENT = `enum G_TYPE_SOCKET_LISTENER_EVENT = ( g_socket_listener_event_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_LISTENER_EVENT); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_LISTENER_EVENT);
        }
    }




    static if(!is(typeof(G_TYPE_SOCKET_CLIENT_EVENT))) {
        private enum enumMixinStr_G_TYPE_SOCKET_CLIENT_EVENT = `enum G_TYPE_SOCKET_CLIENT_EVENT = ( g_socket_client_event_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_CLIENT_EVENT); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_CLIENT_EVENT);
        }
    }




    static if(!is(typeof(G_TYPE_IO_MODULE_SCOPE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_IO_MODULE_SCOPE_FLAGS = `enum G_TYPE_IO_MODULE_SCOPE_FLAGS = ( g_io_module_scope_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_IO_MODULE_SCOPE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_IO_MODULE_SCOPE_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS))) {
        private enum enumMixinStr_G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS = `enum G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS = ( g_tls_certificate_request_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_TLS_DATABASE_LOOKUP_FLAGS))) {
        private enum enumMixinStr_G_TYPE_TLS_DATABASE_LOOKUP_FLAGS = `enum G_TYPE_TLS_DATABASE_LOOKUP_FLAGS = ( g_tls_database_lookup_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_DATABASE_LOOKUP_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_DATABASE_LOOKUP_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_TLS_DATABASE_VERIFY_FLAGS))) {
        private enum enumMixinStr_G_TYPE_TLS_DATABASE_VERIFY_FLAGS = `enum G_TYPE_TLS_DATABASE_VERIFY_FLAGS = ( g_tls_database_verify_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_DATABASE_VERIFY_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_DATABASE_VERIFY_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_OBJECT_MANAGER_CLIENT_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER_CLIENT_FLAGS = `enum G_TYPE_DBUS_OBJECT_MANAGER_CLIENT_FLAGS = ( g_dbus_object_manager_client_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER_CLIENT_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER_CLIENT_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_INTERFACE_SKELETON_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_INTERFACE_SKELETON_FLAGS = `enum G_TYPE_DBUS_INTERFACE_SKELETON_FLAGS = ( g_dbus_interface_skeleton_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_INTERFACE_SKELETON_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_INTERFACE_SKELETON_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_TLS_INTERACTION_RESULT))) {
        private enum enumMixinStr_G_TYPE_TLS_INTERACTION_RESULT = `enum G_TYPE_TLS_INTERACTION_RESULT = ( g_tls_interaction_result_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_INTERACTION_RESULT); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_INTERACTION_RESULT);
        }
    }




    static if(!is(typeof(G_TYPE_TLS_PASSWORD_FLAGS))) {
        private enum enumMixinStr_G_TYPE_TLS_PASSWORD_FLAGS = `enum G_TYPE_TLS_PASSWORD_FLAGS = ( g_tls_password_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_PASSWORD_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_PASSWORD_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_TLS_REHANDSHAKE_MODE))) {
        private enum enumMixinStr_G_TYPE_TLS_REHANDSHAKE_MODE = `enum G_TYPE_TLS_REHANDSHAKE_MODE = ( g_tls_rehandshake_mode_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_REHANDSHAKE_MODE); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_REHANDSHAKE_MODE);
        }
    }




    static if(!is(typeof(G_TYPE_TLS_AUTHENTICATION_MODE))) {
        private enum enumMixinStr_G_TYPE_TLS_AUTHENTICATION_MODE = `enum G_TYPE_TLS_AUTHENTICATION_MODE = ( g_tls_authentication_mode_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_AUTHENTICATION_MODE); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_AUTHENTICATION_MODE);
        }
    }




    static if(!is(typeof(G_TYPE_TLS_CERTIFICATE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_TLS_CERTIFICATE_FLAGS = `enum G_TYPE_TLS_CERTIFICATE_FLAGS = ( g_tls_certificate_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_CERTIFICATE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_CERTIFICATE_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_TLS_ERROR))) {
        private enum enumMixinStr_G_TYPE_TLS_ERROR = `enum G_TYPE_TLS_ERROR = ( g_tls_error_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_TLS_ERROR); }))) {
            mixin(enumMixinStr_G_TYPE_TLS_ERROR);
        }
    }




    static if(!is(typeof(G_TYPE_APPLICATION_FLAGS))) {
        private enum enumMixinStr_G_TYPE_APPLICATION_FLAGS = `enum G_TYPE_APPLICATION_FLAGS = ( g_application_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_APPLICATION_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_APPLICATION_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_MESSAGE_BYTE_ORDER))) {
        private enum enumMixinStr_G_TYPE_DBUS_MESSAGE_BYTE_ORDER = `enum G_TYPE_DBUS_MESSAGE_BYTE_ORDER = ( g_dbus_message_byte_order_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_MESSAGE_BYTE_ORDER); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_MESSAGE_BYTE_ORDER);
        }
    }




    static if(!is(typeof(G_TYPE_CREDENTIALS_TYPE))) {
        private enum enumMixinStr_G_TYPE_CREDENTIALS_TYPE = `enum G_TYPE_CREDENTIALS_TYPE = ( g_credentials_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CREDENTIALS_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_CREDENTIALS_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_SEND_MESSAGE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_SEND_MESSAGE_FLAGS = `enum G_TYPE_DBUS_SEND_MESSAGE_FLAGS = ( g_dbus_send_message_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_SEND_MESSAGE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_SEND_MESSAGE_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_SIGNAL_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_SIGNAL_FLAGS = `enum G_TYPE_DBUS_SIGNAL_FLAGS = ( g_dbus_signal_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_SIGNAL_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_SIGNAL_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_SERVER_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_SERVER_FLAGS = `enum G_TYPE_DBUS_SERVER_FLAGS = ( g_dbus_server_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_SERVER_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_SERVER_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_SUBTREE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_SUBTREE_FLAGS = `enum G_TYPE_DBUS_SUBTREE_FLAGS = ( g_dbus_subtree_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_SUBTREE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_SUBTREE_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_PROPERTY_INFO_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_PROPERTY_INFO_FLAGS = `enum G_TYPE_DBUS_PROPERTY_INFO_FLAGS = ( g_dbus_property_info_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_PROPERTY_INFO_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_PROPERTY_INFO_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_MESSAGE_HEADER_FIELD))) {
        private enum enumMixinStr_G_TYPE_DBUS_MESSAGE_HEADER_FIELD = `enum G_TYPE_DBUS_MESSAGE_HEADER_FIELD = ( g_dbus_message_header_field_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_MESSAGE_HEADER_FIELD); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_MESSAGE_HEADER_FIELD);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_MESSAGE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_MESSAGE_FLAGS = `enum G_TYPE_DBUS_MESSAGE_FLAGS = ( g_dbus_message_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_MESSAGE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_MESSAGE_FLAGS);
        }
    }






    static if(!is(typeof(G_TYPE_DBUS_MESSAGE_TYPE))) {
        private enum enumMixinStr_G_TYPE_DBUS_MESSAGE_TYPE = `enum G_TYPE_DBUS_MESSAGE_TYPE = ( g_dbus_message_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_MESSAGE_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_MESSAGE_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_CALL_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_CALL_FLAGS = `enum G_TYPE_DBUS_CALL_FLAGS = ( g_dbus_call_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_CALL_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_CALL_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_CAPABILITY_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_CAPABILITY_FLAGS = `enum G_TYPE_DBUS_CAPABILITY_FLAGS = ( g_dbus_capability_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_CAPABILITY_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_CAPABILITY_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_CONNECTION_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_CONNECTION_FLAGS = `enum G_TYPE_DBUS_CONNECTION_FLAGS = ( g_dbus_connection_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_CONNECTION_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_CONNECTION_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_ERROR))) {
        private enum enumMixinStr_G_TYPE_DBUS_ERROR = `enum G_TYPE_DBUS_ERROR = ( g_dbus_error_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_ERROR); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_ERROR);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_PROXY_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DBUS_PROXY_FLAGS = `enum G_TYPE_DBUS_PROXY_FLAGS = ( g_dbus_proxy_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_PROXY_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_PROXY_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_BUS_NAME_WATCHER_FLAGS))) {
        private enum enumMixinStr_G_TYPE_BUS_NAME_WATCHER_FLAGS = `enum G_TYPE_BUS_NAME_WATCHER_FLAGS = ( g_bus_name_watcher_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BUS_NAME_WATCHER_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_BUS_NAME_WATCHER_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_BUS_NAME_OWNER_FLAGS))) {
        private enum enumMixinStr_G_TYPE_BUS_NAME_OWNER_FLAGS = `enum G_TYPE_BUS_NAME_OWNER_FLAGS = ( g_bus_name_owner_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BUS_NAME_OWNER_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_BUS_NAME_OWNER_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_BUS_TYPE))) {
        private enum enumMixinStr_G_TYPE_BUS_TYPE = `enum G_TYPE_BUS_TYPE = ( g_bus_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BUS_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_BUS_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_UNIX_SOCKET_ADDRESS_TYPE))) {
        private enum enumMixinStr_G_TYPE_UNIX_SOCKET_ADDRESS_TYPE = `enum G_TYPE_UNIX_SOCKET_ADDRESS_TYPE = ( g_unix_socket_address_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_UNIX_SOCKET_ADDRESS_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_UNIX_SOCKET_ADDRESS_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_ZLIB_COMPRESSOR_FORMAT))) {
        private enum enumMixinStr_G_TYPE_ZLIB_COMPRESSOR_FORMAT = `enum G_TYPE_ZLIB_COMPRESSOR_FORMAT = ( g_zlib_compressor_format_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ZLIB_COMPRESSOR_FORMAT); }))) {
            mixin(enumMixinStr_G_TYPE_ZLIB_COMPRESSOR_FORMAT);
        }
    }




    static if(!is(typeof(G_TYPE_SOCKET_PROTOCOL))) {
        private enum enumMixinStr_G_TYPE_SOCKET_PROTOCOL = `enum G_TYPE_SOCKET_PROTOCOL = ( g_socket_protocol_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_PROTOCOL); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_PROTOCOL);
        }
    }




    static if(!is(typeof(G_TYPE_SOCKET_MSG_FLAGS))) {
        private enum enumMixinStr_G_TYPE_SOCKET_MSG_FLAGS = `enum G_TYPE_SOCKET_MSG_FLAGS = ( g_socket_msg_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_MSG_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_MSG_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_SOCKET_TYPE))) {
        private enum enumMixinStr_G_TYPE_SOCKET_TYPE = `enum G_TYPE_SOCKET_TYPE = ( g_socket_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_SOCKET_FAMILY))) {
        private enum enumMixinStr_G_TYPE_SOCKET_FAMILY = `enum G_TYPE_SOCKET_FAMILY = ( g_socket_family_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_SOCKET_FAMILY); }))) {
            mixin(enumMixinStr_G_TYPE_SOCKET_FAMILY);
        }
    }




    static if(!is(typeof(G_TYPE_RESOURCE_LOOKUP_FLAGS))) {
        private enum enumMixinStr_G_TYPE_RESOURCE_LOOKUP_FLAGS = `enum G_TYPE_RESOURCE_LOOKUP_FLAGS = ( g_resource_lookup_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESOURCE_LOOKUP_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_RESOURCE_LOOKUP_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_RESOURCE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_RESOURCE_FLAGS = `enum G_TYPE_RESOURCE_FLAGS = ( g_resource_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESOURCE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_RESOURCE_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_RESOURCE_ERROR))) {
        private enum enumMixinStr_G_TYPE_RESOURCE_ERROR = `enum G_TYPE_RESOURCE_ERROR = ( g_resource_error_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESOURCE_ERROR); }))) {
            mixin(enumMixinStr_G_TYPE_RESOURCE_ERROR);
        }
    }




    static if(!is(typeof(G_TYPE_RESOLVER_RECORD_TYPE))) {
        private enum enumMixinStr_G_TYPE_RESOLVER_RECORD_TYPE = `enum G_TYPE_RESOLVER_RECORD_TYPE = ( g_resolver_record_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESOLVER_RECORD_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_RESOLVER_RECORD_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_RESOLVER_ERROR))) {
        private enum enumMixinStr_G_TYPE_RESOLVER_ERROR = `enum G_TYPE_RESOLVER_ERROR = ( g_resolver_error_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_RESOLVER_ERROR); }))) {
            mixin(enumMixinStr_G_TYPE_RESOLVER_ERROR);
        }
    }




    static if(!is(typeof(G_TYPE_EMBLEM_ORIGIN))) {
        private enum enumMixinStr_G_TYPE_EMBLEM_ORIGIN = `enum G_TYPE_EMBLEM_ORIGIN = ( g_emblem_origin_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_EMBLEM_ORIGIN); }))) {
            mixin(enumMixinStr_G_TYPE_EMBLEM_ORIGIN);
        }
    }




    static if(!is(typeof(G_TYPE_IO_STREAM_SPLICE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_IO_STREAM_SPLICE_FLAGS = `enum G_TYPE_IO_STREAM_SPLICE_FLAGS = ( g_io_stream_splice_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_IO_STREAM_SPLICE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_IO_STREAM_SPLICE_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS = `enum G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS = ( g_output_stream_splice_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_MOUNT_OPERATION_RESULT))) {
        private enum enumMixinStr_G_TYPE_MOUNT_OPERATION_RESULT = `enum G_TYPE_MOUNT_OPERATION_RESULT = ( g_mount_operation_result_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MOUNT_OPERATION_RESULT); }))) {
            mixin(enumMixinStr_G_TYPE_MOUNT_OPERATION_RESULT);
        }
    }




    static if(!is(typeof(G_TYPE_PASSWORD_SAVE))) {
        private enum enumMixinStr_G_TYPE_PASSWORD_SAVE = `enum G_TYPE_PASSWORD_SAVE = ( g_password_save_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_PASSWORD_SAVE); }))) {
            mixin(enumMixinStr_G_TYPE_PASSWORD_SAVE);
        }
    }




    static if(!is(typeof(G_TYPE_ASK_PASSWORD_FLAGS))) {
        private enum enumMixinStr_G_TYPE_ASK_PASSWORD_FLAGS = `enum G_TYPE_ASK_PASSWORD_FLAGS = ( g_ask_password_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ASK_PASSWORD_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_ASK_PASSWORD_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_IO_ERROR_ENUM))) {
        private enum enumMixinStr_G_TYPE_IO_ERROR_ENUM = `enum G_TYPE_IO_ERROR_ENUM = ( g_io_error_enum_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_IO_ERROR_ENUM); }))) {
            mixin(enumMixinStr_G_TYPE_IO_ERROR_ENUM);
        }
    }




    static if(!is(typeof(G_TYPE_FILE_MONITOR_EVENT))) {
        private enum enumMixinStr_G_TYPE_FILE_MONITOR_EVENT = `enum G_TYPE_FILE_MONITOR_EVENT = ( g_file_monitor_event_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_MONITOR_EVENT); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_MONITOR_EVENT);
        }
    }




    static if(!is(typeof(G_TYPE_FILESYSTEM_PREVIEW_TYPE))) {
        private enum enumMixinStr_G_TYPE_FILESYSTEM_PREVIEW_TYPE = `enum G_TYPE_FILESYSTEM_PREVIEW_TYPE = ( g_filesystem_preview_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILESYSTEM_PREVIEW_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_FILESYSTEM_PREVIEW_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_FILE_TYPE))) {
        private enum enumMixinStr_G_TYPE_FILE_TYPE = `enum G_TYPE_FILE_TYPE = ( g_file_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_FILE_MONITOR_FLAGS))) {
        private enum enumMixinStr_G_TYPE_FILE_MONITOR_FLAGS = `enum G_TYPE_FILE_MONITOR_FLAGS = ( g_file_monitor_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_MONITOR_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_MONITOR_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_FILE_COPY_FLAGS))) {
        private enum enumMixinStr_G_TYPE_FILE_COPY_FLAGS = `enum G_TYPE_FILE_COPY_FLAGS = ( g_file_copy_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_COPY_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_COPY_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_DRIVE_START_STOP_TYPE))) {
        private enum enumMixinStr_G_TYPE_DRIVE_START_STOP_TYPE = `enum G_TYPE_DRIVE_START_STOP_TYPE = ( g_drive_start_stop_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DRIVE_START_STOP_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_DRIVE_START_STOP_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_DRIVE_START_FLAGS))) {
        private enum enumMixinStr_G_TYPE_DRIVE_START_FLAGS = `enum G_TYPE_DRIVE_START_FLAGS = ( g_drive_start_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DRIVE_START_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_DRIVE_START_FLAGS);
        }
    }




    static if(!is(typeof(_UNISTD_H))) {
        private enum enumMixinStr__UNISTD_H = `enum _UNISTD_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__UNISTD_H); }))) {
            mixin(enumMixinStr__UNISTD_H);
        }
    }




    static if(!is(typeof(G_TYPE_MOUNT_UNMOUNT_FLAGS))) {
        private enum enumMixinStr_G_TYPE_MOUNT_UNMOUNT_FLAGS = `enum G_TYPE_MOUNT_UNMOUNT_FLAGS = ( g_mount_unmount_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MOUNT_UNMOUNT_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_MOUNT_UNMOUNT_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_MOUNT_MOUNT_FLAGS))) {
        private enum enumMixinStr_G_TYPE_MOUNT_MOUNT_FLAGS = `enum G_TYPE_MOUNT_MOUNT_FLAGS = ( g_mount_mount_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_MOUNT_MOUNT_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_MOUNT_MOUNT_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_FILE_MEASURE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_FILE_MEASURE_FLAGS = `enum G_TYPE_FILE_MEASURE_FLAGS = ( g_file_measure_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_MEASURE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_MEASURE_FLAGS);
        }
    }




    static if(!is(typeof(_POSIX_VERSION))) {
        private enum enumMixinStr__POSIX_VERSION = `enum _POSIX_VERSION = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_VERSION); }))) {
            mixin(enumMixinStr__POSIX_VERSION);
        }
    }




    static if(!is(typeof(G_TYPE_FILE_CREATE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_FILE_CREATE_FLAGS = `enum G_TYPE_FILE_CREATE_FLAGS = ( g_file_create_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_CREATE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_CREATE_FLAGS);
        }
    }




    static if(!is(typeof(__POSIX2_THIS_VERSION))) {
        private enum enumMixinStr___POSIX2_THIS_VERSION = `enum __POSIX2_THIS_VERSION = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr___POSIX2_THIS_VERSION); }))) {
            mixin(enumMixinStr___POSIX2_THIS_VERSION);
        }
    }




    static if(!is(typeof(_POSIX2_VERSION))) {
        private enum enumMixinStr__POSIX2_VERSION = `enum _POSIX2_VERSION = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_VERSION); }))) {
            mixin(enumMixinStr__POSIX2_VERSION);
        }
    }




    static if(!is(typeof(_POSIX2_C_VERSION))) {
        private enum enumMixinStr__POSIX2_C_VERSION = `enum _POSIX2_C_VERSION = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_C_VERSION); }))) {
            mixin(enumMixinStr__POSIX2_C_VERSION);
        }
    }




    static if(!is(typeof(_POSIX2_C_BIND))) {
        private enum enumMixinStr__POSIX2_C_BIND = `enum _POSIX2_C_BIND = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_C_BIND); }))) {
            mixin(enumMixinStr__POSIX2_C_BIND);
        }
    }




    static if(!is(typeof(_POSIX2_C_DEV))) {
        private enum enumMixinStr__POSIX2_C_DEV = `enum _POSIX2_C_DEV = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_C_DEV); }))) {
            mixin(enumMixinStr__POSIX2_C_DEV);
        }
    }




    static if(!is(typeof(_POSIX2_SW_DEV))) {
        private enum enumMixinStr__POSIX2_SW_DEV = `enum _POSIX2_SW_DEV = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_SW_DEV); }))) {
            mixin(enumMixinStr__POSIX2_SW_DEV);
        }
    }




    static if(!is(typeof(_POSIX2_LOCALEDEF))) {
        private enum enumMixinStr__POSIX2_LOCALEDEF = `enum _POSIX2_LOCALEDEF = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_LOCALEDEF); }))) {
            mixin(enumMixinStr__POSIX2_LOCALEDEF);
        }
    }




    static if(!is(typeof(G_TYPE_FILE_QUERY_INFO_FLAGS))) {
        private enum enumMixinStr_G_TYPE_FILE_QUERY_INFO_FLAGS = `enum G_TYPE_FILE_QUERY_INFO_FLAGS = ( g_file_query_info_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_QUERY_INFO_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_QUERY_INFO_FLAGS);
        }
    }




    static if(!is(typeof(_XOPEN_VERSION))) {
        private enum enumMixinStr__XOPEN_VERSION = `enum _XOPEN_VERSION = 700;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_VERSION); }))) {
            mixin(enumMixinStr__XOPEN_VERSION);
        }
    }




    static if(!is(typeof(_XOPEN_XCU_VERSION))) {
        private enum enumMixinStr__XOPEN_XCU_VERSION = `enum _XOPEN_XCU_VERSION = 4;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_XCU_VERSION); }))) {
            mixin(enumMixinStr__XOPEN_XCU_VERSION);
        }
    }




    static if(!is(typeof(_XOPEN_XPG2))) {
        private enum enumMixinStr__XOPEN_XPG2 = `enum _XOPEN_XPG2 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_XPG2); }))) {
            mixin(enumMixinStr__XOPEN_XPG2);
        }
    }




    static if(!is(typeof(_XOPEN_XPG3))) {
        private enum enumMixinStr__XOPEN_XPG3 = `enum _XOPEN_XPG3 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_XPG3); }))) {
            mixin(enumMixinStr__XOPEN_XPG3);
        }
    }




    static if(!is(typeof(_XOPEN_XPG4))) {
        private enum enumMixinStr__XOPEN_XPG4 = `enum _XOPEN_XPG4 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_XPG4); }))) {
            mixin(enumMixinStr__XOPEN_XPG4);
        }
    }




    static if(!is(typeof(_XOPEN_UNIX))) {
        private enum enumMixinStr__XOPEN_UNIX = `enum _XOPEN_UNIX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_UNIX); }))) {
            mixin(enumMixinStr__XOPEN_UNIX);
        }
    }




    static if(!is(typeof(_XOPEN_CRYPT))) {
        private enum enumMixinStr__XOPEN_CRYPT = `enum _XOPEN_CRYPT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_CRYPT); }))) {
            mixin(enumMixinStr__XOPEN_CRYPT);
        }
    }




    static if(!is(typeof(_XOPEN_ENH_I18N))) {
        private enum enumMixinStr__XOPEN_ENH_I18N = `enum _XOPEN_ENH_I18N = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_ENH_I18N); }))) {
            mixin(enumMixinStr__XOPEN_ENH_I18N);
        }
    }




    static if(!is(typeof(_XOPEN_LEGACY))) {
        private enum enumMixinStr__XOPEN_LEGACY = `enum _XOPEN_LEGACY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_LEGACY); }))) {
            mixin(enumMixinStr__XOPEN_LEGACY);
        }
    }




    static if(!is(typeof(G_TYPE_FILE_ATTRIBUTE_STATUS))) {
        private enum enumMixinStr_G_TYPE_FILE_ATTRIBUTE_STATUS = `enum G_TYPE_FILE_ATTRIBUTE_STATUS = ( g_file_attribute_status_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_ATTRIBUTE_STATUS); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_ATTRIBUTE_STATUS);
        }
    }




    static if(!is(typeof(G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS))) {
        private enum enumMixinStr_G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS = `enum G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS = ( g_file_attribute_info_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_FILE_ATTRIBUTE_TYPE))) {
        private enum enumMixinStr_G_TYPE_FILE_ATTRIBUTE_TYPE = `enum G_TYPE_FILE_ATTRIBUTE_TYPE = ( g_file_attribute_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_ATTRIBUTE_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_ATTRIBUTE_TYPE);
        }
    }




    static if(!is(typeof(STDIN_FILENO))) {
        private enum enumMixinStr_STDIN_FILENO = `enum STDIN_FILENO = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_STDIN_FILENO); }))) {
            mixin(enumMixinStr_STDIN_FILENO);
        }
    }




    static if(!is(typeof(STDOUT_FILENO))) {
        private enum enumMixinStr_STDOUT_FILENO = `enum STDOUT_FILENO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_STDOUT_FILENO); }))) {
            mixin(enumMixinStr_STDOUT_FILENO);
        }
    }




    static if(!is(typeof(STDERR_FILENO))) {
        private enum enumMixinStr_STDERR_FILENO = `enum STDERR_FILENO = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_STDERR_FILENO); }))) {
            mixin(enumMixinStr_STDERR_FILENO);
        }
    }




    static if(!is(typeof(G_TYPE_DATA_STREAM_NEWLINE_TYPE))) {
        private enum enumMixinStr_G_TYPE_DATA_STREAM_NEWLINE_TYPE = `enum G_TYPE_DATA_STREAM_NEWLINE_TYPE = ( g_data_stream_newline_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DATA_STREAM_NEWLINE_TYPE); }))) {
            mixin(enumMixinStr_G_TYPE_DATA_STREAM_NEWLINE_TYPE);
        }
    }




    static if(!is(typeof(G_TYPE_DATA_STREAM_BYTE_ORDER))) {
        private enum enumMixinStr_G_TYPE_DATA_STREAM_BYTE_ORDER = `enum G_TYPE_DATA_STREAM_BYTE_ORDER = ( g_data_stream_byte_order_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DATA_STREAM_BYTE_ORDER); }))) {
            mixin(enumMixinStr_G_TYPE_DATA_STREAM_BYTE_ORDER);
        }
    }




    static if(!is(typeof(G_TYPE_CONVERTER_RESULT))) {
        private enum enumMixinStr_G_TYPE_CONVERTER_RESULT = `enum G_TYPE_CONVERTER_RESULT = ( g_converter_result_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CONVERTER_RESULT); }))) {
            mixin(enumMixinStr_G_TYPE_CONVERTER_RESULT);
        }
    }




    static if(!is(typeof(G_TYPE_CONVERTER_FLAGS))) {
        private enum enumMixinStr_G_TYPE_CONVERTER_FLAGS = `enum G_TYPE_CONVERTER_FLAGS = ( g_converter_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CONVERTER_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_CONVERTER_FLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_APP_INFO_CREATE_FLAGS))) {
        private enum enumMixinStr_G_TYPE_APP_INFO_CREATE_FLAGS = `enum G_TYPE_APP_INFO_CREATE_FLAGS = ( g_app_info_create_flags_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_APP_INFO_CREATE_FLAGS); }))) {
            mixin(enumMixinStr_G_TYPE_APP_INFO_CREATE_FLAGS);
        }
    }
    static if(!is(typeof(R_OK))) {
        private enum enumMixinStr_R_OK = `enum R_OK = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_R_OK); }))) {
            mixin(enumMixinStr_R_OK);
        }
    }




    static if(!is(typeof(W_OK))) {
        private enum enumMixinStr_W_OK = `enum W_OK = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_W_OK); }))) {
            mixin(enumMixinStr_W_OK);
        }
    }




    static if(!is(typeof(X_OK))) {
        private enum enumMixinStr_X_OK = `enum X_OK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X_OK); }))) {
            mixin(enumMixinStr_X_OK);
        }
    }




    static if(!is(typeof(F_OK))) {
        private enum enumMixinStr_F_OK = `enum F_OK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_F_OK); }))) {
            mixin(enumMixinStr_F_OK);
        }
    }






    static if(!is(typeof(G_TYPE_INPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_INPUT_STREAM = `enum G_TYPE_INPUT_STREAM = ( g_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_INPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_INPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_INITABLE))) {
        private enum enumMixinStr_G_TYPE_INITABLE = `enum G_TYPE_INITABLE = ( g_initable_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_INITABLE); }))) {
            mixin(enumMixinStr_G_TYPE_INITABLE);
        }
    }




    static if(!is(typeof(SEEK_SET))) {
        private enum enumMixinStr_SEEK_SET = `enum SEEK_SET = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_SET); }))) {
            mixin(enumMixinStr_SEEK_SET);
        }
    }




    static if(!is(typeof(SEEK_CUR))) {
        private enum enumMixinStr_SEEK_CUR = `enum SEEK_CUR = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_CUR); }))) {
            mixin(enumMixinStr_SEEK_CUR);
        }
    }




    static if(!is(typeof(SEEK_END))) {
        private enum enumMixinStr_SEEK_END = `enum SEEK_END = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_END); }))) {
            mixin(enumMixinStr_SEEK_END);
        }
    }






    static if(!is(typeof(L_SET))) {
        private enum enumMixinStr_L_SET = `enum L_SET = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_L_SET); }))) {
            mixin(enumMixinStr_L_SET);
        }
    }




    static if(!is(typeof(L_INCR))) {
        private enum enumMixinStr_L_INCR = `enum L_INCR = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_L_INCR); }))) {
            mixin(enumMixinStr_L_INCR);
        }
    }




    static if(!is(typeof(L_XTND))) {
        private enum enumMixinStr_L_XTND = `enum L_XTND = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_L_XTND); }))) {
            mixin(enumMixinStr_L_XTND);
        }
    }
    static if(!is(typeof(G_TYPE_INET_SOCKET_ADDRESS))) {
        private enum enumMixinStr_G_TYPE_INET_SOCKET_ADDRESS = `enum G_TYPE_INET_SOCKET_ADDRESS = ( g_inet_socket_address_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_INET_SOCKET_ADDRESS); }))) {
            mixin(enumMixinStr_G_TYPE_INET_SOCKET_ADDRESS);
        }
    }
    static if(!is(typeof(G_TYPE_INET_ADDRESS_MASK))) {
        private enum enumMixinStr_G_TYPE_INET_ADDRESS_MASK = `enum G_TYPE_INET_ADDRESS_MASK = ( g_inet_address_mask_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_INET_ADDRESS_MASK); }))) {
            mixin(enumMixinStr_G_TYPE_INET_ADDRESS_MASK);
        }
    }
    static if(!is(typeof(G_TYPE_INET_ADDRESS))) {
        private enum enumMixinStr_G_TYPE_INET_ADDRESS = `enum G_TYPE_INET_ADDRESS = ( g_inet_address_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_INET_ADDRESS); }))) {
            mixin(enumMixinStr_G_TYPE_INET_ADDRESS);
        }
    }
    static if(!is(typeof(G_TYPE_ICON))) {
        private enum enumMixinStr_G_TYPE_ICON = `enum G_TYPE_ICON = ( g_icon_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ICON); }))) {
            mixin(enumMixinStr_G_TYPE_ICON);
        }
    }
    static if(!is(typeof(G_TYPE_FILTER_OUTPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_FILTER_OUTPUT_STREAM = `enum G_TYPE_FILTER_OUTPUT_STREAM = ( g_filter_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILTER_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_FILTER_OUTPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_FILTER_INPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_FILTER_INPUT_STREAM = `enum G_TYPE_FILTER_INPUT_STREAM = ( g_filter_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILTER_INPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_FILTER_INPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_FILE_OUTPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_FILE_OUTPUT_STREAM = `enum G_TYPE_FILE_OUTPUT_STREAM = ( g_file_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_OUTPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_FILENAME_COMPLETER))) {
        private enum enumMixinStr_G_TYPE_FILENAME_COMPLETER = `enum G_TYPE_FILENAME_COMPLETER = ( g_filename_completer_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILENAME_COMPLETER); }))) {
            mixin(enumMixinStr_G_TYPE_FILENAME_COMPLETER);
        }
    }
    static if(!is(typeof(G_TYPE_FILE_MONITOR))) {
        private enum enumMixinStr_G_TYPE_FILE_MONITOR = `enum G_TYPE_FILE_MONITOR = ( g_file_monitor_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_MONITOR); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_MONITOR);
        }
    }
    static if(!is(typeof(G_TYPE_FILE_IO_STREAM))) {
        private enum enumMixinStr_G_TYPE_FILE_IO_STREAM = `enum G_TYPE_FILE_IO_STREAM = ( g_file_io_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_IO_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_IO_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_FILE_INPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_FILE_INPUT_STREAM = `enum G_TYPE_FILE_INPUT_STREAM = ( g_file_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_INPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_INPUT_STREAM);
        }
    }






    static if(!is(typeof(G_TYPE_FILE_ATTRIBUTE_MATCHER))) {
        private enum enumMixinStr_G_TYPE_FILE_ATTRIBUTE_MATCHER = `enum G_TYPE_FILE_ATTRIBUTE_MATCHER = ( g_file_attribute_matcher_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_ATTRIBUTE_MATCHER); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_ATTRIBUTE_MATCHER);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_RECENT_MODIFIED))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_RECENT_MODIFIED = `enum G_FILE_ATTRIBUTE_RECENT_MODIFIED = "recent::modified";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_RECENT_MODIFIED); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_RECENT_MODIFIED);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TRASH_DELETION_DATE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TRASH_DELETION_DATE = `enum G_FILE_ATTRIBUTE_TRASH_DELETION_DATE = "trash::deletion-date";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TRASH_DELETION_DATE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TRASH_DELETION_DATE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TRASH_ORIG_PATH))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TRASH_ORIG_PATH = `enum G_FILE_ATTRIBUTE_TRASH_ORIG_PATH = "trash::orig-path";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TRASH_ORIG_PATH); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TRASH_ORIG_PATH);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT = `enum G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT = "trash::item-count";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_SELINUX_CONTEXT))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_SELINUX_CONTEXT = `enum G_FILE_ATTRIBUTE_SELINUX_CONTEXT = "selinux::context";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_SELINUX_CONTEXT); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_SELINUX_CONTEXT);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_GVFS_BACKEND))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_GVFS_BACKEND = `enum G_FILE_ATTRIBUTE_GVFS_BACKEND = "gvfs::backend";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_GVFS_BACKEND); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_GVFS_BACKEND);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE = `enum G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE = "filesystem::remote";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = `enum G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_FILESYSTEM_READONLY))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_READONLY = `enum G_FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_READONLY); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_READONLY);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_FILESYSTEM_TYPE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_TYPE = `enum G_FILE_ATTRIBUTE_FILESYSTEM_TYPE = "filesystem::type";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_TYPE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_TYPE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_FILESYSTEM_USED))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_USED = `enum G_FILE_ATTRIBUTE_FILESYSTEM_USED = "filesystem::used";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_USED); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_USED);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_FILESYSTEM_FREE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_FREE = `enum G_FILE_ATTRIBUTE_FILESYSTEM_FREE = "filesystem::free";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_FREE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_FREE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_FILESYSTEM_SIZE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_SIZE = `enum G_FILE_ATTRIBUTE_FILESYSTEM_SIZE = "filesystem::size";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_SIZE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_FILESYSTEM_SIZE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_PREVIEW_ICON))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_PREVIEW_ICON = `enum G_FILE_ATTRIBUTE_PREVIEW_ICON = "preview::icon";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_PREVIEW_ICON); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_PREVIEW_ICON);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID = `enum G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID = "thumbnail::is-valid";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_THUMBNAILING_FAILED))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_THUMBNAILING_FAILED = `enum G_FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_THUMBNAILING_FAILED); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_THUMBNAILING_FAILED);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_THUMBNAIL_PATH))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_THUMBNAIL_PATH = `enum G_FILE_ATTRIBUTE_THUMBNAIL_PATH = "thumbnail::path";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_THUMBNAIL_PATH); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_THUMBNAIL_PATH);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_OWNER_GROUP))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_OWNER_GROUP = `enum G_FILE_ATTRIBUTE_OWNER_GROUP = "owner::group";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_OWNER_GROUP); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_OWNER_GROUP);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_OWNER_USER_REAL))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_OWNER_USER_REAL = `enum G_FILE_ATTRIBUTE_OWNER_USER_REAL = "owner::user-real";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_OWNER_USER_REAL); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_OWNER_USER_REAL);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_OWNER_USER))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_OWNER_USER = `enum G_FILE_ATTRIBUTE_OWNER_USER = "owner::user";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_OWNER_USER); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_OWNER_USER);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_DOS_IS_SYSTEM))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_DOS_IS_SYSTEM = `enum G_FILE_ATTRIBUTE_DOS_IS_SYSTEM = "dos::is-system";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_DOS_IS_SYSTEM); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_DOS_IS_SYSTEM);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE = `enum G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE = "dos::is-archive";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = `enum G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_UNIX_BLOCKS))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_UNIX_BLOCKS = `enum G_FILE_ATTRIBUTE_UNIX_BLOCKS = "unix::blocks";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_BLOCKS); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_BLOCKS);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = `enum G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = "unix::block-size";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_UNIX_RDEV))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_UNIX_RDEV = `enum G_FILE_ATTRIBUTE_UNIX_RDEV = "unix::rdev";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_RDEV); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_RDEV);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_UNIX_GID))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_UNIX_GID = `enum G_FILE_ATTRIBUTE_UNIX_GID = "unix::gid";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_GID); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_GID);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_UNIX_UID))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_UNIX_UID = `enum G_FILE_ATTRIBUTE_UNIX_UID = "unix::uid";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_UID); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_UID);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_UNIX_NLINK))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_UNIX_NLINK = `enum G_FILE_ATTRIBUTE_UNIX_NLINK = "unix::nlink";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_NLINK); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_NLINK);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_UNIX_MODE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_UNIX_MODE = `enum G_FILE_ATTRIBUTE_UNIX_MODE = "unix::mode";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_MODE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_MODE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_UNIX_INODE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_UNIX_INODE = `enum G_FILE_ATTRIBUTE_UNIX_INODE = "unix::inode";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_INODE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_INODE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_UNIX_DEVICE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_UNIX_DEVICE = `enum G_FILE_ATTRIBUTE_UNIX_DEVICE = "unix::device";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_DEVICE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_UNIX_DEVICE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TIME_CREATED_USEC))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TIME_CREATED_USEC = `enum G_FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_CREATED_USEC); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_CREATED_USEC);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TIME_CREATED))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TIME_CREATED = `enum G_FILE_ATTRIBUTE_TIME_CREATED = "time::created";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_CREATED); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_CREATED);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TIME_CHANGED_USEC))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TIME_CHANGED_USEC = `enum G_FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_CHANGED_USEC); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_CHANGED_USEC);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TIME_CHANGED))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TIME_CHANGED = `enum G_FILE_ATTRIBUTE_TIME_CHANGED = "time::changed";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_CHANGED); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_CHANGED);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TIME_ACCESS_USEC))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TIME_ACCESS_USEC = `enum G_FILE_ATTRIBUTE_TIME_ACCESS_USEC = "time::access-usec";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_ACCESS_USEC); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_ACCESS_USEC);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TIME_ACCESS))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TIME_ACCESS = `enum G_FILE_ATTRIBUTE_TIME_ACCESS = "time::access";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_ACCESS); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_ACCESS);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC = `enum G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_TIME_MODIFIED))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_TIME_MODIFIED = `enum G_FILE_ATTRIBUTE_TIME_MODIFIED = "time::modified";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_MODIFIED); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_TIME_MODIFIED);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = `enum G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = "mountable::is-media-check-automatic";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = `enum G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = "mountable::can-poll";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = `enum G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = "mountable::start-stop-type";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = `enum G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = "mountable::can-stop";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = `enum G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = "mountable::can-start-degraded";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START = `enum G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START = "mountable::can-start";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = `enum G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = `enum G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = "mountable::unix-device-file";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = `enum G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = `enum G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = `enum G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = `enum G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME = `enum G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH = `enum G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH = "access::can-trash";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE = `enum G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = `enum G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE = `enum G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE = "access::can-write";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_ACCESS_CAN_READ))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_READ = `enum G_FILE_ATTRIBUTE_ACCESS_CAN_READ = "access::can-read";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_READ); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_ACCESS_CAN_READ);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_ID_FILESYSTEM))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_ID_FILESYSTEM = `enum G_FILE_ATTRIBUTE_ID_FILESYSTEM = "id::filesystem";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_ID_FILESYSTEM); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_ID_FILESYSTEM);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_ID_FILE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_ID_FILE = `enum G_FILE_ATTRIBUTE_ID_FILE = "id::file";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_ID_FILE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_ID_FILE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_ETAG_VALUE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_ETAG_VALUE = `enum G_FILE_ATTRIBUTE_ETAG_VALUE = "etag::value";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_ETAG_VALUE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_ETAG_VALUE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER = `enum G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_TARGET_URI))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_TARGET_URI = `enum G_FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_TARGET_URI); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_TARGET_URI);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = `enum G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = `enum G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = "standard::allocated-size";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_SIZE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SIZE = `enum G_FILE_ATTRIBUTE_STANDARD_SIZE = "standard::size";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SIZE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SIZE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = `enum G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = `enum G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = `enum G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = "standard::symbolic-icon";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_ICON))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_ICON = `enum G_FILE_ATTRIBUTE_STANDARD_ICON = "standard::icon";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_ICON); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_ICON);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION = `enum G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_COPY_NAME))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_COPY_NAME = `enum G_FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_COPY_NAME); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_COPY_NAME);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME = `enum G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = `enum G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_NAME))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_NAME = `enum G_FILE_ATTRIBUTE_STANDARD_NAME = "standard::name";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_NAME); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_NAME);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE = `enum G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE = "standard::is-volatile";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = `enum G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = `enum G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP = `enum G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = `enum G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN);
        }
    }




    static if(!is(typeof(G_FILE_ATTRIBUTE_STANDARD_TYPE))) {
        private enum enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_TYPE = `enum G_FILE_ATTRIBUTE_STANDARD_TYPE = "standard::type";`;
        static if(is(typeof({ mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_TYPE); }))) {
            mixin(enumMixinStr_G_FILE_ATTRIBUTE_STANDARD_TYPE);
        }
    }
    static if(!is(typeof(G_TYPE_FILE_INFO))) {
        private enum enumMixinStr_G_TYPE_FILE_INFO = `enum G_TYPE_FILE_INFO = ( g_file_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_INFO); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_INFO);
        }
    }
    static if(!is(typeof(G_TYPE_FILE_ICON))) {
        private enum enumMixinStr_G_TYPE_FILE_ICON = `enum G_TYPE_FILE_ICON = ( g_file_icon_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_ICON); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_ICON);
        }
    }
    static if(!is(typeof(G_TYPE_FILE_ENUMERATOR))) {
        private enum enumMixinStr_G_TYPE_FILE_ENUMERATOR = `enum G_TYPE_FILE_ENUMERATOR = ( g_file_enumerator_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_ENUMERATOR); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_ENUMERATOR);
        }
    }






    static if(!is(typeof(G_TYPE_FILE_ATTRIBUTE_INFO_LIST))) {
        private enum enumMixinStr_G_TYPE_FILE_ATTRIBUTE_INFO_LIST = `enum G_TYPE_FILE_ATTRIBUTE_INFO_LIST = ( g_file_attribute_info_list_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE_ATTRIBUTE_INFO_LIST); }))) {
            mixin(enumMixinStr_G_TYPE_FILE_ATTRIBUTE_INFO_LIST);
        }
    }
    static if(!is(typeof(G_TYPE_FILE))) {
        private enum enumMixinStr_G_TYPE_FILE = `enum G_TYPE_FILE = ( g_file_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_FILE); }))) {
            mixin(enumMixinStr_G_TYPE_FILE);
        }
    }
    static if(!is(typeof(G_TYPE_EMBLEMED_ICON))) {
        private enum enumMixinStr_G_TYPE_EMBLEMED_ICON = `enum G_TYPE_EMBLEMED_ICON = ( g_emblemed_icon_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_EMBLEMED_ICON); }))) {
            mixin(enumMixinStr_G_TYPE_EMBLEMED_ICON);
        }
    }
    static if(!is(typeof(G_TYPE_EMBLEM))) {
        private enum enumMixinStr_G_TYPE_EMBLEM = `enum G_TYPE_EMBLEM = ( g_emblem_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_EMBLEM); }))) {
            mixin(enumMixinStr_G_TYPE_EMBLEM);
        }
    }
    static if(!is(typeof(G_TYPE_DTLS_SERVER_CONNECTION))) {
        private enum enumMixinStr_G_TYPE_DTLS_SERVER_CONNECTION = `enum G_TYPE_DTLS_SERVER_CONNECTION = ( g_dtls_server_connection_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DTLS_SERVER_CONNECTION); }))) {
            mixin(enumMixinStr_G_TYPE_DTLS_SERVER_CONNECTION);
        }
    }
    static if(!is(typeof(G_TYPE_DTLS_CONNECTION))) {
        private enum enumMixinStr_G_TYPE_DTLS_CONNECTION = `enum G_TYPE_DTLS_CONNECTION = ( g_dtls_connection_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DTLS_CONNECTION); }))) {
            mixin(enumMixinStr_G_TYPE_DTLS_CONNECTION);
        }
    }
    static if(!is(typeof(G_TYPE_DTLS_CLIENT_CONNECTION))) {
        private enum enumMixinStr_G_TYPE_DTLS_CLIENT_CONNECTION = `enum G_TYPE_DTLS_CLIENT_CONNECTION = ( g_dtls_client_connection_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DTLS_CLIENT_CONNECTION); }))) {
            mixin(enumMixinStr_G_TYPE_DTLS_CLIENT_CONNECTION);
        }
    }
    static if(!is(typeof(G_TYPE_DRIVE))) {
        private enum enumMixinStr_G_TYPE_DRIVE = `enum G_TYPE_DRIVE = ( g_drive_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DRIVE); }))) {
            mixin(enumMixinStr_G_TYPE_DRIVE);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_SERVER))) {
        private enum enumMixinStr_G_TYPE_DBUS_SERVER = `enum G_TYPE_DBUS_SERVER = ( g_dbus_server_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_SERVER); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_SERVER);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_PROXY))) {
        private enum enumMixinStr_G_TYPE_DBUS_PROXY = `enum G_TYPE_DBUS_PROXY = ( g_dbus_proxy_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_PROXY); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_PROXY);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_OBJECT_SKELETON))) {
        private enum enumMixinStr_G_TYPE_DBUS_OBJECT_SKELETON = `enum G_TYPE_DBUS_OBJECT_SKELETON = ( g_dbus_object_skeleton_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_SKELETON); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_SKELETON);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_OBJECT_PROXY))) {
        private enum enumMixinStr_G_TYPE_DBUS_OBJECT_PROXY = `enum G_TYPE_DBUS_OBJECT_PROXY = ( g_dbus_object_proxy_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_PROXY); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_PROXY);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_OBJECT_MANAGER_SERVER))) {
        private enum enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER_SERVER = `enum G_TYPE_DBUS_OBJECT_MANAGER_SERVER = ( g_dbus_object_manager_server_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER_SERVER); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER_SERVER);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_OBJECT_MANAGER_CLIENT))) {
        private enum enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER_CLIENT = `enum G_TYPE_DBUS_OBJECT_MANAGER_CLIENT = ( g_dbus_object_manager_client_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER_CLIENT); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER_CLIENT);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_OBJECT_MANAGER))) {
        private enum enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER = `enum G_TYPE_DBUS_OBJECT_MANAGER = ( g_dbus_object_manager_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_OBJECT_MANAGER);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_OBJECT))) {
        private enum enumMixinStr_G_TYPE_DBUS_OBJECT = `enum G_TYPE_DBUS_OBJECT = ( g_dbus_object_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_OBJECT); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_OBJECT);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_METHOD_INVOCATION))) {
        private enum enumMixinStr_G_TYPE_DBUS_METHOD_INVOCATION = `enum G_TYPE_DBUS_METHOD_INVOCATION = ( g_dbus_method_invocation_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_METHOD_INVOCATION); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_METHOD_INVOCATION);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_MESSAGE))) {
        private enum enumMixinStr_G_TYPE_DBUS_MESSAGE = `enum G_TYPE_DBUS_MESSAGE = ( g_dbus_message_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_MESSAGE); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_MESSAGE);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_MENU_MODEL))) {
        private enum enumMixinStr_G_TYPE_DBUS_MENU_MODEL = `enum G_TYPE_DBUS_MENU_MODEL = ( g_dbus_menu_model_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_MENU_MODEL); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_MENU_MODEL);
        }
    }






    static if(!is(typeof(G_TYPE_DBUS_ANNOTATION_INFO))) {
        private enum enumMixinStr_G_TYPE_DBUS_ANNOTATION_INFO = `enum G_TYPE_DBUS_ANNOTATION_INFO = ( g_dbus_annotation_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_ANNOTATION_INFO); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_ANNOTATION_INFO);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_ARG_INFO))) {
        private enum enumMixinStr_G_TYPE_DBUS_ARG_INFO = `enum G_TYPE_DBUS_ARG_INFO = ( g_dbus_arg_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_ARG_INFO); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_ARG_INFO);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_PROPERTY_INFO))) {
        private enum enumMixinStr_G_TYPE_DBUS_PROPERTY_INFO = `enum G_TYPE_DBUS_PROPERTY_INFO = ( g_dbus_property_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_PROPERTY_INFO); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_PROPERTY_INFO);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_SIGNAL_INFO))) {
        private enum enumMixinStr_G_TYPE_DBUS_SIGNAL_INFO = `enum G_TYPE_DBUS_SIGNAL_INFO = ( g_dbus_signal_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_SIGNAL_INFO); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_SIGNAL_INFO);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_METHOD_INFO))) {
        private enum enumMixinStr_G_TYPE_DBUS_METHOD_INFO = `enum G_TYPE_DBUS_METHOD_INFO = ( g_dbus_method_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_METHOD_INFO); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_METHOD_INFO);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_INTERFACE_INFO))) {
        private enum enumMixinStr_G_TYPE_DBUS_INTERFACE_INFO = `enum G_TYPE_DBUS_INTERFACE_INFO = ( g_dbus_interface_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_INTERFACE_INFO); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_INTERFACE_INFO);
        }
    }




    static if(!is(typeof(G_TYPE_DBUS_NODE_INFO))) {
        private enum enumMixinStr_G_TYPE_DBUS_NODE_INFO = `enum G_TYPE_DBUS_NODE_INFO = ( g_dbus_node_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_NODE_INFO); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_NODE_INFO);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_INTERFACE_SKELETON))) {
        private enum enumMixinStr_G_TYPE_DBUS_INTERFACE_SKELETON = `enum G_TYPE_DBUS_INTERFACE_SKELETON = ( g_dbus_interface_skeleton_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_INTERFACE_SKELETON); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_INTERFACE_SKELETON);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_INTERFACE))) {
        private enum enumMixinStr_G_TYPE_DBUS_INTERFACE = `enum G_TYPE_DBUS_INTERFACE = ( g_dbus_interface_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_INTERFACE); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_INTERFACE);
        }
    }






    static if(!is(typeof(G_DBUS_ERROR))) {
        private enum enumMixinStr_G_DBUS_ERROR = `enum G_DBUS_ERROR = g_dbus_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_G_DBUS_ERROR); }))) {
            mixin(enumMixinStr_G_DBUS_ERROR);
        }
    }






    static if(!is(typeof(F_ULOCK))) {
        private enum enumMixinStr_F_ULOCK = `enum F_ULOCK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_F_ULOCK); }))) {
            mixin(enumMixinStr_F_ULOCK);
        }
    }




    static if(!is(typeof(F_LOCK))) {
        private enum enumMixinStr_F_LOCK = `enum F_LOCK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_F_LOCK); }))) {
            mixin(enumMixinStr_F_LOCK);
        }
    }




    static if(!is(typeof(F_TLOCK))) {
        private enum enumMixinStr_F_TLOCK = `enum F_TLOCK = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_F_TLOCK); }))) {
            mixin(enumMixinStr_F_TLOCK);
        }
    }




    static if(!is(typeof(F_TEST))) {
        private enum enumMixinStr_F_TEST = `enum F_TEST = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_F_TEST); }))) {
            mixin(enumMixinStr_F_TEST);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_CONNECTION))) {
        private enum enumMixinStr_G_TYPE_DBUS_CONNECTION = `enum G_TYPE_DBUS_CONNECTION = ( g_dbus_connection_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_CONNECTION); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_CONNECTION);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_AUTH_OBSERVER))) {
        private enum enumMixinStr_G_TYPE_DBUS_AUTH_OBSERVER = `enum G_TYPE_DBUS_AUTH_OBSERVER = ( g_dbus_auth_observer_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_AUTH_OBSERVER); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_AUTH_OBSERVER);
        }
    }
    static if(!is(typeof(G_TYPE_DBUS_ACTION_GROUP))) {
        private enum enumMixinStr_G_TYPE_DBUS_ACTION_GROUP = `enum G_TYPE_DBUS_ACTION_GROUP = ( g_dbus_action_group_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DBUS_ACTION_GROUP); }))) {
            mixin(enumMixinStr_G_TYPE_DBUS_ACTION_GROUP);
        }
    }
    static if(!is(typeof(_BITS_BYTESWAP_H))) {
        private enum enumMixinStr__BITS_BYTESWAP_H = `enum _BITS_BYTESWAP_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_BYTESWAP_H); }))) {
            mixin(enumMixinStr__BITS_BYTESWAP_H);
        }
    }
    static if(!is(typeof(G_TYPE_DATA_OUTPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_DATA_OUTPUT_STREAM = `enum G_TYPE_DATA_OUTPUT_STREAM = ( g_data_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DATA_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_DATA_OUTPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_DATA_INPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_DATA_INPUT_STREAM = `enum G_TYPE_DATA_INPUT_STREAM = ( g_data_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DATA_INPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_DATA_INPUT_STREAM);
        }
    }






    static if(!is(typeof(_PC_LINK_MAX))) {
        private enum enumMixinStr__PC_LINK_MAX = `enum _PC_LINK_MAX = _PC_LINK_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_LINK_MAX); }))) {
            mixin(enumMixinStr__PC_LINK_MAX);
        }
    }




    static if(!is(typeof(_PC_MAX_CANON))) {
        private enum enumMixinStr__PC_MAX_CANON = `enum _PC_MAX_CANON = _PC_MAX_CANON;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_MAX_CANON); }))) {
            mixin(enumMixinStr__PC_MAX_CANON);
        }
    }




    static if(!is(typeof(_PC_MAX_INPUT))) {
        private enum enumMixinStr__PC_MAX_INPUT = `enum _PC_MAX_INPUT = _PC_MAX_INPUT;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_MAX_INPUT); }))) {
            mixin(enumMixinStr__PC_MAX_INPUT);
        }
    }




    static if(!is(typeof(_PC_NAME_MAX))) {
        private enum enumMixinStr__PC_NAME_MAX = `enum _PC_NAME_MAX = _PC_NAME_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_NAME_MAX); }))) {
            mixin(enumMixinStr__PC_NAME_MAX);
        }
    }




    static if(!is(typeof(_PC_PATH_MAX))) {
        private enum enumMixinStr__PC_PATH_MAX = `enum _PC_PATH_MAX = _PC_PATH_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_PATH_MAX); }))) {
            mixin(enumMixinStr__PC_PATH_MAX);
        }
    }




    static if(!is(typeof(_PC_PIPE_BUF))) {
        private enum enumMixinStr__PC_PIPE_BUF = `enum _PC_PIPE_BUF = _PC_PIPE_BUF;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_PIPE_BUF); }))) {
            mixin(enumMixinStr__PC_PIPE_BUF);
        }
    }




    static if(!is(typeof(_PC_CHOWN_RESTRICTED))) {
        private enum enumMixinStr__PC_CHOWN_RESTRICTED = `enum _PC_CHOWN_RESTRICTED = _PC_CHOWN_RESTRICTED;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_CHOWN_RESTRICTED); }))) {
            mixin(enumMixinStr__PC_CHOWN_RESTRICTED);
        }
    }




    static if(!is(typeof(_PC_NO_TRUNC))) {
        private enum enumMixinStr__PC_NO_TRUNC = `enum _PC_NO_TRUNC = _PC_NO_TRUNC;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_NO_TRUNC); }))) {
            mixin(enumMixinStr__PC_NO_TRUNC);
        }
    }




    static if(!is(typeof(_PC_VDISABLE))) {
        private enum enumMixinStr__PC_VDISABLE = `enum _PC_VDISABLE = _PC_VDISABLE;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_VDISABLE); }))) {
            mixin(enumMixinStr__PC_VDISABLE);
        }
    }




    static if(!is(typeof(_PC_SYNC_IO))) {
        private enum enumMixinStr__PC_SYNC_IO = `enum _PC_SYNC_IO = _PC_SYNC_IO;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_SYNC_IO); }))) {
            mixin(enumMixinStr__PC_SYNC_IO);
        }
    }




    static if(!is(typeof(_PC_ASYNC_IO))) {
        private enum enumMixinStr__PC_ASYNC_IO = `enum _PC_ASYNC_IO = _PC_ASYNC_IO;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_ASYNC_IO); }))) {
            mixin(enumMixinStr__PC_ASYNC_IO);
        }
    }




    static if(!is(typeof(_PC_PRIO_IO))) {
        private enum enumMixinStr__PC_PRIO_IO = `enum _PC_PRIO_IO = _PC_PRIO_IO;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_PRIO_IO); }))) {
            mixin(enumMixinStr__PC_PRIO_IO);
        }
    }




    static if(!is(typeof(_PC_SOCK_MAXBUF))) {
        private enum enumMixinStr__PC_SOCK_MAXBUF = `enum _PC_SOCK_MAXBUF = _PC_SOCK_MAXBUF;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_SOCK_MAXBUF); }))) {
            mixin(enumMixinStr__PC_SOCK_MAXBUF);
        }
    }




    static if(!is(typeof(_PC_FILESIZEBITS))) {
        private enum enumMixinStr__PC_FILESIZEBITS = `enum _PC_FILESIZEBITS = _PC_FILESIZEBITS;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_FILESIZEBITS); }))) {
            mixin(enumMixinStr__PC_FILESIZEBITS);
        }
    }




    static if(!is(typeof(_PC_REC_INCR_XFER_SIZE))) {
        private enum enumMixinStr__PC_REC_INCR_XFER_SIZE = `enum _PC_REC_INCR_XFER_SIZE = _PC_REC_INCR_XFER_SIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_REC_INCR_XFER_SIZE); }))) {
            mixin(enumMixinStr__PC_REC_INCR_XFER_SIZE);
        }
    }




    static if(!is(typeof(_PC_REC_MAX_XFER_SIZE))) {
        private enum enumMixinStr__PC_REC_MAX_XFER_SIZE = `enum _PC_REC_MAX_XFER_SIZE = _PC_REC_MAX_XFER_SIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_REC_MAX_XFER_SIZE); }))) {
            mixin(enumMixinStr__PC_REC_MAX_XFER_SIZE);
        }
    }




    static if(!is(typeof(_PC_REC_MIN_XFER_SIZE))) {
        private enum enumMixinStr__PC_REC_MIN_XFER_SIZE = `enum _PC_REC_MIN_XFER_SIZE = _PC_REC_MIN_XFER_SIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_REC_MIN_XFER_SIZE); }))) {
            mixin(enumMixinStr__PC_REC_MIN_XFER_SIZE);
        }
    }




    static if(!is(typeof(_PC_REC_XFER_ALIGN))) {
        private enum enumMixinStr__PC_REC_XFER_ALIGN = `enum _PC_REC_XFER_ALIGN = _PC_REC_XFER_ALIGN;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_REC_XFER_ALIGN); }))) {
            mixin(enumMixinStr__PC_REC_XFER_ALIGN);
        }
    }




    static if(!is(typeof(_PC_ALLOC_SIZE_MIN))) {
        private enum enumMixinStr__PC_ALLOC_SIZE_MIN = `enum _PC_ALLOC_SIZE_MIN = _PC_ALLOC_SIZE_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_ALLOC_SIZE_MIN); }))) {
            mixin(enumMixinStr__PC_ALLOC_SIZE_MIN);
        }
    }




    static if(!is(typeof(_PC_SYMLINK_MAX))) {
        private enum enumMixinStr__PC_SYMLINK_MAX = `enum _PC_SYMLINK_MAX = _PC_SYMLINK_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_SYMLINK_MAX); }))) {
            mixin(enumMixinStr__PC_SYMLINK_MAX);
        }
    }




    static if(!is(typeof(_PC_2_SYMLINKS))) {
        private enum enumMixinStr__PC_2_SYMLINKS = `enum _PC_2_SYMLINKS = _PC_2_SYMLINKS;`;
        static if(is(typeof({ mixin(enumMixinStr__PC_2_SYMLINKS); }))) {
            mixin(enumMixinStr__PC_2_SYMLINKS);
        }
    }






    static if(!is(typeof(_SC_ARG_MAX))) {
        private enum enumMixinStr__SC_ARG_MAX = `enum _SC_ARG_MAX = _SC_ARG_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_ARG_MAX); }))) {
            mixin(enumMixinStr__SC_ARG_MAX);
        }
    }




    static if(!is(typeof(_SC_CHILD_MAX))) {
        private enum enumMixinStr__SC_CHILD_MAX = `enum _SC_CHILD_MAX = _SC_CHILD_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CHILD_MAX); }))) {
            mixin(enumMixinStr__SC_CHILD_MAX);
        }
    }




    static if(!is(typeof(_SC_CLK_TCK))) {
        private enum enumMixinStr__SC_CLK_TCK = `enum _SC_CLK_TCK = _SC_CLK_TCK;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CLK_TCK); }))) {
            mixin(enumMixinStr__SC_CLK_TCK);
        }
    }




    static if(!is(typeof(_SC_NGROUPS_MAX))) {
        private enum enumMixinStr__SC_NGROUPS_MAX = `enum _SC_NGROUPS_MAX = _SC_NGROUPS_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NGROUPS_MAX); }))) {
            mixin(enumMixinStr__SC_NGROUPS_MAX);
        }
    }




    static if(!is(typeof(_SC_OPEN_MAX))) {
        private enum enumMixinStr__SC_OPEN_MAX = `enum _SC_OPEN_MAX = _SC_OPEN_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_OPEN_MAX); }))) {
            mixin(enumMixinStr__SC_OPEN_MAX);
        }
    }




    static if(!is(typeof(_SC_STREAM_MAX))) {
        private enum enumMixinStr__SC_STREAM_MAX = `enum _SC_STREAM_MAX = _SC_STREAM_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_STREAM_MAX); }))) {
            mixin(enumMixinStr__SC_STREAM_MAX);
        }
    }




    static if(!is(typeof(_SC_TZNAME_MAX))) {
        private enum enumMixinStr__SC_TZNAME_MAX = `enum _SC_TZNAME_MAX = _SC_TZNAME_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TZNAME_MAX); }))) {
            mixin(enumMixinStr__SC_TZNAME_MAX);
        }
    }




    static if(!is(typeof(_SC_JOB_CONTROL))) {
        private enum enumMixinStr__SC_JOB_CONTROL = `enum _SC_JOB_CONTROL = _SC_JOB_CONTROL;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_JOB_CONTROL); }))) {
            mixin(enumMixinStr__SC_JOB_CONTROL);
        }
    }




    static if(!is(typeof(_SC_SAVED_IDS))) {
        private enum enumMixinStr__SC_SAVED_IDS = `enum _SC_SAVED_IDS = _SC_SAVED_IDS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SAVED_IDS); }))) {
            mixin(enumMixinStr__SC_SAVED_IDS);
        }
    }




    static if(!is(typeof(_SC_REALTIME_SIGNALS))) {
        private enum enumMixinStr__SC_REALTIME_SIGNALS = `enum _SC_REALTIME_SIGNALS = _SC_REALTIME_SIGNALS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_REALTIME_SIGNALS); }))) {
            mixin(enumMixinStr__SC_REALTIME_SIGNALS);
        }
    }




    static if(!is(typeof(_SC_PRIORITY_SCHEDULING))) {
        private enum enumMixinStr__SC_PRIORITY_SCHEDULING = `enum _SC_PRIORITY_SCHEDULING = _SC_PRIORITY_SCHEDULING;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PRIORITY_SCHEDULING); }))) {
            mixin(enumMixinStr__SC_PRIORITY_SCHEDULING);
        }
    }




    static if(!is(typeof(_SC_TIMERS))) {
        private enum enumMixinStr__SC_TIMERS = `enum _SC_TIMERS = _SC_TIMERS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TIMERS); }))) {
            mixin(enumMixinStr__SC_TIMERS);
        }
    }




    static if(!is(typeof(_SC_ASYNCHRONOUS_IO))) {
        private enum enumMixinStr__SC_ASYNCHRONOUS_IO = `enum _SC_ASYNCHRONOUS_IO = _SC_ASYNCHRONOUS_IO;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_ASYNCHRONOUS_IO); }))) {
            mixin(enumMixinStr__SC_ASYNCHRONOUS_IO);
        }
    }




    static if(!is(typeof(_SC_PRIORITIZED_IO))) {
        private enum enumMixinStr__SC_PRIORITIZED_IO = `enum _SC_PRIORITIZED_IO = _SC_PRIORITIZED_IO;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PRIORITIZED_IO); }))) {
            mixin(enumMixinStr__SC_PRIORITIZED_IO);
        }
    }




    static if(!is(typeof(_SC_SYNCHRONIZED_IO))) {
        private enum enumMixinStr__SC_SYNCHRONIZED_IO = `enum _SC_SYNCHRONIZED_IO = _SC_SYNCHRONIZED_IO;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SYNCHRONIZED_IO); }))) {
            mixin(enumMixinStr__SC_SYNCHRONIZED_IO);
        }
    }




    static if(!is(typeof(_SC_FSYNC))) {
        private enum enumMixinStr__SC_FSYNC = `enum _SC_FSYNC = _SC_FSYNC;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_FSYNC); }))) {
            mixin(enumMixinStr__SC_FSYNC);
        }
    }




    static if(!is(typeof(_SC_MAPPED_FILES))) {
        private enum enumMixinStr__SC_MAPPED_FILES = `enum _SC_MAPPED_FILES = _SC_MAPPED_FILES;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MAPPED_FILES); }))) {
            mixin(enumMixinStr__SC_MAPPED_FILES);
        }
    }




    static if(!is(typeof(_SC_MEMLOCK))) {
        private enum enumMixinStr__SC_MEMLOCK = `enum _SC_MEMLOCK = _SC_MEMLOCK;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MEMLOCK); }))) {
            mixin(enumMixinStr__SC_MEMLOCK);
        }
    }




    static if(!is(typeof(_SC_MEMLOCK_RANGE))) {
        private enum enumMixinStr__SC_MEMLOCK_RANGE = `enum _SC_MEMLOCK_RANGE = _SC_MEMLOCK_RANGE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MEMLOCK_RANGE); }))) {
            mixin(enumMixinStr__SC_MEMLOCK_RANGE);
        }
    }




    static if(!is(typeof(_SC_MEMORY_PROTECTION))) {
        private enum enumMixinStr__SC_MEMORY_PROTECTION = `enum _SC_MEMORY_PROTECTION = _SC_MEMORY_PROTECTION;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MEMORY_PROTECTION); }))) {
            mixin(enumMixinStr__SC_MEMORY_PROTECTION);
        }
    }




    static if(!is(typeof(_SC_MESSAGE_PASSING))) {
        private enum enumMixinStr__SC_MESSAGE_PASSING = `enum _SC_MESSAGE_PASSING = _SC_MESSAGE_PASSING;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MESSAGE_PASSING); }))) {
            mixin(enumMixinStr__SC_MESSAGE_PASSING);
        }
    }




    static if(!is(typeof(_SC_SEMAPHORES))) {
        private enum enumMixinStr__SC_SEMAPHORES = `enum _SC_SEMAPHORES = _SC_SEMAPHORES;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SEMAPHORES); }))) {
            mixin(enumMixinStr__SC_SEMAPHORES);
        }
    }




    static if(!is(typeof(_SC_SHARED_MEMORY_OBJECTS))) {
        private enum enumMixinStr__SC_SHARED_MEMORY_OBJECTS = `enum _SC_SHARED_MEMORY_OBJECTS = _SC_SHARED_MEMORY_OBJECTS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SHARED_MEMORY_OBJECTS); }))) {
            mixin(enumMixinStr__SC_SHARED_MEMORY_OBJECTS);
        }
    }




    static if(!is(typeof(_SC_AIO_LISTIO_MAX))) {
        private enum enumMixinStr__SC_AIO_LISTIO_MAX = `enum _SC_AIO_LISTIO_MAX = _SC_AIO_LISTIO_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_AIO_LISTIO_MAX); }))) {
            mixin(enumMixinStr__SC_AIO_LISTIO_MAX);
        }
    }




    static if(!is(typeof(_SC_AIO_MAX))) {
        private enum enumMixinStr__SC_AIO_MAX = `enum _SC_AIO_MAX = _SC_AIO_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_AIO_MAX); }))) {
            mixin(enumMixinStr__SC_AIO_MAX);
        }
    }




    static if(!is(typeof(_SC_AIO_PRIO_DELTA_MAX))) {
        private enum enumMixinStr__SC_AIO_PRIO_DELTA_MAX = `enum _SC_AIO_PRIO_DELTA_MAX = _SC_AIO_PRIO_DELTA_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_AIO_PRIO_DELTA_MAX); }))) {
            mixin(enumMixinStr__SC_AIO_PRIO_DELTA_MAX);
        }
    }




    static if(!is(typeof(_SC_DELAYTIMER_MAX))) {
        private enum enumMixinStr__SC_DELAYTIMER_MAX = `enum _SC_DELAYTIMER_MAX = _SC_DELAYTIMER_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_DELAYTIMER_MAX); }))) {
            mixin(enumMixinStr__SC_DELAYTIMER_MAX);
        }
    }




    static if(!is(typeof(_SC_MQ_OPEN_MAX))) {
        private enum enumMixinStr__SC_MQ_OPEN_MAX = `enum _SC_MQ_OPEN_MAX = _SC_MQ_OPEN_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MQ_OPEN_MAX); }))) {
            mixin(enumMixinStr__SC_MQ_OPEN_MAX);
        }
    }




    static if(!is(typeof(_SC_MQ_PRIO_MAX))) {
        private enum enumMixinStr__SC_MQ_PRIO_MAX = `enum _SC_MQ_PRIO_MAX = _SC_MQ_PRIO_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MQ_PRIO_MAX); }))) {
            mixin(enumMixinStr__SC_MQ_PRIO_MAX);
        }
    }




    static if(!is(typeof(_SC_VERSION))) {
        private enum enumMixinStr__SC_VERSION = `enum _SC_VERSION = _SC_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_VERSION); }))) {
            mixin(enumMixinStr__SC_VERSION);
        }
    }




    static if(!is(typeof(_SC_PAGESIZE))) {
        private enum enumMixinStr__SC_PAGESIZE = `enum _SC_PAGESIZE = _SC_PAGESIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PAGESIZE); }))) {
            mixin(enumMixinStr__SC_PAGESIZE);
        }
    }




    static if(!is(typeof(_SC_PAGE_SIZE))) {
        private enum enumMixinStr__SC_PAGE_SIZE = `enum _SC_PAGE_SIZE = _SC_PAGESIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PAGE_SIZE); }))) {
            mixin(enumMixinStr__SC_PAGE_SIZE);
        }
    }




    static if(!is(typeof(_SC_RTSIG_MAX))) {
        private enum enumMixinStr__SC_RTSIG_MAX = `enum _SC_RTSIG_MAX = _SC_RTSIG_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_RTSIG_MAX); }))) {
            mixin(enumMixinStr__SC_RTSIG_MAX);
        }
    }




    static if(!is(typeof(_SC_SEM_NSEMS_MAX))) {
        private enum enumMixinStr__SC_SEM_NSEMS_MAX = `enum _SC_SEM_NSEMS_MAX = _SC_SEM_NSEMS_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SEM_NSEMS_MAX); }))) {
            mixin(enumMixinStr__SC_SEM_NSEMS_MAX);
        }
    }




    static if(!is(typeof(_SC_SEM_VALUE_MAX))) {
        private enum enumMixinStr__SC_SEM_VALUE_MAX = `enum _SC_SEM_VALUE_MAX = _SC_SEM_VALUE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SEM_VALUE_MAX); }))) {
            mixin(enumMixinStr__SC_SEM_VALUE_MAX);
        }
    }




    static if(!is(typeof(_SC_SIGQUEUE_MAX))) {
        private enum enumMixinStr__SC_SIGQUEUE_MAX = `enum _SC_SIGQUEUE_MAX = _SC_SIGQUEUE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SIGQUEUE_MAX); }))) {
            mixin(enumMixinStr__SC_SIGQUEUE_MAX);
        }
    }




    static if(!is(typeof(_SC_TIMER_MAX))) {
        private enum enumMixinStr__SC_TIMER_MAX = `enum _SC_TIMER_MAX = _SC_TIMER_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TIMER_MAX); }))) {
            mixin(enumMixinStr__SC_TIMER_MAX);
        }
    }




    static if(!is(typeof(_SC_BC_BASE_MAX))) {
        private enum enumMixinStr__SC_BC_BASE_MAX = `enum _SC_BC_BASE_MAX = _SC_BC_BASE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BC_BASE_MAX); }))) {
            mixin(enumMixinStr__SC_BC_BASE_MAX);
        }
    }




    static if(!is(typeof(_SC_BC_DIM_MAX))) {
        private enum enumMixinStr__SC_BC_DIM_MAX = `enum _SC_BC_DIM_MAX = _SC_BC_DIM_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BC_DIM_MAX); }))) {
            mixin(enumMixinStr__SC_BC_DIM_MAX);
        }
    }




    static if(!is(typeof(_SC_BC_SCALE_MAX))) {
        private enum enumMixinStr__SC_BC_SCALE_MAX = `enum _SC_BC_SCALE_MAX = _SC_BC_SCALE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BC_SCALE_MAX); }))) {
            mixin(enumMixinStr__SC_BC_SCALE_MAX);
        }
    }




    static if(!is(typeof(_SC_BC_STRING_MAX))) {
        private enum enumMixinStr__SC_BC_STRING_MAX = `enum _SC_BC_STRING_MAX = _SC_BC_STRING_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BC_STRING_MAX); }))) {
            mixin(enumMixinStr__SC_BC_STRING_MAX);
        }
    }




    static if(!is(typeof(_SC_COLL_WEIGHTS_MAX))) {
        private enum enumMixinStr__SC_COLL_WEIGHTS_MAX = `enum _SC_COLL_WEIGHTS_MAX = _SC_COLL_WEIGHTS_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_COLL_WEIGHTS_MAX); }))) {
            mixin(enumMixinStr__SC_COLL_WEIGHTS_MAX);
        }
    }




    static if(!is(typeof(_SC_EQUIV_CLASS_MAX))) {
        private enum enumMixinStr__SC_EQUIV_CLASS_MAX = `enum _SC_EQUIV_CLASS_MAX = _SC_EQUIV_CLASS_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_EQUIV_CLASS_MAX); }))) {
            mixin(enumMixinStr__SC_EQUIV_CLASS_MAX);
        }
    }




    static if(!is(typeof(_SC_EXPR_NEST_MAX))) {
        private enum enumMixinStr__SC_EXPR_NEST_MAX = `enum _SC_EXPR_NEST_MAX = _SC_EXPR_NEST_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_EXPR_NEST_MAX); }))) {
            mixin(enumMixinStr__SC_EXPR_NEST_MAX);
        }
    }




    static if(!is(typeof(_SC_LINE_MAX))) {
        private enum enumMixinStr__SC_LINE_MAX = `enum _SC_LINE_MAX = _SC_LINE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LINE_MAX); }))) {
            mixin(enumMixinStr__SC_LINE_MAX);
        }
    }




    static if(!is(typeof(_SC_RE_DUP_MAX))) {
        private enum enumMixinStr__SC_RE_DUP_MAX = `enum _SC_RE_DUP_MAX = _SC_RE_DUP_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_RE_DUP_MAX); }))) {
            mixin(enumMixinStr__SC_RE_DUP_MAX);
        }
    }




    static if(!is(typeof(_SC_CHARCLASS_NAME_MAX))) {
        private enum enumMixinStr__SC_CHARCLASS_NAME_MAX = `enum _SC_CHARCLASS_NAME_MAX = _SC_CHARCLASS_NAME_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CHARCLASS_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_CHARCLASS_NAME_MAX);
        }
    }




    static if(!is(typeof(_SC_2_VERSION))) {
        private enum enumMixinStr__SC_2_VERSION = `enum _SC_2_VERSION = _SC_2_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_VERSION); }))) {
            mixin(enumMixinStr__SC_2_VERSION);
        }
    }




    static if(!is(typeof(_SC_2_C_BIND))) {
        private enum enumMixinStr__SC_2_C_BIND = `enum _SC_2_C_BIND = _SC_2_C_BIND;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_C_BIND); }))) {
            mixin(enumMixinStr__SC_2_C_BIND);
        }
    }




    static if(!is(typeof(_SC_2_C_DEV))) {
        private enum enumMixinStr__SC_2_C_DEV = `enum _SC_2_C_DEV = _SC_2_C_DEV;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_C_DEV); }))) {
            mixin(enumMixinStr__SC_2_C_DEV);
        }
    }




    static if(!is(typeof(_SC_2_FORT_DEV))) {
        private enum enumMixinStr__SC_2_FORT_DEV = `enum _SC_2_FORT_DEV = _SC_2_FORT_DEV;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_FORT_DEV); }))) {
            mixin(enumMixinStr__SC_2_FORT_DEV);
        }
    }




    static if(!is(typeof(_SC_2_FORT_RUN))) {
        private enum enumMixinStr__SC_2_FORT_RUN = `enum _SC_2_FORT_RUN = _SC_2_FORT_RUN;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_FORT_RUN); }))) {
            mixin(enumMixinStr__SC_2_FORT_RUN);
        }
    }




    static if(!is(typeof(_SC_2_SW_DEV))) {
        private enum enumMixinStr__SC_2_SW_DEV = `enum _SC_2_SW_DEV = _SC_2_SW_DEV;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_SW_DEV); }))) {
            mixin(enumMixinStr__SC_2_SW_DEV);
        }
    }




    static if(!is(typeof(_SC_2_LOCALEDEF))) {
        private enum enumMixinStr__SC_2_LOCALEDEF = `enum _SC_2_LOCALEDEF = _SC_2_LOCALEDEF;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_LOCALEDEF); }))) {
            mixin(enumMixinStr__SC_2_LOCALEDEF);
        }
    }




    static if(!is(typeof(_SC_PII))) {
        private enum enumMixinStr__SC_PII = `enum _SC_PII = _SC_PII;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PII); }))) {
            mixin(enumMixinStr__SC_PII);
        }
    }




    static if(!is(typeof(_SC_PII_XTI))) {
        private enum enumMixinStr__SC_PII_XTI = `enum _SC_PII_XTI = _SC_PII_XTI;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PII_XTI); }))) {
            mixin(enumMixinStr__SC_PII_XTI);
        }
    }




    static if(!is(typeof(_SC_PII_SOCKET))) {
        private enum enumMixinStr__SC_PII_SOCKET = `enum _SC_PII_SOCKET = _SC_PII_SOCKET;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PII_SOCKET); }))) {
            mixin(enumMixinStr__SC_PII_SOCKET);
        }
    }




    static if(!is(typeof(_SC_PII_INTERNET))) {
        private enum enumMixinStr__SC_PII_INTERNET = `enum _SC_PII_INTERNET = _SC_PII_INTERNET;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PII_INTERNET); }))) {
            mixin(enumMixinStr__SC_PII_INTERNET);
        }
    }




    static if(!is(typeof(_SC_PII_OSI))) {
        private enum enumMixinStr__SC_PII_OSI = `enum _SC_PII_OSI = _SC_PII_OSI;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PII_OSI); }))) {
            mixin(enumMixinStr__SC_PII_OSI);
        }
    }




    static if(!is(typeof(_SC_POLL))) {
        private enum enumMixinStr__SC_POLL = `enum _SC_POLL = _SC_POLL;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_POLL); }))) {
            mixin(enumMixinStr__SC_POLL);
        }
    }




    static if(!is(typeof(_SC_SELECT))) {
        private enum enumMixinStr__SC_SELECT = `enum _SC_SELECT = _SC_SELECT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SELECT); }))) {
            mixin(enumMixinStr__SC_SELECT);
        }
    }




    static if(!is(typeof(_SC_UIO_MAXIOV))) {
        private enum enumMixinStr__SC_UIO_MAXIOV = `enum _SC_UIO_MAXIOV = _SC_UIO_MAXIOV;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_UIO_MAXIOV); }))) {
            mixin(enumMixinStr__SC_UIO_MAXIOV);
        }
    }






    static if(!is(typeof(_SC_IOV_MAX))) {
        private enum enumMixinStr__SC_IOV_MAX = `enum _SC_IOV_MAX = _SC_IOV_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_IOV_MAX); }))) {
            mixin(enumMixinStr__SC_IOV_MAX);
        }
    }




    static if(!is(typeof(_SC_PII_INTERNET_STREAM))) {
        private enum enumMixinStr__SC_PII_INTERNET_STREAM = `enum _SC_PII_INTERNET_STREAM = _SC_PII_INTERNET_STREAM;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PII_INTERNET_STREAM); }))) {
            mixin(enumMixinStr__SC_PII_INTERNET_STREAM);
        }
    }




    static if(!is(typeof(_SC_PII_INTERNET_DGRAM))) {
        private enum enumMixinStr__SC_PII_INTERNET_DGRAM = `enum _SC_PII_INTERNET_DGRAM = _SC_PII_INTERNET_DGRAM;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PII_INTERNET_DGRAM); }))) {
            mixin(enumMixinStr__SC_PII_INTERNET_DGRAM);
        }
    }




    static if(!is(typeof(_SC_PII_OSI_COTS))) {
        private enum enumMixinStr__SC_PII_OSI_COTS = `enum _SC_PII_OSI_COTS = _SC_PII_OSI_COTS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PII_OSI_COTS); }))) {
            mixin(enumMixinStr__SC_PII_OSI_COTS);
        }
    }




    static if(!is(typeof(_SC_PII_OSI_CLTS))) {
        private enum enumMixinStr__SC_PII_OSI_CLTS = `enum _SC_PII_OSI_CLTS = _SC_PII_OSI_CLTS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PII_OSI_CLTS); }))) {
            mixin(enumMixinStr__SC_PII_OSI_CLTS);
        }
    }




    static if(!is(typeof(_SC_PII_OSI_M))) {
        private enum enumMixinStr__SC_PII_OSI_M = `enum _SC_PII_OSI_M = _SC_PII_OSI_M;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PII_OSI_M); }))) {
            mixin(enumMixinStr__SC_PII_OSI_M);
        }
    }




    static if(!is(typeof(_SC_T_IOV_MAX))) {
        private enum enumMixinStr__SC_T_IOV_MAX = `enum _SC_T_IOV_MAX = _SC_T_IOV_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_T_IOV_MAX); }))) {
            mixin(enumMixinStr__SC_T_IOV_MAX);
        }
    }




    static if(!is(typeof(_SC_THREADS))) {
        private enum enumMixinStr__SC_THREADS = `enum _SC_THREADS = _SC_THREADS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREADS); }))) {
            mixin(enumMixinStr__SC_THREADS);
        }
    }




    static if(!is(typeof(_SC_THREAD_SAFE_FUNCTIONS))) {
        private enum enumMixinStr__SC_THREAD_SAFE_FUNCTIONS = `enum _SC_THREAD_SAFE_FUNCTIONS = _SC_THREAD_SAFE_FUNCTIONS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_SAFE_FUNCTIONS); }))) {
            mixin(enumMixinStr__SC_THREAD_SAFE_FUNCTIONS);
        }
    }




    static if(!is(typeof(_SC_GETGR_R_SIZE_MAX))) {
        private enum enumMixinStr__SC_GETGR_R_SIZE_MAX = `enum _SC_GETGR_R_SIZE_MAX = _SC_GETGR_R_SIZE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_GETGR_R_SIZE_MAX); }))) {
            mixin(enumMixinStr__SC_GETGR_R_SIZE_MAX);
        }
    }




    static if(!is(typeof(_SC_GETPW_R_SIZE_MAX))) {
        private enum enumMixinStr__SC_GETPW_R_SIZE_MAX = `enum _SC_GETPW_R_SIZE_MAX = _SC_GETPW_R_SIZE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_GETPW_R_SIZE_MAX); }))) {
            mixin(enumMixinStr__SC_GETPW_R_SIZE_MAX);
        }
    }




    static if(!is(typeof(_SC_LOGIN_NAME_MAX))) {
        private enum enumMixinStr__SC_LOGIN_NAME_MAX = `enum _SC_LOGIN_NAME_MAX = _SC_LOGIN_NAME_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LOGIN_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_LOGIN_NAME_MAX);
        }
    }




    static if(!is(typeof(_SC_TTY_NAME_MAX))) {
        private enum enumMixinStr__SC_TTY_NAME_MAX = `enum _SC_TTY_NAME_MAX = _SC_TTY_NAME_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TTY_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_TTY_NAME_MAX);
        }
    }




    static if(!is(typeof(_SC_THREAD_DESTRUCTOR_ITERATIONS))) {
        private enum enumMixinStr__SC_THREAD_DESTRUCTOR_ITERATIONS = `enum _SC_THREAD_DESTRUCTOR_ITERATIONS = _SC_THREAD_DESTRUCTOR_ITERATIONS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_DESTRUCTOR_ITERATIONS); }))) {
            mixin(enumMixinStr__SC_THREAD_DESTRUCTOR_ITERATIONS);
        }
    }




    static if(!is(typeof(_SC_THREAD_KEYS_MAX))) {
        private enum enumMixinStr__SC_THREAD_KEYS_MAX = `enum _SC_THREAD_KEYS_MAX = _SC_THREAD_KEYS_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_KEYS_MAX); }))) {
            mixin(enumMixinStr__SC_THREAD_KEYS_MAX);
        }
    }




    static if(!is(typeof(_SC_THREAD_STACK_MIN))) {
        private enum enumMixinStr__SC_THREAD_STACK_MIN = `enum _SC_THREAD_STACK_MIN = _SC_THREAD_STACK_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_STACK_MIN); }))) {
            mixin(enumMixinStr__SC_THREAD_STACK_MIN);
        }
    }




    static if(!is(typeof(_SC_THREAD_THREADS_MAX))) {
        private enum enumMixinStr__SC_THREAD_THREADS_MAX = `enum _SC_THREAD_THREADS_MAX = _SC_THREAD_THREADS_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_THREADS_MAX); }))) {
            mixin(enumMixinStr__SC_THREAD_THREADS_MAX);
        }
    }




    static if(!is(typeof(_SC_THREAD_ATTR_STACKADDR))) {
        private enum enumMixinStr__SC_THREAD_ATTR_STACKADDR = `enum _SC_THREAD_ATTR_STACKADDR = _SC_THREAD_ATTR_STACKADDR;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_ATTR_STACKADDR); }))) {
            mixin(enumMixinStr__SC_THREAD_ATTR_STACKADDR);
        }
    }




    static if(!is(typeof(_SC_THREAD_ATTR_STACKSIZE))) {
        private enum enumMixinStr__SC_THREAD_ATTR_STACKSIZE = `enum _SC_THREAD_ATTR_STACKSIZE = _SC_THREAD_ATTR_STACKSIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_ATTR_STACKSIZE); }))) {
            mixin(enumMixinStr__SC_THREAD_ATTR_STACKSIZE);
        }
    }




    static if(!is(typeof(_SC_THREAD_PRIORITY_SCHEDULING))) {
        private enum enumMixinStr__SC_THREAD_PRIORITY_SCHEDULING = `enum _SC_THREAD_PRIORITY_SCHEDULING = _SC_THREAD_PRIORITY_SCHEDULING;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_PRIORITY_SCHEDULING); }))) {
            mixin(enumMixinStr__SC_THREAD_PRIORITY_SCHEDULING);
        }
    }




    static if(!is(typeof(_SC_THREAD_PRIO_INHERIT))) {
        private enum enumMixinStr__SC_THREAD_PRIO_INHERIT = `enum _SC_THREAD_PRIO_INHERIT = _SC_THREAD_PRIO_INHERIT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_PRIO_INHERIT); }))) {
            mixin(enumMixinStr__SC_THREAD_PRIO_INHERIT);
        }
    }




    static if(!is(typeof(_SC_THREAD_PRIO_PROTECT))) {
        private enum enumMixinStr__SC_THREAD_PRIO_PROTECT = `enum _SC_THREAD_PRIO_PROTECT = _SC_THREAD_PRIO_PROTECT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_PRIO_PROTECT); }))) {
            mixin(enumMixinStr__SC_THREAD_PRIO_PROTECT);
        }
    }




    static if(!is(typeof(_SC_THREAD_PROCESS_SHARED))) {
        private enum enumMixinStr__SC_THREAD_PROCESS_SHARED = `enum _SC_THREAD_PROCESS_SHARED = _SC_THREAD_PROCESS_SHARED;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_PROCESS_SHARED); }))) {
            mixin(enumMixinStr__SC_THREAD_PROCESS_SHARED);
        }
    }




    static if(!is(typeof(_SC_NPROCESSORS_CONF))) {
        private enum enumMixinStr__SC_NPROCESSORS_CONF = `enum _SC_NPROCESSORS_CONF = _SC_NPROCESSORS_CONF;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NPROCESSORS_CONF); }))) {
            mixin(enumMixinStr__SC_NPROCESSORS_CONF);
        }
    }




    static if(!is(typeof(_SC_NPROCESSORS_ONLN))) {
        private enum enumMixinStr__SC_NPROCESSORS_ONLN = `enum _SC_NPROCESSORS_ONLN = _SC_NPROCESSORS_ONLN;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NPROCESSORS_ONLN); }))) {
            mixin(enumMixinStr__SC_NPROCESSORS_ONLN);
        }
    }




    static if(!is(typeof(_SC_PHYS_PAGES))) {
        private enum enumMixinStr__SC_PHYS_PAGES = `enum _SC_PHYS_PAGES = _SC_PHYS_PAGES;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PHYS_PAGES); }))) {
            mixin(enumMixinStr__SC_PHYS_PAGES);
        }
    }




    static if(!is(typeof(_SC_AVPHYS_PAGES))) {
        private enum enumMixinStr__SC_AVPHYS_PAGES = `enum _SC_AVPHYS_PAGES = _SC_AVPHYS_PAGES;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_AVPHYS_PAGES); }))) {
            mixin(enumMixinStr__SC_AVPHYS_PAGES);
        }
    }




    static if(!is(typeof(_SC_ATEXIT_MAX))) {
        private enum enumMixinStr__SC_ATEXIT_MAX = `enum _SC_ATEXIT_MAX = _SC_ATEXIT_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_ATEXIT_MAX); }))) {
            mixin(enumMixinStr__SC_ATEXIT_MAX);
        }
    }




    static if(!is(typeof(_SC_PASS_MAX))) {
        private enum enumMixinStr__SC_PASS_MAX = `enum _SC_PASS_MAX = _SC_PASS_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PASS_MAX); }))) {
            mixin(enumMixinStr__SC_PASS_MAX);
        }
    }




    static if(!is(typeof(_SC_XOPEN_VERSION))) {
        private enum enumMixinStr__SC_XOPEN_VERSION = `enum _SC_XOPEN_VERSION = _SC_XOPEN_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_VERSION); }))) {
            mixin(enumMixinStr__SC_XOPEN_VERSION);
        }
    }




    static if(!is(typeof(_SC_XOPEN_XCU_VERSION))) {
        private enum enumMixinStr__SC_XOPEN_XCU_VERSION = `enum _SC_XOPEN_XCU_VERSION = _SC_XOPEN_XCU_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_XCU_VERSION); }))) {
            mixin(enumMixinStr__SC_XOPEN_XCU_VERSION);
        }
    }




    static if(!is(typeof(_SC_XOPEN_UNIX))) {
        private enum enumMixinStr__SC_XOPEN_UNIX = `enum _SC_XOPEN_UNIX = _SC_XOPEN_UNIX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_UNIX); }))) {
            mixin(enumMixinStr__SC_XOPEN_UNIX);
        }
    }




    static if(!is(typeof(_SC_XOPEN_CRYPT))) {
        private enum enumMixinStr__SC_XOPEN_CRYPT = `enum _SC_XOPEN_CRYPT = _SC_XOPEN_CRYPT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_CRYPT); }))) {
            mixin(enumMixinStr__SC_XOPEN_CRYPT);
        }
    }




    static if(!is(typeof(_SC_XOPEN_ENH_I18N))) {
        private enum enumMixinStr__SC_XOPEN_ENH_I18N = `enum _SC_XOPEN_ENH_I18N = _SC_XOPEN_ENH_I18N;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_ENH_I18N); }))) {
            mixin(enumMixinStr__SC_XOPEN_ENH_I18N);
        }
    }




    static if(!is(typeof(_SC_XOPEN_SHM))) {
        private enum enumMixinStr__SC_XOPEN_SHM = `enum _SC_XOPEN_SHM = _SC_XOPEN_SHM;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_SHM); }))) {
            mixin(enumMixinStr__SC_XOPEN_SHM);
        }
    }




    static if(!is(typeof(_SC_2_CHAR_TERM))) {
        private enum enumMixinStr__SC_2_CHAR_TERM = `enum _SC_2_CHAR_TERM = _SC_2_CHAR_TERM;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_CHAR_TERM); }))) {
            mixin(enumMixinStr__SC_2_CHAR_TERM);
        }
    }




    static if(!is(typeof(_SC_2_C_VERSION))) {
        private enum enumMixinStr__SC_2_C_VERSION = `enum _SC_2_C_VERSION = _SC_2_C_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_C_VERSION); }))) {
            mixin(enumMixinStr__SC_2_C_VERSION);
        }
    }




    static if(!is(typeof(_SC_2_UPE))) {
        private enum enumMixinStr__SC_2_UPE = `enum _SC_2_UPE = _SC_2_UPE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_UPE); }))) {
            mixin(enumMixinStr__SC_2_UPE);
        }
    }




    static if(!is(typeof(_SC_XOPEN_XPG2))) {
        private enum enumMixinStr__SC_XOPEN_XPG2 = `enum _SC_XOPEN_XPG2 = _SC_XOPEN_XPG2;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_XPG2); }))) {
            mixin(enumMixinStr__SC_XOPEN_XPG2);
        }
    }




    static if(!is(typeof(_SC_XOPEN_XPG3))) {
        private enum enumMixinStr__SC_XOPEN_XPG3 = `enum _SC_XOPEN_XPG3 = _SC_XOPEN_XPG3;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_XPG3); }))) {
            mixin(enumMixinStr__SC_XOPEN_XPG3);
        }
    }




    static if(!is(typeof(_SC_XOPEN_XPG4))) {
        private enum enumMixinStr__SC_XOPEN_XPG4 = `enum _SC_XOPEN_XPG4 = _SC_XOPEN_XPG4;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_XPG4); }))) {
            mixin(enumMixinStr__SC_XOPEN_XPG4);
        }
    }




    static if(!is(typeof(_SC_CHAR_BIT))) {
        private enum enumMixinStr__SC_CHAR_BIT = `enum _SC_CHAR_BIT = _SC_CHAR_BIT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CHAR_BIT); }))) {
            mixin(enumMixinStr__SC_CHAR_BIT);
        }
    }




    static if(!is(typeof(_SC_CHAR_MAX))) {
        private enum enumMixinStr__SC_CHAR_MAX = `enum _SC_CHAR_MAX = _SC_CHAR_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CHAR_MAX); }))) {
            mixin(enumMixinStr__SC_CHAR_MAX);
        }
    }




    static if(!is(typeof(_SC_CHAR_MIN))) {
        private enum enumMixinStr__SC_CHAR_MIN = `enum _SC_CHAR_MIN = _SC_CHAR_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CHAR_MIN); }))) {
            mixin(enumMixinStr__SC_CHAR_MIN);
        }
    }




    static if(!is(typeof(_SC_INT_MAX))) {
        private enum enumMixinStr__SC_INT_MAX = `enum _SC_INT_MAX = _SC_INT_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_INT_MAX); }))) {
            mixin(enumMixinStr__SC_INT_MAX);
        }
    }




    static if(!is(typeof(_SC_INT_MIN))) {
        private enum enumMixinStr__SC_INT_MIN = `enum _SC_INT_MIN = _SC_INT_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_INT_MIN); }))) {
            mixin(enumMixinStr__SC_INT_MIN);
        }
    }




    static if(!is(typeof(_SC_LONG_BIT))) {
        private enum enumMixinStr__SC_LONG_BIT = `enum _SC_LONG_BIT = _SC_LONG_BIT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LONG_BIT); }))) {
            mixin(enumMixinStr__SC_LONG_BIT);
        }
    }




    static if(!is(typeof(_SC_WORD_BIT))) {
        private enum enumMixinStr__SC_WORD_BIT = `enum _SC_WORD_BIT = _SC_WORD_BIT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_WORD_BIT); }))) {
            mixin(enumMixinStr__SC_WORD_BIT);
        }
    }




    static if(!is(typeof(_SC_MB_LEN_MAX))) {
        private enum enumMixinStr__SC_MB_LEN_MAX = `enum _SC_MB_LEN_MAX = _SC_MB_LEN_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MB_LEN_MAX); }))) {
            mixin(enumMixinStr__SC_MB_LEN_MAX);
        }
    }




    static if(!is(typeof(_SC_NZERO))) {
        private enum enumMixinStr__SC_NZERO = `enum _SC_NZERO = _SC_NZERO;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NZERO); }))) {
            mixin(enumMixinStr__SC_NZERO);
        }
    }




    static if(!is(typeof(_SC_SSIZE_MAX))) {
        private enum enumMixinStr__SC_SSIZE_MAX = `enum _SC_SSIZE_MAX = _SC_SSIZE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SSIZE_MAX); }))) {
            mixin(enumMixinStr__SC_SSIZE_MAX);
        }
    }




    static if(!is(typeof(_SC_SCHAR_MAX))) {
        private enum enumMixinStr__SC_SCHAR_MAX = `enum _SC_SCHAR_MAX = _SC_SCHAR_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SCHAR_MAX); }))) {
            mixin(enumMixinStr__SC_SCHAR_MAX);
        }
    }




    static if(!is(typeof(_SC_SCHAR_MIN))) {
        private enum enumMixinStr__SC_SCHAR_MIN = `enum _SC_SCHAR_MIN = _SC_SCHAR_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SCHAR_MIN); }))) {
            mixin(enumMixinStr__SC_SCHAR_MIN);
        }
    }




    static if(!is(typeof(_SC_SHRT_MAX))) {
        private enum enumMixinStr__SC_SHRT_MAX = `enum _SC_SHRT_MAX = _SC_SHRT_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SHRT_MAX); }))) {
            mixin(enumMixinStr__SC_SHRT_MAX);
        }
    }




    static if(!is(typeof(_SC_SHRT_MIN))) {
        private enum enumMixinStr__SC_SHRT_MIN = `enum _SC_SHRT_MIN = _SC_SHRT_MIN;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SHRT_MIN); }))) {
            mixin(enumMixinStr__SC_SHRT_MIN);
        }
    }




    static if(!is(typeof(_SC_UCHAR_MAX))) {
        private enum enumMixinStr__SC_UCHAR_MAX = `enum _SC_UCHAR_MAX = _SC_UCHAR_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_UCHAR_MAX); }))) {
            mixin(enumMixinStr__SC_UCHAR_MAX);
        }
    }




    static if(!is(typeof(_SC_UINT_MAX))) {
        private enum enumMixinStr__SC_UINT_MAX = `enum _SC_UINT_MAX = _SC_UINT_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_UINT_MAX); }))) {
            mixin(enumMixinStr__SC_UINT_MAX);
        }
    }




    static if(!is(typeof(_SC_ULONG_MAX))) {
        private enum enumMixinStr__SC_ULONG_MAX = `enum _SC_ULONG_MAX = _SC_ULONG_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_ULONG_MAX); }))) {
            mixin(enumMixinStr__SC_ULONG_MAX);
        }
    }




    static if(!is(typeof(_SC_USHRT_MAX))) {
        private enum enumMixinStr__SC_USHRT_MAX = `enum _SC_USHRT_MAX = _SC_USHRT_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_USHRT_MAX); }))) {
            mixin(enumMixinStr__SC_USHRT_MAX);
        }
    }




    static if(!is(typeof(_SC_NL_ARGMAX))) {
        private enum enumMixinStr__SC_NL_ARGMAX = `enum _SC_NL_ARGMAX = _SC_NL_ARGMAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NL_ARGMAX); }))) {
            mixin(enumMixinStr__SC_NL_ARGMAX);
        }
    }




    static if(!is(typeof(_SC_NL_LANGMAX))) {
        private enum enumMixinStr__SC_NL_LANGMAX = `enum _SC_NL_LANGMAX = _SC_NL_LANGMAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NL_LANGMAX); }))) {
            mixin(enumMixinStr__SC_NL_LANGMAX);
        }
    }




    static if(!is(typeof(_SC_NL_MSGMAX))) {
        private enum enumMixinStr__SC_NL_MSGMAX = `enum _SC_NL_MSGMAX = _SC_NL_MSGMAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NL_MSGMAX); }))) {
            mixin(enumMixinStr__SC_NL_MSGMAX);
        }
    }




    static if(!is(typeof(_SC_NL_NMAX))) {
        private enum enumMixinStr__SC_NL_NMAX = `enum _SC_NL_NMAX = _SC_NL_NMAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NL_NMAX); }))) {
            mixin(enumMixinStr__SC_NL_NMAX);
        }
    }




    static if(!is(typeof(_SC_NL_SETMAX))) {
        private enum enumMixinStr__SC_NL_SETMAX = `enum _SC_NL_SETMAX = _SC_NL_SETMAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NL_SETMAX); }))) {
            mixin(enumMixinStr__SC_NL_SETMAX);
        }
    }




    static if(!is(typeof(_SC_NL_TEXTMAX))) {
        private enum enumMixinStr__SC_NL_TEXTMAX = `enum _SC_NL_TEXTMAX = _SC_NL_TEXTMAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NL_TEXTMAX); }))) {
            mixin(enumMixinStr__SC_NL_TEXTMAX);
        }
    }




    static if(!is(typeof(_SC_XBS5_ILP32_OFF32))) {
        private enum enumMixinStr__SC_XBS5_ILP32_OFF32 = `enum _SC_XBS5_ILP32_OFF32 = _SC_XBS5_ILP32_OFF32;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XBS5_ILP32_OFF32); }))) {
            mixin(enumMixinStr__SC_XBS5_ILP32_OFF32);
        }
    }




    static if(!is(typeof(_SC_XBS5_ILP32_OFFBIG))) {
        private enum enumMixinStr__SC_XBS5_ILP32_OFFBIG = `enum _SC_XBS5_ILP32_OFFBIG = _SC_XBS5_ILP32_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XBS5_ILP32_OFFBIG); }))) {
            mixin(enumMixinStr__SC_XBS5_ILP32_OFFBIG);
        }
    }




    static if(!is(typeof(_SC_XBS5_LP64_OFF64))) {
        private enum enumMixinStr__SC_XBS5_LP64_OFF64 = `enum _SC_XBS5_LP64_OFF64 = _SC_XBS5_LP64_OFF64;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XBS5_LP64_OFF64); }))) {
            mixin(enumMixinStr__SC_XBS5_LP64_OFF64);
        }
    }




    static if(!is(typeof(_SC_XBS5_LPBIG_OFFBIG))) {
        private enum enumMixinStr__SC_XBS5_LPBIG_OFFBIG = `enum _SC_XBS5_LPBIG_OFFBIG = _SC_XBS5_LPBIG_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XBS5_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__SC_XBS5_LPBIG_OFFBIG);
        }
    }




    static if(!is(typeof(_SC_XOPEN_LEGACY))) {
        private enum enumMixinStr__SC_XOPEN_LEGACY = `enum _SC_XOPEN_LEGACY = _SC_XOPEN_LEGACY;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_LEGACY); }))) {
            mixin(enumMixinStr__SC_XOPEN_LEGACY);
        }
    }




    static if(!is(typeof(_SC_XOPEN_REALTIME))) {
        private enum enumMixinStr__SC_XOPEN_REALTIME = `enum _SC_XOPEN_REALTIME = _SC_XOPEN_REALTIME;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_REALTIME); }))) {
            mixin(enumMixinStr__SC_XOPEN_REALTIME);
        }
    }




    static if(!is(typeof(_SC_XOPEN_REALTIME_THREADS))) {
        private enum enumMixinStr__SC_XOPEN_REALTIME_THREADS = `enum _SC_XOPEN_REALTIME_THREADS = _SC_XOPEN_REALTIME_THREADS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_REALTIME_THREADS); }))) {
            mixin(enumMixinStr__SC_XOPEN_REALTIME_THREADS);
        }
    }




    static if(!is(typeof(_SC_ADVISORY_INFO))) {
        private enum enumMixinStr__SC_ADVISORY_INFO = `enum _SC_ADVISORY_INFO = _SC_ADVISORY_INFO;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_ADVISORY_INFO); }))) {
            mixin(enumMixinStr__SC_ADVISORY_INFO);
        }
    }




    static if(!is(typeof(_SC_BARRIERS))) {
        private enum enumMixinStr__SC_BARRIERS = `enum _SC_BARRIERS = _SC_BARRIERS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BARRIERS); }))) {
            mixin(enumMixinStr__SC_BARRIERS);
        }
    }




    static if(!is(typeof(_SC_BASE))) {
        private enum enumMixinStr__SC_BASE = `enum _SC_BASE = _SC_BASE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_BASE); }))) {
            mixin(enumMixinStr__SC_BASE);
        }
    }




    static if(!is(typeof(_SC_C_LANG_SUPPORT))) {
        private enum enumMixinStr__SC_C_LANG_SUPPORT = `enum _SC_C_LANG_SUPPORT = _SC_C_LANG_SUPPORT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_C_LANG_SUPPORT); }))) {
            mixin(enumMixinStr__SC_C_LANG_SUPPORT);
        }
    }




    static if(!is(typeof(_SC_C_LANG_SUPPORT_R))) {
        private enum enumMixinStr__SC_C_LANG_SUPPORT_R = `enum _SC_C_LANG_SUPPORT_R = _SC_C_LANG_SUPPORT_R;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_C_LANG_SUPPORT_R); }))) {
            mixin(enumMixinStr__SC_C_LANG_SUPPORT_R);
        }
    }




    static if(!is(typeof(_SC_CLOCK_SELECTION))) {
        private enum enumMixinStr__SC_CLOCK_SELECTION = `enum _SC_CLOCK_SELECTION = _SC_CLOCK_SELECTION;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CLOCK_SELECTION); }))) {
            mixin(enumMixinStr__SC_CLOCK_SELECTION);
        }
    }




    static if(!is(typeof(_SC_CPUTIME))) {
        private enum enumMixinStr__SC_CPUTIME = `enum _SC_CPUTIME = _SC_CPUTIME;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_CPUTIME); }))) {
            mixin(enumMixinStr__SC_CPUTIME);
        }
    }




    static if(!is(typeof(_SC_THREAD_CPUTIME))) {
        private enum enumMixinStr__SC_THREAD_CPUTIME = `enum _SC_THREAD_CPUTIME = _SC_THREAD_CPUTIME;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_CPUTIME); }))) {
            mixin(enumMixinStr__SC_THREAD_CPUTIME);
        }
    }




    static if(!is(typeof(_SC_DEVICE_IO))) {
        private enum enumMixinStr__SC_DEVICE_IO = `enum _SC_DEVICE_IO = _SC_DEVICE_IO;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_DEVICE_IO); }))) {
            mixin(enumMixinStr__SC_DEVICE_IO);
        }
    }




    static if(!is(typeof(_SC_DEVICE_SPECIFIC))) {
        private enum enumMixinStr__SC_DEVICE_SPECIFIC = `enum _SC_DEVICE_SPECIFIC = _SC_DEVICE_SPECIFIC;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_DEVICE_SPECIFIC); }))) {
            mixin(enumMixinStr__SC_DEVICE_SPECIFIC);
        }
    }




    static if(!is(typeof(_SC_DEVICE_SPECIFIC_R))) {
        private enum enumMixinStr__SC_DEVICE_SPECIFIC_R = `enum _SC_DEVICE_SPECIFIC_R = _SC_DEVICE_SPECIFIC_R;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_DEVICE_SPECIFIC_R); }))) {
            mixin(enumMixinStr__SC_DEVICE_SPECIFIC_R);
        }
    }




    static if(!is(typeof(_SC_FD_MGMT))) {
        private enum enumMixinStr__SC_FD_MGMT = `enum _SC_FD_MGMT = _SC_FD_MGMT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_FD_MGMT); }))) {
            mixin(enumMixinStr__SC_FD_MGMT);
        }
    }




    static if(!is(typeof(_SC_FIFO))) {
        private enum enumMixinStr__SC_FIFO = `enum _SC_FIFO = _SC_FIFO;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_FIFO); }))) {
            mixin(enumMixinStr__SC_FIFO);
        }
    }




    static if(!is(typeof(_SC_PIPE))) {
        private enum enumMixinStr__SC_PIPE = `enum _SC_PIPE = _SC_PIPE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_PIPE); }))) {
            mixin(enumMixinStr__SC_PIPE);
        }
    }




    static if(!is(typeof(_SC_FILE_ATTRIBUTES))) {
        private enum enumMixinStr__SC_FILE_ATTRIBUTES = `enum _SC_FILE_ATTRIBUTES = _SC_FILE_ATTRIBUTES;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_FILE_ATTRIBUTES); }))) {
            mixin(enumMixinStr__SC_FILE_ATTRIBUTES);
        }
    }




    static if(!is(typeof(_SC_FILE_LOCKING))) {
        private enum enumMixinStr__SC_FILE_LOCKING = `enum _SC_FILE_LOCKING = _SC_FILE_LOCKING;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_FILE_LOCKING); }))) {
            mixin(enumMixinStr__SC_FILE_LOCKING);
        }
    }




    static if(!is(typeof(_SC_FILE_SYSTEM))) {
        private enum enumMixinStr__SC_FILE_SYSTEM = `enum _SC_FILE_SYSTEM = _SC_FILE_SYSTEM;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_FILE_SYSTEM); }))) {
            mixin(enumMixinStr__SC_FILE_SYSTEM);
        }
    }




    static if(!is(typeof(_SC_MONOTONIC_CLOCK))) {
        private enum enumMixinStr__SC_MONOTONIC_CLOCK = `enum _SC_MONOTONIC_CLOCK = _SC_MONOTONIC_CLOCK;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MONOTONIC_CLOCK); }))) {
            mixin(enumMixinStr__SC_MONOTONIC_CLOCK);
        }
    }




    static if(!is(typeof(_SC_MULTI_PROCESS))) {
        private enum enumMixinStr__SC_MULTI_PROCESS = `enum _SC_MULTI_PROCESS = _SC_MULTI_PROCESS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_MULTI_PROCESS); }))) {
            mixin(enumMixinStr__SC_MULTI_PROCESS);
        }
    }




    static if(!is(typeof(_SC_SINGLE_PROCESS))) {
        private enum enumMixinStr__SC_SINGLE_PROCESS = `enum _SC_SINGLE_PROCESS = _SC_SINGLE_PROCESS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SINGLE_PROCESS); }))) {
            mixin(enumMixinStr__SC_SINGLE_PROCESS);
        }
    }




    static if(!is(typeof(_SC_NETWORKING))) {
        private enum enumMixinStr__SC_NETWORKING = `enum _SC_NETWORKING = _SC_NETWORKING;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_NETWORKING); }))) {
            mixin(enumMixinStr__SC_NETWORKING);
        }
    }




    static if(!is(typeof(_SC_READER_WRITER_LOCKS))) {
        private enum enumMixinStr__SC_READER_WRITER_LOCKS = `enum _SC_READER_WRITER_LOCKS = _SC_READER_WRITER_LOCKS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_READER_WRITER_LOCKS); }))) {
            mixin(enumMixinStr__SC_READER_WRITER_LOCKS);
        }
    }




    static if(!is(typeof(_SC_SPIN_LOCKS))) {
        private enum enumMixinStr__SC_SPIN_LOCKS = `enum _SC_SPIN_LOCKS = _SC_SPIN_LOCKS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SPIN_LOCKS); }))) {
            mixin(enumMixinStr__SC_SPIN_LOCKS);
        }
    }




    static if(!is(typeof(_SC_REGEXP))) {
        private enum enumMixinStr__SC_REGEXP = `enum _SC_REGEXP = _SC_REGEXP;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_REGEXP); }))) {
            mixin(enumMixinStr__SC_REGEXP);
        }
    }




    static if(!is(typeof(_SC_REGEX_VERSION))) {
        private enum enumMixinStr__SC_REGEX_VERSION = `enum _SC_REGEX_VERSION = _SC_REGEX_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_REGEX_VERSION); }))) {
            mixin(enumMixinStr__SC_REGEX_VERSION);
        }
    }




    static if(!is(typeof(_SC_SHELL))) {
        private enum enumMixinStr__SC_SHELL = `enum _SC_SHELL = _SC_SHELL;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SHELL); }))) {
            mixin(enumMixinStr__SC_SHELL);
        }
    }




    static if(!is(typeof(_SC_SIGNALS))) {
        private enum enumMixinStr__SC_SIGNALS = `enum _SC_SIGNALS = _SC_SIGNALS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SIGNALS); }))) {
            mixin(enumMixinStr__SC_SIGNALS);
        }
    }




    static if(!is(typeof(_SC_SPAWN))) {
        private enum enumMixinStr__SC_SPAWN = `enum _SC_SPAWN = _SC_SPAWN;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SPAWN); }))) {
            mixin(enumMixinStr__SC_SPAWN);
        }
    }




    static if(!is(typeof(_SC_SPORADIC_SERVER))) {
        private enum enumMixinStr__SC_SPORADIC_SERVER = `enum _SC_SPORADIC_SERVER = _SC_SPORADIC_SERVER;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SPORADIC_SERVER); }))) {
            mixin(enumMixinStr__SC_SPORADIC_SERVER);
        }
    }




    static if(!is(typeof(_SC_THREAD_SPORADIC_SERVER))) {
        private enum enumMixinStr__SC_THREAD_SPORADIC_SERVER = `enum _SC_THREAD_SPORADIC_SERVER = _SC_THREAD_SPORADIC_SERVER;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_SPORADIC_SERVER); }))) {
            mixin(enumMixinStr__SC_THREAD_SPORADIC_SERVER);
        }
    }




    static if(!is(typeof(_SC_SYSTEM_DATABASE))) {
        private enum enumMixinStr__SC_SYSTEM_DATABASE = `enum _SC_SYSTEM_DATABASE = _SC_SYSTEM_DATABASE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SYSTEM_DATABASE); }))) {
            mixin(enumMixinStr__SC_SYSTEM_DATABASE);
        }
    }




    static if(!is(typeof(_SC_SYSTEM_DATABASE_R))) {
        private enum enumMixinStr__SC_SYSTEM_DATABASE_R = `enum _SC_SYSTEM_DATABASE_R = _SC_SYSTEM_DATABASE_R;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SYSTEM_DATABASE_R); }))) {
            mixin(enumMixinStr__SC_SYSTEM_DATABASE_R);
        }
    }




    static if(!is(typeof(_SC_TIMEOUTS))) {
        private enum enumMixinStr__SC_TIMEOUTS = `enum _SC_TIMEOUTS = _SC_TIMEOUTS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TIMEOUTS); }))) {
            mixin(enumMixinStr__SC_TIMEOUTS);
        }
    }




    static if(!is(typeof(_SC_TYPED_MEMORY_OBJECTS))) {
        private enum enumMixinStr__SC_TYPED_MEMORY_OBJECTS = `enum _SC_TYPED_MEMORY_OBJECTS = _SC_TYPED_MEMORY_OBJECTS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TYPED_MEMORY_OBJECTS); }))) {
            mixin(enumMixinStr__SC_TYPED_MEMORY_OBJECTS);
        }
    }




    static if(!is(typeof(_SC_USER_GROUPS))) {
        private enum enumMixinStr__SC_USER_GROUPS = `enum _SC_USER_GROUPS = _SC_USER_GROUPS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_USER_GROUPS); }))) {
            mixin(enumMixinStr__SC_USER_GROUPS);
        }
    }




    static if(!is(typeof(_SC_USER_GROUPS_R))) {
        private enum enumMixinStr__SC_USER_GROUPS_R = `enum _SC_USER_GROUPS_R = _SC_USER_GROUPS_R;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_USER_GROUPS_R); }))) {
            mixin(enumMixinStr__SC_USER_GROUPS_R);
        }
    }




    static if(!is(typeof(_SC_2_PBS))) {
        private enum enumMixinStr__SC_2_PBS = `enum _SC_2_PBS = _SC_2_PBS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS); }))) {
            mixin(enumMixinStr__SC_2_PBS);
        }
    }




    static if(!is(typeof(_SC_2_PBS_ACCOUNTING))) {
        private enum enumMixinStr__SC_2_PBS_ACCOUNTING = `enum _SC_2_PBS_ACCOUNTING = _SC_2_PBS_ACCOUNTING;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS_ACCOUNTING); }))) {
            mixin(enumMixinStr__SC_2_PBS_ACCOUNTING);
        }
    }




    static if(!is(typeof(_SC_2_PBS_LOCATE))) {
        private enum enumMixinStr__SC_2_PBS_LOCATE = `enum _SC_2_PBS_LOCATE = _SC_2_PBS_LOCATE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS_LOCATE); }))) {
            mixin(enumMixinStr__SC_2_PBS_LOCATE);
        }
    }




    static if(!is(typeof(_SC_2_PBS_MESSAGE))) {
        private enum enumMixinStr__SC_2_PBS_MESSAGE = `enum _SC_2_PBS_MESSAGE = _SC_2_PBS_MESSAGE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS_MESSAGE); }))) {
            mixin(enumMixinStr__SC_2_PBS_MESSAGE);
        }
    }




    static if(!is(typeof(_SC_2_PBS_TRACK))) {
        private enum enumMixinStr__SC_2_PBS_TRACK = `enum _SC_2_PBS_TRACK = _SC_2_PBS_TRACK;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS_TRACK); }))) {
            mixin(enumMixinStr__SC_2_PBS_TRACK);
        }
    }




    static if(!is(typeof(_SC_SYMLOOP_MAX))) {
        private enum enumMixinStr__SC_SYMLOOP_MAX = `enum _SC_SYMLOOP_MAX = _SC_SYMLOOP_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SYMLOOP_MAX); }))) {
            mixin(enumMixinStr__SC_SYMLOOP_MAX);
        }
    }




    static if(!is(typeof(_SC_STREAMS))) {
        private enum enumMixinStr__SC_STREAMS = `enum _SC_STREAMS = _SC_STREAMS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_STREAMS); }))) {
            mixin(enumMixinStr__SC_STREAMS);
        }
    }




    static if(!is(typeof(_SC_2_PBS_CHECKPOINT))) {
        private enum enumMixinStr__SC_2_PBS_CHECKPOINT = `enum _SC_2_PBS_CHECKPOINT = _SC_2_PBS_CHECKPOINT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_2_PBS_CHECKPOINT); }))) {
            mixin(enumMixinStr__SC_2_PBS_CHECKPOINT);
        }
    }




    static if(!is(typeof(_SC_V6_ILP32_OFF32))) {
        private enum enumMixinStr__SC_V6_ILP32_OFF32 = `enum _SC_V6_ILP32_OFF32 = _SC_V6_ILP32_OFF32;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V6_ILP32_OFF32); }))) {
            mixin(enumMixinStr__SC_V6_ILP32_OFF32);
        }
    }




    static if(!is(typeof(_SC_V6_ILP32_OFFBIG))) {
        private enum enumMixinStr__SC_V6_ILP32_OFFBIG = `enum _SC_V6_ILP32_OFFBIG = _SC_V6_ILP32_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V6_ILP32_OFFBIG); }))) {
            mixin(enumMixinStr__SC_V6_ILP32_OFFBIG);
        }
    }




    static if(!is(typeof(_SC_V6_LP64_OFF64))) {
        private enum enumMixinStr__SC_V6_LP64_OFF64 = `enum _SC_V6_LP64_OFF64 = _SC_V6_LP64_OFF64;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V6_LP64_OFF64); }))) {
            mixin(enumMixinStr__SC_V6_LP64_OFF64);
        }
    }




    static if(!is(typeof(_SC_V6_LPBIG_OFFBIG))) {
        private enum enumMixinStr__SC_V6_LPBIG_OFFBIG = `enum _SC_V6_LPBIG_OFFBIG = _SC_V6_LPBIG_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V6_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__SC_V6_LPBIG_OFFBIG);
        }
    }




    static if(!is(typeof(_SC_HOST_NAME_MAX))) {
        private enum enumMixinStr__SC_HOST_NAME_MAX = `enum _SC_HOST_NAME_MAX = _SC_HOST_NAME_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_HOST_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_HOST_NAME_MAX);
        }
    }




    static if(!is(typeof(_SC_TRACE))) {
        private enum enumMixinStr__SC_TRACE = `enum _SC_TRACE = _SC_TRACE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE); }))) {
            mixin(enumMixinStr__SC_TRACE);
        }
    }




    static if(!is(typeof(_SC_TRACE_EVENT_FILTER))) {
        private enum enumMixinStr__SC_TRACE_EVENT_FILTER = `enum _SC_TRACE_EVENT_FILTER = _SC_TRACE_EVENT_FILTER;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_EVENT_FILTER); }))) {
            mixin(enumMixinStr__SC_TRACE_EVENT_FILTER);
        }
    }




    static if(!is(typeof(_SC_TRACE_INHERIT))) {
        private enum enumMixinStr__SC_TRACE_INHERIT = `enum _SC_TRACE_INHERIT = _SC_TRACE_INHERIT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_INHERIT); }))) {
            mixin(enumMixinStr__SC_TRACE_INHERIT);
        }
    }




    static if(!is(typeof(_SC_TRACE_LOG))) {
        private enum enumMixinStr__SC_TRACE_LOG = `enum _SC_TRACE_LOG = _SC_TRACE_LOG;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_LOG); }))) {
            mixin(enumMixinStr__SC_TRACE_LOG);
        }
    }




    static if(!is(typeof(_SC_LEVEL1_ICACHE_SIZE))) {
        private enum enumMixinStr__SC_LEVEL1_ICACHE_SIZE = `enum _SC_LEVEL1_ICACHE_SIZE = _SC_LEVEL1_ICACHE_SIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL1_ICACHE_SIZE); }))) {
            mixin(enumMixinStr__SC_LEVEL1_ICACHE_SIZE);
        }
    }




    static if(!is(typeof(_SC_LEVEL1_ICACHE_ASSOC))) {
        private enum enumMixinStr__SC_LEVEL1_ICACHE_ASSOC = `enum _SC_LEVEL1_ICACHE_ASSOC = _SC_LEVEL1_ICACHE_ASSOC;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL1_ICACHE_ASSOC); }))) {
            mixin(enumMixinStr__SC_LEVEL1_ICACHE_ASSOC);
        }
    }




    static if(!is(typeof(_SC_LEVEL1_ICACHE_LINESIZE))) {
        private enum enumMixinStr__SC_LEVEL1_ICACHE_LINESIZE = `enum _SC_LEVEL1_ICACHE_LINESIZE = _SC_LEVEL1_ICACHE_LINESIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL1_ICACHE_LINESIZE); }))) {
            mixin(enumMixinStr__SC_LEVEL1_ICACHE_LINESIZE);
        }
    }




    static if(!is(typeof(_SC_LEVEL1_DCACHE_SIZE))) {
        private enum enumMixinStr__SC_LEVEL1_DCACHE_SIZE = `enum _SC_LEVEL1_DCACHE_SIZE = _SC_LEVEL1_DCACHE_SIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL1_DCACHE_SIZE); }))) {
            mixin(enumMixinStr__SC_LEVEL1_DCACHE_SIZE);
        }
    }




    static if(!is(typeof(_SC_LEVEL1_DCACHE_ASSOC))) {
        private enum enumMixinStr__SC_LEVEL1_DCACHE_ASSOC = `enum _SC_LEVEL1_DCACHE_ASSOC = _SC_LEVEL1_DCACHE_ASSOC;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL1_DCACHE_ASSOC); }))) {
            mixin(enumMixinStr__SC_LEVEL1_DCACHE_ASSOC);
        }
    }




    static if(!is(typeof(_SC_LEVEL1_DCACHE_LINESIZE))) {
        private enum enumMixinStr__SC_LEVEL1_DCACHE_LINESIZE = `enum _SC_LEVEL1_DCACHE_LINESIZE = _SC_LEVEL1_DCACHE_LINESIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL1_DCACHE_LINESIZE); }))) {
            mixin(enumMixinStr__SC_LEVEL1_DCACHE_LINESIZE);
        }
    }




    static if(!is(typeof(_SC_LEVEL2_CACHE_SIZE))) {
        private enum enumMixinStr__SC_LEVEL2_CACHE_SIZE = `enum _SC_LEVEL2_CACHE_SIZE = _SC_LEVEL2_CACHE_SIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL2_CACHE_SIZE); }))) {
            mixin(enumMixinStr__SC_LEVEL2_CACHE_SIZE);
        }
    }




    static if(!is(typeof(_SC_LEVEL2_CACHE_ASSOC))) {
        private enum enumMixinStr__SC_LEVEL2_CACHE_ASSOC = `enum _SC_LEVEL2_CACHE_ASSOC = _SC_LEVEL2_CACHE_ASSOC;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL2_CACHE_ASSOC); }))) {
            mixin(enumMixinStr__SC_LEVEL2_CACHE_ASSOC);
        }
    }




    static if(!is(typeof(_SC_LEVEL2_CACHE_LINESIZE))) {
        private enum enumMixinStr__SC_LEVEL2_CACHE_LINESIZE = `enum _SC_LEVEL2_CACHE_LINESIZE = _SC_LEVEL2_CACHE_LINESIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL2_CACHE_LINESIZE); }))) {
            mixin(enumMixinStr__SC_LEVEL2_CACHE_LINESIZE);
        }
    }




    static if(!is(typeof(_SC_LEVEL3_CACHE_SIZE))) {
        private enum enumMixinStr__SC_LEVEL3_CACHE_SIZE = `enum _SC_LEVEL3_CACHE_SIZE = _SC_LEVEL3_CACHE_SIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL3_CACHE_SIZE); }))) {
            mixin(enumMixinStr__SC_LEVEL3_CACHE_SIZE);
        }
    }




    static if(!is(typeof(_SC_LEVEL3_CACHE_ASSOC))) {
        private enum enumMixinStr__SC_LEVEL3_CACHE_ASSOC = `enum _SC_LEVEL3_CACHE_ASSOC = _SC_LEVEL3_CACHE_ASSOC;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL3_CACHE_ASSOC); }))) {
            mixin(enumMixinStr__SC_LEVEL3_CACHE_ASSOC);
        }
    }




    static if(!is(typeof(_SC_LEVEL3_CACHE_LINESIZE))) {
        private enum enumMixinStr__SC_LEVEL3_CACHE_LINESIZE = `enum _SC_LEVEL3_CACHE_LINESIZE = _SC_LEVEL3_CACHE_LINESIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL3_CACHE_LINESIZE); }))) {
            mixin(enumMixinStr__SC_LEVEL3_CACHE_LINESIZE);
        }
    }




    static if(!is(typeof(_SC_LEVEL4_CACHE_SIZE))) {
        private enum enumMixinStr__SC_LEVEL4_CACHE_SIZE = `enum _SC_LEVEL4_CACHE_SIZE = _SC_LEVEL4_CACHE_SIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL4_CACHE_SIZE); }))) {
            mixin(enumMixinStr__SC_LEVEL4_CACHE_SIZE);
        }
    }




    static if(!is(typeof(_SC_LEVEL4_CACHE_ASSOC))) {
        private enum enumMixinStr__SC_LEVEL4_CACHE_ASSOC = `enum _SC_LEVEL4_CACHE_ASSOC = _SC_LEVEL4_CACHE_ASSOC;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL4_CACHE_ASSOC); }))) {
            mixin(enumMixinStr__SC_LEVEL4_CACHE_ASSOC);
        }
    }




    static if(!is(typeof(_SC_LEVEL4_CACHE_LINESIZE))) {
        private enum enumMixinStr__SC_LEVEL4_CACHE_LINESIZE = `enum _SC_LEVEL4_CACHE_LINESIZE = _SC_LEVEL4_CACHE_LINESIZE;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_LEVEL4_CACHE_LINESIZE); }))) {
            mixin(enumMixinStr__SC_LEVEL4_CACHE_LINESIZE);
        }
    }






    static if(!is(typeof(_SC_IPV6))) {
        private enum enumMixinStr__SC_IPV6 = `enum _SC_IPV6 = _SC_IPV6;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_IPV6); }))) {
            mixin(enumMixinStr__SC_IPV6);
        }
    }




    static if(!is(typeof(_SC_RAW_SOCKETS))) {
        private enum enumMixinStr__SC_RAW_SOCKETS = `enum _SC_RAW_SOCKETS = _SC_RAW_SOCKETS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_RAW_SOCKETS); }))) {
            mixin(enumMixinStr__SC_RAW_SOCKETS);
        }
    }




    static if(!is(typeof(_SC_V7_ILP32_OFF32))) {
        private enum enumMixinStr__SC_V7_ILP32_OFF32 = `enum _SC_V7_ILP32_OFF32 = _SC_V7_ILP32_OFF32;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V7_ILP32_OFF32); }))) {
            mixin(enumMixinStr__SC_V7_ILP32_OFF32);
        }
    }




    static if(!is(typeof(_SC_V7_ILP32_OFFBIG))) {
        private enum enumMixinStr__SC_V7_ILP32_OFFBIG = `enum _SC_V7_ILP32_OFFBIG = _SC_V7_ILP32_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V7_ILP32_OFFBIG); }))) {
            mixin(enumMixinStr__SC_V7_ILP32_OFFBIG);
        }
    }




    static if(!is(typeof(_SC_V7_LP64_OFF64))) {
        private enum enumMixinStr__SC_V7_LP64_OFF64 = `enum _SC_V7_LP64_OFF64 = _SC_V7_LP64_OFF64;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V7_LP64_OFF64); }))) {
            mixin(enumMixinStr__SC_V7_LP64_OFF64);
        }
    }




    static if(!is(typeof(_SC_V7_LPBIG_OFFBIG))) {
        private enum enumMixinStr__SC_V7_LPBIG_OFFBIG = `enum _SC_V7_LPBIG_OFFBIG = _SC_V7_LPBIG_OFFBIG;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_V7_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__SC_V7_LPBIG_OFFBIG);
        }
    }




    static if(!is(typeof(_SC_SS_REPL_MAX))) {
        private enum enumMixinStr__SC_SS_REPL_MAX = `enum _SC_SS_REPL_MAX = _SC_SS_REPL_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_SS_REPL_MAX); }))) {
            mixin(enumMixinStr__SC_SS_REPL_MAX);
        }
    }




    static if(!is(typeof(_SC_TRACE_EVENT_NAME_MAX))) {
        private enum enumMixinStr__SC_TRACE_EVENT_NAME_MAX = `enum _SC_TRACE_EVENT_NAME_MAX = _SC_TRACE_EVENT_NAME_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_EVENT_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_TRACE_EVENT_NAME_MAX);
        }
    }




    static if(!is(typeof(_SC_TRACE_NAME_MAX))) {
        private enum enumMixinStr__SC_TRACE_NAME_MAX = `enum _SC_TRACE_NAME_MAX = _SC_TRACE_NAME_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_NAME_MAX); }))) {
            mixin(enumMixinStr__SC_TRACE_NAME_MAX);
        }
    }




    static if(!is(typeof(_SC_TRACE_SYS_MAX))) {
        private enum enumMixinStr__SC_TRACE_SYS_MAX = `enum _SC_TRACE_SYS_MAX = _SC_TRACE_SYS_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_SYS_MAX); }))) {
            mixin(enumMixinStr__SC_TRACE_SYS_MAX);
        }
    }




    static if(!is(typeof(_SC_TRACE_USER_EVENT_MAX))) {
        private enum enumMixinStr__SC_TRACE_USER_EVENT_MAX = `enum _SC_TRACE_USER_EVENT_MAX = _SC_TRACE_USER_EVENT_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_TRACE_USER_EVENT_MAX); }))) {
            mixin(enumMixinStr__SC_TRACE_USER_EVENT_MAX);
        }
    }




    static if(!is(typeof(_SC_XOPEN_STREAMS))) {
        private enum enumMixinStr__SC_XOPEN_STREAMS = `enum _SC_XOPEN_STREAMS = _SC_XOPEN_STREAMS;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_XOPEN_STREAMS); }))) {
            mixin(enumMixinStr__SC_XOPEN_STREAMS);
        }
    }




    static if(!is(typeof(_SC_THREAD_ROBUST_PRIO_INHERIT))) {
        private enum enumMixinStr__SC_THREAD_ROBUST_PRIO_INHERIT = `enum _SC_THREAD_ROBUST_PRIO_INHERIT = _SC_THREAD_ROBUST_PRIO_INHERIT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_ROBUST_PRIO_INHERIT); }))) {
            mixin(enumMixinStr__SC_THREAD_ROBUST_PRIO_INHERIT);
        }
    }




    static if(!is(typeof(_SC_THREAD_ROBUST_PRIO_PROTECT))) {
        private enum enumMixinStr__SC_THREAD_ROBUST_PRIO_PROTECT = `enum _SC_THREAD_ROBUST_PRIO_PROTECT = _SC_THREAD_ROBUST_PRIO_PROTECT;`;
        static if(is(typeof({ mixin(enumMixinStr__SC_THREAD_ROBUST_PRIO_PROTECT); }))) {
            mixin(enumMixinStr__SC_THREAD_ROBUST_PRIO_PROTECT);
        }
    }






    static if(!is(typeof(_CS_PATH))) {
        private enum enumMixinStr__CS_PATH = `enum _CS_PATH = _CS_PATH;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_PATH); }))) {
            mixin(enumMixinStr__CS_PATH);
        }
    }




    static if(!is(typeof(_CS_V6_WIDTH_RESTRICTED_ENVS))) {
        private enum enumMixinStr__CS_V6_WIDTH_RESTRICTED_ENVS = `enum _CS_V6_WIDTH_RESTRICTED_ENVS = _CS_V6_WIDTH_RESTRICTED_ENVS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_V6_WIDTH_RESTRICTED_ENVS); }))) {
            mixin(enumMixinStr__CS_V6_WIDTH_RESTRICTED_ENVS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS))) {
        private enum enumMixinStr__CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = `enum _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = _CS_V6_WIDTH_RESTRICTED_ENVS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_WIDTH_RESTRICTED_ENVS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_WIDTH_RESTRICTED_ENVS);
        }
    }




    static if(!is(typeof(_CS_GNU_LIBC_VERSION))) {
        private enum enumMixinStr__CS_GNU_LIBC_VERSION = `enum _CS_GNU_LIBC_VERSION = _CS_GNU_LIBC_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_GNU_LIBC_VERSION); }))) {
            mixin(enumMixinStr__CS_GNU_LIBC_VERSION);
        }
    }




    static if(!is(typeof(_CS_GNU_LIBPTHREAD_VERSION))) {
        private enum enumMixinStr__CS_GNU_LIBPTHREAD_VERSION = `enum _CS_GNU_LIBPTHREAD_VERSION = _CS_GNU_LIBPTHREAD_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_GNU_LIBPTHREAD_VERSION); }))) {
            mixin(enumMixinStr__CS_GNU_LIBPTHREAD_VERSION);
        }
    }




    static if(!is(typeof(_CS_V5_WIDTH_RESTRICTED_ENVS))) {
        private enum enumMixinStr__CS_V5_WIDTH_RESTRICTED_ENVS = `enum _CS_V5_WIDTH_RESTRICTED_ENVS = _CS_V5_WIDTH_RESTRICTED_ENVS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_V5_WIDTH_RESTRICTED_ENVS); }))) {
            mixin(enumMixinStr__CS_V5_WIDTH_RESTRICTED_ENVS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS))) {
        private enum enumMixinStr__CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = `enum _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = _CS_V5_WIDTH_RESTRICTED_ENVS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V5_WIDTH_RESTRICTED_ENVS); }))) {
            mixin(enumMixinStr__CS_POSIX_V5_WIDTH_RESTRICTED_ENVS);
        }
    }




    static if(!is(typeof(_CS_V7_WIDTH_RESTRICTED_ENVS))) {
        private enum enumMixinStr__CS_V7_WIDTH_RESTRICTED_ENVS = `enum _CS_V7_WIDTH_RESTRICTED_ENVS = _CS_V7_WIDTH_RESTRICTED_ENVS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_V7_WIDTH_RESTRICTED_ENVS); }))) {
            mixin(enumMixinStr__CS_V7_WIDTH_RESTRICTED_ENVS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS))) {
        private enum enumMixinStr__CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = `enum _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = _CS_V7_WIDTH_RESTRICTED_ENVS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_WIDTH_RESTRICTED_ENVS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_WIDTH_RESTRICTED_ENVS);
        }
    }




    static if(!is(typeof(_CS_LFS_CFLAGS))) {
        private enum enumMixinStr__CS_LFS_CFLAGS = `enum _CS_LFS_CFLAGS = _CS_LFS_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_LFS_CFLAGS); }))) {
            mixin(enumMixinStr__CS_LFS_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_LFS_LDFLAGS))) {
        private enum enumMixinStr__CS_LFS_LDFLAGS = `enum _CS_LFS_LDFLAGS = _CS_LFS_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_LFS_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_LFS_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_LFS_LIBS))) {
        private enum enumMixinStr__CS_LFS_LIBS = `enum _CS_LFS_LIBS = _CS_LFS_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_LFS_LIBS); }))) {
            mixin(enumMixinStr__CS_LFS_LIBS);
        }
    }




    static if(!is(typeof(_CS_LFS_LINTFLAGS))) {
        private enum enumMixinStr__CS_LFS_LINTFLAGS = `enum _CS_LFS_LINTFLAGS = _CS_LFS_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_LFS_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_LFS_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_LFS64_CFLAGS))) {
        private enum enumMixinStr__CS_LFS64_CFLAGS = `enum _CS_LFS64_CFLAGS = _CS_LFS64_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_LFS64_CFLAGS); }))) {
            mixin(enumMixinStr__CS_LFS64_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_LFS64_LDFLAGS))) {
        private enum enumMixinStr__CS_LFS64_LDFLAGS = `enum _CS_LFS64_LDFLAGS = _CS_LFS64_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_LFS64_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_LFS64_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_LFS64_LIBS))) {
        private enum enumMixinStr__CS_LFS64_LIBS = `enum _CS_LFS64_LIBS = _CS_LFS64_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_LFS64_LIBS); }))) {
            mixin(enumMixinStr__CS_LFS64_LIBS);
        }
    }




    static if(!is(typeof(_CS_LFS64_LINTFLAGS))) {
        private enum enumMixinStr__CS_LFS64_LINTFLAGS = `enum _CS_LFS64_LINTFLAGS = _CS_LFS64_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_LFS64_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_LFS64_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_ILP32_OFF32_CFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFF32_CFLAGS = `enum _CS_XBS5_ILP32_OFF32_CFLAGS = _CS_XBS5_ILP32_OFF32_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_CFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_ILP32_OFF32_LDFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFF32_LDFLAGS = `enum _CS_XBS5_ILP32_OFF32_LDFLAGS = _CS_XBS5_ILP32_OFF32_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_ILP32_OFF32_LIBS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFF32_LIBS = `enum _CS_XBS5_ILP32_OFF32_LIBS = _CS_XBS5_ILP32_OFF32_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LIBS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LIBS);
        }
    }




    static if(!is(typeof(_CS_XBS5_ILP32_OFF32_LINTFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFF32_LINTFLAGS = `enum _CS_XBS5_ILP32_OFF32_LINTFLAGS = _CS_XBS5_ILP32_OFF32_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFF32_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_ILP32_OFFBIG_CFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFFBIG_CFLAGS = `enum _CS_XBS5_ILP32_OFFBIG_CFLAGS = _CS_XBS5_ILP32_OFFBIG_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_ILP32_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFFBIG_LDFLAGS = `enum _CS_XBS5_ILP32_OFFBIG_LDFLAGS = _CS_XBS5_ILP32_OFFBIG_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_ILP32_OFFBIG_LIBS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFFBIG_LIBS = `enum _CS_XBS5_ILP32_OFFBIG_LIBS = _CS_XBS5_ILP32_OFFBIG_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LIBS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LIBS);
        }
    }




    static if(!is(typeof(_CS_XBS5_ILP32_OFFBIG_LINTFLAGS))) {
        private enum enumMixinStr__CS_XBS5_ILP32_OFFBIG_LINTFLAGS = `enum _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = _CS_XBS5_ILP32_OFFBIG_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_ILP32_OFFBIG_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_LP64_OFF64_CFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LP64_OFF64_CFLAGS = `enum _CS_XBS5_LP64_OFF64_CFLAGS = _CS_XBS5_LP64_OFF64_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LP64_OFF64_CFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LP64_OFF64_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_LP64_OFF64_LDFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LP64_OFF64_LDFLAGS = `enum _CS_XBS5_LP64_OFF64_LDFLAGS = _CS_XBS5_LP64_OFF64_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_LP64_OFF64_LIBS))) {
        private enum enumMixinStr__CS_XBS5_LP64_OFF64_LIBS = `enum _CS_XBS5_LP64_OFF64_LIBS = _CS_XBS5_LP64_OFF64_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LIBS); }))) {
            mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LIBS);
        }
    }




    static if(!is(typeof(_CS_XBS5_LP64_OFF64_LINTFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LP64_OFF64_LINTFLAGS = `enum _CS_XBS5_LP64_OFF64_LINTFLAGS = _CS_XBS5_LP64_OFF64_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LP64_OFF64_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_LPBIG_OFFBIG_CFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LPBIG_OFFBIG_CFLAGS = `enum _CS_XBS5_LPBIG_OFFBIG_CFLAGS = _CS_XBS5_LPBIG_OFFBIG_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_LPBIG_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LDFLAGS = `enum _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = _CS_XBS5_LPBIG_OFFBIG_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_XBS5_LPBIG_OFFBIG_LIBS))) {
        private enum enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LIBS = `enum _CS_XBS5_LPBIG_OFFBIG_LIBS = _CS_XBS5_LPBIG_OFFBIG_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LIBS); }))) {
            mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LIBS);
        }
    }




    static if(!is(typeof(_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS))) {
        private enum enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = `enum _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_XBS5_LPBIG_OFFBIG_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFF32_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFF32_CFLAGS = `enum _CS_POSIX_V6_ILP32_OFF32_CFLAGS = _CS_POSIX_V6_ILP32_OFF32_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFF32_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LDFLAGS = `enum _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = _CS_POSIX_V6_ILP32_OFF32_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFF32_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LIBS = `enum _CS_POSIX_V6_ILP32_OFF32_LIBS = _CS_POSIX_V6_ILP32_OFF32_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LIBS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = `enum _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFF32_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = `enum _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = `enum _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFFBIG_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LIBS = `enum _CS_POSIX_V6_ILP32_OFFBIG_LIBS = _CS_POSIX_V6_ILP32_OFFBIG_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LIBS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = `enum _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_LP64_OFF64_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_LP64_OFF64_CFLAGS = `enum _CS_POSIX_V6_LP64_OFF64_CFLAGS = _CS_POSIX_V6_LP64_OFF64_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_LP64_OFF64_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_LP64_OFF64_LDFLAGS = `enum _CS_POSIX_V6_LP64_OFF64_LDFLAGS = _CS_POSIX_V6_LP64_OFF64_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_LP64_OFF64_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V6_LP64_OFF64_LIBS = `enum _CS_POSIX_V6_LP64_OFF64_LIBS = _CS_POSIX_V6_LP64_OFF64_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_LIBS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_LP64_OFF64_LINTFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_LP64_OFF64_LINTFLAGS = `enum _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = _CS_POSIX_V6_LP64_OFF64_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LP64_OFF64_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = `enum _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = `enum _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_LPBIG_OFFBIG_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LIBS = `enum _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = _CS_POSIX_V6_LPBIG_OFFBIG_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LIBS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = `enum _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_ILP32_OFF32_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_ILP32_OFF32_CFLAGS = `enum _CS_POSIX_V7_ILP32_OFF32_CFLAGS = _CS_POSIX_V7_ILP32_OFF32_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFF32_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFF32_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_ILP32_OFF32_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_ILP32_OFF32_LDFLAGS = `enum _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = _CS_POSIX_V7_ILP32_OFF32_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFF32_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFF32_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_ILP32_OFF32_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V7_ILP32_OFF32_LIBS = `enum _CS_POSIX_V7_ILP32_OFF32_LIBS = _CS_POSIX_V7_ILP32_OFF32_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFF32_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFF32_LIBS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = `enum _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFF32_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFF32_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = `enum _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = `enum _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_ILP32_OFFBIG_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_LIBS = `enum _CS_POSIX_V7_ILP32_OFFBIG_LIBS = _CS_POSIX_V7_ILP32_OFFBIG_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_LIBS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = `enum _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_LP64_OFF64_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_LP64_OFF64_CFLAGS = `enum _CS_POSIX_V7_LP64_OFF64_CFLAGS = _CS_POSIX_V7_LP64_OFF64_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_LP64_OFF64_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_LP64_OFF64_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_LP64_OFF64_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_LP64_OFF64_LDFLAGS = `enum _CS_POSIX_V7_LP64_OFF64_LDFLAGS = _CS_POSIX_V7_LP64_OFF64_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_LP64_OFF64_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_LP64_OFF64_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_LP64_OFF64_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V7_LP64_OFF64_LIBS = `enum _CS_POSIX_V7_LP64_OFF64_LIBS = _CS_POSIX_V7_LP64_OFF64_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_LP64_OFF64_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_LP64_OFF64_LIBS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_LP64_OFF64_LINTFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_LP64_OFF64_LINTFLAGS = `enum _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = _CS_POSIX_V7_LP64_OFF64_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_LP64_OFF64_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_LP64_OFF64_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = `enum _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = `enum _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_LPBIG_OFFBIG_LIBS))) {
        private enum enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_LIBS = `enum _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = _CS_POSIX_V7_LPBIG_OFFBIG_LIBS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_LIBS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_LIBS);
        }
    }




    static if(!is(typeof(_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS))) {
        private enum enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = `enum _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS); }))) {
            mixin(enumMixinStr__CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS);
        }
    }




    static if(!is(typeof(_CS_V6_ENV))) {
        private enum enumMixinStr__CS_V6_ENV = `enum _CS_V6_ENV = _CS_V6_ENV;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_V6_ENV); }))) {
            mixin(enumMixinStr__CS_V6_ENV);
        }
    }




    static if(!is(typeof(_CS_V7_ENV))) {
        private enum enumMixinStr__CS_V7_ENV = `enum _CS_V7_ENV = _CS_V7_ENV;`;
        static if(is(typeof({ mixin(enumMixinStr__CS_V7_ENV); }))) {
            mixin(enumMixinStr__CS_V7_ENV);
        }
    }




    static if(!is(typeof(_BITS_CPU_SET_H))) {
        private enum enumMixinStr__BITS_CPU_SET_H = `enum _BITS_CPU_SET_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_CPU_SET_H); }))) {
            mixin(enumMixinStr__BITS_CPU_SET_H);
        }
    }




    static if(!is(typeof(G_TYPE_DATAGRAM_BASED))) {
        private enum enumMixinStr_G_TYPE_DATAGRAM_BASED = `enum G_TYPE_DATAGRAM_BASED = ( g_datagram_based_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_DATAGRAM_BASED); }))) {
            mixin(enumMixinStr_G_TYPE_DATAGRAM_BASED);
        }
    }




    static if(!is(typeof(__CPU_SETSIZE))) {
        private enum enumMixinStr___CPU_SETSIZE = `enum __CPU_SETSIZE = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr___CPU_SETSIZE); }))) {
            mixin(enumMixinStr___CPU_SETSIZE);
        }
    }




    static if(!is(typeof(__NCPUBITS))) {
        private enum enumMixinStr___NCPUBITS = `enum __NCPUBITS = ( 8 * ( __cpu_mask ) .sizeof );`;
        static if(is(typeof({ mixin(enumMixinStr___NCPUBITS); }))) {
            mixin(enumMixinStr___NCPUBITS);
        }
    }
    static if(!is(typeof(G_TYPE_CREDENTIALS))) {
        private enum enumMixinStr_G_TYPE_CREDENTIALS = `enum G_TYPE_CREDENTIALS = ( g_credentials_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CREDENTIALS); }))) {
            mixin(enumMixinStr_G_TYPE_CREDENTIALS);
        }
    }
    static if(!is(typeof(G_TYPE_CONVERTER_OUTPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_CONVERTER_OUTPUT_STREAM = `enum G_TYPE_CONVERTER_OUTPUT_STREAM = ( g_converter_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CONVERTER_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_CONVERTER_OUTPUT_STREAM);
        }
    }
    static if(!is(typeof(d_fileno))) {
        private enum enumMixinStr_d_fileno = `enum d_fileno = d_ino;`;
        static if(is(typeof({ mixin(enumMixinStr_d_fileno); }))) {
            mixin(enumMixinStr_d_fileno);
        }
    }
    static if(!is(typeof(G_TYPE_CONVERTER_INPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_CONVERTER_INPUT_STREAM = `enum G_TYPE_CONVERTER_INPUT_STREAM = ( g_converter_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CONVERTER_INPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_CONVERTER_INPUT_STREAM);
        }
    }




    static if(!is(typeof(_DIRENT_MATCHES_DIRENT64))) {
        private enum enumMixinStr__DIRENT_MATCHES_DIRENT64 = `enum _DIRENT_MATCHES_DIRENT64 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__DIRENT_MATCHES_DIRENT64); }))) {
            mixin(enumMixinStr__DIRENT_MATCHES_DIRENT64);
        }
    }






    static if(!is(typeof(__BYTE_ORDER))) {
        private enum enumMixinStr___BYTE_ORDER = `enum __BYTE_ORDER = __LITTLE_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr___BYTE_ORDER); }))) {
            mixin(enumMixinStr___BYTE_ORDER);
        }
    }
    static if(!is(typeof(_POSIX_V7_LPBIG_OFFBIG))) {
        private enum enumMixinStr__POSIX_V7_LPBIG_OFFBIG = `enum _POSIX_V7_LPBIG_OFFBIG = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V7_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__POSIX_V7_LPBIG_OFFBIG);
        }
    }




    static if(!is(typeof(_POSIX_V6_LPBIG_OFFBIG))) {
        private enum enumMixinStr__POSIX_V6_LPBIG_OFFBIG = `enum _POSIX_V6_LPBIG_OFFBIG = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V6_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__POSIX_V6_LPBIG_OFFBIG);
        }
    }




    static if(!is(typeof(_XBS5_LPBIG_OFFBIG))) {
        private enum enumMixinStr__XBS5_LPBIG_OFFBIG = `enum _XBS5_LPBIG_OFFBIG = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XBS5_LPBIG_OFFBIG); }))) {
            mixin(enumMixinStr__XBS5_LPBIG_OFFBIG);
        }
    }




    static if(!is(typeof(_POSIX_V7_LP64_OFF64))) {
        private enum enumMixinStr__POSIX_V7_LP64_OFF64 = `enum _POSIX_V7_LP64_OFF64 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V7_LP64_OFF64); }))) {
            mixin(enumMixinStr__POSIX_V7_LP64_OFF64);
        }
    }




    static if(!is(typeof(_POSIX_V6_LP64_OFF64))) {
        private enum enumMixinStr__POSIX_V6_LP64_OFF64 = `enum _POSIX_V6_LP64_OFF64 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_V6_LP64_OFF64); }))) {
            mixin(enumMixinStr__POSIX_V6_LP64_OFF64);
        }
    }




    static if(!is(typeof(_XBS5_LP64_OFF64))) {
        private enum enumMixinStr__XBS5_LP64_OFF64 = `enum _XBS5_LP64_OFF64 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XBS5_LP64_OFF64); }))) {
            mixin(enumMixinStr__XBS5_LP64_OFF64);
        }
    }




    static if(!is(typeof(__ILP32_OFF32_CFLAGS))) {
        private enum enumMixinStr___ILP32_OFF32_CFLAGS = `enum __ILP32_OFF32_CFLAGS = "-m32";`;
        static if(is(typeof({ mixin(enumMixinStr___ILP32_OFF32_CFLAGS); }))) {
            mixin(enumMixinStr___ILP32_OFF32_CFLAGS);
        }
    }




    static if(!is(typeof(__ILP32_OFF32_LDFLAGS))) {
        private enum enumMixinStr___ILP32_OFF32_LDFLAGS = `enum __ILP32_OFF32_LDFLAGS = "-m32";`;
        static if(is(typeof({ mixin(enumMixinStr___ILP32_OFF32_LDFLAGS); }))) {
            mixin(enumMixinStr___ILP32_OFF32_LDFLAGS);
        }
    }




    static if(!is(typeof(G_TYPE_CONVERTER))) {
        private enum enumMixinStr_G_TYPE_CONVERTER = `enum G_TYPE_CONVERTER = ( g_converter_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CONVERTER); }))) {
            mixin(enumMixinStr_G_TYPE_CONVERTER);
        }
    }




    static if(!is(typeof(__ILP32_OFFBIG_CFLAGS))) {
        private enum enumMixinStr___ILP32_OFFBIG_CFLAGS = `enum __ILP32_OFFBIG_CFLAGS = "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64";`;
        static if(is(typeof({ mixin(enumMixinStr___ILP32_OFFBIG_CFLAGS); }))) {
            mixin(enumMixinStr___ILP32_OFFBIG_CFLAGS);
        }
    }




    static if(!is(typeof(__ILP32_OFFBIG_LDFLAGS))) {
        private enum enumMixinStr___ILP32_OFFBIG_LDFLAGS = `enum __ILP32_OFFBIG_LDFLAGS = "-m32";`;
        static if(is(typeof({ mixin(enumMixinStr___ILP32_OFFBIG_LDFLAGS); }))) {
            mixin(enumMixinStr___ILP32_OFFBIG_LDFLAGS);
        }
    }




    static if(!is(typeof(__LP64_OFF64_CFLAGS))) {
        private enum enumMixinStr___LP64_OFF64_CFLAGS = `enum __LP64_OFF64_CFLAGS = "-m64";`;
        static if(is(typeof({ mixin(enumMixinStr___LP64_OFF64_CFLAGS); }))) {
            mixin(enumMixinStr___LP64_OFF64_CFLAGS);
        }
    }




    static if(!is(typeof(__LP64_OFF64_LDFLAGS))) {
        private enum enumMixinStr___LP64_OFF64_LDFLAGS = `enum __LP64_OFF64_LDFLAGS = "-m64";`;
        static if(is(typeof({ mixin(enumMixinStr___LP64_OFF64_LDFLAGS); }))) {
            mixin(enumMixinStr___LP64_OFF64_LDFLAGS);
        }
    }
    static if(!is(typeof(__HAVE_FLOAT16))) {
        private enum enumMixinStr___HAVE_FLOAT16 = `enum __HAVE_FLOAT16 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT16); }))) {
            mixin(enumMixinStr___HAVE_FLOAT16);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT32))) {
        private enum enumMixinStr___HAVE_FLOAT32 = `enum __HAVE_FLOAT32 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT32); }))) {
            mixin(enumMixinStr___HAVE_FLOAT32);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT64))) {
        private enum enumMixinStr___HAVE_FLOAT64 = `enum __HAVE_FLOAT64 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT64); }))) {
            mixin(enumMixinStr___HAVE_FLOAT64);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT32X))) {
        private enum enumMixinStr___HAVE_FLOAT32X = `enum __HAVE_FLOAT32X = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT32X); }))) {
            mixin(enumMixinStr___HAVE_FLOAT32X);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT128X))) {
        private enum enumMixinStr___HAVE_FLOAT128X = `enum __HAVE_FLOAT128X = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT128X); }))) {
            mixin(enumMixinStr___HAVE_FLOAT128X);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT16))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT16 = `enum __HAVE_DISTINCT_FLOAT16 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT16); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT16);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT32))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT32 = `enum __HAVE_DISTINCT_FLOAT32 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT32); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT32);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT64))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT64 = `enum __HAVE_DISTINCT_FLOAT64 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT64); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT64);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT32X))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT32X = `enum __HAVE_DISTINCT_FLOAT32X = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT32X); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT32X);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT64X))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT64X = `enum __HAVE_DISTINCT_FLOAT64X = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT64X); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT64X);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT128X))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT128X = `enum __HAVE_DISTINCT_FLOAT128X = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT128X); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT128X);
        }
    }






    static if(!is(typeof(__HAVE_FLOATN_NOT_TYPEDEF))) {
        private enum enumMixinStr___HAVE_FLOATN_NOT_TYPEDEF = `enum __HAVE_FLOATN_NOT_TYPEDEF = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOATN_NOT_TYPEDEF); }))) {
            mixin(enumMixinStr___HAVE_FLOATN_NOT_TYPEDEF);
        }
    }
    static if(!is(typeof(G_TYPE_CHARSET_CONVERTER))) {
        private enum enumMixinStr_G_TYPE_CHARSET_CONVERTER = `enum G_TYPE_CHARSET_CONVERTER = ( g_charset_converter_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CHARSET_CONVERTER); }))) {
            mixin(enumMixinStr_G_TYPE_CHARSET_CONVERTER);
        }
    }
    static if(!is(typeof(G_TYPE_CANCELLABLE))) {
        private enum enumMixinStr_G_TYPE_CANCELLABLE = `enum G_TYPE_CANCELLABLE = ( g_cancellable_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_CANCELLABLE); }))) {
            mixin(enumMixinStr_G_TYPE_CANCELLABLE);
        }
    }
    static if(!is(typeof(__CFLOAT32))) {
        private enum enumMixinStr___CFLOAT32 = `enum __CFLOAT32 = _Complex float;`;
        static if(is(typeof({ mixin(enumMixinStr___CFLOAT32); }))) {
            mixin(enumMixinStr___CFLOAT32);
        }
    }






    static if(!is(typeof(G_TYPE_BYTES_ICON))) {
        private enum enumMixinStr_G_TYPE_BYTES_ICON = `enum G_TYPE_BYTES_ICON = ( g_bytes_icon_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BYTES_ICON); }))) {
            mixin(enumMixinStr_G_TYPE_BYTES_ICON);
        }
    }




    static if(!is(typeof(__CFLOAT64))) {
        private enum enumMixinStr___CFLOAT64 = `enum __CFLOAT64 = _Complex double;`;
        static if(is(typeof({ mixin(enumMixinStr___CFLOAT64); }))) {
            mixin(enumMixinStr___CFLOAT64);
        }
    }
    static if(!is(typeof(__CFLOAT32X))) {
        private enum enumMixinStr___CFLOAT32X = `enum __CFLOAT32X = _Complex double;`;
        static if(is(typeof({ mixin(enumMixinStr___CFLOAT32X); }))) {
            mixin(enumMixinStr___CFLOAT32X);
        }
    }
    static if(!is(typeof(__CFLOAT64X))) {
        private enum enumMixinStr___CFLOAT64X = `enum __CFLOAT64X = _Complex long double;`;
        static if(is(typeof({ mixin(enumMixinStr___CFLOAT64X); }))) {
            mixin(enumMixinStr___CFLOAT64X);
        }
    }






    static if(!is(typeof(G_TYPE_BUFFERED_OUTPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_BUFFERED_OUTPUT_STREAM = `enum G_TYPE_BUFFERED_OUTPUT_STREAM = ( g_buffered_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BUFFERED_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_BUFFERED_OUTPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_BUFFERED_INPUT_STREAM))) {
        private enum enumMixinStr_G_TYPE_BUFFERED_INPUT_STREAM = `enum G_TYPE_BUFFERED_INPUT_STREAM = ( g_buffered_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_BUFFERED_INPUT_STREAM); }))) {
            mixin(enumMixinStr_G_TYPE_BUFFERED_INPUT_STREAM);
        }
    }
    static if(!is(typeof(G_TYPE_ASYNC_RESULT))) {
        private enum enumMixinStr_G_TYPE_ASYNC_RESULT = `enum G_TYPE_ASYNC_RESULT = ( g_async_result_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ASYNC_RESULT); }))) {
            mixin(enumMixinStr_G_TYPE_ASYNC_RESULT);
        }
    }
    static if(!is(typeof(G_TYPE_ASYNC_INITABLE))) {
        private enum enumMixinStr_G_TYPE_ASYNC_INITABLE = `enum G_TYPE_ASYNC_INITABLE = ( g_async_initable_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ASYNC_INITABLE); }))) {
            mixin(enumMixinStr_G_TYPE_ASYNC_INITABLE);
        }
    }
    static if(!is(typeof(__HAVE_FLOAT128))) {
        private enum enumMixinStr___HAVE_FLOAT128 = `enum __HAVE_FLOAT128 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT128); }))) {
            mixin(enumMixinStr___HAVE_FLOAT128);
        }
    }






    static if(!is(typeof(__HAVE_DISTINCT_FLOAT128))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT128 = `enum __HAVE_DISTINCT_FLOAT128 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT128); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT128);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT64X))) {
        private enum enumMixinStr___HAVE_FLOAT64X = `enum __HAVE_FLOAT64X = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT64X); }))) {
            mixin(enumMixinStr___HAVE_FLOAT64X);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT64X_LONG_DOUBLE))) {
        private enum enumMixinStr___HAVE_FLOAT64X_LONG_DOUBLE = `enum __HAVE_FLOAT64X_LONG_DOUBLE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT64X_LONG_DOUBLE); }))) {
            mixin(enumMixinStr___HAVE_FLOAT64X_LONG_DOUBLE);
        }
    }




    static if(!is(typeof(G_TYPE_APPLICATION_COMMAND_LINE))) {
        private enum enumMixinStr_G_TYPE_APPLICATION_COMMAND_LINE = `enum G_TYPE_APPLICATION_COMMAND_LINE = ( g_application_command_line_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_APPLICATION_COMMAND_LINE); }))) {
            mixin(enumMixinStr_G_TYPE_APPLICATION_COMMAND_LINE);
        }
    }
    static if(!is(typeof(_GETOPT_CORE_H))) {
        private enum enumMixinStr__GETOPT_CORE_H = `enum _GETOPT_CORE_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__GETOPT_CORE_H); }))) {
            mixin(enumMixinStr__GETOPT_CORE_H);
        }
    }
    static if(!is(typeof(G_TYPE_APPLICATION))) {
        private enum enumMixinStr_G_TYPE_APPLICATION = `enum G_TYPE_APPLICATION = ( g_application_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_APPLICATION); }))) {
            mixin(enumMixinStr_G_TYPE_APPLICATION);
        }
    }
    static if(!is(typeof(G_TYPE_APP_INFO_MONITOR))) {
        private enum enumMixinStr_G_TYPE_APP_INFO_MONITOR = `enum G_TYPE_APP_INFO_MONITOR = ( g_app_info_monitor_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_APP_INFO_MONITOR); }))) {
            mixin(enumMixinStr_G_TYPE_APP_INFO_MONITOR);
        }
    }






    static if(!is(typeof(_GETOPT_POSIX_H))) {
        private enum enumMixinStr__GETOPT_POSIX_H = `enum _GETOPT_POSIX_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__GETOPT_POSIX_H); }))) {
            mixin(enumMixinStr__GETOPT_POSIX_H);
        }
    }
    static if(!is(typeof(G_TYPE_APP_LAUNCH_CONTEXT))) {
        private enum enumMixinStr_G_TYPE_APP_LAUNCH_CONTEXT = `enum G_TYPE_APP_LAUNCH_CONTEXT = ( g_app_launch_context_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_APP_LAUNCH_CONTEXT); }))) {
            mixin(enumMixinStr_G_TYPE_APP_LAUNCH_CONTEXT);
        }
    }
    static if(!is(typeof(G_TYPE_APP_INFO))) {
        private enum enumMixinStr_G_TYPE_APP_INFO = `enum G_TYPE_APP_INFO = ( g_app_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_APP_INFO); }))) {
            mixin(enumMixinStr_G_TYPE_APP_INFO);
        }
    }
    static if(!is(typeof(__GLIBC_USE_LIB_EXT2))) {
        private enum enumMixinStr___GLIBC_USE_LIB_EXT2 = `enum __GLIBC_USE_LIB_EXT2 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_LIB_EXT2); }))) {
            mixin(enumMixinStr___GLIBC_USE_LIB_EXT2);
        }
    }




    static if(!is(typeof(__GLIBC_USE_IEC_60559_BFP_EXT))) {
        private enum enumMixinStr___GLIBC_USE_IEC_60559_BFP_EXT = `enum __GLIBC_USE_IEC_60559_BFP_EXT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_IEC_60559_BFP_EXT); }))) {
            mixin(enumMixinStr___GLIBC_USE_IEC_60559_BFP_EXT);
        }
    }




    static if(!is(typeof(__GLIBC_USE_IEC_60559_FUNCS_EXT))) {
        private enum enumMixinStr___GLIBC_USE_IEC_60559_FUNCS_EXT = `enum __GLIBC_USE_IEC_60559_FUNCS_EXT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_IEC_60559_FUNCS_EXT); }))) {
            mixin(enumMixinStr___GLIBC_USE_IEC_60559_FUNCS_EXT);
        }
    }




    static if(!is(typeof(__GLIBC_USE_IEC_60559_TYPES_EXT))) {
        private enum enumMixinStr___GLIBC_USE_IEC_60559_TYPES_EXT = `enum __GLIBC_USE_IEC_60559_TYPES_EXT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_IEC_60559_TYPES_EXT); }))) {
            mixin(enumMixinStr___GLIBC_USE_IEC_60559_TYPES_EXT);
        }
    }
    static if(!is(typeof(G_TYPE_ACTION_MAP))) {
        private enum enumMixinStr_G_TYPE_ACTION_MAP = `enum G_TYPE_ACTION_MAP = ( g_action_map_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ACTION_MAP); }))) {
            mixin(enumMixinStr_G_TYPE_ACTION_MAP);
        }
    }
    static if(!is(typeof(_POSIX_THREAD_KEYS_MAX))) {
        private enum enumMixinStr__POSIX_THREAD_KEYS_MAX = `enum _POSIX_THREAD_KEYS_MAX = 128;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_KEYS_MAX); }))) {
            mixin(enumMixinStr__POSIX_THREAD_KEYS_MAX);
        }
    }




    static if(!is(typeof(PTHREAD_KEYS_MAX))) {
        private enum enumMixinStr_PTHREAD_KEYS_MAX = `enum PTHREAD_KEYS_MAX = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_KEYS_MAX); }))) {
            mixin(enumMixinStr_PTHREAD_KEYS_MAX);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_DESTRUCTOR_ITERATIONS))) {
        private enum enumMixinStr__POSIX_THREAD_DESTRUCTOR_ITERATIONS = `enum _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_DESTRUCTOR_ITERATIONS); }))) {
            mixin(enumMixinStr__POSIX_THREAD_DESTRUCTOR_ITERATIONS);
        }
    }




    static if(!is(typeof(PTHREAD_DESTRUCTOR_ITERATIONS))) {
        private enum enumMixinStr_PTHREAD_DESTRUCTOR_ITERATIONS = `enum PTHREAD_DESTRUCTOR_ITERATIONS = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_DESTRUCTOR_ITERATIONS); }))) {
            mixin(enumMixinStr_PTHREAD_DESTRUCTOR_ITERATIONS);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_THREADS_MAX))) {
        private enum enumMixinStr__POSIX_THREAD_THREADS_MAX = `enum _POSIX_THREAD_THREADS_MAX = 64;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_THREADS_MAX); }))) {
            mixin(enumMixinStr__POSIX_THREAD_THREADS_MAX);
        }
    }




    static if(!is(typeof(AIO_PRIO_DELTA_MAX))) {
        private enum enumMixinStr_AIO_PRIO_DELTA_MAX = `enum AIO_PRIO_DELTA_MAX = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_AIO_PRIO_DELTA_MAX); }))) {
            mixin(enumMixinStr_AIO_PRIO_DELTA_MAX);
        }
    }




    static if(!is(typeof(PTHREAD_STACK_MIN))) {
        private enum enumMixinStr_PTHREAD_STACK_MIN = `enum PTHREAD_STACK_MIN = 16384;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_STACK_MIN); }))) {
            mixin(enumMixinStr_PTHREAD_STACK_MIN);
        }
    }




    static if(!is(typeof(DELAYTIMER_MAX))) {
        private enum enumMixinStr_DELAYTIMER_MAX = `enum DELAYTIMER_MAX = 2147483647;`;
        static if(is(typeof({ mixin(enumMixinStr_DELAYTIMER_MAX); }))) {
            mixin(enumMixinStr_DELAYTIMER_MAX);
        }
    }




    static if(!is(typeof(TTY_NAME_MAX))) {
        private enum enumMixinStr_TTY_NAME_MAX = `enum TTY_NAME_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_TTY_NAME_MAX); }))) {
            mixin(enumMixinStr_TTY_NAME_MAX);
        }
    }




    static if(!is(typeof(LOGIN_NAME_MAX))) {
        private enum enumMixinStr_LOGIN_NAME_MAX = `enum LOGIN_NAME_MAX = 256;`;
        static if(is(typeof({ mixin(enumMixinStr_LOGIN_NAME_MAX); }))) {
            mixin(enumMixinStr_LOGIN_NAME_MAX);
        }
    }




    static if(!is(typeof(HOST_NAME_MAX))) {
        private enum enumMixinStr_HOST_NAME_MAX = `enum HOST_NAME_MAX = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_HOST_NAME_MAX); }))) {
            mixin(enumMixinStr_HOST_NAME_MAX);
        }
    }




    static if(!is(typeof(MQ_PRIO_MAX))) {
        private enum enumMixinStr_MQ_PRIO_MAX = `enum MQ_PRIO_MAX = 32768;`;
        static if(is(typeof({ mixin(enumMixinStr_MQ_PRIO_MAX); }))) {
            mixin(enumMixinStr_MQ_PRIO_MAX);
        }
    }




    static if(!is(typeof(SEM_VALUE_MAX))) {
        private enum enumMixinStr_SEM_VALUE_MAX = `enum SEM_VALUE_MAX = ( 2147483647 );`;
        static if(is(typeof({ mixin(enumMixinStr_SEM_VALUE_MAX); }))) {
            mixin(enumMixinStr_SEM_VALUE_MAX);
        }
    }




    static if(!is(typeof(_BITS_POSIX1_LIM_H))) {
        private enum enumMixinStr__BITS_POSIX1_LIM_H = `enum _BITS_POSIX1_LIM_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_POSIX1_LIM_H); }))) {
            mixin(enumMixinStr__BITS_POSIX1_LIM_H);
        }
    }




    static if(!is(typeof(_POSIX_AIO_LISTIO_MAX))) {
        private enum enumMixinStr__POSIX_AIO_LISTIO_MAX = `enum _POSIX_AIO_LISTIO_MAX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_AIO_LISTIO_MAX); }))) {
            mixin(enumMixinStr__POSIX_AIO_LISTIO_MAX);
        }
    }




    static if(!is(typeof(_POSIX_AIO_MAX))) {
        private enum enumMixinStr__POSIX_AIO_MAX = `enum _POSIX_AIO_MAX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_AIO_MAX); }))) {
            mixin(enumMixinStr__POSIX_AIO_MAX);
        }
    }




    static if(!is(typeof(_POSIX_ARG_MAX))) {
        private enum enumMixinStr__POSIX_ARG_MAX = `enum _POSIX_ARG_MAX = 4096;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_ARG_MAX); }))) {
            mixin(enumMixinStr__POSIX_ARG_MAX);
        }
    }






    static if(!is(typeof(_POSIX_CHILD_MAX))) {
        private enum enumMixinStr__POSIX_CHILD_MAX = `enum _POSIX_CHILD_MAX = 25;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CHILD_MAX); }))) {
            mixin(enumMixinStr__POSIX_CHILD_MAX);
        }
    }




    static if(!is(typeof(_POSIX_DELAYTIMER_MAX))) {
        private enum enumMixinStr__POSIX_DELAYTIMER_MAX = `enum _POSIX_DELAYTIMER_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_DELAYTIMER_MAX); }))) {
            mixin(enumMixinStr__POSIX_DELAYTIMER_MAX);
        }
    }




    static if(!is(typeof(_POSIX_HOST_NAME_MAX))) {
        private enum enumMixinStr__POSIX_HOST_NAME_MAX = `enum _POSIX_HOST_NAME_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_HOST_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_HOST_NAME_MAX);
        }
    }




    static if(!is(typeof(_POSIX_LINK_MAX))) {
        private enum enumMixinStr__POSIX_LINK_MAX = `enum _POSIX_LINK_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_LINK_MAX); }))) {
            mixin(enumMixinStr__POSIX_LINK_MAX);
        }
    }




    static if(!is(typeof(_POSIX_LOGIN_NAME_MAX))) {
        private enum enumMixinStr__POSIX_LOGIN_NAME_MAX = `enum _POSIX_LOGIN_NAME_MAX = 9;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_LOGIN_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_LOGIN_NAME_MAX);
        }
    }




    static if(!is(typeof(_POSIX_MAX_CANON))) {
        private enum enumMixinStr__POSIX_MAX_CANON = `enum _POSIX_MAX_CANON = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MAX_CANON); }))) {
            mixin(enumMixinStr__POSIX_MAX_CANON);
        }
    }




    static if(!is(typeof(_POSIX_MAX_INPUT))) {
        private enum enumMixinStr__POSIX_MAX_INPUT = `enum _POSIX_MAX_INPUT = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MAX_INPUT); }))) {
            mixin(enumMixinStr__POSIX_MAX_INPUT);
        }
    }




    static if(!is(typeof(_POSIX_MQ_OPEN_MAX))) {
        private enum enumMixinStr__POSIX_MQ_OPEN_MAX = `enum _POSIX_MQ_OPEN_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MQ_OPEN_MAX); }))) {
            mixin(enumMixinStr__POSIX_MQ_OPEN_MAX);
        }
    }




    static if(!is(typeof(_POSIX_MQ_PRIO_MAX))) {
        private enum enumMixinStr__POSIX_MQ_PRIO_MAX = `enum _POSIX_MQ_PRIO_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MQ_PRIO_MAX); }))) {
            mixin(enumMixinStr__POSIX_MQ_PRIO_MAX);
        }
    }




    static if(!is(typeof(_POSIX_NAME_MAX))) {
        private enum enumMixinStr__POSIX_NAME_MAX = `enum _POSIX_NAME_MAX = 14;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_NAME_MAX);
        }
    }






    static if(!is(typeof(_POSIX_NGROUPS_MAX))) {
        private enum enumMixinStr__POSIX_NGROUPS_MAX = `enum _POSIX_NGROUPS_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_NGROUPS_MAX); }))) {
            mixin(enumMixinStr__POSIX_NGROUPS_MAX);
        }
    }




    static if(!is(typeof(G_TYPE_ACTION_GROUP))) {
        private enum enumMixinStr_G_TYPE_ACTION_GROUP = `enum G_TYPE_ACTION_GROUP = ( g_action_group_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ACTION_GROUP); }))) {
            mixin(enumMixinStr_G_TYPE_ACTION_GROUP);
        }
    }




    static if(!is(typeof(_POSIX_OPEN_MAX))) {
        private enum enumMixinStr__POSIX_OPEN_MAX = `enum _POSIX_OPEN_MAX = 20;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_OPEN_MAX); }))) {
            mixin(enumMixinStr__POSIX_OPEN_MAX);
        }
    }






    static if(!is(typeof(_POSIX_PATH_MAX))) {
        private enum enumMixinStr__POSIX_PATH_MAX = `enum _POSIX_PATH_MAX = 256;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PATH_MAX); }))) {
            mixin(enumMixinStr__POSIX_PATH_MAX);
        }
    }




    static if(!is(typeof(_POSIX_PIPE_BUF))) {
        private enum enumMixinStr__POSIX_PIPE_BUF = `enum _POSIX_PIPE_BUF = 512;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PIPE_BUF); }))) {
            mixin(enumMixinStr__POSIX_PIPE_BUF);
        }
    }




    static if(!is(typeof(_POSIX_RE_DUP_MAX))) {
        private enum enumMixinStr__POSIX_RE_DUP_MAX = `enum _POSIX_RE_DUP_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_RE_DUP_MAX); }))) {
            mixin(enumMixinStr__POSIX_RE_DUP_MAX);
        }
    }




    static if(!is(typeof(_POSIX_RTSIG_MAX))) {
        private enum enumMixinStr__POSIX_RTSIG_MAX = `enum _POSIX_RTSIG_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_RTSIG_MAX); }))) {
            mixin(enumMixinStr__POSIX_RTSIG_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SEM_NSEMS_MAX))) {
        private enum enumMixinStr__POSIX_SEM_NSEMS_MAX = `enum _POSIX_SEM_NSEMS_MAX = 256;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SEM_NSEMS_MAX); }))) {
            mixin(enumMixinStr__POSIX_SEM_NSEMS_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SEM_VALUE_MAX))) {
        private enum enumMixinStr__POSIX_SEM_VALUE_MAX = `enum _POSIX_SEM_VALUE_MAX = 32767;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SEM_VALUE_MAX); }))) {
            mixin(enumMixinStr__POSIX_SEM_VALUE_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SIGQUEUE_MAX))) {
        private enum enumMixinStr__POSIX_SIGQUEUE_MAX = `enum _POSIX_SIGQUEUE_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SIGQUEUE_MAX); }))) {
            mixin(enumMixinStr__POSIX_SIGQUEUE_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SSIZE_MAX))) {
        private enum enumMixinStr__POSIX_SSIZE_MAX = `enum _POSIX_SSIZE_MAX = 32767;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SSIZE_MAX); }))) {
            mixin(enumMixinStr__POSIX_SSIZE_MAX);
        }
    }




    static if(!is(typeof(_POSIX_STREAM_MAX))) {
        private enum enumMixinStr__POSIX_STREAM_MAX = `enum _POSIX_STREAM_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_STREAM_MAX); }))) {
            mixin(enumMixinStr__POSIX_STREAM_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SYMLINK_MAX))) {
        private enum enumMixinStr__POSIX_SYMLINK_MAX = `enum _POSIX_SYMLINK_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SYMLINK_MAX); }))) {
            mixin(enumMixinStr__POSIX_SYMLINK_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SYMLOOP_MAX))) {
        private enum enumMixinStr__POSIX_SYMLOOP_MAX = `enum _POSIX_SYMLOOP_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SYMLOOP_MAX); }))) {
            mixin(enumMixinStr__POSIX_SYMLOOP_MAX);
        }
    }




    static if(!is(typeof(_POSIX_TIMER_MAX))) {
        private enum enumMixinStr__POSIX_TIMER_MAX = `enum _POSIX_TIMER_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TIMER_MAX); }))) {
            mixin(enumMixinStr__POSIX_TIMER_MAX);
        }
    }




    static if(!is(typeof(_POSIX_TTY_NAME_MAX))) {
        private enum enumMixinStr__POSIX_TTY_NAME_MAX = `enum _POSIX_TTY_NAME_MAX = 9;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TTY_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_TTY_NAME_MAX);
        }
    }






    static if(!is(typeof(_POSIX_TZNAME_MAX))) {
        private enum enumMixinStr__POSIX_TZNAME_MAX = `enum _POSIX_TZNAME_MAX = 6;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TZNAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_TZNAME_MAX);
        }
    }






    static if(!is(typeof(_POSIX_CLOCKRES_MIN))) {
        private enum enumMixinStr__POSIX_CLOCKRES_MIN = `enum _POSIX_CLOCKRES_MIN = 20000000;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CLOCKRES_MIN); }))) {
            mixin(enumMixinStr__POSIX_CLOCKRES_MIN);
        }
    }






    static if(!is(typeof(SSIZE_MAX))) {
        private enum enumMixinStr_SSIZE_MAX = `enum SSIZE_MAX = LONG_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_SSIZE_MAX); }))) {
            mixin(enumMixinStr_SSIZE_MAX);
        }
    }




    static if(!is(typeof(G_TYPE_ACTION))) {
        private enum enumMixinStr_G_TYPE_ACTION = `enum G_TYPE_ACTION = ( g_action_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_TYPE_ACTION); }))) {
            mixin(enumMixinStr_G_TYPE_ACTION);
        }
    }




    static if(!is(typeof(_BITS_POSIX2_LIM_H))) {
        private enum enumMixinStr__BITS_POSIX2_LIM_H = `enum _BITS_POSIX2_LIM_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_POSIX2_LIM_H); }))) {
            mixin(enumMixinStr__BITS_POSIX2_LIM_H);
        }
    }




    static if(!is(typeof(_POSIX2_BC_BASE_MAX))) {
        private enum enumMixinStr__POSIX2_BC_BASE_MAX = `enum _POSIX2_BC_BASE_MAX = 99;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_BASE_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_BASE_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_BC_DIM_MAX))) {
        private enum enumMixinStr__POSIX2_BC_DIM_MAX = `enum _POSIX2_BC_DIM_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_DIM_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_DIM_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_BC_SCALE_MAX))) {
        private enum enumMixinStr__POSIX2_BC_SCALE_MAX = `enum _POSIX2_BC_SCALE_MAX = 99;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_SCALE_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_SCALE_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_BC_STRING_MAX))) {
        private enum enumMixinStr__POSIX2_BC_STRING_MAX = `enum _POSIX2_BC_STRING_MAX = 1000;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_STRING_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_STRING_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_COLL_WEIGHTS_MAX))) {
        private enum enumMixinStr__POSIX2_COLL_WEIGHTS_MAX = `enum _POSIX2_COLL_WEIGHTS_MAX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_COLL_WEIGHTS_MAX); }))) {
            mixin(enumMixinStr__POSIX2_COLL_WEIGHTS_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_EXPR_NEST_MAX))) {
        private enum enumMixinStr__POSIX2_EXPR_NEST_MAX = `enum _POSIX2_EXPR_NEST_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_EXPR_NEST_MAX); }))) {
            mixin(enumMixinStr__POSIX2_EXPR_NEST_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_LINE_MAX))) {
        private enum enumMixinStr__POSIX2_LINE_MAX = `enum _POSIX2_LINE_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_LINE_MAX); }))) {
            mixin(enumMixinStr__POSIX2_LINE_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_RE_DUP_MAX))) {
        private enum enumMixinStr__POSIX2_RE_DUP_MAX = `enum _POSIX2_RE_DUP_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_RE_DUP_MAX); }))) {
            mixin(enumMixinStr__POSIX2_RE_DUP_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_CHARCLASS_NAME_MAX))) {
        private enum enumMixinStr__POSIX2_CHARCLASS_NAME_MAX = `enum _POSIX2_CHARCLASS_NAME_MAX = 14;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_CHARCLASS_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX2_CHARCLASS_NAME_MAX);
        }
    }




    static if(!is(typeof(BC_BASE_MAX))) {
        private enum enumMixinStr_BC_BASE_MAX = `enum BC_BASE_MAX = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_BASE_MAX); }))) {
            mixin(enumMixinStr_BC_BASE_MAX);
        }
    }




    static if(!is(typeof(BC_DIM_MAX))) {
        private enum enumMixinStr_BC_DIM_MAX = `enum BC_DIM_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_DIM_MAX); }))) {
            mixin(enumMixinStr_BC_DIM_MAX);
        }
    }




    static if(!is(typeof(BC_SCALE_MAX))) {
        private enum enumMixinStr_BC_SCALE_MAX = `enum BC_SCALE_MAX = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_SCALE_MAX); }))) {
            mixin(enumMixinStr_BC_SCALE_MAX);
        }
    }




    static if(!is(typeof(BC_STRING_MAX))) {
        private enum enumMixinStr_BC_STRING_MAX = `enum BC_STRING_MAX = 1000;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_STRING_MAX); }))) {
            mixin(enumMixinStr_BC_STRING_MAX);
        }
    }




    static if(!is(typeof(COLL_WEIGHTS_MAX))) {
        private enum enumMixinStr_COLL_WEIGHTS_MAX = `enum COLL_WEIGHTS_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_COLL_WEIGHTS_MAX); }))) {
            mixin(enumMixinStr_COLL_WEIGHTS_MAX);
        }
    }




    static if(!is(typeof(EXPR_NEST_MAX))) {
        private enum enumMixinStr_EXPR_NEST_MAX = `enum EXPR_NEST_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_EXPR_NEST_MAX); }))) {
            mixin(enumMixinStr_EXPR_NEST_MAX);
        }
    }




    static if(!is(typeof(LINE_MAX))) {
        private enum enumMixinStr_LINE_MAX = `enum LINE_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_LINE_MAX); }))) {
            mixin(enumMixinStr_LINE_MAX);
        }
    }




    static if(!is(typeof(CHARCLASS_NAME_MAX))) {
        private enum enumMixinStr_CHARCLASS_NAME_MAX = `enum CHARCLASS_NAME_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_CHARCLASS_NAME_MAX); }))) {
            mixin(enumMixinStr_CHARCLASS_NAME_MAX);
        }
    }




    static if(!is(typeof(RE_DUP_MAX))) {
        private enum enumMixinStr_RE_DUP_MAX = `enum RE_DUP_MAX = ( 0x7fff );`;
        static if(is(typeof({ mixin(enumMixinStr_RE_DUP_MAX); }))) {
            mixin(enumMixinStr_RE_DUP_MAX);
        }
    }




    static if(!is(typeof(_BITS_POSIX_OPT_H))) {
        private enum enumMixinStr__BITS_POSIX_OPT_H = `enum _BITS_POSIX_OPT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_POSIX_OPT_H); }))) {
            mixin(enumMixinStr__BITS_POSIX_OPT_H);
        }
    }




    static if(!is(typeof(_POSIX_JOB_CONTROL))) {
        private enum enumMixinStr__POSIX_JOB_CONTROL = `enum _POSIX_JOB_CONTROL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_JOB_CONTROL); }))) {
            mixin(enumMixinStr__POSIX_JOB_CONTROL);
        }
    }




    static if(!is(typeof(_POSIX_SAVED_IDS))) {
        private enum enumMixinStr__POSIX_SAVED_IDS = `enum _POSIX_SAVED_IDS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SAVED_IDS); }))) {
            mixin(enumMixinStr__POSIX_SAVED_IDS);
        }
    }




    static if(!is(typeof(_POSIX_PRIORITY_SCHEDULING))) {
        private enum enumMixinStr__POSIX_PRIORITY_SCHEDULING = `enum _POSIX_PRIORITY_SCHEDULING = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PRIORITY_SCHEDULING); }))) {
            mixin(enumMixinStr__POSIX_PRIORITY_SCHEDULING);
        }
    }




    static if(!is(typeof(_POSIX_SYNCHRONIZED_IO))) {
        private enum enumMixinStr__POSIX_SYNCHRONIZED_IO = `enum _POSIX_SYNCHRONIZED_IO = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SYNCHRONIZED_IO); }))) {
            mixin(enumMixinStr__POSIX_SYNCHRONIZED_IO);
        }
    }




    static if(!is(typeof(_POSIX_FSYNC))) {
        private enum enumMixinStr__POSIX_FSYNC = `enum _POSIX_FSYNC = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_FSYNC); }))) {
            mixin(enumMixinStr__POSIX_FSYNC);
        }
    }




    static if(!is(typeof(_POSIX_MAPPED_FILES))) {
        private enum enumMixinStr__POSIX_MAPPED_FILES = `enum _POSIX_MAPPED_FILES = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MAPPED_FILES); }))) {
            mixin(enumMixinStr__POSIX_MAPPED_FILES);
        }
    }




    static if(!is(typeof(_POSIX_MEMLOCK))) {
        private enum enumMixinStr__POSIX_MEMLOCK = `enum _POSIX_MEMLOCK = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MEMLOCK); }))) {
            mixin(enumMixinStr__POSIX_MEMLOCK);
        }
    }




    static if(!is(typeof(_POSIX_MEMLOCK_RANGE))) {
        private enum enumMixinStr__POSIX_MEMLOCK_RANGE = `enum _POSIX_MEMLOCK_RANGE = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MEMLOCK_RANGE); }))) {
            mixin(enumMixinStr__POSIX_MEMLOCK_RANGE);
        }
    }




    static if(!is(typeof(_POSIX_MEMORY_PROTECTION))) {
        private enum enumMixinStr__POSIX_MEMORY_PROTECTION = `enum _POSIX_MEMORY_PROTECTION = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MEMORY_PROTECTION); }))) {
            mixin(enumMixinStr__POSIX_MEMORY_PROTECTION);
        }
    }




    static if(!is(typeof(_POSIX_CHOWN_RESTRICTED))) {
        private enum enumMixinStr__POSIX_CHOWN_RESTRICTED = `enum _POSIX_CHOWN_RESTRICTED = 0;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CHOWN_RESTRICTED); }))) {
            mixin(enumMixinStr__POSIX_CHOWN_RESTRICTED);
        }
    }




    static if(!is(typeof(_POSIX_VDISABLE))) {
        private enum enumMixinStr__POSIX_VDISABLE = `enum _POSIX_VDISABLE = '\0';`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_VDISABLE); }))) {
            mixin(enumMixinStr__POSIX_VDISABLE);
        }
    }




    static if(!is(typeof(_POSIX_NO_TRUNC))) {
        private enum enumMixinStr__POSIX_NO_TRUNC = `enum _POSIX_NO_TRUNC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_NO_TRUNC); }))) {
            mixin(enumMixinStr__POSIX_NO_TRUNC);
        }
    }




    static if(!is(typeof(_XOPEN_REALTIME))) {
        private enum enumMixinStr__XOPEN_REALTIME = `enum _XOPEN_REALTIME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_REALTIME); }))) {
            mixin(enumMixinStr__XOPEN_REALTIME);
        }
    }




    static if(!is(typeof(_XOPEN_REALTIME_THREADS))) {
        private enum enumMixinStr__XOPEN_REALTIME_THREADS = `enum _XOPEN_REALTIME_THREADS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_REALTIME_THREADS); }))) {
            mixin(enumMixinStr__XOPEN_REALTIME_THREADS);
        }
    }




    static if(!is(typeof(_XOPEN_SHM))) {
        private enum enumMixinStr__XOPEN_SHM = `enum _XOPEN_SHM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__XOPEN_SHM); }))) {
            mixin(enumMixinStr__XOPEN_SHM);
        }
    }




    static if(!is(typeof(_POSIX_THREADS))) {
        private enum enumMixinStr__POSIX_THREADS = `enum _POSIX_THREADS = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREADS); }))) {
            mixin(enumMixinStr__POSIX_THREADS);
        }
    }




    static if(!is(typeof(_POSIX_REENTRANT_FUNCTIONS))) {
        private enum enumMixinStr__POSIX_REENTRANT_FUNCTIONS = `enum _POSIX_REENTRANT_FUNCTIONS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_REENTRANT_FUNCTIONS); }))) {
            mixin(enumMixinStr__POSIX_REENTRANT_FUNCTIONS);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_SAFE_FUNCTIONS))) {
        private enum enumMixinStr__POSIX_THREAD_SAFE_FUNCTIONS = `enum _POSIX_THREAD_SAFE_FUNCTIONS = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_SAFE_FUNCTIONS); }))) {
            mixin(enumMixinStr__POSIX_THREAD_SAFE_FUNCTIONS);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_PRIORITY_SCHEDULING))) {
        private enum enumMixinStr__POSIX_THREAD_PRIORITY_SCHEDULING = `enum _POSIX_THREAD_PRIORITY_SCHEDULING = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_PRIORITY_SCHEDULING); }))) {
            mixin(enumMixinStr__POSIX_THREAD_PRIORITY_SCHEDULING);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_ATTR_STACKSIZE))) {
        private enum enumMixinStr__POSIX_THREAD_ATTR_STACKSIZE = `enum _POSIX_THREAD_ATTR_STACKSIZE = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_ATTR_STACKSIZE); }))) {
            mixin(enumMixinStr__POSIX_THREAD_ATTR_STACKSIZE);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_ATTR_STACKADDR))) {
        private enum enumMixinStr__POSIX_THREAD_ATTR_STACKADDR = `enum _POSIX_THREAD_ATTR_STACKADDR = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_ATTR_STACKADDR); }))) {
            mixin(enumMixinStr__POSIX_THREAD_ATTR_STACKADDR);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_PRIO_INHERIT))) {
        private enum enumMixinStr__POSIX_THREAD_PRIO_INHERIT = `enum _POSIX_THREAD_PRIO_INHERIT = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_PRIO_INHERIT); }))) {
            mixin(enumMixinStr__POSIX_THREAD_PRIO_INHERIT);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_PRIO_PROTECT))) {
        private enum enumMixinStr__POSIX_THREAD_PRIO_PROTECT = `enum _POSIX_THREAD_PRIO_PROTECT = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_PRIO_PROTECT); }))) {
            mixin(enumMixinStr__POSIX_THREAD_PRIO_PROTECT);
        }
    }






    static if(!is(typeof(_POSIX_THREAD_ROBUST_PRIO_INHERIT))) {
        private enum enumMixinStr__POSIX_THREAD_ROBUST_PRIO_INHERIT = `enum _POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_ROBUST_PRIO_INHERIT); }))) {
            mixin(enumMixinStr__POSIX_THREAD_ROBUST_PRIO_INHERIT);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_ROBUST_PRIO_PROTECT))) {
        private enum enumMixinStr__POSIX_THREAD_ROBUST_PRIO_PROTECT = `enum _POSIX_THREAD_ROBUST_PRIO_PROTECT = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_ROBUST_PRIO_PROTECT); }))) {
            mixin(enumMixinStr__POSIX_THREAD_ROBUST_PRIO_PROTECT);
        }
    }




    static if(!is(typeof(_POSIX_SEMAPHORES))) {
        private enum enumMixinStr__POSIX_SEMAPHORES = `enum _POSIX_SEMAPHORES = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SEMAPHORES); }))) {
            mixin(enumMixinStr__POSIX_SEMAPHORES);
        }
    }




    static if(!is(typeof(_POSIX_REALTIME_SIGNALS))) {
        private enum enumMixinStr__POSIX_REALTIME_SIGNALS = `enum _POSIX_REALTIME_SIGNALS = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_REALTIME_SIGNALS); }))) {
            mixin(enumMixinStr__POSIX_REALTIME_SIGNALS);
        }
    }




    static if(!is(typeof(_POSIX_ASYNCHRONOUS_IO))) {
        private enum enumMixinStr__POSIX_ASYNCHRONOUS_IO = `enum _POSIX_ASYNCHRONOUS_IO = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_ASYNCHRONOUS_IO); }))) {
            mixin(enumMixinStr__POSIX_ASYNCHRONOUS_IO);
        }
    }




    static if(!is(typeof(_POSIX_ASYNC_IO))) {
        private enum enumMixinStr__POSIX_ASYNC_IO = `enum _POSIX_ASYNC_IO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_ASYNC_IO); }))) {
            mixin(enumMixinStr__POSIX_ASYNC_IO);
        }
    }




    static if(!is(typeof(_LFS_ASYNCHRONOUS_IO))) {
        private enum enumMixinStr__LFS_ASYNCHRONOUS_IO = `enum _LFS_ASYNCHRONOUS_IO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__LFS_ASYNCHRONOUS_IO); }))) {
            mixin(enumMixinStr__LFS_ASYNCHRONOUS_IO);
        }
    }




    static if(!is(typeof(_POSIX_PRIORITIZED_IO))) {
        private enum enumMixinStr__POSIX_PRIORITIZED_IO = `enum _POSIX_PRIORITIZED_IO = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PRIORITIZED_IO); }))) {
            mixin(enumMixinStr__POSIX_PRIORITIZED_IO);
        }
    }




    static if(!is(typeof(_LFS64_ASYNCHRONOUS_IO))) {
        private enum enumMixinStr__LFS64_ASYNCHRONOUS_IO = `enum _LFS64_ASYNCHRONOUS_IO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__LFS64_ASYNCHRONOUS_IO); }))) {
            mixin(enumMixinStr__LFS64_ASYNCHRONOUS_IO);
        }
    }




    static if(!is(typeof(_LFS_LARGEFILE))) {
        private enum enumMixinStr__LFS_LARGEFILE = `enum _LFS_LARGEFILE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__LFS_LARGEFILE); }))) {
            mixin(enumMixinStr__LFS_LARGEFILE);
        }
    }




    static if(!is(typeof(_LFS64_LARGEFILE))) {
        private enum enumMixinStr__LFS64_LARGEFILE = `enum _LFS64_LARGEFILE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__LFS64_LARGEFILE); }))) {
            mixin(enumMixinStr__LFS64_LARGEFILE);
        }
    }




    static if(!is(typeof(_LFS64_STDIO))) {
        private enum enumMixinStr__LFS64_STDIO = `enum _LFS64_STDIO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__LFS64_STDIO); }))) {
            mixin(enumMixinStr__LFS64_STDIO);
        }
    }




    static if(!is(typeof(_POSIX_SHARED_MEMORY_OBJECTS))) {
        private enum enumMixinStr__POSIX_SHARED_MEMORY_OBJECTS = `enum _POSIX_SHARED_MEMORY_OBJECTS = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SHARED_MEMORY_OBJECTS); }))) {
            mixin(enumMixinStr__POSIX_SHARED_MEMORY_OBJECTS);
        }
    }




    static if(!is(typeof(_POSIX_CPUTIME))) {
        private enum enumMixinStr__POSIX_CPUTIME = `enum _POSIX_CPUTIME = 0;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CPUTIME); }))) {
            mixin(enumMixinStr__POSIX_CPUTIME);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_CPUTIME))) {
        private enum enumMixinStr__POSIX_THREAD_CPUTIME = `enum _POSIX_THREAD_CPUTIME = 0;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_CPUTIME); }))) {
            mixin(enumMixinStr__POSIX_THREAD_CPUTIME);
        }
    }




    static if(!is(typeof(_POSIX_REGEXP))) {
        private enum enumMixinStr__POSIX_REGEXP = `enum _POSIX_REGEXP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_REGEXP); }))) {
            mixin(enumMixinStr__POSIX_REGEXP);
        }
    }




    static if(!is(typeof(_POSIX_READER_WRITER_LOCKS))) {
        private enum enumMixinStr__POSIX_READER_WRITER_LOCKS = `enum _POSIX_READER_WRITER_LOCKS = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_READER_WRITER_LOCKS); }))) {
            mixin(enumMixinStr__POSIX_READER_WRITER_LOCKS);
        }
    }




    static if(!is(typeof(_POSIX_SHELL))) {
        private enum enumMixinStr__POSIX_SHELL = `enum _POSIX_SHELL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SHELL); }))) {
            mixin(enumMixinStr__POSIX_SHELL);
        }
    }




    static if(!is(typeof(_POSIX_TIMEOUTS))) {
        private enum enumMixinStr__POSIX_TIMEOUTS = `enum _POSIX_TIMEOUTS = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TIMEOUTS); }))) {
            mixin(enumMixinStr__POSIX_TIMEOUTS);
        }
    }




    static if(!is(typeof(_POSIX_SPIN_LOCKS))) {
        private enum enumMixinStr__POSIX_SPIN_LOCKS = `enum _POSIX_SPIN_LOCKS = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SPIN_LOCKS); }))) {
            mixin(enumMixinStr__POSIX_SPIN_LOCKS);
        }
    }




    static if(!is(typeof(_POSIX_SPAWN))) {
        private enum enumMixinStr__POSIX_SPAWN = `enum _POSIX_SPAWN = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SPAWN); }))) {
            mixin(enumMixinStr__POSIX_SPAWN);
        }
    }




    static if(!is(typeof(_POSIX_TIMERS))) {
        private enum enumMixinStr__POSIX_TIMERS = `enum _POSIX_TIMERS = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TIMERS); }))) {
            mixin(enumMixinStr__POSIX_TIMERS);
        }
    }




    static if(!is(typeof(_POSIX_BARRIERS))) {
        private enum enumMixinStr__POSIX_BARRIERS = `enum _POSIX_BARRIERS = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_BARRIERS); }))) {
            mixin(enumMixinStr__POSIX_BARRIERS);
        }
    }




    static if(!is(typeof(_POSIX_MESSAGE_PASSING))) {
        private enum enumMixinStr__POSIX_MESSAGE_PASSING = `enum _POSIX_MESSAGE_PASSING = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MESSAGE_PASSING); }))) {
            mixin(enumMixinStr__POSIX_MESSAGE_PASSING);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_PROCESS_SHARED))) {
        private enum enumMixinStr__POSIX_THREAD_PROCESS_SHARED = `enum _POSIX_THREAD_PROCESS_SHARED = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_PROCESS_SHARED); }))) {
            mixin(enumMixinStr__POSIX_THREAD_PROCESS_SHARED);
        }
    }




    static if(!is(typeof(_POSIX_MONOTONIC_CLOCK))) {
        private enum enumMixinStr__POSIX_MONOTONIC_CLOCK = `enum _POSIX_MONOTONIC_CLOCK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MONOTONIC_CLOCK); }))) {
            mixin(enumMixinStr__POSIX_MONOTONIC_CLOCK);
        }
    }




    static if(!is(typeof(_POSIX_CLOCK_SELECTION))) {
        private enum enumMixinStr__POSIX_CLOCK_SELECTION = `enum _POSIX_CLOCK_SELECTION = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CLOCK_SELECTION); }))) {
            mixin(enumMixinStr__POSIX_CLOCK_SELECTION);
        }
    }




    static if(!is(typeof(_POSIX_ADVISORY_INFO))) {
        private enum enumMixinStr__POSIX_ADVISORY_INFO = `enum _POSIX_ADVISORY_INFO = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_ADVISORY_INFO); }))) {
            mixin(enumMixinStr__POSIX_ADVISORY_INFO);
        }
    }




    static if(!is(typeof(_POSIX_IPV6))) {
        private enum enumMixinStr__POSIX_IPV6 = `enum _POSIX_IPV6 = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_IPV6); }))) {
            mixin(enumMixinStr__POSIX_IPV6);
        }
    }




    static if(!is(typeof(_POSIX_RAW_SOCKETS))) {
        private enum enumMixinStr__POSIX_RAW_SOCKETS = `enum _POSIX_RAW_SOCKETS = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_RAW_SOCKETS); }))) {
            mixin(enumMixinStr__POSIX_RAW_SOCKETS);
        }
    }




    static if(!is(typeof(_POSIX2_CHAR_TERM))) {
        private enum enumMixinStr__POSIX2_CHAR_TERM = `enum _POSIX2_CHAR_TERM = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_CHAR_TERM); }))) {
            mixin(enumMixinStr__POSIX2_CHAR_TERM);
        }
    }




    static if(!is(typeof(_POSIX_SPORADIC_SERVER))) {
        private enum enumMixinStr__POSIX_SPORADIC_SERVER = `enum _POSIX_SPORADIC_SERVER = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SPORADIC_SERVER); }))) {
            mixin(enumMixinStr__POSIX_SPORADIC_SERVER);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_SPORADIC_SERVER))) {
        private enum enumMixinStr__POSIX_THREAD_SPORADIC_SERVER = `enum _POSIX_THREAD_SPORADIC_SERVER = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_SPORADIC_SERVER); }))) {
            mixin(enumMixinStr__POSIX_THREAD_SPORADIC_SERVER);
        }
    }




    static if(!is(typeof(_POSIX_TRACE))) {
        private enum enumMixinStr__POSIX_TRACE = `enum _POSIX_TRACE = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE); }))) {
            mixin(enumMixinStr__POSIX_TRACE);
        }
    }




    static if(!is(typeof(_POSIX_TRACE_EVENT_FILTER))) {
        private enum enumMixinStr__POSIX_TRACE_EVENT_FILTER = `enum _POSIX_TRACE_EVENT_FILTER = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE_EVENT_FILTER); }))) {
            mixin(enumMixinStr__POSIX_TRACE_EVENT_FILTER);
        }
    }




    static if(!is(typeof(_POSIX_TRACE_INHERIT))) {
        private enum enumMixinStr__POSIX_TRACE_INHERIT = `enum _POSIX_TRACE_INHERIT = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE_INHERIT); }))) {
            mixin(enumMixinStr__POSIX_TRACE_INHERIT);
        }
    }




    static if(!is(typeof(_POSIX_TRACE_LOG))) {
        private enum enumMixinStr__POSIX_TRACE_LOG = `enum _POSIX_TRACE_LOG = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TRACE_LOG); }))) {
            mixin(enumMixinStr__POSIX_TRACE_LOG);
        }
    }




    static if(!is(typeof(_POSIX_TYPED_MEMORY_OBJECTS))) {
        private enum enumMixinStr__POSIX_TYPED_MEMORY_OBJECTS = `enum _POSIX_TYPED_MEMORY_OBJECTS = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TYPED_MEMORY_OBJECTS); }))) {
            mixin(enumMixinStr__POSIX_TYPED_MEMORY_OBJECTS);
        }
    }




    static if(!is(typeof(_BITS_PTHREADTYPES_ARCH_H))) {
        private enum enumMixinStr__BITS_PTHREADTYPES_ARCH_H = `enum _BITS_PTHREADTYPES_ARCH_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_PTHREADTYPES_ARCH_H); }))) {
            mixin(enumMixinStr__BITS_PTHREADTYPES_ARCH_H);
        }
    }






    static if(!is(typeof(__GLIBC_MINOR__))) {
        private enum enumMixinStr___GLIBC_MINOR__ = `enum __GLIBC_MINOR__ = 27;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_MINOR__); }))) {
            mixin(enumMixinStr___GLIBC_MINOR__);
        }
    }




    static if(!is(typeof(__GLIBC__))) {
        private enum enumMixinStr___GLIBC__ = `enum __GLIBC__ = 2;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC__); }))) {
            mixin(enumMixinStr___GLIBC__);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_MUTEX_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_MUTEX_T = `enum __SIZEOF_PTHREAD_MUTEX_T = 40;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_MUTEX_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_MUTEX_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_ATTR_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_ATTR_T = `enum __SIZEOF_PTHREAD_ATTR_T = 56;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_ATTR_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_ATTR_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_RWLOCK_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_RWLOCK_T = `enum __SIZEOF_PTHREAD_RWLOCK_T = 56;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_RWLOCK_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_RWLOCK_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_BARRIER_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_BARRIER_T = `enum __SIZEOF_PTHREAD_BARRIER_T = 32;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_BARRIER_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_BARRIER_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_MUTEXATTR_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_MUTEXATTR_T = `enum __SIZEOF_PTHREAD_MUTEXATTR_T = 4;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_MUTEXATTR_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_MUTEXATTR_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_COND_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_COND_T = `enum __SIZEOF_PTHREAD_COND_T = 48;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_COND_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_COND_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_CONDATTR_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_CONDATTR_T = `enum __SIZEOF_PTHREAD_CONDATTR_T = 4;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_CONDATTR_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_CONDATTR_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_RWLOCKATTR_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_RWLOCKATTR_T = `enum __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_RWLOCKATTR_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_RWLOCKATTR_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_BARRIERATTR_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_BARRIERATTR_T = `enum __SIZEOF_PTHREAD_BARRIERATTR_T = 4;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_BARRIERATTR_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_BARRIERATTR_T);
        }
    }
    static if(!is(typeof(__PTHREAD_MUTEX_LOCK_ELISION))) {
        private enum enumMixinStr___PTHREAD_MUTEX_LOCK_ELISION = `enum __PTHREAD_MUTEX_LOCK_ELISION = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_MUTEX_LOCK_ELISION); }))) {
            mixin(enumMixinStr___PTHREAD_MUTEX_LOCK_ELISION);
        }
    }




    static if(!is(typeof(__GNU_LIBRARY__))) {
        private enum enumMixinStr___GNU_LIBRARY__ = `enum __GNU_LIBRARY__ = 6;`;
        static if(is(typeof({ mixin(enumMixinStr___GNU_LIBRARY__); }))) {
            mixin(enumMixinStr___GNU_LIBRARY__);
        }
    }




    static if(!is(typeof(__PTHREAD_MUTEX_NUSERS_AFTER_KIND))) {
        private enum enumMixinStr___PTHREAD_MUTEX_NUSERS_AFTER_KIND = `enum __PTHREAD_MUTEX_NUSERS_AFTER_KIND = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_MUTEX_NUSERS_AFTER_KIND); }))) {
            mixin(enumMixinStr___PTHREAD_MUTEX_NUSERS_AFTER_KIND);
        }
    }




    static if(!is(typeof(__PTHREAD_MUTEX_USE_UNION))) {
        private enum enumMixinStr___PTHREAD_MUTEX_USE_UNION = `enum __PTHREAD_MUTEX_USE_UNION = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_MUTEX_USE_UNION); }))) {
            mixin(enumMixinStr___PTHREAD_MUTEX_USE_UNION);
        }
    }
    static if(!is(typeof(__GLIBC_USE_DEPRECATED_GETS))) {
        private enum enumMixinStr___GLIBC_USE_DEPRECATED_GETS = `enum __GLIBC_USE_DEPRECATED_GETS = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_DEPRECATED_GETS); }))) {
            mixin(enumMixinStr___GLIBC_USE_DEPRECATED_GETS);
        }
    }




    static if(!is(typeof(__USE_FORTIFY_LEVEL))) {
        private enum enumMixinStr___USE_FORTIFY_LEVEL = `enum __USE_FORTIFY_LEVEL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_FORTIFY_LEVEL); }))) {
            mixin(enumMixinStr___USE_FORTIFY_LEVEL);
        }
    }




    static if(!is(typeof(__PTHREAD_RWLOCK_ELISION_EXTRA))) {
        private enum enumMixinStr___PTHREAD_RWLOCK_ELISION_EXTRA = `enum __PTHREAD_RWLOCK_ELISION_EXTRA = 0 , { 0 , 0 , 0 , 0 , 0 , 0 , 0 };`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_RWLOCK_ELISION_EXTRA); }))) {
            mixin(enumMixinStr___PTHREAD_RWLOCK_ELISION_EXTRA);
        }
    }




    static if(!is(typeof(__PTHREAD_RWLOCK_INT_FLAGS_SHARED))) {
        private enum enumMixinStr___PTHREAD_RWLOCK_INT_FLAGS_SHARED = `enum __PTHREAD_RWLOCK_INT_FLAGS_SHARED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_RWLOCK_INT_FLAGS_SHARED); }))) {
            mixin(enumMixinStr___PTHREAD_RWLOCK_INT_FLAGS_SHARED);
        }
    }




    static if(!is(typeof(__USE_ATFILE))) {
        private enum enumMixinStr___USE_ATFILE = `enum __USE_ATFILE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_ATFILE); }))) {
            mixin(enumMixinStr___USE_ATFILE);
        }
    }




    static if(!is(typeof(_BITS_PTHREADTYPES_COMMON_H))) {
        private enum enumMixinStr__BITS_PTHREADTYPES_COMMON_H = `enum _BITS_PTHREADTYPES_COMMON_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_PTHREADTYPES_COMMON_H); }))) {
            mixin(enumMixinStr__BITS_PTHREADTYPES_COMMON_H);
        }
    }




    static if(!is(typeof(__USE_MISC))) {
        private enum enumMixinStr___USE_MISC = `enum __USE_MISC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_MISC); }))) {
            mixin(enumMixinStr___USE_MISC);
        }
    }




    static if(!is(typeof(_ATFILE_SOURCE))) {
        private enum enumMixinStr__ATFILE_SOURCE = `enum _ATFILE_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__ATFILE_SOURCE); }))) {
            mixin(enumMixinStr__ATFILE_SOURCE);
        }
    }




    static if(!is(typeof(__USE_XOPEN2K8))) {
        private enum enumMixinStr___USE_XOPEN2K8 = `enum __USE_XOPEN2K8 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_XOPEN2K8); }))) {
            mixin(enumMixinStr___USE_XOPEN2K8);
        }
    }




    static if(!is(typeof(__USE_ISOC99))) {
        private enum enumMixinStr___USE_ISOC99 = `enum __USE_ISOC99 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_ISOC99); }))) {
            mixin(enumMixinStr___USE_ISOC99);
        }
    }




    static if(!is(typeof(__USE_ISOC95))) {
        private enum enumMixinStr___USE_ISOC95 = `enum __USE_ISOC95 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_ISOC95); }))) {
            mixin(enumMixinStr___USE_ISOC95);
        }
    }




    static if(!is(typeof(__USE_XOPEN2K))) {
        private enum enumMixinStr___USE_XOPEN2K = `enum __USE_XOPEN2K = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_XOPEN2K); }))) {
            mixin(enumMixinStr___USE_XOPEN2K);
        }
    }




    static if(!is(typeof(__USE_POSIX199506))) {
        private enum enumMixinStr___USE_POSIX199506 = `enum __USE_POSIX199506 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_POSIX199506); }))) {
            mixin(enumMixinStr___USE_POSIX199506);
        }
    }




    static if(!is(typeof(__USE_POSIX199309))) {
        private enum enumMixinStr___USE_POSIX199309 = `enum __USE_POSIX199309 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_POSIX199309); }))) {
            mixin(enumMixinStr___USE_POSIX199309);
        }
    }




    static if(!is(typeof(__USE_POSIX2))) {
        private enum enumMixinStr___USE_POSIX2 = `enum __USE_POSIX2 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_POSIX2); }))) {
            mixin(enumMixinStr___USE_POSIX2);
        }
    }




    static if(!is(typeof(__USE_POSIX))) {
        private enum enumMixinStr___USE_POSIX = `enum __USE_POSIX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_POSIX); }))) {
            mixin(enumMixinStr___USE_POSIX);
        }
    }




    static if(!is(typeof(_POSIX_C_SOURCE))) {
        private enum enumMixinStr__POSIX_C_SOURCE = `enum _POSIX_C_SOURCE = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_C_SOURCE); }))) {
            mixin(enumMixinStr__POSIX_C_SOURCE);
        }
    }




    static if(!is(typeof(_POSIX_SOURCE))) {
        private enum enumMixinStr__POSIX_SOURCE = `enum _POSIX_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SOURCE); }))) {
            mixin(enumMixinStr__POSIX_SOURCE);
        }
    }




    static if(!is(typeof(__USE_POSIX_IMPLICITLY))) {
        private enum enumMixinStr___USE_POSIX_IMPLICITLY = `enum __USE_POSIX_IMPLICITLY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_POSIX_IMPLICITLY); }))) {
            mixin(enumMixinStr___USE_POSIX_IMPLICITLY);
        }
    }




    static if(!is(typeof(__have_pthread_attr_t))) {
        private enum enumMixinStr___have_pthread_attr_t = `enum __have_pthread_attr_t = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___have_pthread_attr_t); }))) {
            mixin(enumMixinStr___have_pthread_attr_t);
        }
    }




    static if(!is(typeof(__USE_ISOC11))) {
        private enum enumMixinStr___USE_ISOC11 = `enum __USE_ISOC11 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_ISOC11); }))) {
            mixin(enumMixinStr___USE_ISOC11);
        }
    }




    static if(!is(typeof(_DEFAULT_SOURCE))) {
        private enum enumMixinStr__DEFAULT_SOURCE = `enum _DEFAULT_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__DEFAULT_SOURCE); }))) {
            mixin(enumMixinStr__DEFAULT_SOURCE);
        }
    }
    static if(!is(typeof(_FEATURES_H))) {
        private enum enumMixinStr__FEATURES_H = `enum _FEATURES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__FEATURES_H); }))) {
            mixin(enumMixinStr__FEATURES_H);
        }
    }
    static if(!is(typeof(_BITS_SCHED_H))) {
        private enum enumMixinStr__BITS_SCHED_H = `enum _BITS_SCHED_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SCHED_H); }))) {
            mixin(enumMixinStr__BITS_SCHED_H);
        }
    }




    static if(!is(typeof(BYTE_ORDER))) {
        private enum enumMixinStr_BYTE_ORDER = `enum BYTE_ORDER = __LITTLE_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr_BYTE_ORDER); }))) {
            mixin(enumMixinStr_BYTE_ORDER);
        }
    }




    static if(!is(typeof(SCHED_OTHER))) {
        private enum enumMixinStr_SCHED_OTHER = `enum SCHED_OTHER = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHED_OTHER); }))) {
            mixin(enumMixinStr_SCHED_OTHER);
        }
    }




    static if(!is(typeof(SCHED_FIFO))) {
        private enum enumMixinStr_SCHED_FIFO = `enum SCHED_FIFO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHED_FIFO); }))) {
            mixin(enumMixinStr_SCHED_FIFO);
        }
    }




    static if(!is(typeof(SCHED_RR))) {
        private enum enumMixinStr_SCHED_RR = `enum SCHED_RR = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHED_RR); }))) {
            mixin(enumMixinStr_SCHED_RR);
        }
    }




    static if(!is(typeof(PDP_ENDIAN))) {
        private enum enumMixinStr_PDP_ENDIAN = `enum PDP_ENDIAN = __PDP_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr_PDP_ENDIAN); }))) {
            mixin(enumMixinStr_PDP_ENDIAN);
        }
    }




    static if(!is(typeof(BIG_ENDIAN))) {
        private enum enumMixinStr_BIG_ENDIAN = `enum BIG_ENDIAN = __BIG_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr_BIG_ENDIAN); }))) {
            mixin(enumMixinStr_BIG_ENDIAN);
        }
    }




    static if(!is(typeof(LITTLE_ENDIAN))) {
        private enum enumMixinStr_LITTLE_ENDIAN = `enum LITTLE_ENDIAN = __LITTLE_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr_LITTLE_ENDIAN); }))) {
            mixin(enumMixinStr_LITTLE_ENDIAN);
        }
    }




    static if(!is(typeof(__FLOAT_WORD_ORDER))) {
        private enum enumMixinStr___FLOAT_WORD_ORDER = `enum __FLOAT_WORD_ORDER = __LITTLE_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr___FLOAT_WORD_ORDER); }))) {
            mixin(enumMixinStr___FLOAT_WORD_ORDER);
        }
    }




    static if(!is(typeof(__PDP_ENDIAN))) {
        private enum enumMixinStr___PDP_ENDIAN = `enum __PDP_ENDIAN = 3412;`;
        static if(is(typeof({ mixin(enumMixinStr___PDP_ENDIAN); }))) {
            mixin(enumMixinStr___PDP_ENDIAN);
        }
    }




    static if(!is(typeof(__BIG_ENDIAN))) {
        private enum enumMixinStr___BIG_ENDIAN = `enum __BIG_ENDIAN = 4321;`;
        static if(is(typeof({ mixin(enumMixinStr___BIG_ENDIAN); }))) {
            mixin(enumMixinStr___BIG_ENDIAN);
        }
    }




    static if(!is(typeof(__LITTLE_ENDIAN))) {
        private enum enumMixinStr___LITTLE_ENDIAN = `enum __LITTLE_ENDIAN = 1234;`;
        static if(is(typeof({ mixin(enumMixinStr___LITTLE_ENDIAN); }))) {
            mixin(enumMixinStr___LITTLE_ENDIAN);
        }
    }




    static if(!is(typeof(_ENDIAN_H))) {
        private enum enumMixinStr__ENDIAN_H = `enum _ENDIAN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__ENDIAN_H); }))) {
            mixin(enumMixinStr__ENDIAN_H);
        }
    }




    static if(!is(typeof(__FD_ZERO_STOS))) {
        private enum enumMixinStr___FD_ZERO_STOS = `enum __FD_ZERO_STOS = "stosq";`;
        static if(is(typeof({ mixin(enumMixinStr___FD_ZERO_STOS); }))) {
            mixin(enumMixinStr___FD_ZERO_STOS);
        }
    }
    static if(!is(typeof(_BITS_SETJMP_H))) {
        private enum enumMixinStr__BITS_SETJMP_H = `enum _BITS_SETJMP_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SETJMP_H); }))) {
            mixin(enumMixinStr__BITS_SETJMP_H);
        }
    }




    static if(!is(typeof(MAXNAMLEN))) {
        private enum enumMixinStr_MAXNAMLEN = `enum MAXNAMLEN = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_MAXNAMLEN); }))) {
            mixin(enumMixinStr_MAXNAMLEN);
        }
    }
    static if(!is(typeof(DT_WHT))) {
        private enum enumMixinStr_DT_WHT = `enum DT_WHT = DT_WHT;`;
        static if(is(typeof({ mixin(enumMixinStr_DT_WHT); }))) {
            mixin(enumMixinStr_DT_WHT);
        }
    }




    static if(!is(typeof(DT_SOCK))) {
        private enum enumMixinStr_DT_SOCK = `enum DT_SOCK = DT_SOCK;`;
        static if(is(typeof({ mixin(enumMixinStr_DT_SOCK); }))) {
            mixin(enumMixinStr_DT_SOCK);
        }
    }




    static if(!is(typeof(DT_LNK))) {
        private enum enumMixinStr_DT_LNK = `enum DT_LNK = DT_LNK;`;
        static if(is(typeof({ mixin(enumMixinStr_DT_LNK); }))) {
            mixin(enumMixinStr_DT_LNK);
        }
    }




    static if(!is(typeof(sa_handler))) {
        private enum enumMixinStr_sa_handler = `enum sa_handler = __sigaction_handler . sa_handler;`;
        static if(is(typeof({ mixin(enumMixinStr_sa_handler); }))) {
            mixin(enumMixinStr_sa_handler);
        }
    }




    static if(!is(typeof(sa_sigaction))) {
        private enum enumMixinStr_sa_sigaction = `enum sa_sigaction = __sigaction_handler . sa_sigaction;`;
        static if(is(typeof({ mixin(enumMixinStr_sa_sigaction); }))) {
            mixin(enumMixinStr_sa_sigaction);
        }
    }




    static if(!is(typeof(SA_NOCLDSTOP))) {
        private enum enumMixinStr_SA_NOCLDSTOP = `enum SA_NOCLDSTOP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_NOCLDSTOP); }))) {
            mixin(enumMixinStr_SA_NOCLDSTOP);
        }
    }




    static if(!is(typeof(SA_NOCLDWAIT))) {
        private enum enumMixinStr_SA_NOCLDWAIT = `enum SA_NOCLDWAIT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_NOCLDWAIT); }))) {
            mixin(enumMixinStr_SA_NOCLDWAIT);
        }
    }




    static if(!is(typeof(SA_SIGINFO))) {
        private enum enumMixinStr_SA_SIGINFO = `enum SA_SIGINFO = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_SIGINFO); }))) {
            mixin(enumMixinStr_SA_SIGINFO);
        }
    }




    static if(!is(typeof(DT_REG))) {
        private enum enumMixinStr_DT_REG = `enum DT_REG = DT_REG;`;
        static if(is(typeof({ mixin(enumMixinStr_DT_REG); }))) {
            mixin(enumMixinStr_DT_REG);
        }
    }




    static if(!is(typeof(SA_ONSTACK))) {
        private enum enumMixinStr_SA_ONSTACK = `enum SA_ONSTACK = 0x08000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_ONSTACK); }))) {
            mixin(enumMixinStr_SA_ONSTACK);
        }
    }




    static if(!is(typeof(DT_BLK))) {
        private enum enumMixinStr_DT_BLK = `enum DT_BLK = DT_BLK;`;
        static if(is(typeof({ mixin(enumMixinStr_DT_BLK); }))) {
            mixin(enumMixinStr_DT_BLK);
        }
    }




    static if(!is(typeof(SA_RESTART))) {
        private enum enumMixinStr_SA_RESTART = `enum SA_RESTART = 0x10000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_RESTART); }))) {
            mixin(enumMixinStr_SA_RESTART);
        }
    }




    static if(!is(typeof(SA_NODEFER))) {
        private enum enumMixinStr_SA_NODEFER = `enum SA_NODEFER = 0x40000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_NODEFER); }))) {
            mixin(enumMixinStr_SA_NODEFER);
        }
    }




    static if(!is(typeof(SA_RESETHAND))) {
        private enum enumMixinStr_SA_RESETHAND = `enum SA_RESETHAND = 0x80000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_RESETHAND); }))) {
            mixin(enumMixinStr_SA_RESETHAND);
        }
    }




    static if(!is(typeof(DT_DIR))) {
        private enum enumMixinStr_DT_DIR = `enum DT_DIR = DT_DIR;`;
        static if(is(typeof({ mixin(enumMixinStr_DT_DIR); }))) {
            mixin(enumMixinStr_DT_DIR);
        }
    }




    static if(!is(typeof(SA_INTERRUPT))) {
        private enum enumMixinStr_SA_INTERRUPT = `enum SA_INTERRUPT = 0x20000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_INTERRUPT); }))) {
            mixin(enumMixinStr_SA_INTERRUPT);
        }
    }




    static if(!is(typeof(SA_NOMASK))) {
        private enum enumMixinStr_SA_NOMASK = `enum SA_NOMASK = 0x40000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_NOMASK); }))) {
            mixin(enumMixinStr_SA_NOMASK);
        }
    }




    static if(!is(typeof(SA_ONESHOT))) {
        private enum enumMixinStr_SA_ONESHOT = `enum SA_ONESHOT = 0x80000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_ONESHOT); }))) {
            mixin(enumMixinStr_SA_ONESHOT);
        }
    }




    static if(!is(typeof(SA_STACK))) {
        private enum enumMixinStr_SA_STACK = `enum SA_STACK = 0x08000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SA_STACK); }))) {
            mixin(enumMixinStr_SA_STACK);
        }
    }




    static if(!is(typeof(SIG_BLOCK))) {
        private enum enumMixinStr_SIG_BLOCK = `enum SIG_BLOCK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_BLOCK); }))) {
            mixin(enumMixinStr_SIG_BLOCK);
        }
    }




    static if(!is(typeof(SIG_UNBLOCK))) {
        private enum enumMixinStr_SIG_UNBLOCK = `enum SIG_UNBLOCK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_UNBLOCK); }))) {
            mixin(enumMixinStr_SIG_UNBLOCK);
        }
    }




    static if(!is(typeof(SIG_SETMASK))) {
        private enum enumMixinStr_SIG_SETMASK = `enum SIG_SETMASK = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_SETMASK); }))) {
            mixin(enumMixinStr_SIG_SETMASK);
        }
    }




    static if(!is(typeof(_BITS_SIGCONTEXT_H))) {
        private enum enumMixinStr__BITS_SIGCONTEXT_H = `enum _BITS_SIGCONTEXT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SIGCONTEXT_H); }))) {
            mixin(enumMixinStr__BITS_SIGCONTEXT_H);
        }
    }




    static if(!is(typeof(DT_CHR))) {
        private enum enumMixinStr_DT_CHR = `enum DT_CHR = DT_CHR;`;
        static if(is(typeof({ mixin(enumMixinStr_DT_CHR); }))) {
            mixin(enumMixinStr_DT_CHR);
        }
    }




    static if(!is(typeof(DT_FIFO))) {
        private enum enumMixinStr_DT_FIFO = `enum DT_FIFO = DT_FIFO;`;
        static if(is(typeof({ mixin(enumMixinStr_DT_FIFO); }))) {
            mixin(enumMixinStr_DT_FIFO);
        }
    }




    static if(!is(typeof(FP_XSTATE_MAGIC1))) {
        private enum enumMixinStr_FP_XSTATE_MAGIC1 = `enum FP_XSTATE_MAGIC1 = 0x46505853U;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_XSTATE_MAGIC1); }))) {
            mixin(enumMixinStr_FP_XSTATE_MAGIC1);
        }
    }




    static if(!is(typeof(FP_XSTATE_MAGIC2))) {
        private enum enumMixinStr_FP_XSTATE_MAGIC2 = `enum FP_XSTATE_MAGIC2 = 0x46505845U;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_XSTATE_MAGIC2); }))) {
            mixin(enumMixinStr_FP_XSTATE_MAGIC2);
        }
    }




    static if(!is(typeof(FP_XSTATE_MAGIC2_SIZE))) {
        private enum enumMixinStr_FP_XSTATE_MAGIC2_SIZE = `enum FP_XSTATE_MAGIC2_SIZE = ( 0x46505845U ) .sizeof;`;
        static if(is(typeof({ mixin(enumMixinStr_FP_XSTATE_MAGIC2_SIZE); }))) {
            mixin(enumMixinStr_FP_XSTATE_MAGIC2_SIZE);
        }
    }




    static if(!is(typeof(DT_UNKNOWN))) {
        private enum enumMixinStr_DT_UNKNOWN = `enum DT_UNKNOWN = DT_UNKNOWN;`;
        static if(is(typeof({ mixin(enumMixinStr_DT_UNKNOWN); }))) {
            mixin(enumMixinStr_DT_UNKNOWN);
        }
    }
    static if(!is(typeof(_DIRENT_H))) {
        private enum enumMixinStr__DIRENT_H = `enum _DIRENT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__DIRENT_H); }))) {
            mixin(enumMixinStr__DIRENT_H);
        }
    }




    static if(!is(typeof(_ALLOCA_H))) {
        private enum enumMixinStr__ALLOCA_H = `enum _ALLOCA_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__ALLOCA_H); }))) {
            mixin(enumMixinStr__ALLOCA_H);
        }
    }
    static if(!is(typeof(_BITS_SIGEVENT_CONSTS_H))) {
        private enum enumMixinStr__BITS_SIGEVENT_CONSTS_H = `enum _BITS_SIGEVENT_CONSTS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SIGEVENT_CONSTS_H); }))) {
            mixin(enumMixinStr__BITS_SIGEVENT_CONSTS_H);
        }
    }
    static if(!is(typeof(SIGEV_SIGNAL))) {
        private enum enumMixinStr_SIGEV_SIGNAL = `enum SIGEV_SIGNAL = SIGEV_SIGNAL;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGEV_SIGNAL); }))) {
            mixin(enumMixinStr_SIGEV_SIGNAL);
        }
    }




    static if(!is(typeof(SIGEV_NONE))) {
        private enum enumMixinStr_SIGEV_NONE = `enum SIGEV_NONE = SIGEV_NONE;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGEV_NONE); }))) {
            mixin(enumMixinStr_SIGEV_NONE);
        }
    }




    static if(!is(typeof(SIGEV_THREAD))) {
        private enum enumMixinStr_SIGEV_THREAD = `enum SIGEV_THREAD = SIGEV_THREAD;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGEV_THREAD); }))) {
            mixin(enumMixinStr_SIGEV_THREAD);
        }
    }




    static if(!is(typeof(SIGEV_THREAD_ID))) {
        private enum enumMixinStr_SIGEV_THREAD_ID = `enum SIGEV_THREAD_ID = SIGEV_THREAD_ID;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGEV_THREAD_ID); }))) {
            mixin(enumMixinStr_SIGEV_THREAD_ID);
        }
    }




    static if(!is(typeof(_BITS_SIGINFO_ARCH_H))) {
        private enum enumMixinStr__BITS_SIGINFO_ARCH_H = `enum _BITS_SIGINFO_ARCH_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SIGINFO_ARCH_H); }))) {
            mixin(enumMixinStr__BITS_SIGINFO_ARCH_H);
        }
    }




    static if(!is(typeof(GARROW_TYPE_RECORD_BATCH_FILE_WRITER))) {
        private enum enumMixinStr_GARROW_TYPE_RECORD_BATCH_FILE_WRITER = `enum GARROW_TYPE_RECORD_BATCH_FILE_WRITER = ( garrow_record_batch_file_writer_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_FILE_WRITER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_FILE_WRITER);
        }
    }






    static if(!is(typeof(_BITS_SIGINFO_CONSTS_H))) {
        private enum enumMixinStr__BITS_SIGINFO_CONSTS_H = `enum _BITS_SIGINFO_CONSTS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SIGINFO_CONSTS_H); }))) {
            mixin(enumMixinStr__BITS_SIGINFO_CONSTS_H);
        }
    }
    static if(!is(typeof(__SI_ASYNCIO_AFTER_SIGIO))) {
        private enum enumMixinStr___SI_ASYNCIO_AFTER_SIGIO = `enum __SI_ASYNCIO_AFTER_SIGIO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___SI_ASYNCIO_AFTER_SIGIO); }))) {
            mixin(enumMixinStr___SI_ASYNCIO_AFTER_SIGIO);
        }
    }
    static if(!is(typeof(SI_ASYNCNL))) {
        private enum enumMixinStr_SI_ASYNCNL = `enum SI_ASYNCNL = SI_ASYNCNL;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_ASYNCNL); }))) {
            mixin(enumMixinStr_SI_ASYNCNL);
        }
    }




    static if(!is(typeof(SI_TKILL))) {
        private enum enumMixinStr_SI_TKILL = `enum SI_TKILL = SI_TKILL;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_TKILL); }))) {
            mixin(enumMixinStr_SI_TKILL);
        }
    }




    static if(!is(typeof(SI_SIGIO))) {
        private enum enumMixinStr_SI_SIGIO = `enum SI_SIGIO = SI_SIGIO;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_SIGIO); }))) {
            mixin(enumMixinStr_SI_SIGIO);
        }
    }




    static if(!is(typeof(SI_ASYNCIO))) {
        private enum enumMixinStr_SI_ASYNCIO = `enum SI_ASYNCIO = SI_ASYNCIO;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_ASYNCIO); }))) {
            mixin(enumMixinStr_SI_ASYNCIO);
        }
    }




    static if(!is(typeof(SI_MESGQ))) {
        private enum enumMixinStr_SI_MESGQ = `enum SI_MESGQ = SI_MESGQ;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_MESGQ); }))) {
            mixin(enumMixinStr_SI_MESGQ);
        }
    }




    static if(!is(typeof(SI_TIMER))) {
        private enum enumMixinStr_SI_TIMER = `enum SI_TIMER = SI_TIMER;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_TIMER); }))) {
            mixin(enumMixinStr_SI_TIMER);
        }
    }




    static if(!is(typeof(SI_QUEUE))) {
        private enum enumMixinStr_SI_QUEUE = `enum SI_QUEUE = SI_QUEUE;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_QUEUE); }))) {
            mixin(enumMixinStr_SI_QUEUE);
        }
    }




    static if(!is(typeof(SI_USER))) {
        private enum enumMixinStr_SI_USER = `enum SI_USER = SI_USER;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_USER); }))) {
            mixin(enumMixinStr_SI_USER);
        }
    }




    static if(!is(typeof(SI_KERNEL))) {
        private enum enumMixinStr_SI_KERNEL = `enum SI_KERNEL = SI_KERNEL;`;
        static if(is(typeof({ mixin(enumMixinStr_SI_KERNEL); }))) {
            mixin(enumMixinStr_SI_KERNEL);
        }
    }




    static if(!is(typeof(GARROW_TYPE_RECORD_BATCH_STREAM_WRITER))) {
        private enum enumMixinStr_GARROW_TYPE_RECORD_BATCH_STREAM_WRITER = `enum GARROW_TYPE_RECORD_BATCH_STREAM_WRITER = ( garrow_record_batch_stream_writer_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_STREAM_WRITER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_STREAM_WRITER);
        }
    }






    static if(!is(typeof(ILL_ILLOPC))) {
        private enum enumMixinStr_ILL_ILLOPC = `enum ILL_ILLOPC = ILL_ILLOPC;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_ILLOPC); }))) {
            mixin(enumMixinStr_ILL_ILLOPC);
        }
    }




    static if(!is(typeof(ILL_ILLOPN))) {
        private enum enumMixinStr_ILL_ILLOPN = `enum ILL_ILLOPN = ILL_ILLOPN;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_ILLOPN); }))) {
            mixin(enumMixinStr_ILL_ILLOPN);
        }
    }




    static if(!is(typeof(ILL_ILLADR))) {
        private enum enumMixinStr_ILL_ILLADR = `enum ILL_ILLADR = ILL_ILLADR;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_ILLADR); }))) {
            mixin(enumMixinStr_ILL_ILLADR);
        }
    }




    static if(!is(typeof(ILL_ILLTRP))) {
        private enum enumMixinStr_ILL_ILLTRP = `enum ILL_ILLTRP = ILL_ILLTRP;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_ILLTRP); }))) {
            mixin(enumMixinStr_ILL_ILLTRP);
        }
    }




    static if(!is(typeof(ILL_PRVOPC))) {
        private enum enumMixinStr_ILL_PRVOPC = `enum ILL_PRVOPC = ILL_PRVOPC;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_PRVOPC); }))) {
            mixin(enumMixinStr_ILL_PRVOPC);
        }
    }




    static if(!is(typeof(ILL_PRVREG))) {
        private enum enumMixinStr_ILL_PRVREG = `enum ILL_PRVREG = ILL_PRVREG;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_PRVREG); }))) {
            mixin(enumMixinStr_ILL_PRVREG);
        }
    }




    static if(!is(typeof(ILL_COPROC))) {
        private enum enumMixinStr_ILL_COPROC = `enum ILL_COPROC = ILL_COPROC;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_COPROC); }))) {
            mixin(enumMixinStr_ILL_COPROC);
        }
    }




    static if(!is(typeof(ILL_BADSTK))) {
        private enum enumMixinStr_ILL_BADSTK = `enum ILL_BADSTK = ILL_BADSTK;`;
        static if(is(typeof({ mixin(enumMixinStr_ILL_BADSTK); }))) {
            mixin(enumMixinStr_ILL_BADSTK);
        }
    }






    static if(!is(typeof(FPE_INTDIV))) {
        private enum enumMixinStr_FPE_INTDIV = `enum FPE_INTDIV = FPE_INTDIV;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_INTDIV); }))) {
            mixin(enumMixinStr_FPE_INTDIV);
        }
    }




    static if(!is(typeof(FPE_INTOVF))) {
        private enum enumMixinStr_FPE_INTOVF = `enum FPE_INTOVF = FPE_INTOVF;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_INTOVF); }))) {
            mixin(enumMixinStr_FPE_INTOVF);
        }
    }




    static if(!is(typeof(FPE_FLTDIV))) {
        private enum enumMixinStr_FPE_FLTDIV = `enum FPE_FLTDIV = FPE_FLTDIV;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTDIV); }))) {
            mixin(enumMixinStr_FPE_FLTDIV);
        }
    }




    static if(!is(typeof(FPE_FLTOVF))) {
        private enum enumMixinStr_FPE_FLTOVF = `enum FPE_FLTOVF = FPE_FLTOVF;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTOVF); }))) {
            mixin(enumMixinStr_FPE_FLTOVF);
        }
    }




    static if(!is(typeof(FPE_FLTUND))) {
        private enum enumMixinStr_FPE_FLTUND = `enum FPE_FLTUND = FPE_FLTUND;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTUND); }))) {
            mixin(enumMixinStr_FPE_FLTUND);
        }
    }




    static if(!is(typeof(FPE_FLTRES))) {
        private enum enumMixinStr_FPE_FLTRES = `enum FPE_FLTRES = FPE_FLTRES;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTRES); }))) {
            mixin(enumMixinStr_FPE_FLTRES);
        }
    }




    static if(!is(typeof(FPE_FLTINV))) {
        private enum enumMixinStr_FPE_FLTINV = `enum FPE_FLTINV = FPE_FLTINV;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTINV); }))) {
            mixin(enumMixinStr_FPE_FLTINV);
        }
    }




    static if(!is(typeof(FPE_FLTSUB))) {
        private enum enumMixinStr_FPE_FLTSUB = `enum FPE_FLTSUB = FPE_FLTSUB;`;
        static if(is(typeof({ mixin(enumMixinStr_FPE_FLTSUB); }))) {
            mixin(enumMixinStr_FPE_FLTSUB);
        }
    }






    static if(!is(typeof(SEGV_MAPERR))) {
        private enum enumMixinStr_SEGV_MAPERR = `enum SEGV_MAPERR = SEGV_MAPERR;`;
        static if(is(typeof({ mixin(enumMixinStr_SEGV_MAPERR); }))) {
            mixin(enumMixinStr_SEGV_MAPERR);
        }
    }




    static if(!is(typeof(SEGV_ACCERR))) {
        private enum enumMixinStr_SEGV_ACCERR = `enum SEGV_ACCERR = SEGV_ACCERR;`;
        static if(is(typeof({ mixin(enumMixinStr_SEGV_ACCERR); }))) {
            mixin(enumMixinStr_SEGV_ACCERR);
        }
    }




    static if(!is(typeof(SEGV_BNDERR))) {
        private enum enumMixinStr_SEGV_BNDERR = `enum SEGV_BNDERR = SEGV_BNDERR;`;
        static if(is(typeof({ mixin(enumMixinStr_SEGV_BNDERR); }))) {
            mixin(enumMixinStr_SEGV_BNDERR);
        }
    }




    static if(!is(typeof(SEGV_PKUERR))) {
        private enum enumMixinStr_SEGV_PKUERR = `enum SEGV_PKUERR = SEGV_PKUERR;`;
        static if(is(typeof({ mixin(enumMixinStr_SEGV_PKUERR); }))) {
            mixin(enumMixinStr_SEGV_PKUERR);
        }
    }






    static if(!is(typeof(BUS_ADRALN))) {
        private enum enumMixinStr_BUS_ADRALN = `enum BUS_ADRALN = BUS_ADRALN;`;
        static if(is(typeof({ mixin(enumMixinStr_BUS_ADRALN); }))) {
            mixin(enumMixinStr_BUS_ADRALN);
        }
    }




    static if(!is(typeof(BUS_ADRERR))) {
        private enum enumMixinStr_BUS_ADRERR = `enum BUS_ADRERR = BUS_ADRERR;`;
        static if(is(typeof({ mixin(enumMixinStr_BUS_ADRERR); }))) {
            mixin(enumMixinStr_BUS_ADRERR);
        }
    }




    static if(!is(typeof(BUS_OBJERR))) {
        private enum enumMixinStr_BUS_OBJERR = `enum BUS_OBJERR = BUS_OBJERR;`;
        static if(is(typeof({ mixin(enumMixinStr_BUS_OBJERR); }))) {
            mixin(enumMixinStr_BUS_OBJERR);
        }
    }




    static if(!is(typeof(BUS_MCEERR_AR))) {
        private enum enumMixinStr_BUS_MCEERR_AR = `enum BUS_MCEERR_AR = BUS_MCEERR_AR;`;
        static if(is(typeof({ mixin(enumMixinStr_BUS_MCEERR_AR); }))) {
            mixin(enumMixinStr_BUS_MCEERR_AR);
        }
    }




    static if(!is(typeof(BUS_MCEERR_AO))) {
        private enum enumMixinStr_BUS_MCEERR_AO = `enum BUS_MCEERR_AO = BUS_MCEERR_AO;`;
        static if(is(typeof({ mixin(enumMixinStr_BUS_MCEERR_AO); }))) {
            mixin(enumMixinStr_BUS_MCEERR_AO);
        }
    }






    static if(!is(typeof(GARROW_TYPE_RECORD_BATCH_WRITER))) {
        private enum enumMixinStr_GARROW_TYPE_RECORD_BATCH_WRITER = `enum GARROW_TYPE_RECORD_BATCH_WRITER = ( garrow_record_batch_writer_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_WRITER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_WRITER);
        }
    }




    static if(!is(typeof(CLD_EXITED))) {
        private enum enumMixinStr_CLD_EXITED = `enum CLD_EXITED = CLD_EXITED;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_EXITED); }))) {
            mixin(enumMixinStr_CLD_EXITED);
        }
    }




    static if(!is(typeof(CLD_KILLED))) {
        private enum enumMixinStr_CLD_KILLED = `enum CLD_KILLED = CLD_KILLED;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_KILLED); }))) {
            mixin(enumMixinStr_CLD_KILLED);
        }
    }




    static if(!is(typeof(CLD_DUMPED))) {
        private enum enumMixinStr_CLD_DUMPED = `enum CLD_DUMPED = CLD_DUMPED;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_DUMPED); }))) {
            mixin(enumMixinStr_CLD_DUMPED);
        }
    }




    static if(!is(typeof(CLD_TRAPPED))) {
        private enum enumMixinStr_CLD_TRAPPED = `enum CLD_TRAPPED = CLD_TRAPPED;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_TRAPPED); }))) {
            mixin(enumMixinStr_CLD_TRAPPED);
        }
    }




    static if(!is(typeof(CLD_STOPPED))) {
        private enum enumMixinStr_CLD_STOPPED = `enum CLD_STOPPED = CLD_STOPPED;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_STOPPED); }))) {
            mixin(enumMixinStr_CLD_STOPPED);
        }
    }




    static if(!is(typeof(CLD_CONTINUED))) {
        private enum enumMixinStr_CLD_CONTINUED = `enum CLD_CONTINUED = CLD_CONTINUED;`;
        static if(is(typeof({ mixin(enumMixinStr_CLD_CONTINUED); }))) {
            mixin(enumMixinStr_CLD_CONTINUED);
        }
    }




    static if(!is(typeof(GARROW_TYPE_WRITABLE))) {
        private enum enumMixinStr_GARROW_TYPE_WRITABLE = `enum GARROW_TYPE_WRITABLE = ( garrow_writable_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_WRITABLE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_WRITABLE);
        }
    }




    static if(!is(typeof(POLL_IN))) {
        private enum enumMixinStr_POLL_IN = `enum POLL_IN = POLL_IN;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_IN); }))) {
            mixin(enumMixinStr_POLL_IN);
        }
    }




    static if(!is(typeof(POLL_OUT))) {
        private enum enumMixinStr_POLL_OUT = `enum POLL_OUT = POLL_OUT;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_OUT); }))) {
            mixin(enumMixinStr_POLL_OUT);
        }
    }




    static if(!is(typeof(POLL_MSG))) {
        private enum enumMixinStr_POLL_MSG = `enum POLL_MSG = POLL_MSG;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_MSG); }))) {
            mixin(enumMixinStr_POLL_MSG);
        }
    }




    static if(!is(typeof(POLL_ERR))) {
        private enum enumMixinStr_POLL_ERR = `enum POLL_ERR = POLL_ERR;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_ERR); }))) {
            mixin(enumMixinStr_POLL_ERR);
        }
    }




    static if(!is(typeof(POLL_PRI))) {
        private enum enumMixinStr_POLL_PRI = `enum POLL_PRI = POLL_PRI;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_PRI); }))) {
            mixin(enumMixinStr_POLL_PRI);
        }
    }




    static if(!is(typeof(POLL_HUP))) {
        private enum enumMixinStr_POLL_HUP = `enum POLL_HUP = POLL_HUP;`;
        static if(is(typeof({ mixin(enumMixinStr_POLL_HUP); }))) {
            mixin(enumMixinStr_POLL_HUP);
        }
    }




    static if(!is(typeof(_BITS_SIGNUM_GENERIC_H))) {
        private enum enumMixinStr__BITS_SIGNUM_GENERIC_H = `enum _BITS_SIGNUM_GENERIC_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SIGNUM_GENERIC_H); }))) {
            mixin(enumMixinStr__BITS_SIGNUM_GENERIC_H);
        }
    }




    static if(!is(typeof(GARROW_TYPE_WRITABLE_FILE))) {
        private enum enumMixinStr_GARROW_TYPE_WRITABLE_FILE = `enum GARROW_TYPE_WRITABLE_FILE = ( garrow_writable_file_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_WRITABLE_FILE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_WRITABLE_FILE);
        }
    }




    static if(!is(typeof(SIG_ERR))) {
        private enum enumMixinStr_SIG_ERR = `enum SIG_ERR = ( ( __sighandler_t ) - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_ERR); }))) {
            mixin(enumMixinStr_SIG_ERR);
        }
    }




    static if(!is(typeof(SIG_DFL))) {
        private enum enumMixinStr_SIG_DFL = `enum SIG_DFL = ( ( __sighandler_t ) 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_DFL); }))) {
            mixin(enumMixinStr_SIG_DFL);
        }
    }




    static if(!is(typeof(SIG_IGN))) {
        private enum enumMixinStr_SIG_IGN = `enum SIG_IGN = ( ( __sighandler_t ) 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_IGN); }))) {
            mixin(enumMixinStr_SIG_IGN);
        }
    }




    static if(!is(typeof(SIGINT))) {
        private enum enumMixinStr_SIGINT = `enum SIGINT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGINT); }))) {
            mixin(enumMixinStr_SIGINT);
        }
    }




    static if(!is(typeof(SIGILL))) {
        private enum enumMixinStr_SIGILL = `enum SIGILL = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGILL); }))) {
            mixin(enumMixinStr_SIGILL);
        }
    }




    static if(!is(typeof(SIGABRT))) {
        private enum enumMixinStr_SIGABRT = `enum SIGABRT = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGABRT); }))) {
            mixin(enumMixinStr_SIGABRT);
        }
    }




    static if(!is(typeof(SIGFPE))) {
        private enum enumMixinStr_SIGFPE = `enum SIGFPE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGFPE); }))) {
            mixin(enumMixinStr_SIGFPE);
        }
    }




    static if(!is(typeof(SIGSEGV))) {
        private enum enumMixinStr_SIGSEGV = `enum SIGSEGV = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGSEGV); }))) {
            mixin(enumMixinStr_SIGSEGV);
        }
    }




    static if(!is(typeof(SIGTERM))) {
        private enum enumMixinStr_SIGTERM = `enum SIGTERM = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGTERM); }))) {
            mixin(enumMixinStr_SIGTERM);
        }
    }




    static if(!is(typeof(SIGHUP))) {
        private enum enumMixinStr_SIGHUP = `enum SIGHUP = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGHUP); }))) {
            mixin(enumMixinStr_SIGHUP);
        }
    }




    static if(!is(typeof(SIGQUIT))) {
        private enum enumMixinStr_SIGQUIT = `enum SIGQUIT = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGQUIT); }))) {
            mixin(enumMixinStr_SIGQUIT);
        }
    }




    static if(!is(typeof(SIGTRAP))) {
        private enum enumMixinStr_SIGTRAP = `enum SIGTRAP = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGTRAP); }))) {
            mixin(enumMixinStr_SIGTRAP);
        }
    }




    static if(!is(typeof(SIGKILL))) {
        private enum enumMixinStr_SIGKILL = `enum SIGKILL = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGKILL); }))) {
            mixin(enumMixinStr_SIGKILL);
        }
    }




    static if(!is(typeof(SIGBUS))) {
        private enum enumMixinStr_SIGBUS = `enum SIGBUS = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGBUS); }))) {
            mixin(enumMixinStr_SIGBUS);
        }
    }




    static if(!is(typeof(SIGSYS))) {
        private enum enumMixinStr_SIGSYS = `enum SIGSYS = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGSYS); }))) {
            mixin(enumMixinStr_SIGSYS);
        }
    }




    static if(!is(typeof(SIGPIPE))) {
        private enum enumMixinStr_SIGPIPE = `enum SIGPIPE = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGPIPE); }))) {
            mixin(enumMixinStr_SIGPIPE);
        }
    }




    static if(!is(typeof(SIGALRM))) {
        private enum enumMixinStr_SIGALRM = `enum SIGALRM = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGALRM); }))) {
            mixin(enumMixinStr_SIGALRM);
        }
    }




    static if(!is(typeof(SIGURG))) {
        private enum enumMixinStr_SIGURG = `enum SIGURG = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGURG); }))) {
            mixin(enumMixinStr_SIGURG);
        }
    }




    static if(!is(typeof(SIGSTOP))) {
        private enum enumMixinStr_SIGSTOP = `enum SIGSTOP = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGSTOP); }))) {
            mixin(enumMixinStr_SIGSTOP);
        }
    }




    static if(!is(typeof(SIGTSTP))) {
        private enum enumMixinStr_SIGTSTP = `enum SIGTSTP = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGTSTP); }))) {
            mixin(enumMixinStr_SIGTSTP);
        }
    }




    static if(!is(typeof(SIGCONT))) {
        private enum enumMixinStr_SIGCONT = `enum SIGCONT = 19;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGCONT); }))) {
            mixin(enumMixinStr_SIGCONT);
        }
    }




    static if(!is(typeof(SIGCHLD))) {
        private enum enumMixinStr_SIGCHLD = `enum SIGCHLD = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGCHLD); }))) {
            mixin(enumMixinStr_SIGCHLD);
        }
    }




    static if(!is(typeof(SIGTTIN))) {
        private enum enumMixinStr_SIGTTIN = `enum SIGTTIN = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGTTIN); }))) {
            mixin(enumMixinStr_SIGTTIN);
        }
    }




    static if(!is(typeof(SIGTTOU))) {
        private enum enumMixinStr_SIGTTOU = `enum SIGTTOU = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGTTOU); }))) {
            mixin(enumMixinStr_SIGTTOU);
        }
    }




    static if(!is(typeof(SIGPOLL))) {
        private enum enumMixinStr_SIGPOLL = `enum SIGPOLL = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGPOLL); }))) {
            mixin(enumMixinStr_SIGPOLL);
        }
    }




    static if(!is(typeof(SIGXCPU))) {
        private enum enumMixinStr_SIGXCPU = `enum SIGXCPU = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGXCPU); }))) {
            mixin(enumMixinStr_SIGXCPU);
        }
    }




    static if(!is(typeof(SIGXFSZ))) {
        private enum enumMixinStr_SIGXFSZ = `enum SIGXFSZ = 25;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGXFSZ); }))) {
            mixin(enumMixinStr_SIGXFSZ);
        }
    }




    static if(!is(typeof(SIGVTALRM))) {
        private enum enumMixinStr_SIGVTALRM = `enum SIGVTALRM = 26;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGVTALRM); }))) {
            mixin(enumMixinStr_SIGVTALRM);
        }
    }




    static if(!is(typeof(SIGPROF))) {
        private enum enumMixinStr_SIGPROF = `enum SIGPROF = 27;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGPROF); }))) {
            mixin(enumMixinStr_SIGPROF);
        }
    }




    static if(!is(typeof(SIGUSR1))) {
        private enum enumMixinStr_SIGUSR1 = `enum SIGUSR1 = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGUSR1); }))) {
            mixin(enumMixinStr_SIGUSR1);
        }
    }




    static if(!is(typeof(SIGUSR2))) {
        private enum enumMixinStr_SIGUSR2 = `enum SIGUSR2 = 31;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGUSR2); }))) {
            mixin(enumMixinStr_SIGUSR2);
        }
    }




    static if(!is(typeof(SIGWINCH))) {
        private enum enumMixinStr_SIGWINCH = `enum SIGWINCH = 28;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGWINCH); }))) {
            mixin(enumMixinStr_SIGWINCH);
        }
    }




    static if(!is(typeof(SIGIO))) {
        private enum enumMixinStr_SIGIO = `enum SIGIO = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGIO); }))) {
            mixin(enumMixinStr_SIGIO);
        }
    }




    static if(!is(typeof(SIGIOT))) {
        private enum enumMixinStr_SIGIOT = `enum SIGIOT = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGIOT); }))) {
            mixin(enumMixinStr_SIGIOT);
        }
    }




    static if(!is(typeof(SIGCLD))) {
        private enum enumMixinStr_SIGCLD = `enum SIGCLD = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGCLD); }))) {
            mixin(enumMixinStr_SIGCLD);
        }
    }




    static if(!is(typeof(__SIGRTMIN))) {
        private enum enumMixinStr___SIGRTMIN = `enum __SIGRTMIN = 32;`;
        static if(is(typeof({ mixin(enumMixinStr___SIGRTMIN); }))) {
            mixin(enumMixinStr___SIGRTMIN);
        }
    }




    static if(!is(typeof(__SIGRTMAX))) {
        private enum enumMixinStr___SIGRTMAX = `enum __SIGRTMAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr___SIGRTMAX); }))) {
            mixin(enumMixinStr___SIGRTMAX);
        }
    }




    static if(!is(typeof(_NSIG))) {
        private enum enumMixinStr__NSIG = `enum _NSIG = ( 32 + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr__NSIG); }))) {
            mixin(enumMixinStr__NSIG);
        }
    }




    static if(!is(typeof(_BITS_SIGNUM_H))) {
        private enum enumMixinStr__BITS_SIGNUM_H = `enum _BITS_SIGNUM_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SIGNUM_H); }))) {
            mixin(enumMixinStr__BITS_SIGNUM_H);
        }
    }
    static if(!is(typeof(SIGSTKFLT))) {
        private enum enumMixinStr_SIGSTKFLT = `enum SIGSTKFLT = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGSTKFLT); }))) {
            mixin(enumMixinStr_SIGSTKFLT);
        }
    }




    static if(!is(typeof(SIGPWR))) {
        private enum enumMixinStr_SIGPWR = `enum SIGPWR = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGPWR); }))) {
            mixin(enumMixinStr_SIGPWR);
        }
    }




    static if(!is(typeof(_BITS_SIGSTACK_H))) {
        private enum enumMixinStr__BITS_SIGSTACK_H = `enum _BITS_SIGSTACK_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SIGSTACK_H); }))) {
            mixin(enumMixinStr__BITS_SIGSTACK_H);
        }
    }




    static if(!is(typeof(GARROW_DEPRECATED_IN_0_10))) {
        private enum enumMixinStr_GARROW_DEPRECATED_IN_0_10 = `enum GARROW_DEPRECATED_IN_0_10 = GARROW_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_10); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_10);
        }
    }






    static if(!is(typeof(MINSIGSTKSZ))) {
        private enum enumMixinStr_MINSIGSTKSZ = `enum MINSIGSTKSZ = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_MINSIGSTKSZ); }))) {
            mixin(enumMixinStr_MINSIGSTKSZ);
        }
    }




    static if(!is(typeof(SIGSTKSZ))) {
        private enum enumMixinStr_SIGSTKSZ = `enum SIGSTKSZ = 8192;`;
        static if(is(typeof({ mixin(enumMixinStr_SIGSTKSZ); }))) {
            mixin(enumMixinStr_SIGSTKSZ);
        }
    }




    static if(!is(typeof(_BITS_SIGTHREAD_H))) {
        private enum enumMixinStr__BITS_SIGTHREAD_H = `enum _BITS_SIGTHREAD_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SIGTHREAD_H); }))) {
            mixin(enumMixinStr__BITS_SIGTHREAD_H);
        }
    }






    static if(!is(typeof(GARROW_DEPRECATED_IN_0_12))) {
        private enum enumMixinStr_GARROW_DEPRECATED_IN_0_12 = `enum GARROW_DEPRECATED_IN_0_12 = GARROW_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_12); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_12);
        }
    }
    static if(!is(typeof(GARROW_DEPRECATED_IN_0_13))) {
        private enum enumMixinStr_GARROW_DEPRECATED_IN_0_13 = `enum GARROW_DEPRECATED_IN_0_13 = GARROW_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_13); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_13);
        }
    }






    static if(!is(typeof(_BITS_SS_FLAGS_H))) {
        private enum enumMixinStr__BITS_SS_FLAGS_H = `enum _BITS_SS_FLAGS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SS_FLAGS_H); }))) {
            mixin(enumMixinStr__BITS_SS_FLAGS_H);
        }
    }






    static if(!is(typeof(GARROW_DEPRECATED_IN_0_14))) {
        private enum enumMixinStr_GARROW_DEPRECATED_IN_0_14 = `enum GARROW_DEPRECATED_IN_0_14 = GARROW_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_14); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_14);
        }
    }






    static if(!is(typeof(SS_ONSTACK))) {
        private enum enumMixinStr_SS_ONSTACK = `enum SS_ONSTACK = SS_ONSTACK;`;
        static if(is(typeof({ mixin(enumMixinStr_SS_ONSTACK); }))) {
            mixin(enumMixinStr_SS_ONSTACK);
        }
    }




    static if(!is(typeof(SS_DISABLE))) {
        private enum enumMixinStr_SS_DISABLE = `enum SS_DISABLE = SS_DISABLE;`;
        static if(is(typeof({ mixin(enumMixinStr_SS_DISABLE); }))) {
            mixin(enumMixinStr_SS_DISABLE);
        }
    }




    static if(!is(typeof(_BITS_STDINT_INTN_H))) {
        private enum enumMixinStr__BITS_STDINT_INTN_H = `enum _BITS_STDINT_INTN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_STDINT_INTN_H); }))) {
            mixin(enumMixinStr__BITS_STDINT_INTN_H);
        }
    }






    static if(!is(typeof(GARROW_DEPRECATED_IN_0_15))) {
        private enum enumMixinStr_GARROW_DEPRECATED_IN_0_15 = `enum GARROW_DEPRECATED_IN_0_15 = GARROW_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_15); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_15);
        }
    }
    static if(!is(typeof(GARROW_DEPRECATED_IN_0_16))) {
        private enum enumMixinStr_GARROW_DEPRECATED_IN_0_16 = `enum GARROW_DEPRECATED_IN_0_16 = GARROW_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_16); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_16);
        }
    }






    static if(!is(typeof(_BITS_SYSMACROS_H))) {
        private enum enumMixinStr__BITS_SYSMACROS_H = `enum _BITS_SYSMACROS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SYSMACROS_H); }))) {
            mixin(enumMixinStr__BITS_SYSMACROS_H);
        }
    }






    static if(!is(typeof(__SYSMACROS_DECLARE_MAJOR))) {
        private enum enumMixinStr___SYSMACROS_DECLARE_MAJOR = `enum __SYSMACROS_DECLARE_MAJOR = ( DECL_TEMPL ) DECL_TEMPL ( unsigned int , major , ( __dev_t __dev ) );`;
        static if(is(typeof({ mixin(enumMixinStr___SYSMACROS_DECLARE_MAJOR); }))) {
            mixin(enumMixinStr___SYSMACROS_DECLARE_MAJOR);
        }
    }




    static if(!is(typeof(__SYSMACROS_DEFINE_MAJOR))) {
        private enum enumMixinStr___SYSMACROS_DEFINE_MAJOR = `enum __SYSMACROS_DEFINE_MAJOR = ( DECL_TEMPL ) ( DECL_TEMPL ) DECL_TEMPL ( unsigned int , major , ( __dev_t __dev ) ) ( DECL_TEMPL ) { unsigned int __major ; __major = ( ( __dev & cast( __dev_t ) 0x00000000000fff00u ) >> 8 ) ; __major |= ( ( __dev & cast( __dev_t ) 0xfffff00000000000u ) >> 32 ) ; return __major ; };`;
        static if(is(typeof({ mixin(enumMixinStr___SYSMACROS_DEFINE_MAJOR); }))) {
            mixin(enumMixinStr___SYSMACROS_DEFINE_MAJOR);
        }
    }




    static if(!is(typeof(__SYSMACROS_DECLARE_MINOR))) {
        private enum enumMixinStr___SYSMACROS_DECLARE_MINOR = `enum __SYSMACROS_DECLARE_MINOR = ( DECL_TEMPL ) DECL_TEMPL ( unsigned int , minor , ( __dev_t __dev ) );`;
        static if(is(typeof({ mixin(enumMixinStr___SYSMACROS_DECLARE_MINOR); }))) {
            mixin(enumMixinStr___SYSMACROS_DECLARE_MINOR);
        }
    }




    static if(!is(typeof(__SYSMACROS_DEFINE_MINOR))) {
        private enum enumMixinStr___SYSMACROS_DEFINE_MINOR = `enum __SYSMACROS_DEFINE_MINOR = ( DECL_TEMPL ) ( DECL_TEMPL ) DECL_TEMPL ( unsigned int , minor , ( __dev_t __dev ) ) ( DECL_TEMPL ) { unsigned int __minor ; __minor = ( ( __dev & cast( __dev_t ) 0x00000000000000ffu ) >> 0 ) ; __minor |= ( ( __dev & cast( __dev_t ) 0x00000ffffff00000u ) >> 12 ) ; return __minor ; };`;
        static if(is(typeof({ mixin(enumMixinStr___SYSMACROS_DEFINE_MINOR); }))) {
            mixin(enumMixinStr___SYSMACROS_DEFINE_MINOR);
        }
    }




    static if(!is(typeof(__SYSMACROS_DECLARE_MAKEDEV))) {
        private enum enumMixinStr___SYSMACROS_DECLARE_MAKEDEV = `enum __SYSMACROS_DECLARE_MAKEDEV = ( DECL_TEMPL ) DECL_TEMPL ( __dev_t , makedev , ( unsigned int __major , unsigned int __minor ) );`;
        static if(is(typeof({ mixin(enumMixinStr___SYSMACROS_DECLARE_MAKEDEV); }))) {
            mixin(enumMixinStr___SYSMACROS_DECLARE_MAKEDEV);
        }
    }




    static if(!is(typeof(__SYSMACROS_DEFINE_MAKEDEV))) {
        private enum enumMixinStr___SYSMACROS_DEFINE_MAKEDEV = `enum __SYSMACROS_DEFINE_MAKEDEV = ( DECL_TEMPL ) ( DECL_TEMPL ) DECL_TEMPL ( __dev_t , makedev , ( unsigned int __major , unsigned int __minor ) ) ( DECL_TEMPL ) { __dev_t __dev ; __dev = ( ( cast( __dev_t ) ( __major & 0x00000fffu ) ) << 8 ) ; __dev |= ( ( cast( __dev_t ) ( __major & 0xfffff000u ) ) << 32 ) ; __dev |= ( ( cast( __dev_t ) ( __minor & 0x000000ffu ) ) << 0 ) ; __dev |= ( ( cast( __dev_t ) ( __minor & 0xffffff00u ) ) << 12 ) ; return __dev ; };`;
        static if(is(typeof({ mixin(enumMixinStr___SYSMACROS_DEFINE_MAKEDEV); }))) {
            mixin(enumMixinStr___SYSMACROS_DEFINE_MAKEDEV);
        }
    }




    static if(!is(typeof(_THREAD_SHARED_TYPES_H))) {
        private enum enumMixinStr__THREAD_SHARED_TYPES_H = `enum _THREAD_SHARED_TYPES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__THREAD_SHARED_TYPES_H); }))) {
            mixin(enumMixinStr__THREAD_SHARED_TYPES_H);
        }
    }




    static if(!is(typeof(GARROW_DEPRECATED_IN_0_17))) {
        private enum enumMixinStr_GARROW_DEPRECATED_IN_0_17 = `enum GARROW_DEPRECATED_IN_0_17 = GARROW_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_17); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED_IN_0_17);
        }
    }
    static if(!is(typeof(GARROW_DEPRECATED_IN_1_0))) {
        private enum enumMixinStr_GARROW_DEPRECATED_IN_1_0 = `enum GARROW_DEPRECATED_IN_1_0 = GARROW_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED_IN_1_0); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED_IN_1_0);
        }
    }
    static if(!is(typeof(__PTHREAD_SPINS_DATA))) {
        private enum enumMixinStr___PTHREAD_SPINS_DATA = `enum __PTHREAD_SPINS_DATA = short __spins ; short __elision;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_SPINS_DATA); }))) {
            mixin(enumMixinStr___PTHREAD_SPINS_DATA);
        }
    }




    static if(!is(typeof(__PTHREAD_SPINS))) {
        private enum enumMixinStr___PTHREAD_SPINS = `enum __PTHREAD_SPINS = 0 , 0;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_SPINS); }))) {
            mixin(enumMixinStr___PTHREAD_SPINS);
        }
    }




    static if(!is(typeof(GARROW_DEPRECATED_IN_2_0))) {
        private enum enumMixinStr_GARROW_DEPRECATED_IN_2_0 = `enum GARROW_DEPRECATED_IN_2_0 = GARROW_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED_IN_2_0); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED_IN_2_0);
        }
    }
    static if(!is(typeof(GARROW_DEPRECATED_IN_3_0))) {
        private enum enumMixinStr_GARROW_DEPRECATED_IN_3_0 = `enum GARROW_DEPRECATED_IN_3_0 = GARROW_DEPRECATED;`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED_IN_3_0); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED_IN_3_0);
        }
    }






    static if(!is(typeof(GARROW_VERSION_MAX_ALLOWED))) {
        private enum enumMixinStr_GARROW_VERSION_MAX_ALLOWED = `enum GARROW_VERSION_MAX_ALLOWED = ( ( GARROW_VERSION_MAJOR ) << 16 | ( GARROW_VERSION_MINOR ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_MAX_ALLOWED); }))) {
            mixin(enumMixinStr_GARROW_VERSION_MAX_ALLOWED);
        }
    }




    static if(!is(typeof(GARROW_VERSION_MIN_REQUIRED))) {
        private enum enumMixinStr_GARROW_VERSION_MIN_REQUIRED = `enum GARROW_VERSION_MIN_REQUIRED = ( ( GARROW_VERSION_MAJOR ) << 16 | ( GARROW_VERSION_MINOR ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_MIN_REQUIRED); }))) {
            mixin(enumMixinStr_GARROW_VERSION_MIN_REQUIRED);
        }
    }




    static if(!is(typeof(__PTHREAD_MUTEX_HAVE_PREV))) {
        private enum enumMixinStr___PTHREAD_MUTEX_HAVE_PREV = `enum __PTHREAD_MUTEX_HAVE_PREV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_MUTEX_HAVE_PREV); }))) {
            mixin(enumMixinStr___PTHREAD_MUTEX_HAVE_PREV);
        }
    }




    static if(!is(typeof(GARROW_VERSION_0_10))) {
        private enum enumMixinStr_GARROW_VERSION_0_10 = `enum GARROW_VERSION_0_10 = ( ( 0 ) << 16 | ( 10 ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_0_10); }))) {
            mixin(enumMixinStr_GARROW_VERSION_0_10);
        }
    }




    static if(!is(typeof(GARROW_VERSION_0_12))) {
        private enum enumMixinStr_GARROW_VERSION_0_12 = `enum GARROW_VERSION_0_12 = ( ( 0 ) << 16 | ( 12 ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_0_12); }))) {
            mixin(enumMixinStr_GARROW_VERSION_0_12);
        }
    }




    static if(!is(typeof(GARROW_VERSION_0_13))) {
        private enum enumMixinStr_GARROW_VERSION_0_13 = `enum GARROW_VERSION_0_13 = ( ( 0 ) << 16 | ( 13 ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_0_13); }))) {
            mixin(enumMixinStr_GARROW_VERSION_0_13);
        }
    }




    static if(!is(typeof(_BITS_TIME_H))) {
        private enum enumMixinStr__BITS_TIME_H = `enum _BITS_TIME_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TIME_H); }))) {
            mixin(enumMixinStr__BITS_TIME_H);
        }
    }




    static if(!is(typeof(GARROW_VERSION_0_14))) {
        private enum enumMixinStr_GARROW_VERSION_0_14 = `enum GARROW_VERSION_0_14 = ( ( 0 ) << 16 | ( 14 ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_0_14); }))) {
            mixin(enumMixinStr_GARROW_VERSION_0_14);
        }
    }




    static if(!is(typeof(CLOCKS_PER_SEC))) {
        private enum enumMixinStr_CLOCKS_PER_SEC = `enum CLOCKS_PER_SEC = ( cast( __clock_t ) 1000000 );`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCKS_PER_SEC); }))) {
            mixin(enumMixinStr_CLOCKS_PER_SEC);
        }
    }




    static if(!is(typeof(GARROW_VERSION_0_15))) {
        private enum enumMixinStr_GARROW_VERSION_0_15 = `enum GARROW_VERSION_0_15 = ( ( 0 ) << 16 | ( 15 ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_0_15); }))) {
            mixin(enumMixinStr_GARROW_VERSION_0_15);
        }
    }




    static if(!is(typeof(GARROW_VERSION_0_17))) {
        private enum enumMixinStr_GARROW_VERSION_0_17 = `enum GARROW_VERSION_0_17 = ( ( 0 ) << 16 | ( 17 ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_0_17); }))) {
            mixin(enumMixinStr_GARROW_VERSION_0_17);
        }
    }




    static if(!is(typeof(GARROW_VERSION_1_0))) {
        private enum enumMixinStr_GARROW_VERSION_1_0 = `enum GARROW_VERSION_1_0 = ( ( 1 ) << 16 | ( 0 ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_1_0); }))) {
            mixin(enumMixinStr_GARROW_VERSION_1_0);
        }
    }




    static if(!is(typeof(CLOCK_REALTIME))) {
        private enum enumMixinStr_CLOCK_REALTIME = `enum CLOCK_REALTIME = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_REALTIME); }))) {
            mixin(enumMixinStr_CLOCK_REALTIME);
        }
    }




    static if(!is(typeof(CLOCK_MONOTONIC))) {
        private enum enumMixinStr_CLOCK_MONOTONIC = `enum CLOCK_MONOTONIC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_MONOTONIC); }))) {
            mixin(enumMixinStr_CLOCK_MONOTONIC);
        }
    }




    static if(!is(typeof(CLOCK_PROCESS_CPUTIME_ID))) {
        private enum enumMixinStr_CLOCK_PROCESS_CPUTIME_ID = `enum CLOCK_PROCESS_CPUTIME_ID = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_PROCESS_CPUTIME_ID); }))) {
            mixin(enumMixinStr_CLOCK_PROCESS_CPUTIME_ID);
        }
    }




    static if(!is(typeof(CLOCK_THREAD_CPUTIME_ID))) {
        private enum enumMixinStr_CLOCK_THREAD_CPUTIME_ID = `enum CLOCK_THREAD_CPUTIME_ID = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_THREAD_CPUTIME_ID); }))) {
            mixin(enumMixinStr_CLOCK_THREAD_CPUTIME_ID);
        }
    }




    static if(!is(typeof(CLOCK_MONOTONIC_RAW))) {
        private enum enumMixinStr_CLOCK_MONOTONIC_RAW = `enum CLOCK_MONOTONIC_RAW = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_MONOTONIC_RAW); }))) {
            mixin(enumMixinStr_CLOCK_MONOTONIC_RAW);
        }
    }




    static if(!is(typeof(CLOCK_REALTIME_COARSE))) {
        private enum enumMixinStr_CLOCK_REALTIME_COARSE = `enum CLOCK_REALTIME_COARSE = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_REALTIME_COARSE); }))) {
            mixin(enumMixinStr_CLOCK_REALTIME_COARSE);
        }
    }




    static if(!is(typeof(CLOCK_MONOTONIC_COARSE))) {
        private enum enumMixinStr_CLOCK_MONOTONIC_COARSE = `enum CLOCK_MONOTONIC_COARSE = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_MONOTONIC_COARSE); }))) {
            mixin(enumMixinStr_CLOCK_MONOTONIC_COARSE);
        }
    }




    static if(!is(typeof(CLOCK_BOOTTIME))) {
        private enum enumMixinStr_CLOCK_BOOTTIME = `enum CLOCK_BOOTTIME = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_BOOTTIME); }))) {
            mixin(enumMixinStr_CLOCK_BOOTTIME);
        }
    }




    static if(!is(typeof(CLOCK_REALTIME_ALARM))) {
        private enum enumMixinStr_CLOCK_REALTIME_ALARM = `enum CLOCK_REALTIME_ALARM = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_REALTIME_ALARM); }))) {
            mixin(enumMixinStr_CLOCK_REALTIME_ALARM);
        }
    }




    static if(!is(typeof(CLOCK_BOOTTIME_ALARM))) {
        private enum enumMixinStr_CLOCK_BOOTTIME_ALARM = `enum CLOCK_BOOTTIME_ALARM = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_BOOTTIME_ALARM); }))) {
            mixin(enumMixinStr_CLOCK_BOOTTIME_ALARM);
        }
    }




    static if(!is(typeof(CLOCK_TAI))) {
        private enum enumMixinStr_CLOCK_TAI = `enum CLOCK_TAI = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_TAI); }))) {
            mixin(enumMixinStr_CLOCK_TAI);
        }
    }




    static if(!is(typeof(TIMER_ABSTIME))) {
        private enum enumMixinStr_TIMER_ABSTIME = `enum TIMER_ABSTIME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TIMER_ABSTIME); }))) {
            mixin(enumMixinStr_TIMER_ABSTIME);
        }
    }




    static if(!is(typeof(_BITS_TYPES_H))) {
        private enum enumMixinStr__BITS_TYPES_H = `enum _BITS_TYPES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TYPES_H); }))) {
            mixin(enumMixinStr__BITS_TYPES_H);
        }
    }




    static if(!is(typeof(GARROW_VERSION_2_0))) {
        private enum enumMixinStr_GARROW_VERSION_2_0 = `enum GARROW_VERSION_2_0 = ( ( 2 ) << 16 | ( 0 ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_2_0); }))) {
            mixin(enumMixinStr_GARROW_VERSION_2_0);
        }
    }




    static if(!is(typeof(GARROW_VERSION_3_0))) {
        private enum enumMixinStr_GARROW_VERSION_3_0 = `enum GARROW_VERSION_3_0 = ( ( 3 ) << 16 | ( 0 ) << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_3_0); }))) {
            mixin(enumMixinStr_GARROW_VERSION_3_0);
        }
    }
    static if(!is(typeof(GARROW_DEPRECATED))) {
        private enum enumMixinStr_GARROW_DEPRECATED = `enum GARROW_DEPRECATED = __attribute__ ( ( __deprecated__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_DEPRECATED); }))) {
            mixin(enumMixinStr_GARROW_DEPRECATED);
        }
    }






    static if(!is(typeof(GARROW_VERSION_TAG))) {
        private enum enumMixinStr_GARROW_VERSION_TAG = `enum GARROW_VERSION_TAG = "";`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_TAG); }))) {
            mixin(enumMixinStr_GARROW_VERSION_TAG);
        }
    }




    static if(!is(typeof(GARROW_VERSION_MICRO))) {
        private enum enumMixinStr_GARROW_VERSION_MICRO = `enum GARROW_VERSION_MICRO = ( 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_MICRO); }))) {
            mixin(enumMixinStr_GARROW_VERSION_MICRO);
        }
    }




    static if(!is(typeof(GARROW_VERSION_MINOR))) {
        private enum enumMixinStr_GARROW_VERSION_MINOR = `enum GARROW_VERSION_MINOR = ( 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_MINOR); }))) {
            mixin(enumMixinStr_GARROW_VERSION_MINOR);
        }
    }




    static if(!is(typeof(GARROW_VERSION_MAJOR))) {
        private enum enumMixinStr_GARROW_VERSION_MAJOR = `enum GARROW_VERSION_MAJOR = ( 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_VERSION_MAJOR); }))) {
            mixin(enumMixinStr_GARROW_VERSION_MAJOR);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TENSOR))) {
        private enum enumMixinStr_GARROW_TYPE_TENSOR = `enum GARROW_TYPE_TENSOR = ( garrow_tensor_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TENSOR); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TENSOR);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FEATHER_WRITE_PROPERTIES))) {
        private enum enumMixinStr_GARROW_TYPE_FEATHER_WRITE_PROPERTIES = `enum GARROW_TYPE_FEATHER_WRITE_PROPERTIES = ( garrow_feather_write_properties_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FEATHER_WRITE_PROPERTIES); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FEATHER_WRITE_PROPERTIES);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TABLE))) {
        private enum enumMixinStr_GARROW_TYPE_TABLE = `enum GARROW_TYPE_TABLE = ( garrow_table_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TABLE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TABLE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_RECORD_BATCH_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_RECORD_BATCH_BUILDER = `enum GARROW_TYPE_RECORD_BATCH_BUILDER = ( garrow_record_batch_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_SCHEMA))) {
        private enum enumMixinStr_GARROW_TYPE_SCHEMA = `enum GARROW_TYPE_SCHEMA = ( garrow_schema_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_SCHEMA); }))) {
            mixin(enumMixinStr_GARROW_TYPE_SCHEMA);
        }
    }




    static if(!is(typeof(GARROW_TYPE_RECORD_BATCH_ITERATOR))) {
        private enum enumMixinStr_GARROW_TYPE_RECORD_BATCH_ITERATOR = `enum GARROW_TYPE_RECORD_BATCH_ITERATOR = ( garrow_record_batch_iterator_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_ITERATOR); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_ITERATOR);
        }
    }




    static if(!is(typeof(GARROW_TYPE_RECORD_BATCH))) {
        private enum enumMixinStr_GARROW_TYPE_RECORD_BATCH = `enum GARROW_TYPE_RECORD_BATCH = ( garrow_record_batch_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH);
        }
    }




    static if(!is(typeof(GARROW_TYPE_JSON_READER))) {
        private enum enumMixinStr_GARROW_TYPE_JSON_READER = `enum GARROW_TYPE_JSON_READER = ( garrow_json_reader_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_JSON_READER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_JSON_READER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_JSON_READ_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_JSON_READ_OPTIONS = `enum GARROW_TYPE_JSON_READ_OPTIONS = ( garrow_json_read_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_JSON_READ_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_JSON_READ_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_CSV_READER))) {
        private enum enumMixinStr_GARROW_TYPE_CSV_READER = `enum GARROW_TYPE_CSV_READER = ( garrow_csv_reader_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_CSV_READER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_CSV_READER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_CSV_READ_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_CSV_READ_OPTIONS = `enum GARROW_TYPE_CSV_READ_OPTIONS = ( garrow_csv_read_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_CSV_READ_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_CSV_READ_OPTIONS);
        }
    }




    static if(!is(typeof(__S16_TYPE))) {
        private enum enumMixinStr___S16_TYPE = `enum __S16_TYPE = short int;`;
        static if(is(typeof({ mixin(enumMixinStr___S16_TYPE); }))) {
            mixin(enumMixinStr___S16_TYPE);
        }
    }




    static if(!is(typeof(__U16_TYPE))) {
        private enum enumMixinStr___U16_TYPE = `enum __U16_TYPE = unsigned short int;`;
        static if(is(typeof({ mixin(enumMixinStr___U16_TYPE); }))) {
            mixin(enumMixinStr___U16_TYPE);
        }
    }




    static if(!is(typeof(__S32_TYPE))) {
        private enum enumMixinStr___S32_TYPE = `enum __S32_TYPE = int;`;
        static if(is(typeof({ mixin(enumMixinStr___S32_TYPE); }))) {
            mixin(enumMixinStr___S32_TYPE);
        }
    }




    static if(!is(typeof(__U32_TYPE))) {
        private enum enumMixinStr___U32_TYPE = `enum __U32_TYPE = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr___U32_TYPE); }))) {
            mixin(enumMixinStr___U32_TYPE);
        }
    }




    static if(!is(typeof(__SLONGWORD_TYPE))) {
        private enum enumMixinStr___SLONGWORD_TYPE = `enum __SLONGWORD_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SLONGWORD_TYPE); }))) {
            mixin(enumMixinStr___SLONGWORD_TYPE);
        }
    }




    static if(!is(typeof(__ULONGWORD_TYPE))) {
        private enum enumMixinStr___ULONGWORD_TYPE = `enum __ULONGWORD_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___ULONGWORD_TYPE); }))) {
            mixin(enumMixinStr___ULONGWORD_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FEATHER_FILE_READER))) {
        private enum enumMixinStr_GARROW_TYPE_FEATHER_FILE_READER = `enum GARROW_TYPE_FEATHER_FILE_READER = ( garrow_feather_file_reader_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FEATHER_FILE_READER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FEATHER_FILE_READER);
        }
    }






    static if(!is(typeof(__SQUAD_TYPE))) {
        private enum enumMixinStr___SQUAD_TYPE = `enum __SQUAD_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SQUAD_TYPE); }))) {
            mixin(enumMixinStr___SQUAD_TYPE);
        }
    }




    static if(!is(typeof(__UQUAD_TYPE))) {
        private enum enumMixinStr___UQUAD_TYPE = `enum __UQUAD_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___UQUAD_TYPE); }))) {
            mixin(enumMixinStr___UQUAD_TYPE);
        }
    }




    static if(!is(typeof(__SWORD_TYPE))) {
        private enum enumMixinStr___SWORD_TYPE = `enum __SWORD_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SWORD_TYPE); }))) {
            mixin(enumMixinStr___SWORD_TYPE);
        }
    }




    static if(!is(typeof(__UWORD_TYPE))) {
        private enum enumMixinStr___UWORD_TYPE = `enum __UWORD_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___UWORD_TYPE); }))) {
            mixin(enumMixinStr___UWORD_TYPE);
        }
    }




    static if(!is(typeof(__SLONG32_TYPE))) {
        private enum enumMixinStr___SLONG32_TYPE = `enum __SLONG32_TYPE = int;`;
        static if(is(typeof({ mixin(enumMixinStr___SLONG32_TYPE); }))) {
            mixin(enumMixinStr___SLONG32_TYPE);
        }
    }




    static if(!is(typeof(__ULONG32_TYPE))) {
        private enum enumMixinStr___ULONG32_TYPE = `enum __ULONG32_TYPE = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr___ULONG32_TYPE); }))) {
            mixin(enumMixinStr___ULONG32_TYPE);
        }
    }




    static if(!is(typeof(__S64_TYPE))) {
        private enum enumMixinStr___S64_TYPE = `enum __S64_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___S64_TYPE); }))) {
            mixin(enumMixinStr___S64_TYPE);
        }
    }




    static if(!is(typeof(__U64_TYPE))) {
        private enum enumMixinStr___U64_TYPE = `enum __U64_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___U64_TYPE); }))) {
            mixin(enumMixinStr___U64_TYPE);
        }
    }




    static if(!is(typeof(__STD_TYPE))) {
        private enum enumMixinStr___STD_TYPE = `enum __STD_TYPE = typedef;`;
        static if(is(typeof({ mixin(enumMixinStr___STD_TYPE); }))) {
            mixin(enumMixinStr___STD_TYPE);
        }
    }
    static if(!is(typeof(GARROW_TYPE_RECORD_BATCH_FILE_READER))) {
        private enum enumMixinStr_GARROW_TYPE_RECORD_BATCH_FILE_READER = `enum GARROW_TYPE_RECORD_BATCH_FILE_READER = ( garrow_record_batch_file_reader_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_FILE_READER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_FILE_READER);
        }
    }
    static if(!is(typeof(GARROW_TYPE_RECORD_BATCH_STREAM_READER))) {
        private enum enumMixinStr_GARROW_TYPE_RECORD_BATCH_STREAM_READER = `enum GARROW_TYPE_RECORD_BATCH_STREAM_READER = ( garrow_record_batch_stream_reader_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_STREAM_READER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_STREAM_READER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TABLE_BATCH_READER))) {
        private enum enumMixinStr_GARROW_TYPE_TABLE_BATCH_READER = `enum GARROW_TYPE_TABLE_BATCH_READER = ( garrow_table_batch_reader_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TABLE_BATCH_READER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TABLE_BATCH_READER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_RECORD_BATCH_READER))) {
        private enum enumMixinStr_GARROW_TYPE_RECORD_BATCH_READER = `enum GARROW_TYPE_RECORD_BATCH_READER = ( garrow_record_batch_reader_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_READER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_READER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_READABLE))) {
        private enum enumMixinStr_GARROW_TYPE_READABLE = `enum GARROW_TYPE_READABLE = ( garrow_readable_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_READABLE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_READABLE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_COMPRESSED_OUTPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_COMPRESSED_OUTPUT_STREAM = `enum GARROW_TYPE_COMPRESSED_OUTPUT_STREAM = ( garrow_compressed_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_COMPRESSED_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_COMPRESSED_OUTPUT_STREAM);
        }
    }
    static if(!is(typeof(GARROW_TYPE_GIO_OUTPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_GIO_OUTPUT_STREAM = `enum GARROW_TYPE_GIO_OUTPUT_STREAM = ( garrow_gio_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_GIO_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_GIO_OUTPUT_STREAM);
        }
    }
    static if(!is(typeof(GARROW_TYPE_BUFFER_OUTPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_BUFFER_OUTPUT_STREAM = `enum GARROW_TYPE_BUFFER_OUTPUT_STREAM = ( garrow_buffer_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_BUFFER_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_BUFFER_OUTPUT_STREAM);
        }
    }
    static if(!is(typeof(GARROW_TYPE_FILE_OUTPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_FILE_OUTPUT_STREAM = `enum GARROW_TYPE_FILE_OUTPUT_STREAM = ( garrow_file_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FILE_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FILE_OUTPUT_STREAM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_OUTPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_OUTPUT_STREAM = `enum GARROW_TYPE_OUTPUT_STREAM = ( garrow_output_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_OUTPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_OUTPUT_STREAM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LOCAL_FILE_SYSTEM))) {
        private enum enumMixinStr_GARROW_TYPE_LOCAL_FILE_SYSTEM = `enum GARROW_TYPE_LOCAL_FILE_SYSTEM = ( garrow_local_file_system_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LOCAL_FILE_SYSTEM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LOCAL_FILE_SYSTEM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LOCAL_FILE_SYSTEM_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_LOCAL_FILE_SYSTEM_OPTIONS = `enum GARROW_TYPE_LOCAL_FILE_SYSTEM_OPTIONS = ( garrow_local_file_system_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LOCAL_FILE_SYSTEM_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LOCAL_FILE_SYSTEM_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_WRITE_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_WRITE_OPTIONS = `enum GARROW_TYPE_WRITE_OPTIONS = ( garrow_write_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_WRITE_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_WRITE_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_READ_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_READ_OPTIONS = `enum GARROW_TYPE_READ_OPTIONS = ( garrow_read_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_READ_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_READ_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_COMPRESSED_INPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_COMPRESSED_INPUT_STREAM = `enum GARROW_TYPE_COMPRESSED_INPUT_STREAM = ( garrow_compressed_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_COMPRESSED_INPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_COMPRESSED_INPUT_STREAM);
        }
    }
    static if(!is(typeof(GARROW_TYPE_GIO_INPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_GIO_INPUT_STREAM = `enum GARROW_TYPE_GIO_INPUT_STREAM = ( garrow_gio_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_GIO_INPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_GIO_INPUT_STREAM);
        }
    }
    static if(!is(typeof(GARROW_TYPE_MEMORY_MAPPED_INPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_MEMORY_MAPPED_INPUT_STREAM = `enum GARROW_TYPE_MEMORY_MAPPED_INPUT_STREAM = ( garrow_memory_mapped_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_MEMORY_MAPPED_INPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_MEMORY_MAPPED_INPUT_STREAM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_BUFFER_INPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_BUFFER_INPUT_STREAM = `enum GARROW_TYPE_BUFFER_INPUT_STREAM = ( garrow_buffer_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_BUFFER_INPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_BUFFER_INPUT_STREAM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_SEEKABLE_INPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_SEEKABLE_INPUT_STREAM = `enum GARROW_TYPE_SEEKABLE_INPUT_STREAM = ( garrow_seekable_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_SEEKABLE_INPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_SEEKABLE_INPUT_STREAM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INPUT_STREAM))) {
        private enum enumMixinStr_GARROW_TYPE_INPUT_STREAM = `enum GARROW_TYPE_INPUT_STREAM = ( garrow_input_stream_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INPUT_STREAM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INPUT_STREAM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FILE))) {
        private enum enumMixinStr_GARROW_TYPE_FILE = `enum GARROW_TYPE_FILE = ( garrow_file_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FILE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FILE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_S3_FILE_SYSTEM))) {
        private enum enumMixinStr_GARROW_TYPE_S3_FILE_SYSTEM = `enum GARROW_TYPE_S3_FILE_SYSTEM = ( garrow_s3_file_system_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_S3_FILE_SYSTEM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_S3_FILE_SYSTEM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_HDFS_FILE_SYSTEM))) {
        private enum enumMixinStr_GARROW_TYPE_HDFS_FILE_SYSTEM = `enum GARROW_TYPE_HDFS_FILE_SYSTEM = ( garrow_hdfs_file_system_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_HDFS_FILE_SYSTEM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_HDFS_FILE_SYSTEM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_MOCK_FILE_SYSTEM))) {
        private enum enumMixinStr_GARROW_TYPE_MOCK_FILE_SYSTEM = `enum GARROW_TYPE_MOCK_FILE_SYSTEM = ( garrow_mock_file_system_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_MOCK_FILE_SYSTEM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_MOCK_FILE_SYSTEM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_SLOW_FILE_SYSTEM))) {
        private enum enumMixinStr_GARROW_TYPE_SLOW_FILE_SYSTEM = `enum GARROW_TYPE_SLOW_FILE_SYSTEM = ( garrow_slow_file_system_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_SLOW_FILE_SYSTEM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_SLOW_FILE_SYSTEM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_SUB_TREE_FILE_SYSTEM))) {
        private enum enumMixinStr_GARROW_TYPE_SUB_TREE_FILE_SYSTEM = `enum GARROW_TYPE_SUB_TREE_FILE_SYSTEM = ( garrow_sub_tree_file_system_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_SUB_TREE_FILE_SYSTEM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_SUB_TREE_FILE_SYSTEM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FILE_SYSTEM))) {
        private enum enumMixinStr_GARROW_TYPE_FILE_SYSTEM = `enum GARROW_TYPE_FILE_SYSTEM = ( garrow_file_system_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FILE_SYSTEM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FILE_SYSTEM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FILE_SELECTOR))) {
        private enum enumMixinStr_GARROW_TYPE_FILE_SELECTOR = `enum GARROW_TYPE_FILE_SELECTOR = ( garrow_file_selector_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FILE_SELECTOR); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FILE_SELECTOR);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FILE_INFO))) {
        private enum enumMixinStr_GARROW_TYPE_FILE_INFO = `enum GARROW_TYPE_FILE_INFO = ( garrow_file_info_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FILE_INFO); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FILE_INFO);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FIELD))) {
        private enum enumMixinStr_GARROW_TYPE_FIELD = `enum GARROW_TYPE_FIELD = ( garrow_field_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FIELD); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FIELD);
        }
    }




    static if(!is(typeof(GARROW_ERROR))) {
        private enum enumMixinStr_GARROW_ERROR = `enum GARROW_ERROR = garrow_error_quark ( );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_ERROR); }))) {
            mixin(enumMixinStr_GARROW_ERROR);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TIME_UNIT))) {
        private enum enumMixinStr_GARROW_TYPE_TIME_UNIT = `enum GARROW_TYPE_TIME_UNIT = ( garrow_time_unit_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIME_UNIT); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIME_UNIT);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_TYPE = `enum GARROW_TYPE_TYPE = ( garrow_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_JSON_READ_UNEXPECTED_FIELD_BEHAVIOR))) {
        private enum enumMixinStr_GARROW_TYPE_JSON_READ_UNEXPECTED_FIELD_BEHAVIOR = `enum GARROW_TYPE_JSON_READ_UNEXPECTED_FIELD_BEHAVIOR = ( garrow_json_read_unexpected_field_behavior_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_JSON_READ_UNEXPECTED_FIELD_BEHAVIOR); }))) {
            mixin(enumMixinStr_GARROW_TYPE_JSON_READ_UNEXPECTED_FIELD_BEHAVIOR);
        }
    }




    static if(!is(typeof(GARROW_TYPE_METADATA_VERSION))) {
        private enum enumMixinStr_GARROW_TYPE_METADATA_VERSION = `enum GARROW_TYPE_METADATA_VERSION = ( garrow_metadata_version_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_METADATA_VERSION); }))) {
            mixin(enumMixinStr_GARROW_TYPE_METADATA_VERSION);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FILE_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_FILE_TYPE = `enum GARROW_TYPE_FILE_TYPE = ( garrow_file_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FILE_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FILE_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FILE_MODE))) {
        private enum enumMixinStr_GARROW_TYPE_FILE_MODE = `enum GARROW_TYPE_FILE_MODE = ( garrow_file_mode_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FILE_MODE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FILE_MODE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_ERROR))) {
        private enum enumMixinStr_GARROW_TYPE_ERROR = `enum GARROW_TYPE_ERROR = ( garrow_error_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_ERROR); }))) {
            mixin(enumMixinStr_GARROW_TYPE_ERROR);
        }
    }




    static if(!is(typeof(GARROW_TYPE_SORT_ORDER))) {
        private enum enumMixinStr_GARROW_TYPE_SORT_ORDER = `enum GARROW_TYPE_SORT_ORDER = ( garrow_sort_order_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_SORT_ORDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_SORT_ORDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_COMPARE_OPERATOR))) {
        private enum enumMixinStr_GARROW_TYPE_COMPARE_OPERATOR = `enum GARROW_TYPE_COMPARE_OPERATOR = ( garrow_compare_operator_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_COMPARE_OPERATOR); }))) {
            mixin(enumMixinStr_GARROW_TYPE_COMPARE_OPERATOR);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FILTER_NULL_SELECTION_BEHAVIOR))) {
        private enum enumMixinStr_GARROW_TYPE_FILTER_NULL_SELECTION_BEHAVIOR = `enum GARROW_TYPE_FILTER_NULL_SELECTION_BEHAVIOR = ( garrow_filter_null_selection_behavior_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FILTER_NULL_SELECTION_BEHAVIOR); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FILTER_NULL_SELECTION_BEHAVIOR);
        }
    }




    static if(!is(typeof(GARROW_TYPE_COUNT_MODE))) {
        private enum enumMixinStr_GARROW_TYPE_COUNT_MODE = `enum GARROW_TYPE_COUNT_MODE = ( garrow_count_mode_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_COUNT_MODE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_COUNT_MODE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_COMPRESSION_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_COMPRESSION_TYPE = `enum GARROW_TYPE_COMPRESSION_TYPE = ( garrow_compression_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_COMPRESSION_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_COMPRESSION_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TABLE_DATUM))) {
        private enum enumMixinStr_GARROW_TYPE_TABLE_DATUM = `enum GARROW_TYPE_TABLE_DATUM = ( garrow_table_datum_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TABLE_DATUM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TABLE_DATUM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_RECORD_BATCH_DATUM))) {
        private enum enumMixinStr_GARROW_TYPE_RECORD_BATCH_DATUM = `enum GARROW_TYPE_RECORD_BATCH_DATUM = ( garrow_record_batch_datum_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_DATUM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RECORD_BATCH_DATUM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_CHUNKED_ARRAY_DATUM))) {
        private enum enumMixinStr_GARROW_TYPE_CHUNKED_ARRAY_DATUM = `enum GARROW_TYPE_CHUNKED_ARRAY_DATUM = ( garrow_chunked_array_datum_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_CHUNKED_ARRAY_DATUM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_CHUNKED_ARRAY_DATUM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_ARRAY_DATUM))) {
        private enum enumMixinStr_GARROW_TYPE_ARRAY_DATUM = `enum GARROW_TYPE_ARRAY_DATUM = ( garrow_array_datum_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_ARRAY_DATUM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_ARRAY_DATUM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DATUM))) {
        private enum enumMixinStr_GARROW_TYPE_DATUM = `enum GARROW_TYPE_DATUM = ( garrow_datum_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DATUM); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DATUM);
        }
    }




    static if(!is(typeof(GARROW_TYPE_SORT_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_SORT_OPTIONS = `enum GARROW_TYPE_SORT_OPTIONS = ( garrow_sort_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_SORT_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_SORT_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_SORT_KEY))) {
        private enum enumMixinStr_GARROW_TYPE_SORT_KEY = `enum GARROW_TYPE_SORT_KEY = ( garrow_sort_key_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_SORT_KEY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_SORT_KEY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_ARRAY_SORT_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_ARRAY_SORT_OPTIONS = `enum GARROW_TYPE_ARRAY_SORT_OPTIONS = ( garrow_array_sort_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_ARRAY_SORT_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_ARRAY_SORT_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_COMPARE_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_COMPARE_OPTIONS = `enum GARROW_TYPE_COMPARE_OPTIONS = ( garrow_compare_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_COMPARE_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_COMPARE_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TAKE_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_TAKE_OPTIONS = `enum GARROW_TYPE_TAKE_OPTIONS = ( garrow_take_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TAKE_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TAKE_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FILTER_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_FILTER_OPTIONS = `enum GARROW_TYPE_FILTER_OPTIONS = ( garrow_filter_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FILTER_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FILTER_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_COUNT_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_COUNT_OPTIONS = `enum GARROW_TYPE_COUNT_OPTIONS = ( garrow_count_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_COUNT_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_COUNT_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_CAST_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_CAST_OPTIONS = `enum GARROW_TYPE_CAST_OPTIONS = ( garrow_cast_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_CAST_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_CAST_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FUNCTION))) {
        private enum enumMixinStr_GARROW_TYPE_FUNCTION = `enum GARROW_TYPE_FUNCTION = ( garrow_function_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FUNCTION); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FUNCTION);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FUNCTION_OPTIONS))) {
        private enum enumMixinStr_GARROW_TYPE_FUNCTION_OPTIONS = `enum GARROW_TYPE_FUNCTION_OPTIONS = ( garrow_function_options_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FUNCTION_OPTIONS); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FUNCTION_OPTIONS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_EXECUTE_CONTEXT))) {
        private enum enumMixinStr_GARROW_TYPE_EXECUTE_CONTEXT = `enum GARROW_TYPE_EXECUTE_CONTEXT = ( garrow_execute_context_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_EXECUTE_CONTEXT); }))) {
            mixin(enumMixinStr_GARROW_TYPE_EXECUTE_CONTEXT);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DICTIONARY_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_DICTIONARY_DATA_TYPE = `enum GARROW_TYPE_DICTIONARY_DATA_TYPE = ( garrow_dictionary_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DICTIONARY_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DICTIONARY_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DENSE_UNION_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_DENSE_UNION_DATA_TYPE = `enum GARROW_TYPE_DENSE_UNION_DATA_TYPE = ( garrow_dense_union_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DENSE_UNION_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DENSE_UNION_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_SPARSE_UNION_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_SPARSE_UNION_DATA_TYPE = `enum GARROW_TYPE_SPARSE_UNION_DATA_TYPE = ( garrow_sparse_union_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_SPARSE_UNION_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_SPARSE_UNION_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UNION_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_UNION_DATA_TYPE = `enum GARROW_TYPE_UNION_DATA_TYPE = ( garrow_union_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UNION_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UNION_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_MAP_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_MAP_DATA_TYPE = `enum GARROW_TYPE_MAP_DATA_TYPE = ( garrow_map_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_MAP_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_MAP_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_STRUCT_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_STRUCT_DATA_TYPE = `enum GARROW_TYPE_STRUCT_DATA_TYPE = ( garrow_struct_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_STRUCT_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_STRUCT_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LARGE_LIST_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_LARGE_LIST_DATA_TYPE = `enum GARROW_TYPE_LARGE_LIST_DATA_TYPE = ( garrow_large_list_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LARGE_LIST_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LARGE_LIST_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LIST_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_LIST_DATA_TYPE = `enum GARROW_TYPE_LIST_DATA_TYPE = ( garrow_list_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LIST_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LIST_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DICTIONARY_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_DICTIONARY_ARRAY = `enum GARROW_TYPE_DICTIONARY_ARRAY = ( garrow_dictionary_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DICTIONARY_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DICTIONARY_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DENSE_UNION_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_DENSE_UNION_ARRAY = `enum GARROW_TYPE_DENSE_UNION_ARRAY = ( garrow_dense_union_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DENSE_UNION_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DENSE_UNION_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_SPARSE_UNION_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_SPARSE_UNION_ARRAY = `enum GARROW_TYPE_SPARSE_UNION_ARRAY = ( garrow_sparse_union_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_SPARSE_UNION_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_SPARSE_UNION_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UNION_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_UNION_ARRAY = `enum GARROW_TYPE_UNION_ARRAY = ( garrow_union_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UNION_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UNION_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_MAP_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_MAP_ARRAY = `enum GARROW_TYPE_MAP_ARRAY = ( garrow_map_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_MAP_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_MAP_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_STRUCT_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_STRUCT_ARRAY = `enum GARROW_TYPE_STRUCT_ARRAY = ( garrow_struct_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_STRUCT_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_STRUCT_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LARGE_LIST_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_LARGE_LIST_ARRAY = `enum GARROW_TYPE_LARGE_LIST_ARRAY = ( garrow_large_list_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LARGE_LIST_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LARGE_LIST_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LIST_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_LIST_ARRAY = `enum GARROW_TYPE_LIST_ARRAY = ( garrow_list_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LIST_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LIST_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_CODEC))) {
        private enum enumMixinStr_GARROW_TYPE_CODEC = `enum GARROW_TYPE_CODEC = ( garrow_codec_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_CODEC); }))) {
            mixin(enumMixinStr_GARROW_TYPE_CODEC);
        }
    }




    static if(!is(typeof(_BITS_TYPES___LOCALE_T_H))) {
        private enum enumMixinStr__BITS_TYPES___LOCALE_T_H = `enum _BITS_TYPES___LOCALE_T_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TYPES___LOCALE_T_H); }))) {
            mixin(enumMixinStr__BITS_TYPES___LOCALE_T_H);
        }
    }




    static if(!is(typeof(GARROW_TYPE_CHUNKED_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_CHUNKED_ARRAY = `enum GARROW_TYPE_CHUNKED_ARRAY = ( garrow_chunked_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_CHUNKED_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_CHUNKED_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_RESIZABLE_BUFFER))) {
        private enum enumMixinStr_GARROW_TYPE_RESIZABLE_BUFFER = `enum GARROW_TYPE_RESIZABLE_BUFFER = ( garrow_resizable_buffer_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_RESIZABLE_BUFFER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_RESIZABLE_BUFFER);
        }
    }






    static if(!is(typeof(_SIGSET_NWORDS))) {
        private enum enumMixinStr__SIGSET_NWORDS = `enum _SIGSET_NWORDS = ( 1024 / ( 8 * ( unsigned long int ) .sizeof ) );`;
        static if(is(typeof({ mixin(enumMixinStr__SIGSET_NWORDS); }))) {
            mixin(enumMixinStr__SIGSET_NWORDS);
        }
    }




    static if(!is(typeof(GARROW_TYPE_MUTABLE_BUFFER))) {
        private enum enumMixinStr_GARROW_TYPE_MUTABLE_BUFFER = `enum GARROW_TYPE_MUTABLE_BUFFER = ( garrow_mutable_buffer_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_MUTABLE_BUFFER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_MUTABLE_BUFFER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_BUFFER))) {
        private enum enumMixinStr_GARROW_TYPE_BUFFER = `enum GARROW_TYPE_BUFFER = ( garrow_buffer_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_BUFFER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_BUFFER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_EXTENSION_DATA_TYPE_REGISTRY))) {
        private enum enumMixinStr_GARROW_TYPE_EXTENSION_DATA_TYPE_REGISTRY = `enum GARROW_TYPE_EXTENSION_DATA_TYPE_REGISTRY = ( garrow_extension_data_type_registry_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_EXTENSION_DATA_TYPE_REGISTRY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_EXTENSION_DATA_TYPE_REGISTRY);
        }
    }






    static if(!is(typeof(GARROW_TYPE_EXTENSION_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_EXTENSION_DATA_TYPE = `enum GARROW_TYPE_EXTENSION_DATA_TYPE = ( garrow_extension_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_EXTENSION_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_EXTENSION_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DECIMAL256_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_DECIMAL256_DATA_TYPE = `enum GARROW_TYPE_DECIMAL256_DATA_TYPE = ( garrow_decimal256_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DECIMAL256_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DECIMAL256_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DECIMAL128_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_DECIMAL128_DATA_TYPE = `enum GARROW_TYPE_DECIMAL128_DATA_TYPE = ( garrow_decimal128_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DECIMAL128_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DECIMAL128_DATA_TYPE);
        }
    }




    static if(!is(typeof(__clock_t_defined))) {
        private enum enumMixinStr___clock_t_defined = `enum __clock_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___clock_t_defined); }))) {
            mixin(enumMixinStr___clock_t_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DECIMAL_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_DECIMAL_DATA_TYPE = `enum GARROW_TYPE_DECIMAL_DATA_TYPE = ( garrow_decimal_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DECIMAL_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DECIMAL_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TIME64_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_TIME64_DATA_TYPE = `enum GARROW_TYPE_TIME64_DATA_TYPE = ( garrow_time64_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIME64_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIME64_DATA_TYPE);
        }
    }




    static if(!is(typeof(__clockid_t_defined))) {
        private enum enumMixinStr___clockid_t_defined = `enum __clockid_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___clockid_t_defined); }))) {
            mixin(enumMixinStr___clockid_t_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TIME32_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_TIME32_DATA_TYPE = `enum GARROW_TYPE_TIME32_DATA_TYPE = ( garrow_time32_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIME32_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIME32_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TIME_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_TIME_DATA_TYPE = `enum GARROW_TYPE_TIME_DATA_TYPE = ( garrow_time_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIME_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIME_DATA_TYPE);
        }
    }




    static if(!is(typeof(_BITS_TYPES_LOCALE_T_H))) {
        private enum enumMixinStr__BITS_TYPES_LOCALE_T_H = `enum _BITS_TYPES_LOCALE_T_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TYPES_LOCALE_T_H); }))) {
            mixin(enumMixinStr__BITS_TYPES_LOCALE_T_H);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TIMESTAMP_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_TIMESTAMP_DATA_TYPE = `enum GARROW_TYPE_TIMESTAMP_DATA_TYPE = ( garrow_timestamp_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIMESTAMP_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIMESTAMP_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DATE64_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_DATE64_DATA_TYPE = `enum GARROW_TYPE_DATE64_DATA_TYPE = ( garrow_date64_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DATE64_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DATE64_DATA_TYPE);
        }
    }




    static if(!is(typeof(__sig_atomic_t_defined))) {
        private enum enumMixinStr___sig_atomic_t_defined = `enum __sig_atomic_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___sig_atomic_t_defined); }))) {
            mixin(enumMixinStr___sig_atomic_t_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DATE32_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_DATE32_DATA_TYPE = `enum GARROW_TYPE_DATE32_DATA_TYPE = ( garrow_date32_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DATE32_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DATE32_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LARGE_STRING_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_LARGE_STRING_DATA_TYPE = `enum GARROW_TYPE_LARGE_STRING_DATA_TYPE = ( garrow_large_string_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LARGE_STRING_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LARGE_STRING_DATA_TYPE);
        }
    }




    static if(!is(typeof(__sigevent_t_defined))) {
        private enum enumMixinStr___sigevent_t_defined = `enum __sigevent_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___sigevent_t_defined); }))) {
            mixin(enumMixinStr___sigevent_t_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_STRING_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_STRING_DATA_TYPE = `enum GARROW_TYPE_STRING_DATA_TYPE = ( garrow_string_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_STRING_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_STRING_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LARGE_BINARY_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_LARGE_BINARY_DATA_TYPE = `enum GARROW_TYPE_LARGE_BINARY_DATA_TYPE = ( garrow_large_binary_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LARGE_BINARY_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LARGE_BINARY_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FIXED_SIZE_BINARY_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_FIXED_SIZE_BINARY_DATA_TYPE = `enum GARROW_TYPE_FIXED_SIZE_BINARY_DATA_TYPE = ( garrow_fixed_size_binary_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FIXED_SIZE_BINARY_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FIXED_SIZE_BINARY_DATA_TYPE);
        }
    }




    static if(!is(typeof(__SIGEV_MAX_SIZE))) {
        private enum enumMixinStr___SIGEV_MAX_SIZE = `enum __SIGEV_MAX_SIZE = 64;`;
        static if(is(typeof({ mixin(enumMixinStr___SIGEV_MAX_SIZE); }))) {
            mixin(enumMixinStr___SIGEV_MAX_SIZE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_BINARY_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_BINARY_DATA_TYPE = `enum GARROW_TYPE_BINARY_DATA_TYPE = ( garrow_binary_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_BINARY_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_BINARY_DATA_TYPE);
        }
    }




    static if(!is(typeof(__SIGEV_PAD_SIZE))) {
        private enum enumMixinStr___SIGEV_PAD_SIZE = `enum __SIGEV_PAD_SIZE = ( ( 64 / ( int ) .sizeof ) - 4 );`;
        static if(is(typeof({ mixin(enumMixinStr___SIGEV_PAD_SIZE); }))) {
            mixin(enumMixinStr___SIGEV_PAD_SIZE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DOUBLE_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_DOUBLE_DATA_TYPE = `enum GARROW_TYPE_DOUBLE_DATA_TYPE = ( garrow_double_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DOUBLE_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DOUBLE_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FLOAT_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_FLOAT_DATA_TYPE = `enum GARROW_TYPE_FLOAT_DATA_TYPE = ( garrow_float_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FLOAT_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FLOAT_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FLOATING_POINT_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_FLOATING_POINT_DATA_TYPE = `enum GARROW_TYPE_FLOATING_POINT_DATA_TYPE = ( garrow_floating_point_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FLOATING_POINT_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FLOATING_POINT_DATA_TYPE);
        }
    }




    static if(!is(typeof(sigev_notify_function))) {
        private enum enumMixinStr_sigev_notify_function = `enum sigev_notify_function = _sigev_un . _sigev_thread . _function;`;
        static if(is(typeof({ mixin(enumMixinStr_sigev_notify_function); }))) {
            mixin(enumMixinStr_sigev_notify_function);
        }
    }




    static if(!is(typeof(sigev_notify_attributes))) {
        private enum enumMixinStr_sigev_notify_attributes = `enum sigev_notify_attributes = _sigev_un . _sigev_thread . _attribute;`;
        static if(is(typeof({ mixin(enumMixinStr_sigev_notify_attributes); }))) {
            mixin(enumMixinStr_sigev_notify_attributes);
        }
    }




    static if(!is(typeof(__siginfo_t_defined))) {
        private enum enumMixinStr___siginfo_t_defined = `enum __siginfo_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___siginfo_t_defined); }))) {
            mixin(enumMixinStr___siginfo_t_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT64_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_UINT64_DATA_TYPE = `enum GARROW_TYPE_UINT64_DATA_TYPE = ( garrow_uint64_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT64_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT64_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT64_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_INT64_DATA_TYPE = `enum GARROW_TYPE_INT64_DATA_TYPE = ( garrow_int64_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT64_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT64_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT32_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_UINT32_DATA_TYPE = `enum GARROW_TYPE_UINT32_DATA_TYPE = ( garrow_uint32_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT32_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT32_DATA_TYPE);
        }
    }




    static if(!is(typeof(__SI_MAX_SIZE))) {
        private enum enumMixinStr___SI_MAX_SIZE = `enum __SI_MAX_SIZE = 128;`;
        static if(is(typeof({ mixin(enumMixinStr___SI_MAX_SIZE); }))) {
            mixin(enumMixinStr___SI_MAX_SIZE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT32_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_INT32_DATA_TYPE = `enum GARROW_TYPE_INT32_DATA_TYPE = ( garrow_int32_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT32_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT32_DATA_TYPE);
        }
    }




    static if(!is(typeof(__SI_PAD_SIZE))) {
        private enum enumMixinStr___SI_PAD_SIZE = `enum __SI_PAD_SIZE = ( ( 128 / ( int ) .sizeof ) - 4 );`;
        static if(is(typeof({ mixin(enumMixinStr___SI_PAD_SIZE); }))) {
            mixin(enumMixinStr___SI_PAD_SIZE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT16_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_UINT16_DATA_TYPE = `enum GARROW_TYPE_UINT16_DATA_TYPE = ( garrow_uint16_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT16_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT16_DATA_TYPE);
        }
    }






    static if(!is(typeof(__SI_BAND_TYPE))) {
        private enum enumMixinStr___SI_BAND_TYPE = `enum __SI_BAND_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SI_BAND_TYPE); }))) {
            mixin(enumMixinStr___SI_BAND_TYPE);
        }
    }




    static if(!is(typeof(__SI_CLOCK_T))) {
        private enum enumMixinStr___SI_CLOCK_T = `enum __SI_CLOCK_T = __clock_t;`;
        static if(is(typeof({ mixin(enumMixinStr___SI_CLOCK_T); }))) {
            mixin(enumMixinStr___SI_CLOCK_T);
        }
    }




    static if(!is(typeof(__SI_ERRNO_THEN_CODE))) {
        private enum enumMixinStr___SI_ERRNO_THEN_CODE = `enum __SI_ERRNO_THEN_CODE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___SI_ERRNO_THEN_CODE); }))) {
            mixin(enumMixinStr___SI_ERRNO_THEN_CODE);
        }
    }




    static if(!is(typeof(__SI_HAVE_SIGSYS))) {
        private enum enumMixinStr___SI_HAVE_SIGSYS = `enum __SI_HAVE_SIGSYS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___SI_HAVE_SIGSYS); }))) {
            mixin(enumMixinStr___SI_HAVE_SIGSYS);
        }
    }






    static if(!is(typeof(GARROW_TYPE_INT16_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_INT16_DATA_TYPE = `enum GARROW_TYPE_INT16_DATA_TYPE = ( garrow_int16_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT16_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT16_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT8_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_UINT8_DATA_TYPE = `enum GARROW_TYPE_UINT8_DATA_TYPE = ( garrow_uint8_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT8_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT8_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT8_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_INT8_DATA_TYPE = `enum GARROW_TYPE_INT8_DATA_TYPE = ( garrow_int8_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT8_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT8_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INTEGER_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_INTEGER_DATA_TYPE = `enum GARROW_TYPE_INTEGER_DATA_TYPE = ( garrow_integer_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INTEGER_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INTEGER_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_NUMERIC_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_NUMERIC_DATA_TYPE = `enum GARROW_TYPE_NUMERIC_DATA_TYPE = ( garrow_numeric_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_NUMERIC_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_NUMERIC_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_BOOLEAN_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_BOOLEAN_DATA_TYPE = `enum GARROW_TYPE_BOOLEAN_DATA_TYPE = ( garrow_boolean_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_BOOLEAN_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_BOOLEAN_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_NULL_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_NULL_DATA_TYPE = `enum GARROW_TYPE_NULL_DATA_TYPE = ( garrow_null_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_NULL_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_NULL_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FIXED_WIDTH_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_FIXED_WIDTH_DATA_TYPE = `enum GARROW_TYPE_FIXED_WIDTH_DATA_TYPE = ( garrow_fixed_width_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FIXED_WIDTH_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FIXED_WIDTH_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DATA_TYPE))) {
        private enum enumMixinStr_GARROW_TYPE_DATA_TYPE = `enum GARROW_TYPE_DATA_TYPE = ( garrow_data_type_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DATA_TYPE); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DATA_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_EXTENSION_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_EXTENSION_ARRAY = `enum GARROW_TYPE_EXTENSION_ARRAY = ( garrow_extension_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_EXTENSION_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_EXTENSION_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DECIMAL256_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_DECIMAL256_ARRAY = `enum GARROW_TYPE_DECIMAL256_ARRAY = ( garrow_decimal256_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DECIMAL256_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DECIMAL256_ARRAY);
        }
    }




    static if(!is(typeof(si_pid))) {
        private enum enumMixinStr_si_pid = `enum si_pid = _sifields . _kill . si_pid;`;
        static if(is(typeof({ mixin(enumMixinStr_si_pid); }))) {
            mixin(enumMixinStr_si_pid);
        }
    }




    static if(!is(typeof(si_uid))) {
        private enum enumMixinStr_si_uid = `enum si_uid = _sifields . _kill . si_uid;`;
        static if(is(typeof({ mixin(enumMixinStr_si_uid); }))) {
            mixin(enumMixinStr_si_uid);
        }
    }




    static if(!is(typeof(si_timerid))) {
        private enum enumMixinStr_si_timerid = `enum si_timerid = _sifields . _timer . si_tid;`;
        static if(is(typeof({ mixin(enumMixinStr_si_timerid); }))) {
            mixin(enumMixinStr_si_timerid);
        }
    }




    static if(!is(typeof(si_overrun))) {
        private enum enumMixinStr_si_overrun = `enum si_overrun = _sifields . _timer . si_overrun;`;
        static if(is(typeof({ mixin(enumMixinStr_si_overrun); }))) {
            mixin(enumMixinStr_si_overrun);
        }
    }




    static if(!is(typeof(si_status))) {
        private enum enumMixinStr_si_status = `enum si_status = _sifields . _sigchld . si_status;`;
        static if(is(typeof({ mixin(enumMixinStr_si_status); }))) {
            mixin(enumMixinStr_si_status);
        }
    }




    static if(!is(typeof(si_utime))) {
        private enum enumMixinStr_si_utime = `enum si_utime = _sifields . _sigchld . si_utime;`;
        static if(is(typeof({ mixin(enumMixinStr_si_utime); }))) {
            mixin(enumMixinStr_si_utime);
        }
    }




    static if(!is(typeof(si_stime))) {
        private enum enumMixinStr_si_stime = `enum si_stime = _sifields . _sigchld . si_stime;`;
        static if(is(typeof({ mixin(enumMixinStr_si_stime); }))) {
            mixin(enumMixinStr_si_stime);
        }
    }




    static if(!is(typeof(si_value))) {
        private enum enumMixinStr_si_value = `enum si_value = _sifields . _rt . si_sigval;`;
        static if(is(typeof({ mixin(enumMixinStr_si_value); }))) {
            mixin(enumMixinStr_si_value);
        }
    }




    static if(!is(typeof(si_int))) {
        private enum enumMixinStr_si_int = `enum si_int = _sifields . _rt . si_sigval . sival_int;`;
        static if(is(typeof({ mixin(enumMixinStr_si_int); }))) {
            mixin(enumMixinStr_si_int);
        }
    }




    static if(!is(typeof(si_ptr))) {
        private enum enumMixinStr_si_ptr = `enum si_ptr = _sifields . _rt . si_sigval . sival_ptr;`;
        static if(is(typeof({ mixin(enumMixinStr_si_ptr); }))) {
            mixin(enumMixinStr_si_ptr);
        }
    }




    static if(!is(typeof(si_addr))) {
        private enum enumMixinStr_si_addr = `enum si_addr = _sifields . _sigfault . si_addr;`;
        static if(is(typeof({ mixin(enumMixinStr_si_addr); }))) {
            mixin(enumMixinStr_si_addr);
        }
    }




    static if(!is(typeof(si_addr_lsb))) {
        private enum enumMixinStr_si_addr_lsb = `enum si_addr_lsb = _sifields . _sigfault . si_addr_lsb;`;
        static if(is(typeof({ mixin(enumMixinStr_si_addr_lsb); }))) {
            mixin(enumMixinStr_si_addr_lsb);
        }
    }




    static if(!is(typeof(si_lower))) {
        private enum enumMixinStr_si_lower = `enum si_lower = _sifields . _sigfault . _bounds . _addr_bnd . _lower;`;
        static if(is(typeof({ mixin(enumMixinStr_si_lower); }))) {
            mixin(enumMixinStr_si_lower);
        }
    }




    static if(!is(typeof(si_upper))) {
        private enum enumMixinStr_si_upper = `enum si_upper = _sifields . _sigfault . _bounds . _addr_bnd . _upper;`;
        static if(is(typeof({ mixin(enumMixinStr_si_upper); }))) {
            mixin(enumMixinStr_si_upper);
        }
    }




    static if(!is(typeof(si_pkey))) {
        private enum enumMixinStr_si_pkey = `enum si_pkey = _sifields . _sigfault . _bounds . _pkey;`;
        static if(is(typeof({ mixin(enumMixinStr_si_pkey); }))) {
            mixin(enumMixinStr_si_pkey);
        }
    }




    static if(!is(typeof(si_band))) {
        private enum enumMixinStr_si_band = `enum si_band = _sifields . _sigpoll . si_band;`;
        static if(is(typeof({ mixin(enumMixinStr_si_band); }))) {
            mixin(enumMixinStr_si_band);
        }
    }




    static if(!is(typeof(si_fd))) {
        private enum enumMixinStr_si_fd = `enum si_fd = _sifields . _sigpoll . si_fd;`;
        static if(is(typeof({ mixin(enumMixinStr_si_fd); }))) {
            mixin(enumMixinStr_si_fd);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DECIMAL128_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_DECIMAL128_ARRAY = `enum GARROW_TYPE_DECIMAL128_ARRAY = ( garrow_decimal128_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DECIMAL128_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DECIMAL128_ARRAY);
        }
    }




    static if(!is(typeof(si_call_addr))) {
        private enum enumMixinStr_si_call_addr = `enum si_call_addr = _sifields . _sigsys . _call_addr;`;
        static if(is(typeof({ mixin(enumMixinStr_si_call_addr); }))) {
            mixin(enumMixinStr_si_call_addr);
        }
    }




    static if(!is(typeof(si_syscall))) {
        private enum enumMixinStr_si_syscall = `enum si_syscall = _sifields . _sigsys . _syscall;`;
        static if(is(typeof({ mixin(enumMixinStr_si_syscall); }))) {
            mixin(enumMixinStr_si_syscall);
        }
    }




    static if(!is(typeof(si_arch))) {
        private enum enumMixinStr_si_arch = `enum si_arch = _sifields . _sigsys . _arch;`;
        static if(is(typeof({ mixin(enumMixinStr_si_arch); }))) {
            mixin(enumMixinStr_si_arch);
        }
    }




    static if(!is(typeof(__sigset_t_defined))) {
        private enum enumMixinStr___sigset_t_defined = `enum __sigset_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___sigset_t_defined); }))) {
            mixin(enumMixinStr___sigset_t_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FIXED_SIZE_BINARY_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_FIXED_SIZE_BINARY_ARRAY = `enum GARROW_TYPE_FIXED_SIZE_BINARY_ARRAY = ( garrow_fixed_size_binary_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FIXED_SIZE_BINARY_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FIXED_SIZE_BINARY_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TIME64_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_TIME64_ARRAY = `enum GARROW_TYPE_TIME64_ARRAY = ( garrow_time64_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIME64_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIME64_ARRAY);
        }
    }






    static if(!is(typeof(GARROW_TYPE_TIME32_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_TIME32_ARRAY = `enum GARROW_TYPE_TIME32_ARRAY = ( garrow_time32_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIME32_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIME32_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TIMESTAMP_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_TIMESTAMP_ARRAY = `enum GARROW_TYPE_TIMESTAMP_ARRAY = ( garrow_timestamp_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIMESTAMP_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIMESTAMP_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DATE64_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_DATE64_ARRAY = `enum GARROW_TYPE_DATE64_ARRAY = ( garrow_date64_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DATE64_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DATE64_ARRAY);
        }
    }




    static if(!is(typeof(__stack_t_defined))) {
        private enum enumMixinStr___stack_t_defined = `enum __stack_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___stack_t_defined); }))) {
            mixin(enumMixinStr___stack_t_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DATE32_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_DATE32_ARRAY = `enum GARROW_TYPE_DATE32_ARRAY = ( garrow_date32_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DATE32_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DATE32_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LARGE_STRING_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_LARGE_STRING_ARRAY = `enum GARROW_TYPE_LARGE_STRING_ARRAY = ( garrow_large_string_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LARGE_STRING_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LARGE_STRING_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_STRING_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_STRING_ARRAY = `enum GARROW_TYPE_STRING_ARRAY = ( garrow_string_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_STRING_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_STRING_ARRAY);
        }
    }




    static if(!is(typeof(__itimerspec_defined))) {
        private enum enumMixinStr___itimerspec_defined = `enum __itimerspec_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___itimerspec_defined); }))) {
            mixin(enumMixinStr___itimerspec_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LARGE_BINARY_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_LARGE_BINARY_ARRAY = `enum GARROW_TYPE_LARGE_BINARY_ARRAY = ( garrow_large_binary_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LARGE_BINARY_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LARGE_BINARY_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_BINARY_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_BINARY_ARRAY = `enum GARROW_TYPE_BINARY_ARRAY = ( garrow_binary_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_BINARY_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_BINARY_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DOUBLE_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_DOUBLE_ARRAY = `enum GARROW_TYPE_DOUBLE_ARRAY = ( garrow_double_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DOUBLE_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DOUBLE_ARRAY);
        }
    }




    static if(!is(typeof(__sigstack_defined))) {
        private enum enumMixinStr___sigstack_defined = `enum __sigstack_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___sigstack_defined); }))) {
            mixin(enumMixinStr___sigstack_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FLOAT_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_FLOAT_ARRAY = `enum GARROW_TYPE_FLOAT_ARRAY = ( garrow_float_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FLOAT_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FLOAT_ARRAY);
        }
    }




    static if(!is(typeof(_STRUCT_TIMESPEC))) {
        private enum enumMixinStr__STRUCT_TIMESPEC = `enum _STRUCT_TIMESPEC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_TIMESPEC); }))) {
            mixin(enumMixinStr__STRUCT_TIMESPEC);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT64_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_UINT64_ARRAY = `enum GARROW_TYPE_UINT64_ARRAY = ( garrow_uint64_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT64_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT64_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT64_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_INT64_ARRAY = `enum GARROW_TYPE_INT64_ARRAY = ( garrow_int64_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT64_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT64_ARRAY);
        }
    }




    static if(!is(typeof(__timeval_defined))) {
        private enum enumMixinStr___timeval_defined = `enum __timeval_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___timeval_defined); }))) {
            mixin(enumMixinStr___timeval_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT32_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_UINT32_ARRAY = `enum GARROW_TYPE_UINT32_ARRAY = ( garrow_uint32_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT32_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT32_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT32_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_INT32_ARRAY = `enum GARROW_TYPE_INT32_ARRAY = ( garrow_int32_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT32_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT32_ARRAY);
        }
    }




    static if(!is(typeof(__struct_tm_defined))) {
        private enum enumMixinStr___struct_tm_defined = `enum __struct_tm_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___struct_tm_defined); }))) {
            mixin(enumMixinStr___struct_tm_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT16_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_UINT16_ARRAY = `enum GARROW_TYPE_UINT16_ARRAY = ( garrow_uint16_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT16_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT16_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT16_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_INT16_ARRAY = `enum GARROW_TYPE_INT16_ARRAY = ( garrow_int16_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT16_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT16_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT8_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_UINT8_ARRAY = `enum GARROW_TYPE_UINT8_ARRAY = ( garrow_uint8_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT8_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT8_ARRAY);
        }
    }




    static if(!is(typeof(__time_t_defined))) {
        private enum enumMixinStr___time_t_defined = `enum __time_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___time_t_defined); }))) {
            mixin(enumMixinStr___time_t_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT8_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_INT8_ARRAY = `enum GARROW_TYPE_INT8_ARRAY = ( garrow_int8_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT8_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT8_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_NUMERIC_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_NUMERIC_ARRAY = `enum GARROW_TYPE_NUMERIC_ARRAY = ( garrow_numeric_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_NUMERIC_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_NUMERIC_ARRAY);
        }
    }




    static if(!is(typeof(__timer_t_defined))) {
        private enum enumMixinStr___timer_t_defined = `enum __timer_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___timer_t_defined); }))) {
            mixin(enumMixinStr___timer_t_defined);
        }
    }




    static if(!is(typeof(GARROW_TYPE_BOOLEAN_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_BOOLEAN_ARRAY = `enum GARROW_TYPE_BOOLEAN_ARRAY = ( garrow_boolean_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_BOOLEAN_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_BOOLEAN_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_PRIMITIVE_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_PRIMITIVE_ARRAY = `enum GARROW_TYPE_PRIMITIVE_ARRAY = ( garrow_primitive_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_PRIMITIVE_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_PRIMITIVE_ARRAY);
        }
    }




    static if(!is(typeof(GARROW_TYPE_NULL_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_NULL_ARRAY = `enum GARROW_TYPE_NULL_ARRAY = ( garrow_null_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_NULL_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_NULL_ARRAY);
        }
    }




    static if(!is(typeof(_BITS_TYPESIZES_H))) {
        private enum enumMixinStr__BITS_TYPESIZES_H = `enum _BITS_TYPESIZES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TYPESIZES_H); }))) {
            mixin(enumMixinStr__BITS_TYPESIZES_H);
        }
    }




    static if(!is(typeof(GARROW_TYPE_ARRAY))) {
        private enum enumMixinStr_GARROW_TYPE_ARRAY = `enum GARROW_TYPE_ARRAY = ( garrow_array_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_ARRAY); }))) {
            mixin(enumMixinStr_GARROW_TYPE_ARRAY);
        }
    }




    static if(!is(typeof(__SYSCALL_SLONG_TYPE))) {
        private enum enumMixinStr___SYSCALL_SLONG_TYPE = `enum __SYSCALL_SLONG_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SYSCALL_SLONG_TYPE); }))) {
            mixin(enumMixinStr___SYSCALL_SLONG_TYPE);
        }
    }




    static if(!is(typeof(__SYSCALL_ULONG_TYPE))) {
        private enum enumMixinStr___SYSCALL_ULONG_TYPE = `enum __SYSCALL_ULONG_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SYSCALL_ULONG_TYPE); }))) {
            mixin(enumMixinStr___SYSCALL_ULONG_TYPE);
        }
    }




    static if(!is(typeof(__DEV_T_TYPE))) {
        private enum enumMixinStr___DEV_T_TYPE = `enum __DEV_T_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___DEV_T_TYPE); }))) {
            mixin(enumMixinStr___DEV_T_TYPE);
        }
    }




    static if(!is(typeof(__UID_T_TYPE))) {
        private enum enumMixinStr___UID_T_TYPE = `enum __UID_T_TYPE = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr___UID_T_TYPE); }))) {
            mixin(enumMixinStr___UID_T_TYPE);
        }
    }




    static if(!is(typeof(__GID_T_TYPE))) {
        private enum enumMixinStr___GID_T_TYPE = `enum __GID_T_TYPE = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr___GID_T_TYPE); }))) {
            mixin(enumMixinStr___GID_T_TYPE);
        }
    }




    static if(!is(typeof(__INO_T_TYPE))) {
        private enum enumMixinStr___INO_T_TYPE = `enum __INO_T_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___INO_T_TYPE); }))) {
            mixin(enumMixinStr___INO_T_TYPE);
        }
    }




    static if(!is(typeof(__INO64_T_TYPE))) {
        private enum enumMixinStr___INO64_T_TYPE = `enum __INO64_T_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___INO64_T_TYPE); }))) {
            mixin(enumMixinStr___INO64_T_TYPE);
        }
    }




    static if(!is(typeof(__MODE_T_TYPE))) {
        private enum enumMixinStr___MODE_T_TYPE = `enum __MODE_T_TYPE = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr___MODE_T_TYPE); }))) {
            mixin(enumMixinStr___MODE_T_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DECIMAL256_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_DECIMAL256_ARRAY_BUILDER = `enum GARROW_TYPE_DECIMAL256_ARRAY_BUILDER = ( garrow_decimal256_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DECIMAL256_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DECIMAL256_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(__NLINK_T_TYPE))) {
        private enum enumMixinStr___NLINK_T_TYPE = `enum __NLINK_T_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___NLINK_T_TYPE); }))) {
            mixin(enumMixinStr___NLINK_T_TYPE);
        }
    }




    static if(!is(typeof(__FSWORD_T_TYPE))) {
        private enum enumMixinStr___FSWORD_T_TYPE = `enum __FSWORD_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___FSWORD_T_TYPE); }))) {
            mixin(enumMixinStr___FSWORD_T_TYPE);
        }
    }




    static if(!is(typeof(__OFF_T_TYPE))) {
        private enum enumMixinStr___OFF_T_TYPE = `enum __OFF_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___OFF_T_TYPE); }))) {
            mixin(enumMixinStr___OFF_T_TYPE);
        }
    }




    static if(!is(typeof(__OFF64_T_TYPE))) {
        private enum enumMixinStr___OFF64_T_TYPE = `enum __OFF64_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___OFF64_T_TYPE); }))) {
            mixin(enumMixinStr___OFF64_T_TYPE);
        }
    }




    static if(!is(typeof(__PID_T_TYPE))) {
        private enum enumMixinStr___PID_T_TYPE = `enum __PID_T_TYPE = int;`;
        static if(is(typeof({ mixin(enumMixinStr___PID_T_TYPE); }))) {
            mixin(enumMixinStr___PID_T_TYPE);
        }
    }




    static if(!is(typeof(__RLIM_T_TYPE))) {
        private enum enumMixinStr___RLIM_T_TYPE = `enum __RLIM_T_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___RLIM_T_TYPE); }))) {
            mixin(enumMixinStr___RLIM_T_TYPE);
        }
    }




    static if(!is(typeof(__RLIM64_T_TYPE))) {
        private enum enumMixinStr___RLIM64_T_TYPE = `enum __RLIM64_T_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___RLIM64_T_TYPE); }))) {
            mixin(enumMixinStr___RLIM64_T_TYPE);
        }
    }




    static if(!is(typeof(__BLKCNT_T_TYPE))) {
        private enum enumMixinStr___BLKCNT_T_TYPE = `enum __BLKCNT_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___BLKCNT_T_TYPE); }))) {
            mixin(enumMixinStr___BLKCNT_T_TYPE);
        }
    }




    static if(!is(typeof(__BLKCNT64_T_TYPE))) {
        private enum enumMixinStr___BLKCNT64_T_TYPE = `enum __BLKCNT64_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___BLKCNT64_T_TYPE); }))) {
            mixin(enumMixinStr___BLKCNT64_T_TYPE);
        }
    }




    static if(!is(typeof(__FSBLKCNT_T_TYPE))) {
        private enum enumMixinStr___FSBLKCNT_T_TYPE = `enum __FSBLKCNT_T_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___FSBLKCNT_T_TYPE); }))) {
            mixin(enumMixinStr___FSBLKCNT_T_TYPE);
        }
    }




    static if(!is(typeof(__FSBLKCNT64_T_TYPE))) {
        private enum enumMixinStr___FSBLKCNT64_T_TYPE = `enum __FSBLKCNT64_T_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___FSBLKCNT64_T_TYPE); }))) {
            mixin(enumMixinStr___FSBLKCNT64_T_TYPE);
        }
    }




    static if(!is(typeof(__FSFILCNT_T_TYPE))) {
        private enum enumMixinStr___FSFILCNT_T_TYPE = `enum __FSFILCNT_T_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___FSFILCNT_T_TYPE); }))) {
            mixin(enumMixinStr___FSFILCNT_T_TYPE);
        }
    }




    static if(!is(typeof(__FSFILCNT64_T_TYPE))) {
        private enum enumMixinStr___FSFILCNT64_T_TYPE = `enum __FSFILCNT64_T_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___FSFILCNT64_T_TYPE); }))) {
            mixin(enumMixinStr___FSFILCNT64_T_TYPE);
        }
    }




    static if(!is(typeof(__ID_T_TYPE))) {
        private enum enumMixinStr___ID_T_TYPE = `enum __ID_T_TYPE = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr___ID_T_TYPE); }))) {
            mixin(enumMixinStr___ID_T_TYPE);
        }
    }




    static if(!is(typeof(__CLOCK_T_TYPE))) {
        private enum enumMixinStr___CLOCK_T_TYPE = `enum __CLOCK_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___CLOCK_T_TYPE); }))) {
            mixin(enumMixinStr___CLOCK_T_TYPE);
        }
    }




    static if(!is(typeof(__TIME_T_TYPE))) {
        private enum enumMixinStr___TIME_T_TYPE = `enum __TIME_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___TIME_T_TYPE); }))) {
            mixin(enumMixinStr___TIME_T_TYPE);
        }
    }




    static if(!is(typeof(__USECONDS_T_TYPE))) {
        private enum enumMixinStr___USECONDS_T_TYPE = `enum __USECONDS_T_TYPE = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr___USECONDS_T_TYPE); }))) {
            mixin(enumMixinStr___USECONDS_T_TYPE);
        }
    }




    static if(!is(typeof(__SUSECONDS_T_TYPE))) {
        private enum enumMixinStr___SUSECONDS_T_TYPE = `enum __SUSECONDS_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SUSECONDS_T_TYPE); }))) {
            mixin(enumMixinStr___SUSECONDS_T_TYPE);
        }
    }




    static if(!is(typeof(__DADDR_T_TYPE))) {
        private enum enumMixinStr___DADDR_T_TYPE = `enum __DADDR_T_TYPE = int;`;
        static if(is(typeof({ mixin(enumMixinStr___DADDR_T_TYPE); }))) {
            mixin(enumMixinStr___DADDR_T_TYPE);
        }
    }




    static if(!is(typeof(__KEY_T_TYPE))) {
        private enum enumMixinStr___KEY_T_TYPE = `enum __KEY_T_TYPE = int;`;
        static if(is(typeof({ mixin(enumMixinStr___KEY_T_TYPE); }))) {
            mixin(enumMixinStr___KEY_T_TYPE);
        }
    }




    static if(!is(typeof(__CLOCKID_T_TYPE))) {
        private enum enumMixinStr___CLOCKID_T_TYPE = `enum __CLOCKID_T_TYPE = int;`;
        static if(is(typeof({ mixin(enumMixinStr___CLOCKID_T_TYPE); }))) {
            mixin(enumMixinStr___CLOCKID_T_TYPE);
        }
    }




    static if(!is(typeof(__TIMER_T_TYPE))) {
        private enum enumMixinStr___TIMER_T_TYPE = `enum __TIMER_T_TYPE = void *;`;
        static if(is(typeof({ mixin(enumMixinStr___TIMER_T_TYPE); }))) {
            mixin(enumMixinStr___TIMER_T_TYPE);
        }
    }




    static if(!is(typeof(__BLKSIZE_T_TYPE))) {
        private enum enumMixinStr___BLKSIZE_T_TYPE = `enum __BLKSIZE_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___BLKSIZE_T_TYPE); }))) {
            mixin(enumMixinStr___BLKSIZE_T_TYPE);
        }
    }




    static if(!is(typeof(__FSID_T_TYPE))) {
        private enum enumMixinStr___FSID_T_TYPE = `enum __FSID_T_TYPE = { int __val [ 2 ] ; };`;
        static if(is(typeof({ mixin(enumMixinStr___FSID_T_TYPE); }))) {
            mixin(enumMixinStr___FSID_T_TYPE);
        }
    }




    static if(!is(typeof(__SSIZE_T_TYPE))) {
        private enum enumMixinStr___SSIZE_T_TYPE = `enum __SSIZE_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SSIZE_T_TYPE); }))) {
            mixin(enumMixinStr___SSIZE_T_TYPE);
        }
    }




    static if(!is(typeof(__CPU_MASK_TYPE))) {
        private enum enumMixinStr___CPU_MASK_TYPE = `enum __CPU_MASK_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___CPU_MASK_TYPE); }))) {
            mixin(enumMixinStr___CPU_MASK_TYPE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DECIMAL128_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_DECIMAL128_ARRAY_BUILDER = `enum GARROW_TYPE_DECIMAL128_ARRAY_BUILDER = ( garrow_decimal128_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DECIMAL128_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DECIMAL128_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(__OFF_T_MATCHES_OFF64_T))) {
        private enum enumMixinStr___OFF_T_MATCHES_OFF64_T = `enum __OFF_T_MATCHES_OFF64_T = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___OFF_T_MATCHES_OFF64_T); }))) {
            mixin(enumMixinStr___OFF_T_MATCHES_OFF64_T);
        }
    }




    static if(!is(typeof(__INO_T_MATCHES_INO64_T))) {
        private enum enumMixinStr___INO_T_MATCHES_INO64_T = `enum __INO_T_MATCHES_INO64_T = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___INO_T_MATCHES_INO64_T); }))) {
            mixin(enumMixinStr___INO_T_MATCHES_INO64_T);
        }
    }




    static if(!is(typeof(__RLIM_T_MATCHES_RLIM64_T))) {
        private enum enumMixinStr___RLIM_T_MATCHES_RLIM64_T = `enum __RLIM_T_MATCHES_RLIM64_T = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___RLIM_T_MATCHES_RLIM64_T); }))) {
            mixin(enumMixinStr___RLIM_T_MATCHES_RLIM64_T);
        }
    }




    static if(!is(typeof(__FD_SETSIZE))) {
        private enum enumMixinStr___FD_SETSIZE = `enum __FD_SETSIZE = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr___FD_SETSIZE); }))) {
            mixin(enumMixinStr___FD_SETSIZE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_MAP_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_MAP_ARRAY_BUILDER = `enum GARROW_TYPE_MAP_ARRAY_BUILDER = ( garrow_map_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_MAP_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_MAP_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(_BITS_UINTN_IDENTITY_H))) {
        private enum enumMixinStr__BITS_UINTN_IDENTITY_H = `enum _BITS_UINTN_IDENTITY_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_UINTN_IDENTITY_H); }))) {
            mixin(enumMixinStr__BITS_UINTN_IDENTITY_H);
        }
    }




    static if(!is(typeof(GARROW_TYPE_STRUCT_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_STRUCT_ARRAY_BUILDER = `enum GARROW_TYPE_STRUCT_ARRAY_BUILDER = ( garrow_struct_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_STRUCT_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_STRUCT_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LARGE_LIST_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_LARGE_LIST_ARRAY_BUILDER = `enum GARROW_TYPE_LARGE_LIST_ARRAY_BUILDER = ( garrow_large_list_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LARGE_LIST_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LARGE_LIST_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LIST_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_LIST_ARRAY_BUILDER = `enum GARROW_TYPE_LIST_ARRAY_BUILDER = ( garrow_list_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LIST_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LIST_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_STRING_DICTIONARY_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_STRING_DICTIONARY_ARRAY_BUILDER = `enum GARROW_TYPE_STRING_DICTIONARY_ARRAY_BUILDER = ( garrow_string_dictionary_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_STRING_DICTIONARY_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_STRING_DICTIONARY_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER = `enum GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER = ( garrow_binary_dictionary_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(WNOHANG))) {
        private enum enumMixinStr_WNOHANG = `enum WNOHANG = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_WNOHANG); }))) {
            mixin(enumMixinStr_WNOHANG);
        }
    }




    static if(!is(typeof(WUNTRACED))) {
        private enum enumMixinStr_WUNTRACED = `enum WUNTRACED = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_WUNTRACED); }))) {
            mixin(enumMixinStr_WUNTRACED);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TIME64_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_TIME64_ARRAY_BUILDER = `enum GARROW_TYPE_TIME64_ARRAY_BUILDER = ( garrow_time64_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIME64_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIME64_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(WSTOPPED))) {
        private enum enumMixinStr_WSTOPPED = `enum WSTOPPED = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_WSTOPPED); }))) {
            mixin(enumMixinStr_WSTOPPED);
        }
    }




    static if(!is(typeof(WEXITED))) {
        private enum enumMixinStr_WEXITED = `enum WEXITED = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_WEXITED); }))) {
            mixin(enumMixinStr_WEXITED);
        }
    }




    static if(!is(typeof(WCONTINUED))) {
        private enum enumMixinStr_WCONTINUED = `enum WCONTINUED = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_WCONTINUED); }))) {
            mixin(enumMixinStr_WCONTINUED);
        }
    }




    static if(!is(typeof(WNOWAIT))) {
        private enum enumMixinStr_WNOWAIT = `enum WNOWAIT = 0x01000000;`;
        static if(is(typeof({ mixin(enumMixinStr_WNOWAIT); }))) {
            mixin(enumMixinStr_WNOWAIT);
        }
    }




    static if(!is(typeof(__WNOTHREAD))) {
        private enum enumMixinStr___WNOTHREAD = `enum __WNOTHREAD = 0x20000000;`;
        static if(is(typeof({ mixin(enumMixinStr___WNOTHREAD); }))) {
            mixin(enumMixinStr___WNOTHREAD);
        }
    }




    static if(!is(typeof(__WALL))) {
        private enum enumMixinStr___WALL = `enum __WALL = 0x40000000;`;
        static if(is(typeof({ mixin(enumMixinStr___WALL); }))) {
            mixin(enumMixinStr___WALL);
        }
    }




    static if(!is(typeof(__WCLONE))) {
        private enum enumMixinStr___WCLONE = `enum __WCLONE = 0x80000000;`;
        static if(is(typeof({ mixin(enumMixinStr___WCLONE); }))) {
            mixin(enumMixinStr___WCLONE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TIME32_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_TIME32_ARRAY_BUILDER = `enum GARROW_TYPE_TIME32_ARRAY_BUILDER = ( garrow_time32_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIME32_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIME32_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(__ENUM_IDTYPE_T))) {
        private enum enumMixinStr___ENUM_IDTYPE_T = `enum __ENUM_IDTYPE_T = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___ENUM_IDTYPE_T); }))) {
            mixin(enumMixinStr___ENUM_IDTYPE_T);
        }
    }




    static if(!is(typeof(GARROW_TYPE_TIMESTAMP_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_TIMESTAMP_ARRAY_BUILDER = `enum GARROW_TYPE_TIMESTAMP_ARRAY_BUILDER = ( garrow_timestamp_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_TIMESTAMP_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_TIMESTAMP_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DATE64_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_DATE64_ARRAY_BUILDER = `enum GARROW_TYPE_DATE64_ARRAY_BUILDER = ( garrow_date64_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DATE64_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DATE64_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DATE32_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_DATE32_ARRAY_BUILDER = `enum GARROW_TYPE_DATE32_ARRAY_BUILDER = ( garrow_date32_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DATE32_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DATE32_ARRAY_BUILDER);
        }
    }
    static if(!is(typeof(GARROW_TYPE_FIXED_SIZE_BINARY_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_FIXED_SIZE_BINARY_ARRAY_BUILDER = `enum GARROW_TYPE_FIXED_SIZE_BINARY_ARRAY_BUILDER = ( garrow_fixed_size_binary_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FIXED_SIZE_BINARY_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FIXED_SIZE_BINARY_ARRAY_BUILDER);
        }
    }
    static if(!is(typeof(__W_CONTINUED))) {
        private enum enumMixinStr___W_CONTINUED = `enum __W_CONTINUED = 0xffff;`;
        static if(is(typeof({ mixin(enumMixinStr___W_CONTINUED); }))) {
            mixin(enumMixinStr___W_CONTINUED);
        }
    }




    static if(!is(typeof(__WCOREFLAG))) {
        private enum enumMixinStr___WCOREFLAG = `enum __WCOREFLAG = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr___WCOREFLAG); }))) {
            mixin(enumMixinStr___WCOREFLAG);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LARGE_STRING_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_LARGE_STRING_ARRAY_BUILDER = `enum GARROW_TYPE_LARGE_STRING_ARRAY_BUILDER = ( garrow_large_string_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LARGE_STRING_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LARGE_STRING_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_STRING_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_STRING_ARRAY_BUILDER = `enum GARROW_TYPE_STRING_ARRAY_BUILDER = ( garrow_string_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_STRING_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_STRING_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER = `enum GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER = ( garrow_large_binary_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_BINARY_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_BINARY_ARRAY_BUILDER = `enum GARROW_TYPE_BINARY_ARRAY_BUILDER = ( garrow_binary_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_BINARY_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_BINARY_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_DOUBLE_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_DOUBLE_ARRAY_BUILDER = `enum GARROW_TYPE_DOUBLE_ARRAY_BUILDER = ( garrow_double_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_DOUBLE_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_DOUBLE_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_FLOAT_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_FLOAT_ARRAY_BUILDER = `enum GARROW_TYPE_FLOAT_ARRAY_BUILDER = ( garrow_float_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_FLOAT_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_FLOAT_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT64_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_UINT64_ARRAY_BUILDER = `enum GARROW_TYPE_UINT64_ARRAY_BUILDER = ( garrow_uint64_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT64_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT64_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT64_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_INT64_ARRAY_BUILDER = `enum GARROW_TYPE_INT64_ARRAY_BUILDER = ( garrow_int64_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT64_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT64_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT32_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_UINT32_ARRAY_BUILDER = `enum GARROW_TYPE_UINT32_ARRAY_BUILDER = ( garrow_uint32_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT32_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT32_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT32_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_INT32_ARRAY_BUILDER = `enum GARROW_TYPE_INT32_ARRAY_BUILDER = ( garrow_int32_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT32_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT32_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(__WORDSIZE))) {
        private enum enumMixinStr___WORDSIZE = `enum __WORDSIZE = 64;`;
        static if(is(typeof({ mixin(enumMixinStr___WORDSIZE); }))) {
            mixin(enumMixinStr___WORDSIZE);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT16_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_UINT16_ARRAY_BUILDER = `enum GARROW_TYPE_UINT16_ARRAY_BUILDER = ( garrow_uint16_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT16_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT16_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT16_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_INT16_ARRAY_BUILDER = `enum GARROW_TYPE_INT16_ARRAY_BUILDER = ( garrow_int16_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT16_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT16_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT8_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_UINT8_ARRAY_BUILDER = `enum GARROW_TYPE_UINT8_ARRAY_BUILDER = ( garrow_uint8_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT8_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT8_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT8_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_INT8_ARRAY_BUILDER = `enum GARROW_TYPE_INT8_ARRAY_BUILDER = ( garrow_int8_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT8_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT8_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_UINT_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_UINT_ARRAY_BUILDER = `enum GARROW_TYPE_UINT_ARRAY_BUILDER = ( garrow_uint_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_UINT_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_UINT_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_INT_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_INT_ARRAY_BUILDER = `enum GARROW_TYPE_INT_ARRAY_BUILDER = ( garrow_int_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_INT_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_INT_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_BOOLEAN_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_BOOLEAN_ARRAY_BUILDER = `enum GARROW_TYPE_BOOLEAN_ARRAY_BUILDER = ( garrow_boolean_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_BOOLEAN_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_BOOLEAN_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_NULL_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_NULL_ARRAY_BUILDER = `enum GARROW_TYPE_NULL_ARRAY_BUILDER = ( garrow_null_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_NULL_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_NULL_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(GARROW_TYPE_ARRAY_BUILDER))) {
        private enum enumMixinStr_GARROW_TYPE_ARRAY_BUILDER = `enum GARROW_TYPE_ARRAY_BUILDER = ( garrow_array_builder_get_type ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_GARROW_TYPE_ARRAY_BUILDER); }))) {
            mixin(enumMixinStr_GARROW_TYPE_ARRAY_BUILDER);
        }
    }




    static if(!is(typeof(__WORDSIZE_TIME64_COMPAT32))) {
        private enum enumMixinStr___WORDSIZE_TIME64_COMPAT32 = `enum __WORDSIZE_TIME64_COMPAT32 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___WORDSIZE_TIME64_COMPAT32); }))) {
            mixin(enumMixinStr___WORDSIZE_TIME64_COMPAT32);
        }
    }




    static if(!is(typeof(__SYSCALL_WORDSIZE))) {
        private enum enumMixinStr___SYSCALL_WORDSIZE = `enum __SYSCALL_WORDSIZE = 64;`;
        static if(is(typeof({ mixin(enumMixinStr___SYSCALL_WORDSIZE); }))) {
            mixin(enumMixinStr___SYSCALL_WORDSIZE);
        }
    }
    static if(!is(typeof(_SYS_CDEFS_H))) {
        private enum enumMixinStr__SYS_CDEFS_H = `enum _SYS_CDEFS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SYS_CDEFS_H); }))) {
            mixin(enumMixinStr__SYS_CDEFS_H);
        }
    }
    static if(!is(typeof(__THROW))) {
        private enum enumMixinStr___THROW = `enum __THROW = __attribute__ ( ( __nothrow__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___THROW); }))) {
            mixin(enumMixinStr___THROW);
        }
    }




    static if(!is(typeof(__THROWNL))) {
        private enum enumMixinStr___THROWNL = `enum __THROWNL = __attribute__ ( ( __nothrow__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___THROWNL); }))) {
            mixin(enumMixinStr___THROWNL);
        }
    }
    static if(!is(typeof(__ptr_t))) {
        private enum enumMixinStr___ptr_t = `enum __ptr_t = void *;`;
        static if(is(typeof({ mixin(enumMixinStr___ptr_t); }))) {
            mixin(enumMixinStr___ptr_t);
        }
    }
    static if(!is(typeof(__flexarr))) {
        private enum enumMixinStr___flexarr = `enum __flexarr = [ ];`;
        static if(is(typeof({ mixin(enumMixinStr___flexarr); }))) {
            mixin(enumMixinStr___flexarr);
        }
    }




    static if(!is(typeof(__glibc_c99_flexarr_available))) {
        private enum enumMixinStr___glibc_c99_flexarr_available = `enum __glibc_c99_flexarr_available = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___glibc_c99_flexarr_available); }))) {
            mixin(enumMixinStr___glibc_c99_flexarr_available);
        }
    }
    static if(!is(typeof(__attribute_malloc__))) {
        private enum enumMixinStr___attribute_malloc__ = `enum __attribute_malloc__ = __attribute__ ( ( __malloc__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_malloc__); }))) {
            mixin(enumMixinStr___attribute_malloc__);
        }
    }






    static if(!is(typeof(__attribute_pure__))) {
        private enum enumMixinStr___attribute_pure__ = `enum __attribute_pure__ = __attribute__ ( ( __pure__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_pure__); }))) {
            mixin(enumMixinStr___attribute_pure__);
        }
    }




    static if(!is(typeof(__attribute_const__))) {
        private enum enumMixinStr___attribute_const__ = `enum __attribute_const__ = __attribute__ ( cast( __const__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_const__); }))) {
            mixin(enumMixinStr___attribute_const__);
        }
    }




    static if(!is(typeof(__attribute_used__))) {
        private enum enumMixinStr___attribute_used__ = `enum __attribute_used__ = __attribute__ ( ( __used__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_used__); }))) {
            mixin(enumMixinStr___attribute_used__);
        }
    }




    static if(!is(typeof(__attribute_noinline__))) {
        private enum enumMixinStr___attribute_noinline__ = `enum __attribute_noinline__ = __attribute__ ( ( __noinline__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_noinline__); }))) {
            mixin(enumMixinStr___attribute_noinline__);
        }
    }




    static if(!is(typeof(__attribute_deprecated__))) {
        private enum enumMixinStr___attribute_deprecated__ = `enum __attribute_deprecated__ = __attribute__ ( ( __deprecated__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_deprecated__); }))) {
            mixin(enumMixinStr___attribute_deprecated__);
        }
    }
    static if(!is(typeof(__attribute_warn_unused_result__))) {
        private enum enumMixinStr___attribute_warn_unused_result__ = `enum __attribute_warn_unused_result__ = __attribute__ ( ( __warn_unused_result__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_warn_unused_result__); }))) {
            mixin(enumMixinStr___attribute_warn_unused_result__);
        }
    }






    static if(!is(typeof(__always_inline))) {
        private enum enumMixinStr___always_inline = `enum __always_inline = __inline __attribute__ ( ( __always_inline__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___always_inline); }))) {
            mixin(enumMixinStr___always_inline);
        }
    }






    static if(!is(typeof(__extern_inline))) {
        private enum enumMixinStr___extern_inline = `enum __extern_inline = extern __inline __attribute__ ( ( __gnu_inline__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___extern_inline); }))) {
            mixin(enumMixinStr___extern_inline);
        }
    }




    static if(!is(typeof(__extern_always_inline))) {
        private enum enumMixinStr___extern_always_inline = `enum __extern_always_inline = extern __inline __attribute__ ( ( __always_inline__ ) ) __attribute__ ( ( __gnu_inline__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___extern_always_inline); }))) {
            mixin(enumMixinStr___extern_always_inline);
        }
    }




    static if(!is(typeof(__fortify_function))) {
        private enum enumMixinStr___fortify_function = `enum __fortify_function = extern __inline __attribute__ ( ( __always_inline__ ) ) __attribute__ ( ( __gnu_inline__ ) ) ;`;
        static if(is(typeof({ mixin(enumMixinStr___fortify_function); }))) {
            mixin(enumMixinStr___fortify_function);
        }
    }




    static if(!is(typeof(__restrict_arr))) {
        private enum enumMixinStr___restrict_arr = `enum __restrict_arr = __restrict;`;
        static if(is(typeof({ mixin(enumMixinStr___restrict_arr); }))) {
            mixin(enumMixinStr___restrict_arr);
        }
    }
    static if(!is(typeof(__HAVE_GENERIC_SELECTION))) {
        private enum enumMixinStr___HAVE_GENERIC_SELECTION = `enum __HAVE_GENERIC_SELECTION = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_GENERIC_SELECTION); }))) {
            mixin(enumMixinStr___HAVE_GENERIC_SELECTION);
        }
    }




    static if(!is(typeof(_SYS_SELECT_H))) {
        private enum enumMixinStr__SYS_SELECT_H = `enum _SYS_SELECT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SYS_SELECT_H); }))) {
            mixin(enumMixinStr__SYS_SELECT_H);
        }
    }






    static if(!is(typeof(__NFDBITS))) {
        private enum enumMixinStr___NFDBITS = `enum __NFDBITS = ( 8 * cast( int ) ( __fd_mask ) .sizeof );`;
        static if(is(typeof({ mixin(enumMixinStr___NFDBITS); }))) {
            mixin(enumMixinStr___NFDBITS);
        }
    }
    static if(!is(typeof(FD_SETSIZE))) {
        private enum enumMixinStr_FD_SETSIZE = `enum FD_SETSIZE = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_FD_SETSIZE); }))) {
            mixin(enumMixinStr_FD_SETSIZE);
        }
    }




    static if(!is(typeof(NFDBITS))) {
        private enum enumMixinStr_NFDBITS = `enum NFDBITS = ( 8 * cast( int ) ( __fd_mask ) .sizeof );`;
        static if(is(typeof({ mixin(enumMixinStr_NFDBITS); }))) {
            mixin(enumMixinStr_NFDBITS);
        }
    }
    static if(!is(typeof(_SYS_SYSMACROS_H))) {
        private enum enumMixinStr__SYS_SYSMACROS_H = `enum _SYS_SYSMACROS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SYS_SYSMACROS_H); }))) {
            mixin(enumMixinStr__SYS_SYSMACROS_H);
        }
    }
    static if(!is(typeof(__SYSMACROS_DECL_TEMPL))) {
        private enum enumMixinStr___SYSMACROS_DECL_TEMPL = `enum __SYSMACROS_DECL_TEMPL = ( rtype , name , proto ) extern rtype gnu_dev_ ## name proto __attribute__ ( ( __nothrow__ ) ) __attribute__ ( cast( __const__ ) ) ;;`;
        static if(is(typeof({ mixin(enumMixinStr___SYSMACROS_DECL_TEMPL); }))) {
            mixin(enumMixinStr___SYSMACROS_DECL_TEMPL);
        }
    }




    static if(!is(typeof(__SYSMACROS_IMPL_TEMPL))) {
        private enum enumMixinStr___SYSMACROS_IMPL_TEMPL = `enum __SYSMACROS_IMPL_TEMPL = ( rtype , name , proto ) __extension__ extern __inline __attribute__ ( ( __gnu_inline__ ) ) __attribute__ ( cast( __const__ ) ) rtype __attribute__ ( ( __nothrow__ ) ) gnu_dev_ ## name proto;`;
        static if(is(typeof({ mixin(enumMixinStr___SYSMACROS_IMPL_TEMPL); }))) {
            mixin(enumMixinStr___SYSMACROS_IMPL_TEMPL);
        }
    }
    static if(!is(typeof(_SYS_TYPES_H))) {
        private enum enumMixinStr__SYS_TYPES_H = `enum _SYS_TYPES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SYS_TYPES_H); }))) {
            mixin(enumMixinStr__SYS_TYPES_H);
        }
    }
    static if(!is(typeof(__BIT_TYPES_DEFINED__))) {
        private enum enumMixinStr___BIT_TYPES_DEFINED__ = `enum __BIT_TYPES_DEFINED__ = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___BIT_TYPES_DEFINED__); }))) {
            mixin(enumMixinStr___BIT_TYPES_DEFINED__);
        }
    }
    static if(!is(typeof(_SYS_UCONTEXT_H))) {
        private enum enumMixinStr__SYS_UCONTEXT_H = `enum _SYS_UCONTEXT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SYS_UCONTEXT_H); }))) {
            mixin(enumMixinStr__SYS_UCONTEXT_H);
        }
    }




    static if(!is(typeof(__ctx))) {
        private enum enumMixinStr___ctx = `enum __ctx = ( fld ) fld;`;
        static if(is(typeof({ mixin(enumMixinStr___ctx); }))) {
            mixin(enumMixinStr___ctx);
        }
    }




    static if(!is(typeof(__NGREG))) {
        private enum enumMixinStr___NGREG = `enum __NGREG = 23;`;
        static if(is(typeof({ mixin(enumMixinStr___NGREG); }))) {
            mixin(enumMixinStr___NGREG);
        }
    }




    static if(!is(typeof(NGREG))) {
        private enum enumMixinStr_NGREG = `enum NGREG = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_NGREG); }))) {
            mixin(enumMixinStr_NGREG);
        }
    }
    static if(!is(typeof(FLT_EVAL_METHOD))) {
        private enum enumMixinStr_FLT_EVAL_METHOD = `enum FLT_EVAL_METHOD = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_EVAL_METHOD); }))) {
            mixin(enumMixinStr_FLT_EVAL_METHOD);
        }
    }




    static if(!is(typeof(FLT_ROUNDS))) {
        private enum enumMixinStr_FLT_ROUNDS = `enum FLT_ROUNDS = ( __builtin_flt_rounds ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_ROUNDS); }))) {
            mixin(enumMixinStr_FLT_ROUNDS);
        }
    }




    static if(!is(typeof(FLT_RADIX))) {
        private enum enumMixinStr_FLT_RADIX = `enum FLT_RADIX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_RADIX); }))) {
            mixin(enumMixinStr_FLT_RADIX);
        }
    }




    static if(!is(typeof(FLT_MANT_DIG))) {
        private enum enumMixinStr_FLT_MANT_DIG = `enum FLT_MANT_DIG = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_MANT_DIG); }))) {
            mixin(enumMixinStr_FLT_MANT_DIG);
        }
    }




    static if(!is(typeof(DBL_MANT_DIG))) {
        private enum enumMixinStr_DBL_MANT_DIG = `enum DBL_MANT_DIG = 53;`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_MANT_DIG); }))) {
            mixin(enumMixinStr_DBL_MANT_DIG);
        }
    }




    static if(!is(typeof(LDBL_MANT_DIG))) {
        private enum enumMixinStr_LDBL_MANT_DIG = `enum LDBL_MANT_DIG = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_MANT_DIG); }))) {
            mixin(enumMixinStr_LDBL_MANT_DIG);
        }
    }




    static if(!is(typeof(DECIMAL_DIG))) {
        private enum enumMixinStr_DECIMAL_DIG = `enum DECIMAL_DIG = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_DECIMAL_DIG); }))) {
            mixin(enumMixinStr_DECIMAL_DIG);
        }
    }




    static if(!is(typeof(FLT_DIG))) {
        private enum enumMixinStr_FLT_DIG = `enum FLT_DIG = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_DIG); }))) {
            mixin(enumMixinStr_FLT_DIG);
        }
    }




    static if(!is(typeof(DBL_DIG))) {
        private enum enumMixinStr_DBL_DIG = `enum DBL_DIG = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_DIG); }))) {
            mixin(enumMixinStr_DBL_DIG);
        }
    }




    static if(!is(typeof(LDBL_DIG))) {
        private enum enumMixinStr_LDBL_DIG = `enum LDBL_DIG = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_DIG); }))) {
            mixin(enumMixinStr_LDBL_DIG);
        }
    }




    static if(!is(typeof(FLT_MIN_EXP))) {
        private enum enumMixinStr_FLT_MIN_EXP = `enum FLT_MIN_EXP = (-125);`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_MIN_EXP); }))) {
            mixin(enumMixinStr_FLT_MIN_EXP);
        }
    }




    static if(!is(typeof(DBL_MIN_EXP))) {
        private enum enumMixinStr_DBL_MIN_EXP = `enum DBL_MIN_EXP = (-1021);`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_MIN_EXP); }))) {
            mixin(enumMixinStr_DBL_MIN_EXP);
        }
    }




    static if(!is(typeof(LDBL_MIN_EXP))) {
        private enum enumMixinStr_LDBL_MIN_EXP = `enum LDBL_MIN_EXP = (-16381);`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_MIN_EXP); }))) {
            mixin(enumMixinStr_LDBL_MIN_EXP);
        }
    }




    static if(!is(typeof(FLT_MIN_10_EXP))) {
        private enum enumMixinStr_FLT_MIN_10_EXP = `enum FLT_MIN_10_EXP = (-37);`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_MIN_10_EXP); }))) {
            mixin(enumMixinStr_FLT_MIN_10_EXP);
        }
    }




    static if(!is(typeof(DBL_MIN_10_EXP))) {
        private enum enumMixinStr_DBL_MIN_10_EXP = `enum DBL_MIN_10_EXP = (-307);`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_MIN_10_EXP); }))) {
            mixin(enumMixinStr_DBL_MIN_10_EXP);
        }
    }




    static if(!is(typeof(LDBL_MIN_10_EXP))) {
        private enum enumMixinStr_LDBL_MIN_10_EXP = `enum LDBL_MIN_10_EXP = (-4931);`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_MIN_10_EXP); }))) {
            mixin(enumMixinStr_LDBL_MIN_10_EXP);
        }
    }




    static if(!is(typeof(FLT_MAX_EXP))) {
        private enum enumMixinStr_FLT_MAX_EXP = `enum FLT_MAX_EXP = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_MAX_EXP); }))) {
            mixin(enumMixinStr_FLT_MAX_EXP);
        }
    }




    static if(!is(typeof(DBL_MAX_EXP))) {
        private enum enumMixinStr_DBL_MAX_EXP = `enum DBL_MAX_EXP = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_MAX_EXP); }))) {
            mixin(enumMixinStr_DBL_MAX_EXP);
        }
    }




    static if(!is(typeof(LDBL_MAX_EXP))) {
        private enum enumMixinStr_LDBL_MAX_EXP = `enum LDBL_MAX_EXP = 16384;`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_MAX_EXP); }))) {
            mixin(enumMixinStr_LDBL_MAX_EXP);
        }
    }




    static if(!is(typeof(FLT_MAX_10_EXP))) {
        private enum enumMixinStr_FLT_MAX_10_EXP = `enum FLT_MAX_10_EXP = 38;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_MAX_10_EXP); }))) {
            mixin(enumMixinStr_FLT_MAX_10_EXP);
        }
    }




    static if(!is(typeof(DBL_MAX_10_EXP))) {
        private enum enumMixinStr_DBL_MAX_10_EXP = `enum DBL_MAX_10_EXP = 308;`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_MAX_10_EXP); }))) {
            mixin(enumMixinStr_DBL_MAX_10_EXP);
        }
    }




    static if(!is(typeof(LDBL_MAX_10_EXP))) {
        private enum enumMixinStr_LDBL_MAX_10_EXP = `enum LDBL_MAX_10_EXP = 4932;`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_MAX_10_EXP); }))) {
            mixin(enumMixinStr_LDBL_MAX_10_EXP);
        }
    }




    static if(!is(typeof(FLT_MAX))) {
        private enum enumMixinStr_FLT_MAX = `enum FLT_MAX = 3.40282346638528859811704183484516925e+38F;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_MAX); }))) {
            mixin(enumMixinStr_FLT_MAX);
        }
    }




    static if(!is(typeof(DBL_MAX))) {
        private enum enumMixinStr_DBL_MAX = `enum DBL_MAX = ((double)1.79769313486231570814527423731704357e+308L);`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_MAX); }))) {
            mixin(enumMixinStr_DBL_MAX);
        }
    }




    static if(!is(typeof(LDBL_MAX))) {
        private enum enumMixinStr_LDBL_MAX = `enum LDBL_MAX = 1.18973149535723176502126385303097021e+4932L;`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_MAX); }))) {
            mixin(enumMixinStr_LDBL_MAX);
        }
    }




    static if(!is(typeof(FLT_EPSILON))) {
        private enum enumMixinStr_FLT_EPSILON = `enum FLT_EPSILON = 1.19209289550781250000000000000000000e-7F;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_EPSILON); }))) {
            mixin(enumMixinStr_FLT_EPSILON);
        }
    }




    static if(!is(typeof(DBL_EPSILON))) {
        private enum enumMixinStr_DBL_EPSILON = `enum DBL_EPSILON = ((double)2.22044604925031308084726333618164062e-16L);`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_EPSILON); }))) {
            mixin(enumMixinStr_DBL_EPSILON);
        }
    }




    static if(!is(typeof(LDBL_EPSILON))) {
        private enum enumMixinStr_LDBL_EPSILON = `enum LDBL_EPSILON = 1.08420217248550443400745280086994171e-19L;`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_EPSILON); }))) {
            mixin(enumMixinStr_LDBL_EPSILON);
        }
    }




    static if(!is(typeof(FLT_MIN))) {
        private enum enumMixinStr_FLT_MIN = `enum FLT_MIN = 1.17549435082228750796873653722224568e-38F;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_MIN); }))) {
            mixin(enumMixinStr_FLT_MIN);
        }
    }




    static if(!is(typeof(DBL_MIN))) {
        private enum enumMixinStr_DBL_MIN = `enum DBL_MIN = ((double)2.22507385850720138309023271733240406e-308L);`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_MIN); }))) {
            mixin(enumMixinStr_DBL_MIN);
        }
    }




    static if(!is(typeof(LDBL_MIN))) {
        private enum enumMixinStr_LDBL_MIN = `enum LDBL_MIN = 3.36210314311209350626267781732175260e-4932L;`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_MIN); }))) {
            mixin(enumMixinStr_LDBL_MIN);
        }
    }




    static if(!is(typeof(FLT_TRUE_MIN))) {
        private enum enumMixinStr_FLT_TRUE_MIN = `enum FLT_TRUE_MIN = 1.40129846432481707092372958328991613e-45F;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_TRUE_MIN); }))) {
            mixin(enumMixinStr_FLT_TRUE_MIN);
        }
    }




    static if(!is(typeof(DBL_TRUE_MIN))) {
        private enum enumMixinStr_DBL_TRUE_MIN = `enum DBL_TRUE_MIN = ((double)4.94065645841246544176568792868221372e-324L);`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_TRUE_MIN); }))) {
            mixin(enumMixinStr_DBL_TRUE_MIN);
        }
    }




    static if(!is(typeof(LDBL_TRUE_MIN))) {
        private enum enumMixinStr_LDBL_TRUE_MIN = `enum LDBL_TRUE_MIN = 3.64519953188247460252840593361941982e-4951L;`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_TRUE_MIN); }))) {
            mixin(enumMixinStr_LDBL_TRUE_MIN);
        }
    }




    static if(!is(typeof(FLT_DECIMAL_DIG))) {
        private enum enumMixinStr_FLT_DECIMAL_DIG = `enum FLT_DECIMAL_DIG = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_DECIMAL_DIG); }))) {
            mixin(enumMixinStr_FLT_DECIMAL_DIG);
        }
    }




    static if(!is(typeof(DBL_DECIMAL_DIG))) {
        private enum enumMixinStr_DBL_DECIMAL_DIG = `enum DBL_DECIMAL_DIG = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_DECIMAL_DIG); }))) {
            mixin(enumMixinStr_DBL_DECIMAL_DIG);
        }
    }




    static if(!is(typeof(LDBL_DECIMAL_DIG))) {
        private enum enumMixinStr_LDBL_DECIMAL_DIG = `enum LDBL_DECIMAL_DIG = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_DECIMAL_DIG); }))) {
            mixin(enumMixinStr_LDBL_DECIMAL_DIG);
        }
    }




    static if(!is(typeof(FLT_HAS_SUBNORM))) {
        private enum enumMixinStr_FLT_HAS_SUBNORM = `enum FLT_HAS_SUBNORM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_FLT_HAS_SUBNORM); }))) {
            mixin(enumMixinStr_FLT_HAS_SUBNORM);
        }
    }




    static if(!is(typeof(DBL_HAS_SUBNORM))) {
        private enum enumMixinStr_DBL_HAS_SUBNORM = `enum DBL_HAS_SUBNORM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DBL_HAS_SUBNORM); }))) {
            mixin(enumMixinStr_DBL_HAS_SUBNORM);
        }
    }




    static if(!is(typeof(LDBL_HAS_SUBNORM))) {
        private enum enumMixinStr_LDBL_HAS_SUBNORM = `enum LDBL_HAS_SUBNORM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_LDBL_HAS_SUBNORM); }))) {
            mixin(enumMixinStr_LDBL_HAS_SUBNORM);
        }
    }
    static if(!is(typeof(SCHAR_MAX))) {
        private enum enumMixinStr_SCHAR_MAX = `enum SCHAR_MAX = 0x7f;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHAR_MAX); }))) {
            mixin(enumMixinStr_SCHAR_MAX);
        }
    }




    static if(!is(typeof(SHRT_MAX))) {
        private enum enumMixinStr_SHRT_MAX = `enum SHRT_MAX = 0x7fff;`;
        static if(is(typeof({ mixin(enumMixinStr_SHRT_MAX); }))) {
            mixin(enumMixinStr_SHRT_MAX);
        }
    }




    static if(!is(typeof(INT_MAX))) {
        private enum enumMixinStr_INT_MAX = `enum INT_MAX = 0x7fffffff;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_MAX); }))) {
            mixin(enumMixinStr_INT_MAX);
        }
    }




    static if(!is(typeof(LONG_MAX))) {
        private enum enumMixinStr_LONG_MAX = `enum LONG_MAX = 0x7fffffffffffffffL;`;
        static if(is(typeof({ mixin(enumMixinStr_LONG_MAX); }))) {
            mixin(enumMixinStr_LONG_MAX);
        }
    }




    static if(!is(typeof(SCHAR_MIN))) {
        private enum enumMixinStr_SCHAR_MIN = `enum SCHAR_MIN = ( - 0x7f - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SCHAR_MIN); }))) {
            mixin(enumMixinStr_SCHAR_MIN);
        }
    }




    static if(!is(typeof(SHRT_MIN))) {
        private enum enumMixinStr_SHRT_MIN = `enum SHRT_MIN = ( - 0x7fff - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SHRT_MIN); }))) {
            mixin(enumMixinStr_SHRT_MIN);
        }
    }




    static if(!is(typeof(INT_MIN))) {
        private enum enumMixinStr_INT_MIN = `enum INT_MIN = ( - 0x7fffffff - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_MIN); }))) {
            mixin(enumMixinStr_INT_MIN);
        }
    }




    static if(!is(typeof(LONG_MIN))) {
        private enum enumMixinStr_LONG_MIN = `enum LONG_MIN = ( - 0x7fffffffffffffffL - 1L );`;
        static if(is(typeof({ mixin(enumMixinStr_LONG_MIN); }))) {
            mixin(enumMixinStr_LONG_MIN);
        }
    }




    static if(!is(typeof(UCHAR_MAX))) {
        private enum enumMixinStr_UCHAR_MAX = `enum UCHAR_MAX = ( 0x7f * 2 + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_UCHAR_MAX); }))) {
            mixin(enumMixinStr_UCHAR_MAX);
        }
    }




    static if(!is(typeof(USHRT_MAX))) {
        private enum enumMixinStr_USHRT_MAX = `enum USHRT_MAX = ( 0x7fff * 2 + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_USHRT_MAX); }))) {
            mixin(enumMixinStr_USHRT_MAX);
        }
    }




    static if(!is(typeof(UINT_MAX))) {
        private enum enumMixinStr_UINT_MAX = `enum UINT_MAX = ( 0x7fffffff * 2U + 1U );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_MAX); }))) {
            mixin(enumMixinStr_UINT_MAX);
        }
    }




    static if(!is(typeof(ULONG_MAX))) {
        private enum enumMixinStr_ULONG_MAX = `enum ULONG_MAX = ( 0x7fffffffffffffffL * 2UL + 1UL );`;
        static if(is(typeof({ mixin(enumMixinStr_ULONG_MAX); }))) {
            mixin(enumMixinStr_ULONG_MAX);
        }
    }




    static if(!is(typeof(CHAR_BIT))) {
        private enum enumMixinStr_CHAR_BIT = `enum CHAR_BIT = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_CHAR_BIT); }))) {
            mixin(enumMixinStr_CHAR_BIT);
        }
    }




    static if(!is(typeof(CHAR_MIN))) {
        private enum enumMixinStr_CHAR_MIN = `enum CHAR_MIN = ( - 0x7f - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_CHAR_MIN); }))) {
            mixin(enumMixinStr_CHAR_MIN);
        }
    }




    static if(!is(typeof(CHAR_MAX))) {
        private enum enumMixinStr_CHAR_MAX = `enum CHAR_MAX = 0x7f;`;
        static if(is(typeof({ mixin(enumMixinStr_CHAR_MAX); }))) {
            mixin(enumMixinStr_CHAR_MAX);
        }
    }
    static if(!is(typeof(__GNUC_VA_LIST))) {
        private enum enumMixinStr___GNUC_VA_LIST = `enum __GNUC_VA_LIST = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___GNUC_VA_LIST); }))) {
            mixin(enumMixinStr___GNUC_VA_LIST);
        }
    }
    static if(!is(typeof(NULL))) {
        private enum enumMixinStr_NULL = `enum NULL = ( cast( void * ) 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_NULL); }))) {
            mixin(enumMixinStr_NULL);
        }
    }
    static if(!is(typeof(G_MINFLOAT))) {
        private enum enumMixinStr_G_MINFLOAT = `enum G_MINFLOAT = 1.17549435082228750796873653722224568e-38F;`;
        static if(is(typeof({ mixin(enumMixinStr_G_MINFLOAT); }))) {
            mixin(enumMixinStr_G_MINFLOAT);
        }
    }




    static if(!is(typeof(G_MAXFLOAT))) {
        private enum enumMixinStr_G_MAXFLOAT = `enum G_MAXFLOAT = 3.40282346638528859811704183484516925e+38F;`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXFLOAT); }))) {
            mixin(enumMixinStr_G_MAXFLOAT);
        }
    }




    static if(!is(typeof(G_MINDOUBLE))) {
        private enum enumMixinStr_G_MINDOUBLE = `enum G_MINDOUBLE = ((double)2.22507385850720138309023271733240406e-308L);`;
        static if(is(typeof({ mixin(enumMixinStr_G_MINDOUBLE); }))) {
            mixin(enumMixinStr_G_MINDOUBLE);
        }
    }




    static if(!is(typeof(G_MAXDOUBLE))) {
        private enum enumMixinStr_G_MAXDOUBLE = `enum G_MAXDOUBLE = ((double)1.79769313486231570814527423731704357e+308L);`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXDOUBLE); }))) {
            mixin(enumMixinStr_G_MAXDOUBLE);
        }
    }




    static if(!is(typeof(G_MINSHORT))) {
        private enum enumMixinStr_G_MINSHORT = `enum G_MINSHORT = ( - 0x7fff - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MINSHORT); }))) {
            mixin(enumMixinStr_G_MINSHORT);
        }
    }




    static if(!is(typeof(G_MAXSHORT))) {
        private enum enumMixinStr_G_MAXSHORT = `enum G_MAXSHORT = 0x7fff;`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXSHORT); }))) {
            mixin(enumMixinStr_G_MAXSHORT);
        }
    }




    static if(!is(typeof(G_MAXUSHORT))) {
        private enum enumMixinStr_G_MAXUSHORT = `enum G_MAXUSHORT = ( 0x7fff * 2 + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXUSHORT); }))) {
            mixin(enumMixinStr_G_MAXUSHORT);
        }
    }




    static if(!is(typeof(G_MININT))) {
        private enum enumMixinStr_G_MININT = `enum G_MININT = ( - 0x7fffffff - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MININT); }))) {
            mixin(enumMixinStr_G_MININT);
        }
    }




    static if(!is(typeof(G_MAXINT))) {
        private enum enumMixinStr_G_MAXINT = `enum G_MAXINT = 0x7fffffff;`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXINT); }))) {
            mixin(enumMixinStr_G_MAXINT);
        }
    }




    static if(!is(typeof(G_MAXUINT))) {
        private enum enumMixinStr_G_MAXUINT = `enum G_MAXUINT = ( 0x7fffffff * 2U + 1U );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXUINT); }))) {
            mixin(enumMixinStr_G_MAXUINT);
        }
    }




    static if(!is(typeof(G_MINLONG))) {
        private enum enumMixinStr_G_MINLONG = `enum G_MINLONG = ( - 0x7fffffffffffffffL - 1L );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MINLONG); }))) {
            mixin(enumMixinStr_G_MINLONG);
        }
    }




    static if(!is(typeof(G_MAXLONG))) {
        private enum enumMixinStr_G_MAXLONG = `enum G_MAXLONG = 0x7fffffffffffffffL;`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXLONG); }))) {
            mixin(enumMixinStr_G_MAXLONG);
        }
    }




    static if(!is(typeof(G_MAXULONG))) {
        private enum enumMixinStr_G_MAXULONG = `enum G_MAXULONG = ( 0x7fffffffffffffffL * 2UL + 1UL );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXULONG); }))) {
            mixin(enumMixinStr_G_MAXULONG);
        }
    }




    static if(!is(typeof(G_GINT16_MODIFIER))) {
        private enum enumMixinStr_G_GINT16_MODIFIER = `enum G_GINT16_MODIFIER = "h";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GINT16_MODIFIER); }))) {
            mixin(enumMixinStr_G_GINT16_MODIFIER);
        }
    }




    static if(!is(typeof(G_GINT16_FORMAT))) {
        private enum enumMixinStr_G_GINT16_FORMAT = `enum G_GINT16_FORMAT = "hi";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GINT16_FORMAT); }))) {
            mixin(enumMixinStr_G_GINT16_FORMAT);
        }
    }




    static if(!is(typeof(G_GUINT16_FORMAT))) {
        private enum enumMixinStr_G_GUINT16_FORMAT = `enum G_GUINT16_FORMAT = "hu";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GUINT16_FORMAT); }))) {
            mixin(enumMixinStr_G_GUINT16_FORMAT);
        }
    }




    static if(!is(typeof(G_GINT32_MODIFIER))) {
        private enum enumMixinStr_G_GINT32_MODIFIER = `enum G_GINT32_MODIFIER = "";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GINT32_MODIFIER); }))) {
            mixin(enumMixinStr_G_GINT32_MODIFIER);
        }
    }




    static if(!is(typeof(G_GINT32_FORMAT))) {
        private enum enumMixinStr_G_GINT32_FORMAT = `enum G_GINT32_FORMAT = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GINT32_FORMAT); }))) {
            mixin(enumMixinStr_G_GINT32_FORMAT);
        }
    }




    static if(!is(typeof(G_GUINT32_FORMAT))) {
        private enum enumMixinStr_G_GUINT32_FORMAT = `enum G_GUINT32_FORMAT = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GUINT32_FORMAT); }))) {
            mixin(enumMixinStr_G_GUINT32_FORMAT);
        }
    }




    static if(!is(typeof(G_HAVE_GINT64))) {
        private enum enumMixinStr_G_HAVE_GINT64 = `enum G_HAVE_GINT64 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_G_HAVE_GINT64); }))) {
            mixin(enumMixinStr_G_HAVE_GINT64);
        }
    }
    static if(!is(typeof(G_GINT64_MODIFIER))) {
        private enum enumMixinStr_G_GINT64_MODIFIER = `enum G_GINT64_MODIFIER = "l";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GINT64_MODIFIER); }))) {
            mixin(enumMixinStr_G_GINT64_MODIFIER);
        }
    }




    static if(!is(typeof(G_GINT64_FORMAT))) {
        private enum enumMixinStr_G_GINT64_FORMAT = `enum G_GINT64_FORMAT = "li";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GINT64_FORMAT); }))) {
            mixin(enumMixinStr_G_GINT64_FORMAT);
        }
    }




    static if(!is(typeof(G_GUINT64_FORMAT))) {
        private enum enumMixinStr_G_GUINT64_FORMAT = `enum G_GUINT64_FORMAT = "lu";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GUINT64_FORMAT); }))) {
            mixin(enumMixinStr_G_GUINT64_FORMAT);
        }
    }




    static if(!is(typeof(GLIB_SIZEOF_VOID_P))) {
        private enum enumMixinStr_GLIB_SIZEOF_VOID_P = `enum GLIB_SIZEOF_VOID_P = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SIZEOF_VOID_P); }))) {
            mixin(enumMixinStr_GLIB_SIZEOF_VOID_P);
        }
    }




    static if(!is(typeof(GLIB_SIZEOF_LONG))) {
        private enum enumMixinStr_GLIB_SIZEOF_LONG = `enum GLIB_SIZEOF_LONG = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SIZEOF_LONG); }))) {
            mixin(enumMixinStr_GLIB_SIZEOF_LONG);
        }
    }




    static if(!is(typeof(GLIB_SIZEOF_SIZE_T))) {
        private enum enumMixinStr_GLIB_SIZEOF_SIZE_T = `enum GLIB_SIZEOF_SIZE_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SIZEOF_SIZE_T); }))) {
            mixin(enumMixinStr_GLIB_SIZEOF_SIZE_T);
        }
    }




    static if(!is(typeof(GLIB_SIZEOF_SSIZE_T))) {
        private enum enumMixinStr_GLIB_SIZEOF_SSIZE_T = `enum GLIB_SIZEOF_SSIZE_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SIZEOF_SSIZE_T); }))) {
            mixin(enumMixinStr_GLIB_SIZEOF_SSIZE_T);
        }
    }




    static if(!is(typeof(G_GSIZE_MODIFIER))) {
        private enum enumMixinStr_G_GSIZE_MODIFIER = `enum G_GSIZE_MODIFIER = "l";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GSIZE_MODIFIER); }))) {
            mixin(enumMixinStr_G_GSIZE_MODIFIER);
        }
    }




    static if(!is(typeof(G_GSSIZE_MODIFIER))) {
        private enum enumMixinStr_G_GSSIZE_MODIFIER = `enum G_GSSIZE_MODIFIER = "l";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GSSIZE_MODIFIER); }))) {
            mixin(enumMixinStr_G_GSSIZE_MODIFIER);
        }
    }




    static if(!is(typeof(G_GSIZE_FORMAT))) {
        private enum enumMixinStr_G_GSIZE_FORMAT = `enum G_GSIZE_FORMAT = "lu";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GSIZE_FORMAT); }))) {
            mixin(enumMixinStr_G_GSIZE_FORMAT);
        }
    }




    static if(!is(typeof(G_GSSIZE_FORMAT))) {
        private enum enumMixinStr_G_GSSIZE_FORMAT = `enum G_GSSIZE_FORMAT = "li";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GSSIZE_FORMAT); }))) {
            mixin(enumMixinStr_G_GSSIZE_FORMAT);
        }
    }




    static if(!is(typeof(G_MAXSIZE))) {
        private enum enumMixinStr_G_MAXSIZE = `enum G_MAXSIZE = ( 0x7fffffffffffffffL * 2UL + 1UL );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXSIZE); }))) {
            mixin(enumMixinStr_G_MAXSIZE);
        }
    }




    static if(!is(typeof(G_MINSSIZE))) {
        private enum enumMixinStr_G_MINSSIZE = `enum G_MINSSIZE = ( - 0x7fffffffffffffffL - 1L );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MINSSIZE); }))) {
            mixin(enumMixinStr_G_MINSSIZE);
        }
    }




    static if(!is(typeof(G_MAXSSIZE))) {
        private enum enumMixinStr_G_MAXSSIZE = `enum G_MAXSSIZE = 0x7fffffffffffffffL;`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXSSIZE); }))) {
            mixin(enumMixinStr_G_MAXSSIZE);
        }
    }




    static if(!is(typeof(G_MINOFFSET))) {
        private enum enumMixinStr_G_MINOFFSET = `enum G_MINOFFSET = ( cast( gint64 ) ( - 0x8000000000000000L ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MINOFFSET); }))) {
            mixin(enumMixinStr_G_MINOFFSET);
        }
    }




    static if(!is(typeof(G_MAXOFFSET))) {
        private enum enumMixinStr_G_MAXOFFSET = `enum G_MAXOFFSET = ( 0x7fffffffffffffffL );`;
        static if(is(typeof({ mixin(enumMixinStr_G_MAXOFFSET); }))) {
            mixin(enumMixinStr_G_MAXOFFSET);
        }
    }




    static if(!is(typeof(G_GOFFSET_MODIFIER))) {
        private enum enumMixinStr_G_GOFFSET_MODIFIER = `enum G_GOFFSET_MODIFIER = "l";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GOFFSET_MODIFIER); }))) {
            mixin(enumMixinStr_G_GOFFSET_MODIFIER);
        }
    }




    static if(!is(typeof(G_GOFFSET_FORMAT))) {
        private enum enumMixinStr_G_GOFFSET_FORMAT = `enum G_GOFFSET_FORMAT = "li";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GOFFSET_FORMAT); }))) {
            mixin(enumMixinStr_G_GOFFSET_FORMAT);
        }
    }






    static if(!is(typeof(G_POLLFD_FORMAT))) {
        private enum enumMixinStr_G_POLLFD_FORMAT = `enum G_POLLFD_FORMAT = "%d";`;
        static if(is(typeof({ mixin(enumMixinStr_G_POLLFD_FORMAT); }))) {
            mixin(enumMixinStr_G_POLLFD_FORMAT);
        }
    }
    static if(!is(typeof(G_GINTPTR_MODIFIER))) {
        private enum enumMixinStr_G_GINTPTR_MODIFIER = `enum G_GINTPTR_MODIFIER = "l";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GINTPTR_MODIFIER); }))) {
            mixin(enumMixinStr_G_GINTPTR_MODIFIER);
        }
    }




    static if(!is(typeof(G_GINTPTR_FORMAT))) {
        private enum enumMixinStr_G_GINTPTR_FORMAT = `enum G_GINTPTR_FORMAT = "li";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GINTPTR_FORMAT); }))) {
            mixin(enumMixinStr_G_GINTPTR_FORMAT);
        }
    }




    static if(!is(typeof(G_GUINTPTR_FORMAT))) {
        private enum enumMixinStr_G_GUINTPTR_FORMAT = `enum G_GUINTPTR_FORMAT = "lu";`;
        static if(is(typeof({ mixin(enumMixinStr_G_GUINTPTR_FORMAT); }))) {
            mixin(enumMixinStr_G_GUINTPTR_FORMAT);
        }
    }
    static if(!is(typeof(GLIB_MAJOR_VERSION))) {
        private enum enumMixinStr_GLIB_MAJOR_VERSION = `enum GLIB_MAJOR_VERSION = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_MAJOR_VERSION); }))) {
            mixin(enumMixinStr_GLIB_MAJOR_VERSION);
        }
    }




    static if(!is(typeof(GLIB_MINOR_VERSION))) {
        private enum enumMixinStr_GLIB_MINOR_VERSION = `enum GLIB_MINOR_VERSION = 56;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_MINOR_VERSION); }))) {
            mixin(enumMixinStr_GLIB_MINOR_VERSION);
        }
    }




    static if(!is(typeof(GLIB_MICRO_VERSION))) {
        private enum enumMixinStr_GLIB_MICRO_VERSION = `enum GLIB_MICRO_VERSION = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_MICRO_VERSION); }))) {
            mixin(enumMixinStr_GLIB_MICRO_VERSION);
        }
    }






    static if(!is(typeof(G_VA_COPY))) {
        private enum enumMixinStr_G_VA_COPY = `enum G_VA_COPY = va_copy;`;
        static if(is(typeof({ mixin(enumMixinStr_G_VA_COPY); }))) {
            mixin(enumMixinStr_G_VA_COPY);
        }
    }




    static if(!is(typeof(G_VA_COPY_AS_ARRAY))) {
        private enum enumMixinStr_G_VA_COPY_AS_ARRAY = `enum G_VA_COPY_AS_ARRAY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_G_VA_COPY_AS_ARRAY); }))) {
            mixin(enumMixinStr_G_VA_COPY_AS_ARRAY);
        }
    }




    static if(!is(typeof(G_HAVE_ISO_VARARGS))) {
        private enum enumMixinStr_G_HAVE_ISO_VARARGS = `enum G_HAVE_ISO_VARARGS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_G_HAVE_ISO_VARARGS); }))) {
            mixin(enumMixinStr_G_HAVE_ISO_VARARGS);
        }
    }




    static if(!is(typeof(G_HAVE_GNUC_VARARGS))) {
        private enum enumMixinStr_G_HAVE_GNUC_VARARGS = `enum G_HAVE_GNUC_VARARGS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_G_HAVE_GNUC_VARARGS); }))) {
            mixin(enumMixinStr_G_HAVE_GNUC_VARARGS);
        }
    }




    static if(!is(typeof(G_HAVE_GROWING_STACK))) {
        private enum enumMixinStr_G_HAVE_GROWING_STACK = `enum G_HAVE_GROWING_STACK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_G_HAVE_GROWING_STACK); }))) {
            mixin(enumMixinStr_G_HAVE_GROWING_STACK);
        }
    }




    static if(!is(typeof(G_HAVE_GNUC_VISIBILITY))) {
        private enum enumMixinStr_G_HAVE_GNUC_VISIBILITY = `enum G_HAVE_GNUC_VISIBILITY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_G_HAVE_GNUC_VISIBILITY); }))) {
            mixin(enumMixinStr_G_HAVE_GNUC_VISIBILITY);
        }
    }




    static if(!is(typeof(G_GNUC_INTERNAL))) {
        private enum enumMixinStr_G_GNUC_INTERNAL = `enum G_GNUC_INTERNAL = __attribute__ ( ( visibility ( "hidden" ) ) );`;
        static if(is(typeof({ mixin(enumMixinStr_G_GNUC_INTERNAL); }))) {
            mixin(enumMixinStr_G_GNUC_INTERNAL);
        }
    }
    static if(!is(typeof(G_BYTE_ORDER))) {
        private enum enumMixinStr_G_BYTE_ORDER = `enum G_BYTE_ORDER = 1234;`;
        static if(is(typeof({ mixin(enumMixinStr_G_BYTE_ORDER); }))) {
            mixin(enumMixinStr_G_BYTE_ORDER);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_POLLIN))) {
        private enum enumMixinStr_GLIB_SYSDEF_POLLIN = `enum GLIB_SYSDEF_POLLIN = = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_POLLIN); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_POLLIN);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_POLLOUT))) {
        private enum enumMixinStr_GLIB_SYSDEF_POLLOUT = `enum GLIB_SYSDEF_POLLOUT = = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_POLLOUT); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_POLLOUT);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_POLLPRI))) {
        private enum enumMixinStr_GLIB_SYSDEF_POLLPRI = `enum GLIB_SYSDEF_POLLPRI = = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_POLLPRI); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_POLLPRI);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_POLLHUP))) {
        private enum enumMixinStr_GLIB_SYSDEF_POLLHUP = `enum GLIB_SYSDEF_POLLHUP = = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_POLLHUP); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_POLLHUP);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_POLLERR))) {
        private enum enumMixinStr_GLIB_SYSDEF_POLLERR = `enum GLIB_SYSDEF_POLLERR = = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_POLLERR); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_POLLERR);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_POLLNVAL))) {
        private enum enumMixinStr_GLIB_SYSDEF_POLLNVAL = `enum GLIB_SYSDEF_POLLNVAL = = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_POLLNVAL); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_POLLNVAL);
        }
    }




    static if(!is(typeof(G_MODULE_SUFFIX))) {
        private enum enumMixinStr_G_MODULE_SUFFIX = `enum G_MODULE_SUFFIX = "so";`;
        static if(is(typeof({ mixin(enumMixinStr_G_MODULE_SUFFIX); }))) {
            mixin(enumMixinStr_G_MODULE_SUFFIX);
        }
    }




    static if(!is(typeof(G_PID_FORMAT))) {
        private enum enumMixinStr_G_PID_FORMAT = `enum G_PID_FORMAT = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_G_PID_FORMAT); }))) {
            mixin(enumMixinStr_G_PID_FORMAT);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_AF_UNIX))) {
        private enum enumMixinStr_GLIB_SYSDEF_AF_UNIX = `enum GLIB_SYSDEF_AF_UNIX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_AF_UNIX); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_AF_UNIX);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_AF_INET))) {
        private enum enumMixinStr_GLIB_SYSDEF_AF_INET = `enum GLIB_SYSDEF_AF_INET = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_AF_INET); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_AF_INET);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_AF_INET6))) {
        private enum enumMixinStr_GLIB_SYSDEF_AF_INET6 = `enum GLIB_SYSDEF_AF_INET6 = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_AF_INET6); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_AF_INET6);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_MSG_OOB))) {
        private enum enumMixinStr_GLIB_SYSDEF_MSG_OOB = `enum GLIB_SYSDEF_MSG_OOB = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_MSG_OOB); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_MSG_OOB);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_MSG_PEEK))) {
        private enum enumMixinStr_GLIB_SYSDEF_MSG_PEEK = `enum GLIB_SYSDEF_MSG_PEEK = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_MSG_PEEK); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_MSG_PEEK);
        }
    }




    static if(!is(typeof(GLIB_SYSDEF_MSG_DONTROUTE))) {
        private enum enumMixinStr_GLIB_SYSDEF_MSG_DONTROUTE = `enum GLIB_SYSDEF_MSG_DONTROUTE = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_GLIB_SYSDEF_MSG_DONTROUTE); }))) {
            mixin(enumMixinStr_GLIB_SYSDEF_MSG_DONTROUTE);
        }
    }




    static if(!is(typeof(G_DIR_SEPARATOR))) {
        private enum enumMixinStr_G_DIR_SEPARATOR = `enum G_DIR_SEPARATOR = '/';`;
        static if(is(typeof({ mixin(enumMixinStr_G_DIR_SEPARATOR); }))) {
            mixin(enumMixinStr_G_DIR_SEPARATOR);
        }
    }




    static if(!is(typeof(G_DIR_SEPARATOR_S))) {
        private enum enumMixinStr_G_DIR_SEPARATOR_S = `enum G_DIR_SEPARATOR_S = "/";`;
        static if(is(typeof({ mixin(enumMixinStr_G_DIR_SEPARATOR_S); }))) {
            mixin(enumMixinStr_G_DIR_SEPARATOR_S);
        }
    }




    static if(!is(typeof(G_SEARCHPATH_SEPARATOR))) {
        private enum enumMixinStr_G_SEARCHPATH_SEPARATOR = `enum G_SEARCHPATH_SEPARATOR = ':';`;
        static if(is(typeof({ mixin(enumMixinStr_G_SEARCHPATH_SEPARATOR); }))) {
            mixin(enumMixinStr_G_SEARCHPATH_SEPARATOR);
        }
    }




    static if(!is(typeof(G_SEARCHPATH_SEPARATOR_S))) {
        private enum enumMixinStr_G_SEARCHPATH_SEPARATOR_S = `enum G_SEARCHPATH_SEPARATOR_S = ":";`;
        static if(is(typeof({ mixin(enumMixinStr_G_SEARCHPATH_SEPARATOR_S); }))) {
            mixin(enumMixinStr_G_SEARCHPATH_SEPARATOR_S);
        }
    }

}
       

